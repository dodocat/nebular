cscope 15 $HOME/workspace/nebular -q 0000011401 0000941019
	@Source/CMSIS/Core/CM3/core_cm3.c

24 
	~<°döt.h
>

28 #i‡
deföed
 ( 
__CC_ARM
 )

29 
	#__ASM
 
__asm


	)

30 
	#__INLINE
 
__ölöe


	)

32 #ñi‡
deföed
 ( 
__ICCARM__
 )

33 
	#__ASM
 
__asm


	)

34 
	#__INLINE
 
ölöe


	)

36 #ñi‡
deföed
 ( 
__GNUC__
 )

37 
	#__ASM
 
__asm


	)

38 
	#__INLINE
 
ölöe


	)

40 #ñi‡
deföed
 ( 
__TASKING__
 )

41 
	#__ASM
 
__asm


	)

42 
	#__INLINE
 
ölöe


	)

48 #i‡
deföed
 ( 
__CC_ARM
 )

58 
__ASM
 
uöt32_t
 
	$__gë_PSP
()

60 
mrs
 
r0
, 
p•


61 
bx
 
Ã


62 
	}
}

73 
__ASM
 
	$__£t_PSP
(
uöt32_t
 
t›OfProcSèck
)

75 
m§
 
p•
, 
r0


76 
bx
 
Ã


77 
	}
}

88 
__ASM
 
uöt32_t
 
	$__gë_MSP
()

90 
mrs
 
r0
, 
m•


91 
bx
 
Ã


92 
	}
}

103 
__ASM
 
	$__£t_MSP
(
uöt32_t
 
maöSèckPoöãr
)

105 
m§
 
m•
, 
r0


106 
bx
 
Ã


107 
	}
}

117 
__ASM
 
uöt32_t
 
	$__REV16
(
uöt16_t
 
vÆue
)

119 
ªv16
 
r0
,Ñ0

120 
bx
 
Ã


121 
	}
}

131 
__ASM
 
öt32_t
 
	$__REVSH
(
öt16_t
 
vÆue
)

133 
ªvsh
 
r0
,Ñ0

134 
bx
 
Ã


135 
	}
}

138 #i‡(
__ARMCC_VERSION
 < 400000)

148 
__ASM
 
	$__CLREX
()

150 
˛ªx


151 
	}
}

161 
__ASM
 
uöt32_t
 
	$__gë_BASEPRI
()

163 
mrs
 
r0
, 
ba£¥i


164 
bx
 
Ã


165 
	}
}

175 
__ASM
 
	$__£t_BASEPRI
(
uöt32_t
 
ba£Pri
)

177 
m§
 
ba£¥i
, 
r0


178 
bx
 
Ã


179 
	}
}

190 
__ASM
 
uöt32_t
 
	$__gë_PRIMASK
()

192 
mrs
 
r0
, 
¥imask


193 
bx
 
Ã


194 
	}
}

204 
__ASM
 
	$__£t_PRIMASK
(
uöt32_t
 
¥iMask
)

206 
m§
 
¥imask
, 
r0


207 
bx
 
Ã


208 
	}
}

218 
__ASM
 
uöt32_t
 
	$__gë_FAULTMASK
()

220 
mrs
 
r0
, 
Áu…mask


221 
bx
 
Ã


222 
	}
}

232 
__ASM
 
	$__£t_FAULTMASK
(
uöt32_t
 
Áu…Mask
)

234 
m§
 
Áu…mask
, 
r0


235 
bx
 
Ã


236 
	}
}

246 
__ASM
 
uöt32_t
 
	$__gë_CONTROL
()

248 
mrs
 
r0
, 
c⁄åﬁ


249 
bx
 
Ã


250 
	}
}

260 
__ASM
 
	$__£t_CONTROL
(
uöt32_t
 
c⁄åﬁ
)

262 
m§
 
c⁄åﬁ
, 
r0


263 
bx
 
Ã


264 
	}
}

269 #ñi‡(
deföed
 (
__ICCARM__
))

270 #¥agm®
düg_suµªss
=
Pe940


280 
uöt32_t
 
	$__gë_PSP
()

282 
	`__ASM
("mrsÑ0,Ösp");

283 
	`__ASM
("bxÜr");

284 
	}
}

295 
	$__£t_PSP
(
uöt32_t
 
t›OfProcSèck
)

297 
	`__ASM
("msrÖsp,Ñ0");

298 
	`__ASM
("bxÜr");

299 
	}
}

310 
uöt32_t
 
	$__gë_MSP
()

312 
	`__ASM
("mrsÑ0, msp");

313 
	`__ASM
("bxÜr");

314 
	}
}

325 
	$__£t_MSP
(
uöt32_t
 
t›OfMaöSèck
)

327 
	`__ASM
("msr msp,Ñ0");

328 
	`__ASM
("bxÜr");

329 
	}
}

339 
uöt32_t
 
	$__REV16
(
uöt16_t
 
vÆue
)

341 
	`__ASM
("rev16Ñ0,Ñ0");

342 
	`__ASM
("bxÜr");

343 
	}
}

353 
uöt32_t
 
	$__RBIT
(
uöt32_t
 
vÆue
)

355 
	`__ASM
("rbitÑ0,Ñ0");

356 
	`__ASM
("bxÜr");

357 
	}
}

367 
uöt8_t
 
	$__LDREXB
(
uöt8_t
 *
addr
)

369 
	`__ASM
("ldrexbÑ0, [r0]");

370 
	`__ASM
("bxÜr");

371 
	}
}

381 
uöt16_t
 
	$__LDREXH
(
uöt16_t
 *
addr
)

383 
	`__ASM
("ldrexhÑ0, [r0]");

384 
	`__ASM
("bxÜr");

385 
	}
}

395 
uöt32_t
 
	$__LDREXW
(
uöt32_t
 *
addr
)

397 
	`__ASM
("ldrexÑ0, [r0]");

398 
	`__ASM
("bxÜr");

399 
	}
}

410 
uöt32_t
 
	$__STREXB
(
uöt8_t
 
vÆue
, uöt8_à*
addr
)

412 
	`__ASM
("strexbÑ0,Ñ0, [r1]");

413 
	`__ASM
("bxÜr");

414 
	}
}

425 
uöt32_t
 
	$__STREXH
(
uöt16_t
 
vÆue
, uöt16_à*
addr
)

427 
	`__ASM
("strexhÑ0,Ñ0, [r1]");

428 
	`__ASM
("bxÜr");

429 
	}
}

440 
uöt32_t
 
	$__STREXW
(
uöt32_t
 
vÆue
, uöt32_à*
addr
)

442 
	`__ASM
("strexÑ0,Ñ0, [r1]");

443 
	`__ASM
("bxÜr");

444 
	}
}

446 #¥agm®
düg_deÁu…
=
Pe940


449 #ñi‡(
deföed
 (
__GNUC__
))

459 
uöt32_t
 
	$__gë_PSP
(Ë
	`__©åibuã__
––
«ked
 ) );

460 
uöt32_t
 
	$__gë_PSP
()

462 
uöt32_t
 
ªsu…
=0;

464 
__ASM
 volatile ("MRS %0,Ösp\n\t"

466 "BXÜ∏ \n\t" : "Ù" (
ªsu…
) );

467 (
ªsu…
);

468 
	}
}

480 
	$__£t_PSP
(
uöt32_t
 
t›OfProcSèck
Ë
	`__©åibuã__
––
«ked
 ) );

481 
	$__£t_PSP
(
uöt32_t
 
t›OfProcSèck
)

483 
__ASM
 volatile ("MSRÖsp, %0\n\t"

484 "BXÜ∏ \n\t" : : "r" (
t›OfProcSèck
) );

485 
	}
}

496 
uöt32_t
 
	$__gë_MSP
(Ë
	`__©åibuã__
––
«ked
 ) );

497 
uöt32_t
 
	$__gë_MSP
()

499 
uöt32_t
 
ªsu…
=0;

501 
__ASM
 volatile ("MRS %0, msp\n\t"

503 "BXÜ∏ \n\t" : "Ù" (
ªsu…
) );

504 (
ªsu…
);

505 
	}
}

516 
	$__£t_MSP
(
uöt32_t
 
t›OfMaöSèck
Ë
	`__©åibuã__
––
«ked
 ) );

517 
	$__£t_MSP
(
uöt32_t
 
t›OfMaöSèck
)

519 
__ASM
 volatile ("MSR msp, %0\n\t"

520 "BXÜ∏ \n\t" : : "r" (
t›OfMaöSèck
) );

521 
	}
}

531 
uöt32_t
 
	$__gë_BASEPRI
()

533 
uöt32_t
 
ªsu…
=0;

535 
__ASM
 vﬁ©ûê("MRS %0, ba£¥i_max" : "Ù" (
ªsu…
) );

536 (
ªsu…
);

537 
	}
}

547 
	$__£t_BASEPRI
(
uöt32_t
 
vÆue
)

549 
__ASM
 vﬁ©ûê("MSR ba£¥i, %0" : : "r" (
vÆue
) );

550 
	}
}

561 
uöt32_t
 
	$__gë_PRIMASK
()

563 
uöt32_t
 
ªsu…
=0;

565 
__ASM
 vﬁ©ûê("MRS %0,Örimask" : "Ù" (
ªsu…
) );

566 (
ªsu…
);

567 
	}
}

577 
	$__£t_PRIMASK
(
uöt32_t
 
¥iMask
)

579 
__ASM
 vﬁ©ûê("MSRÖrimask, %0" : : "r" (
¥iMask
) );

580 
	}
}

590 
uöt32_t
 
	$__gë_FAULTMASK
()

592 
uöt32_t
 
ªsu…
=0;

594 
__ASM
 vﬁ©ûê("MRS %0, fau…mask" : "Ù" (
ªsu…
) );

595 (
ªsu…
);

596 
	}
}

606 
	$__£t_FAULTMASK
(
uöt32_t
 
Áu…Mask
)

608 
__ASM
 vﬁ©ûê("MSR fau…mask, %0" : : "r" (
Áu…Mask
) );

609 
	}
}

619 
uöt32_t
 
	$__REV
(
uöt32_t
 
vÆue
)

621 
uöt32_t
 
ªsu…
=0;

623 
__ASM
 vﬁ©ûê("ªv %0, %1" : "Ù" (
ªsu…
Ë: "r" (
vÆue
) );

624 (
ªsu…
);

625 
	}
}

635 
uöt32_t
 
	$__REV16
(
uöt16_t
 
vÆue
)

637 
uöt32_t
 
ªsu…
=0;

639 
__ASM
 vﬁ©ûê("ªv16 %0, %1" : "Ù" (
ªsu…
Ë: "r" (
vÆue
) );

640 (
ªsu…
);

641 
	}
}

651 
öt32_t
 
	$__REVSH
(
öt16_t
 
vÆue
)

653 
uöt32_t
 
ªsu…
=0;

655 
__ASM
 vﬁ©ûê("ªvsh %0, %1" : "Ù" (
ªsu…
Ë: "r" (
vÆue
) );

656 (
ªsu…
);

657 
	}
}

667 
uöt32_t
 
	$__RBIT
(
uöt32_t
 
vÆue
)

669 
uöt32_t
 
ªsu…
=0;

671 
__ASM
 vﬁ©ûê("rbô %0, %1" : "Ù" (
ªsu…
Ë: "r" (
vÆue
) );

672 (
ªsu…
);

673 
	}
}

683 
uöt8_t
 
	$__LDREXB
(
uöt8_t
 *
addr
)

685 
uöt8_t
 
ªsu…
=0;

687 
__ASM
 vﬁ©ûê("ldªxb %0, [%1]" : "Ù" (
ªsu…
Ë: "r" (
addr
) );

688 (
ªsu…
);

689 
	}
}

699 
uöt16_t
 
	$__LDREXH
(
uöt16_t
 *
addr
)

701 
uöt16_t
 
ªsu…
=0;

703 
__ASM
 vﬁ©ûê("ldªxh %0, [%1]" : "Ù" (
ªsu…
Ë: "r" (
addr
) );

704 (
ªsu…
);

705 
	}
}

715 
uöt32_t
 
	$__LDREXW
(
uöt32_t
 *
addr
)

717 
uöt32_t
 
ªsu…
=0;

719 
__ASM
 vﬁ©ûê("ldªx %0, [%1]" : "Ù" (
ªsu…
Ë: "r" (
addr
) );

720 (
ªsu…
);

721 
	}
}

732 
uöt32_t
 
	$__STREXB
(
uöt8_t
 
vÆue
, uöt8_à*
addr
)

734 
uöt32_t
 
ªsu…
=0;

736 
__ASM
 vﬁ©ûê("°ªxb %0, %2, [%1]" : "Ù" (
ªsu…
Ë: "r" (
addr
), "r" (
vÆue
) );

737 (
ªsu…
);

738 
	}
}

749 
uöt32_t
 
	$__STREXH
(
uöt16_t
 
vÆue
, uöt16_à*
addr
)

751 
uöt32_t
 
ªsu…
=0;

753 
__ASM
 vﬁ©ûê("°ªxh %0, %2, [%1]" : "Ù" (
ªsu…
Ë: "r" (
addr
), "r" (
vÆue
) );

754 (
ªsu…
);

755 
	}
}

766 
uöt32_t
 
	$__STREXW
(
uöt32_t
 
vÆue
, uöt32_à*
addr
)

768 
uöt32_t
 
ªsu…
=0;

770 
__ASM
 vﬁ©ûê("°ªx %0, %2, [%1]" : "Ù" (
ªsu…
Ë: "r" (
addr
), "r" (
vÆue
) );

771 (
ªsu…
);

772 
	}
}

782 
uöt32_t
 
	$__gë_CONTROL
()

784 
uöt32_t
 
ªsu…
=0;

786 
__ASM
 vﬁ©ûê("MRS %0, c⁄åﬁ" : "Ù" (
ªsu…
) );

787 (
ªsu…
);

788 
	}
}

798 
	$__£t_CONTROL
(
uöt32_t
 
c⁄åﬁ
)

800 
__ASM
 vﬁ©ûê("MSR c⁄åﬁ, %0" : : "r" (
c⁄åﬁ
) );

801 
	}
}

803 #ñi‡(
deföed
 (
__TASKING__
))

	@Source/CMSIS/Core/CM3/core_cm3.h

22 #i‚de‡
__CM3_CORE_H__


23 
	#__CM3_CORE_H__


	)

25 #ifde‡
__˝lu•lus


29 
	#__CM3_CMSIS_VERSION_MAIN
 (0x01Ë

	)

30 
	#__CM3_CMSIS_VERSION_SUB
 (0x20Ë

	)

31 
	#__CM3_CMSIS_VERSION
 ((
__CM3_CMSIS_VERSION_MAIN
 << 16Ë| 
__CM3_CMSIS_VERSION_SUB
Ë

	)

33 
	#__CORTEX_M
 (0x03Ë

	)

85 
	~<°döt.h
>

87 #i‡
deföed
 (
__ICCARM__
)

88 
	~<öåösics.h
>

92 #i‚de‡
__NVIC_PRIO_BITS


93 
	#__NVIC_PRIO_BITS
 4

	)

105 #ifde‡
__˝lu•lus


106 
	#__I
 vﬁ©ûê

	)

108 
	#__I
 vﬁ©ûêc⁄°

	)

110 
	#__O
 vﬁ©ûê

	)

111 
	#__IO
 vﬁ©ûê

	)

121 
	#NVIC_VECTRESET
 0

	)

122 
	#NVIC_SYSRESETREQ
 2

	)

123 
	#NVIC_AIRCR_VECTKEY
 (0x5FA << 16Ë

	)

124 
	#NVIC_AIRCR_ENDIANESS
 15

	)

127 
	#C‹eDebug_DEMCR_TRCENA
 (1 << 24Ë

	)

128 
	#ITM_TCR_ITMENA
 1

	)

136 
__IO
 
uöt32_t
 
ISER
[8];

137 
uöt32_t
 
RESERVED0
[24];

138 
__IO
 
uöt32_t
 
ICER
[8];

139 
uöt32_t
 
RSERVED1
[24];

140 
__IO
 
uöt32_t
 
ISPR
[8];

141 
uöt32_t
 
RESERVED2
[24];

142 
__IO
 
uöt32_t
 
ICPR
[8];

143 
uöt32_t
 
RESERVED3
[24];

144 
__IO
 
uöt32_t
 
IABR
[8];

145 
uöt32_t
 
RESERVED4
[56];

146 
__IO
 
uöt8_t
 
IP
[240];

147 
uöt32_t
 
RESERVED5
[644];

148 
__O
 
uöt32_t
 
STIR
;

149 } 
	tNVIC_Ty≥
;

155 
__I
 
uöt32_t
 
CPUID
;

156 
__IO
 
uöt32_t
 
ICSR
;

157 
__IO
 
uöt32_t
 
VTOR
;

158 
__IO
 
uöt32_t
 
AIRCR
;

159 
__IO
 
uöt32_t
 
SCR
;

160 
__IO
 
uöt32_t
 
CCR
;

161 
__IO
 
uöt8_t
 
SHP
[12];

162 
__IO
 
uöt32_t
 
SHCSR
;

163 
__IO
 
uöt32_t
 
CFSR
;

164 
__IO
 
uöt32_t
 
HFSR
;

165 
__IO
 
uöt32_t
 
DFSR
;

166 
__IO
 
uöt32_t
 
MMFAR
;

167 
__IO
 
uöt32_t
 
BFAR
;

168 
__IO
 
uöt32_t
 
AFSR
;

169 
__I
 
uöt32_t
 
PFR
[2];

170 
__I
 
uöt32_t
 
DFR
;

171 
__I
 
uöt32_t
 
ADR
;

172 
__I
 
uöt32_t
 
MMFR
[4];

173 
__I
 
uöt32_t
 
ISAR
[5];

174 } 
	tSCB_Ty≥
;

180 
__IO
 
uöt32_t
 
CTRL
;

181 
__IO
 
uöt32_t
 
LOAD
;

182 
__IO
 
uöt32_t
 
VAL
;

183 
__I
 
uöt32_t
 
CALIB
;

184 } 
	tSysTick_Ty≥
;

190 
__O
 union

192 
__O
 
uöt8_t
 
u8
;

193 
__O
 
uöt16_t
 
u16
;

194 
__O
 
uöt32_t
 
u32
;

195 } 
PORT
 [32];

196 
uöt32_t
 
RESERVED0
[864];

197 
__IO
 
uöt32_t
 
TER
;

198 
uöt32_t
 
RESERVED1
[15];

199 
__IO
 
uöt32_t
 
TPR
;

200 
uöt32_t
 
RESERVED2
[15];

201 
__IO
 
uöt32_t
 
TCR
;

202 
uöt32_t
 
RESERVED3
[29];

203 
__IO
 
uöt32_t
 
IWR
;

204 
__IO
 
uöt32_t
 
IRR
;

205 
__IO
 
uöt32_t
 
IMCR
;

206 
uöt32_t
 
RESERVED4
[43];

207 
__IO
 
uöt32_t
 
LAR
;

208 
__IO
 
uöt32_t
 
LSR
;

209 
uöt32_t
 
RESERVED5
[6];

210 
__I
 
uöt32_t
 
PID4
;

211 
__I
 
uöt32_t
 
PID5
;

212 
__I
 
uöt32_t
 
PID6
;

213 
__I
 
uöt32_t
 
PID7
;

214 
__I
 
uöt32_t
 
PID0
;

215 
__I
 
uöt32_t
 
PID1
;

216 
__I
 
uöt32_t
 
PID2
;

217 
__I
 
uöt32_t
 
PID3
;

218 
__I
 
uöt32_t
 
CID0
;

219 
__I
 
uöt32_t
 
CID1
;

220 
__I
 
uöt32_t
 
CID2
;

221 
__I
 
uöt32_t
 
CID3
;

222 } 
	tITM_Ty≥
;

228 
uöt32_t
 
RESERVED0
;

229 
__I
 
uöt32_t
 
ICTR
;

230 #i‡((
deföed
 
__CM3_REV
) && (__CM3_REV >= 0x200))

231 
__IO
 
uöt32_t
 
ACTLR
;

233 
uöt32_t
 
RESERVED1
;

235 } 
	tI¡îru±Ty≥_Ty≥
;

239 #i‡
deföed
 (
__MPU_PRESENT
) && (__MPU_PRESENT == 1)

242 
__I
 
uöt32_t
 
TYPE
;

243 
__IO
 
uöt32_t
 
CTRL
;

244 
__IO
 
uöt32_t
 
RNR
;

245 
__IO
 
uöt32_t
 
RBAR
;

246 
__IO
 
uöt32_t
 
RASR
;

247 
__IO
 
uöt32_t
 
RBAR_A1
;

248 
__IO
 
uöt32_t
 
RASR_A1
;

249 
__IO
 
uöt32_t
 
RBAR_A2
;

250 
__IO
 
uöt32_t
 
RASR_A2
;

251 
__IO
 
uöt32_t
 
RBAR_A3
;

252 
__IO
 
uöt32_t
 
RASR_A3
;

253 } 
	tMPU_Ty≥
;

260 
__IO
 
uöt32_t
 
DHCSR
;

261 
__O
 
uöt32_t
 
DCRSR
;

262 
__IO
 
uöt32_t
 
DCRDR
;

263 
__IO
 
uöt32_t
 
DEMCR
;

264 } 
	tC‹eDebug_Ty≥
;

268 
	#SCS_BASE
 (0xE000E000Ë

	)

269 
	#ITM_BASE
 (0xE0000000Ë

	)

270 
	#C‹eDebug_BASE
 (0xE000EDF0Ë

	)

271 
	#SysTick_BASE
 (
SCS_BASE
 + 0x0010Ë

	)

272 
	#NVIC_BASE
 (
SCS_BASE
 + 0x0100Ë

	)

273 
	#SCB_BASE
 (
SCS_BASE
 + 0x0D00Ë

	)

275 
	#I¡îru±Ty≥
 ((
I¡îru±Ty≥_Ty≥
 *Ë
SCS_BASE
Ë

	)

276 
	#SCB
 ((
SCB_Ty≥
 *Ë
SCB_BASE
Ë

	)

277 
	#SysTick
 ((
SysTick_Ty≥
 *Ë
SysTick_BASE
Ë

	)

278 
	#NVIC
 ((
NVIC_Ty≥
 *Ë
NVIC_BASE
Ë

	)

279 
	#ITM
 ((
ITM_Ty≥
 *Ë
ITM_BASE
Ë

	)

280 
	#C‹eDebug
 ((
C‹eDebug_Ty≥
 *Ë
C‹eDebug_BASE
Ë

	)

282 #i‡
deföed
 (
__MPU_PRESENT
) && (__MPU_PRESENT == 1)

283 
	#MPU_BASE
 (
SCS_BASE
 + 0x0D90Ë

	)

284 
	#MPU
 ((
MPU_Ty≥
*Ë
MPU_BASE
Ë

	)

294 #i‡
deföed
 ( 
__CC_ARM
 )

295 
	#__ASM
 
__asm


	)

296 
	#__INLINE
 
__ölöe


	)

298 #ñi‡
deföed
 ( 
__ICCARM__
 )

299 
	#__ASM
 
__asm


	)

300 
	#__INLINE
 
ölöe


	)

302 #ñi‡
deföed
 ( 
__GNUC__
 )

303 
	#__ASM
 
__asm


	)

304 
	#__INLINE
 
ölöe


	)

306 #ñi‡
deföed
 ( 
__TASKING__
 )

307 
	#__ASM
 
__asm


	)

308 
	#__INLINE
 
ölöe


	)

315 #i‡
deföed
 ( 
__CC_ARM
 )

318 
	#__íabÀ_Áu…_úq
 
__íabÀ_fiq


	)

319 
	#__dißbÀ_Áu…_úq
 
__dißbÀ_fiq


	)

321 
	#__NOP
 
__n›


	)

322 
	#__WFI
 
__wfi


	)

323 
	#__WFE
 
__w„


	)

324 
	#__SEV
 
__£v


	)

325 
	#__ISB
(Ë
	`__isb
(0)

	)

326 
	#__DSB
(Ë
	`__dsb
(0)

	)

327 
	#__DMB
(Ë
	`__dmb
(0)

	)

328 
	#__REV
 
__ªv


	)

329 
	#__RBIT
 
__rbô


	)

330 
	#__LDREXB
(
±r
Ë((Ë
	`__ldªx
’å))

	)

331 
	#__LDREXH
(
±r
Ë((Ë
	`__ldªx
’å))

	)

332 
	#__LDREXW
(
±r
Ë((Ë
	`__ldªx
’å))

	)

333 
	#__STREXB
(
vÆue
, 
±r
Ë
	`__°ªx
(vÆue,Öå)

	)

334 
	#__STREXH
(
vÆue
, 
±r
Ë
	`__°ªx
(vÆue,Öå)

	)

335 
	#__STREXW
(
vÆue
, 
±r
Ë
	`__°ªx
(vÆue,Öå)

	)

352 
uöt32_t
 
__gë_PSP
();

363 
__£t_PSP
(
uöt32_t
 
t›OfProcSèck
);

374 
uöt32_t
 
__gë_MSP
();

385 
__£t_MSP
(
uöt32_t
 
t›OfMaöSèck
);

395 
uöt32_t
 
__REV16
(
uöt16_t
 
vÆue
);

405 
öt32_t
 
__REVSH
(
öt16_t
 
vÆue
);

408 #i‡(
__ARMCC_VERSION
 < 400000)

418 
__CLREX
();

428 
uöt32_t
 
__gë_BASEPRI
();

438 
__£t_BASEPRI
(
uöt32_t
 
ba£Pri
);

449 
uöt32_t
 
__gë_PRIMASK
();

459 
__£t_PRIMASK
(
uöt32_t
 
¥iMask
);

469 
uöt32_t
 
__gë_FAULTMASK
();

479 
__£t_FAULTMASK
(
uöt32_t
 
Áu…Mask
);

489 
uöt32_t
 
__gë_CONTROL
();

499 
__£t_CONTROL
(
uöt32_t
 
c⁄åﬁ
);

512 
	#__CLREX
 
__˛ªx


	)

522 
__INLINE
 
uöt32_t
 
__gë_BASEPRI
()

524 
uöt32_t
 
__ªgBa£Pri
 
__ASM
("basepri");

525 (
	g__ªgBa£Pri
);

536 
__INLINE
 
__£t_BASEPRI
(
uöt32_t
 
ba£Pri
)

538 
uöt32_t
 
__ªgBa£Pri
 
__ASM
("basepri");

539 
	g__ªgBa£Pri
 = (
ba£Pri
 & 0x1ff);

551 
__INLINE
 
uöt32_t
 
__gë_PRIMASK
()

553 
uöt32_t
 
__ªgPriMask
 
__ASM
("primask");

554 (
	g__ªgPriMask
);

565 
__INLINE
 
__£t_PRIMASK
(
uöt32_t
 
¥iMask
)

567 
uöt32_t
 
__ªgPriMask
 
__ASM
("primask");

568 
	g__ªgPriMask
 = (
¥iMask
);

579 
__INLINE
 
uöt32_t
 
__gë_FAULTMASK
()

581 
uöt32_t
 
__ªgFau…Mask
 
__ASM
("faultmask");

582 (
	g__ªgFau…Mask
);

593 
__INLINE
 
__£t_FAULTMASK
(
uöt32_t
 
Áu…Mask
)

595 
uöt32_t
 
__ªgFau…Mask
 
__ASM
("faultmask");

596 
	g__ªgFau…Mask
 = (
Áu…Mask
 & 1);

607 
__INLINE
 
uöt32_t
 
__gë_CONTROL
()

609 
uöt32_t
 
__ªgC⁄åﬁ
 
__ASM
("control");

610 (
	g__ªgC⁄åﬁ
);

621 
__INLINE
 
__£t_CONTROL
(
uöt32_t
 
c⁄åﬁ
)

623 
uöt32_t
 
__ªgC⁄åﬁ
 
__ASM
("control");

624 
	g__ªgC⁄åﬁ
 = 
c⁄åﬁ
;

631 #ñi‡(
deföed
 (
__ICCARM__
))

634 
	#__íabÀ_úq
 
__íabÀ_öãºu±


	)

635 
	#__dißbÀ_úq
 
__dißbÀ_öãºu±


	)

637 
__INLINE
 
__íabÀ_Áu…_úq
(Ë{ 
__ASM
 ("cpsie f"); }

638 
__INLINE
 
__dißbÀ_Áu…_úq
(Ë{ 
__ASM
 ("cpsid f"); }

640 
	#__NOP
 
	`__no_›î©i⁄
(Ë

	)

641 
__INLINE
 
__WFI
(Ë{ 
__ASM
 ("wfi"); }

642 
__INLINE
 
__WFE
(Ë{ 
__ASM
 ("wfe"); }

643 
__INLINE
 
__SEV
(Ë{ 
__ASM
 ("sev"); }

644 
__INLINE
 
__CLREX
(Ë{ 
__ASM
 ("clrex"); }

667 
uöt32_t
 
__gë_PSP
();

678 
__£t_PSP
(
uöt32_t
 
t›OfProcSèck
);

689 
uöt32_t
 
__gë_MSP
();

700 
__£t_MSP
(
uöt32_t
 
t›OfMaöSèck
);

710 
uöt32_t
 
__REV16
(
uöt16_t
 
vÆue
);

720 
uöt32_t
 
__RBIT
(uöt32_à
vÆue
);

730 
uöt8_t
 
__LDREXB
(uöt8_à*
addr
);

740 
uöt16_t
 
__LDREXH
(uöt16_à*
addr
);

750 
uöt32_t
 
__LDREXW
(uöt32_à*
addr
);

761 
uöt32_t
 
__STREXB
(
uöt8_t
 
vÆue
, uöt8_à*
addr
);

772 
uöt32_t
 
__STREXH
(
uöt16_t
 
vÆue
, uöt16_à*
addr
);

783 
uöt32_t
 
__STREXW
(uöt32_à
vÆue
, uöt32_à*
addr
);

787 #ñi‡(
deföed
 (
__GNUC__
))

790 
__INLINE
 
__íabÀ_úq
(Ë{ 
__ASM
 volatile ("cpsie i"); }

791 
__INLINE
 
__dißbÀ_úq
(Ë{ 
__ASM
 volatile ("cpsid i"); }

793 
__INLINE
 
__íabÀ_Áu…_úq
(Ë{ 
__ASM
 volatile ("cpsie f"); }

794 
__INLINE
 
__dißbÀ_Áu…_úq
(Ë{ 
__ASM
 volatile ("cpsid f"); }

796 
__INLINE
 
__NOP
(Ë{ 
__ASM
 volatile ("nop"); }

797 
__INLINE
 
__WFI
(Ë{ 
__ASM
 volatile ("wfi"); }

798 
__INLINE
 
__WFE
(Ë{ 
__ASM
 volatile ("wfe"); }

799 
__INLINE
 
__SEV
(Ë{ 
__ASM
 volatile ("sev"); }

800 
__INLINE
 
__ISB
(Ë{ 
__ASM
 volatile ("isb"); }

801 
__INLINE
 
__DSB
(Ë{ 
__ASM
 volatile ("dsb"); }

802 
__INLINE
 
__DMB
(Ë{ 
__ASM
 volatile ("dmb"); }

803 
__INLINE
 
__CLREX
(Ë{ 
__ASM
 volatile ("clrex"); }

814 
uöt32_t
 
__gë_PSP
();

825 
__£t_PSP
(
uöt32_t
 
t›OfProcSèck
);

836 
uöt32_t
 
__gë_MSP
();

847 
__£t_MSP
(
uöt32_t
 
t›OfMaöSèck
);

857 
uöt32_t
 
__gë_BASEPRI
();

867 
__£t_BASEPRI
(
uöt32_t
 
ba£Pri
);

878 
uöt32_t
 
__gë_PRIMASK
();

888 
__£t_PRIMASK
(
uöt32_t
 
¥iMask
);

898 
uöt32_t
 
__gë_FAULTMASK
();

908 
__£t_FAULTMASK
(
uöt32_t
 
Áu…Mask
);

918 
uöt32_t
 
__gë_CONTROL
();

928 
__£t_CONTROL
(
uöt32_t
 
c⁄åﬁ
);

938 
uöt32_t
 
__REV
(uöt32_à
vÆue
);

948 
uöt32_t
 
__REV16
(
uöt16_t
 
vÆue
);

958 
öt32_t
 
__REVSH
(
öt16_t
 
vÆue
);

968 
uöt32_t
 
__RBIT
(uöt32_à
vÆue
);

978 
uöt8_t
 
__LDREXB
(uöt8_à*
addr
);

988 
uöt16_t
 
__LDREXH
(uöt16_à*
addr
);

998 
uöt32_t
 
__LDREXW
(uöt32_à*
addr
);

1009 
uöt32_t
 
__STREXB
(
uöt8_t
 
vÆue
, uöt8_à*
addr
);

1020 
uöt32_t
 
__STREXH
(
uöt16_t
 
vÆue
, uöt16_à*
addr
);

1031 
uöt32_t
 
__STREXW
(uöt32_à
vÆue
, uöt32_à*
addr
);

1034 #ñi‡(
deföed
 (
__TASKING__
))

1062 
__INLINE
 
NVIC_SëPri‹ôyGroupög
(
uöt32_t
 
Pri‹ôyGroup
)

1064 
uöt32_t
 
	gªg_vÆue
;

1065 
uöt32_t
 
	gPri‹ôyGroupTmp
 = (
Pri‹ôyGroup
 & 0x07);

1067 
	gªg_vÆue
 = 
SCB
->
AIRCR
;

1068 
	gªg_vÆue
 &= ~((0xFFFFU << 16) | (0x0F << 8));

1069 
	gªg_vÆue
 = ((
ªg_vÆue
 | 
NVIC_AIRCR_VECTKEY
 | (
Pri‹ôyGroupTmp
 << 8)));

1070 
	gSCB
->
	gAIRCR
 = 
ªg_vÆue
;

1082 
__INLINE
 
uöt32_t
 
NVIC_GëPri‹ôyGroupög
()

1084  ((
	gSCB
->
	gAIRCR
 >> 8) & 0x07);

1096 
__INLINE
 
NVIC_E«bÀIRQ
(
IRQn_Ty≥
 
IRQn
)

1098 
	gNVIC
->
	gISER
[((
uöt32_t
)(
IRQn
) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F));

1110 
__INLINE
 
NVIC_DißbÀIRQ
(
IRQn_Ty≥
 
IRQn
)

1112 
	gNVIC
->
	gICER
[((
uöt32_t
)(
IRQn
) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F));

1124 
__INLINE
 
uöt32_t
 
NVIC_GëPídögIRQ
(
IRQn_Ty≥
 
IRQn
)

1126 ((
	guöt32_t
Ë((
	gNVIC
->
	gISPR
[(
uöt32_t
)(
IRQn
Ë>> 5] & (1 << ((uöt32_t)(
	gIRQn
) & 0x1F)))?1:0));

1138 
__INLINE
 
NVIC_SëPídögIRQ
(
IRQn_Ty≥
 
IRQn
)

1140 
	gNVIC
->
	gISPR
[((
uöt32_t
)(
IRQn
) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F));

1152 
__INLINE
 
NVIC_CÀ¨PídögIRQ
(
IRQn_Ty≥
 
IRQn
)

1154 
	gNVIC
->
	gICPR
[((
uöt32_t
)(
IRQn
) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F));

1166 
__INLINE
 
uöt32_t
 
NVIC_GëA˘ive
(
IRQn_Ty≥
 
IRQn
)

1168 ((
	guöt32_t
)((
	gNVIC
->
	gIABR
[(
uöt32_t
)(
IRQn
Ë>> 5] & (1 << ((uöt32_t)(
	gIRQn
) & 0x1F)))?1:0));

1184 
__INLINE
 
NVIC_SëPri‹ôy
(
IRQn_Ty≥
 
IRQn
, 
uöt32_t
 
¥i‹ôy
)

1186 if(
	gIRQn
 < 0) {

1187 
	gSCB
->
	gSHP
[((
uöt32_t
)(
IRQn
Ë& 0xF)-4] = ((
¥i‹ôy
 << (8 - 
__NVIC_PRIO_BITS
)) & 0xff); }

1189 
	gNVIC
->
	gIP
[(
uöt32_t
)(
IRQn
)] = ((
¥i‹ôy
 << (8 - 
__NVIC_PRIO_BITS
)) & 0xff); }

1207 
__INLINE
 
uöt32_t
 
NVIC_GëPri‹ôy
(
IRQn_Ty≥
 
IRQn
)

1210 if(
	gIRQn
 < 0) {

1211 ((
	guöt32_t
)(
	gSCB
->
	gSHP
[((
uöt32_t
)(
IRQn
Ë& 0xF)-4] >> (8 - 
	g__NVIC_PRIO_BITS
))); }

1213 ((
	guöt32_t
)(
	gNVIC
->
	gIP
[(
uöt32_t
)(
IRQn
)] >> (8 - 
	g__NVIC_PRIO_BITS
))); }

1232 
__INLINE
 
uöt32_t
 
NVIC_EncodePri‹ôy
 (uöt32_à
Pri‹ôyGroup
, uöt32_à
Pªem±Pri‹ôy
, uöt32_à
SubPri‹ôy
)

1234 
uöt32_t
 
	gPri‹ôyGroupTmp
 = (
Pri‹ôyGroup
 & 0x07);

1235 
uöt32_t
 
	gPªem±Pri‹ôyBôs
;

1236 
uöt32_t
 
	gSubPri‹ôyBôs
;

1238 
	gPªem±Pri‹ôyBôs
 = ((7 - 
Pri‹ôyGroupTmp
Ë> 
__NVIC_PRIO_BITS
) ? __NVIC_PRIO_BITS : 7 - PriorityGroupTmp;

1239 
	gSubPri‹ôyBôs
 = ((
Pri‹ôyGroupTmp
 + 
__NVIC_PRIO_BITS
) < 7) ? 0 : PriorityGroupTmp - 7 + __NVIC_PRIO_BITS;

1242 ((
	gPªem±Pri‹ôy
 & ((1 << (
	gPªem±Pri‹ôyBôs
)Ë- 1)Ë<< 
	gSubPri‹ôyBôs
) |

1243 ((
	gSubPri‹ôy
 & ((1 << (
	gSubPri‹ôyBôs
 )) - 1)))

1264 
__INLINE
 
NVIC_DecodePri‹ôy
 (
uöt32_t
 
Pri‹ôy
, uöt32_à
Pri‹ôyGroup
, uöt32_t* 
pPªem±Pri‹ôy
, uöt32_t* 
pSubPri‹ôy
)

1266 
uöt32_t
 
	gPri‹ôyGroupTmp
 = (
Pri‹ôyGroup
 & 0x07);

1267 
uöt32_t
 
	gPªem±Pri‹ôyBôs
;

1268 
uöt32_t
 
	gSubPri‹ôyBôs
;

1270 
	gPªem±Pri‹ôyBôs
 = ((7 - 
Pri‹ôyGroupTmp
Ë> 
__NVIC_PRIO_BITS
) ? __NVIC_PRIO_BITS : 7 - PriorityGroupTmp;

1271 
	gSubPri‹ôyBôs
 = ((
Pri‹ôyGroupTmp
 + 
__NVIC_PRIO_BITS
) < 7) ? 0 : PriorityGroupTmp - 7 + __NVIC_PRIO_BITS;

1273 *
	gpPªem±Pri‹ôy
 = (
Pri‹ôy
 >> 
SubPri‹ôyBôs
Ë& ((1 << (
Pªem±Pri‹ôyBôs
)) - 1);

1274 *
	gpSubPri‹ôy
 = (
Pri‹ôy
 ) & ((1 << (
SubPri‹ôyBôs
 )) - 1);

1281 #i‡(!
deföed
 (
__Víd‹_SysTickC⁄fig
)) || (__Vendor_SysTickConfig == 0)

1284 
	#SYSTICK_ENABLE
 0

	)

1285 
	#SYSTICK_TICKINT
 1

	)

1286 
	#SYSTICK_CLKSOURCE
 2

	)

1287 
	#SYSTICK_MAXCOUNT
 ((1<<24Ë-1Ë

	)

1299 
__INLINE
 
uöt32_t
 
SysTick_C⁄fig
(uöt32_à
ticks
)

1301 i‡(
	gticks
 > 
	gSYSTICK_MAXCOUNT
)  (1);

1303 
	gSysTick
->
	gLOAD
 = (
ticks
 & 
SYSTICK_MAXCOUNT
) - 1;

1304 
NVIC_SëPri‹ôy
 (
SysTick_IRQn
, (1<<
__NVIC_PRIO_BITS
) - 1);

1305 
	gSysTick
->
	gVAL
 = (0x00);

1306 
	gSysTick
->
	gCTRL
 = (1 << 
SYSTICK_CLKSOURCE
Ë| (1<<
SYSTICK_ENABLE
Ë| (1<<
SYSTICK_TICKINT
);

1326 
__INLINE
 
NVIC_Sy°emRe£t
()

1328 
	gSCB
->
	gAIRCR
 = (
NVIC_AIRCR_VECTKEY
 | (
SCB
->
AIRCR
 & (0x700)Ë| (1<<
NVIC_SYSRESETREQ
));

1329 
__DSB
();

1347 
__INLINE
 
uöt32_t
 
ITM_SídCh¨
 (uöt32_à
ch
)

1349 i‡(
	gch
 ='\n'Ë
ITM_SídCh¨
('\r');

1351 i‡((
	gC‹eDebug
->
	gDEMCR
 & 
	gC‹eDebug_DEMCR_TRCENA
) &&

1352 (
	gITM
->
	gTCR
 & 
	gITM_TCR_ITMENA
) &&

1353 (
	gITM
->
	gTER
 & (1UL << 0)) )

1355 
	gITM
->
	gPORT
[0].
	gu32
 == 0);

1356 
	gITM
->
	gPORT
[0].
	gu8
 = (
uöt8_t
Ë
ch
;

1358  (
	gch
);

1361 #ifde‡
__˝lu•lus


	@Source/CMSIS/Core/CM3/stm32f10x.h

32 #i‚de‡
__STM32F10x_H


33 
	#__STM32F10x_H


	)

35 #ifde‡
__˝lu•lus


47 #i‡!
deföed
 (
STM32F10X_LD
Ë&& !deföed (
STM32F10X_MD
Ë&& !deföed (
STM32F10X_HD
Ë&& !deföed (
STM32F10X_CL
)

50 
	#STM32F10X_HD


	)

65 #i‡!
deföed
 
USE_STDPERIPH_DRIVER


71 
	#USE_STDPERIPH_DRIVER


	)

81 #i‡!
deföed
 
HSE_VÆue


82 #ifde‡
STM32F10X_CL


83 
	#HSE_VÆue
 ((
uöt32_t
)25000000Ë

	)

85 
	#HSE_VÆue
 ((
uöt32_t
)8000000Ë

	)

94 
	#HSESèπUp_TimeOut
 ((
uöt16_t
)0x0500Ë

	)

96 
	#HSI_VÆue
 ((
uöt32_t
)8000000Ë

	)

101 
	#__STM32F10X_STDPERIPH_VERSION_MAIN
 (0x03Ë

	)

102 
	#__STM32F10X_STDPERIPH_VERSION_SUB1
 (0x01Ë

	)

103 
	#__STM32F10X_STDPERIPH_VERSION_SUB2
 (0x00Ë

	)

104 
	#__STM32F10X_STDPERIPH_VERSION
 ((
__STM32F10X_STDPERIPH_VERSION_MAIN
 << 16)\

	)

105 | (
__STM32F10X_STDPERIPH_VERSION_SUB1
 << 8)\

106 | 
__STM32F10X_STDPERIPH_VERSION_SUB2
)

119 
	#__MPU_PRESENT
 0

	)

120 
	#__NVIC_PRIO_BITS
 4

	)

121 
	#__Víd‹_SysTickC⁄fig
 0

	)

127 
	eIRQn


130 
N⁄MaskabÀI¡_IRQn
 = -14,

131 
Mem‹yM™agemít_IRQn
 = -12,

132 
BusFau…_IRQn
 = -11,

133 
UßgeFau…_IRQn
 = -10,

134 
SVCÆl_IRQn
 = -5,

135 
DebugM⁄ô‹_IRQn
 = -4,

136 
PídSV_IRQn
 = -2,

137 
SysTick_IRQn
 = -1,

140 
WWDG_IRQn
 = 0,

141 
PVD_IRQn
 = 1,

142 
TAMPER_IRQn
 = 2,

143 
RTC_IRQn
 = 3,

144 
FLASH_IRQn
 = 4,

145 
RCC_IRQn
 = 5,

146 
EXTI0_IRQn
 = 6,

147 
EXTI1_IRQn
 = 7,

148 
EXTI2_IRQn
 = 8,

149 
EXTI3_IRQn
 = 9,

150 
EXTI4_IRQn
 = 10,

151 
DMA1_Ch™√l1_IRQn
 = 11,

152 
DMA1_Ch™√l2_IRQn
 = 12,

153 
DMA1_Ch™√l3_IRQn
 = 13,

154 
DMA1_Ch™√l4_IRQn
 = 14,

155 
DMA1_Ch™√l5_IRQn
 = 15,

156 
DMA1_Ch™√l6_IRQn
 = 16,

157 
DMA1_Ch™√l7_IRQn
 = 17,

158 
ADC1_2_IRQn
 = 18,

160 #ifde‡
STM32F10X_LD


161 
USB_HP_CAN1_TX_IRQn
 = 19,

162 
USB_LP_CAN1_RX0_IRQn
 = 20,

163 
CAN1_RX1_IRQn
 = 21,

164 
CAN1_SCE_IRQn
 = 22,

165 
EXTI9_5_IRQn
 = 23,

166 
TIM1_BRK_IRQn
 = 24,

167 
TIM1_UP_IRQn
 = 25,

168 
TIM1_TRG_COM_IRQn
 = 26,

169 
TIM1_CC_IRQn
 = 27,

170 
TIM2_IRQn
 = 28,

171 
TIM3_IRQn
 = 29,

172 
I2C1_EV_IRQn
 = 31,

173 
I2C1_ER_IRQn
 = 32,

174 
SPI1_IRQn
 = 35,

175 
USART1_IRQn
 = 37,

176 
USART2_IRQn
 = 38,

177 
EXTI15_10_IRQn
 = 40,

178 
RTCAœrm_IRQn
 = 41,

179 
USBWakeUp_IRQn
 = 42,

182 #ifde‡
STM32F10X_MD


183 
USB_HP_CAN1_TX_IRQn
 = 19,

184 
USB_LP_CAN1_RX0_IRQn
 = 20,

185 
CAN1_RX1_IRQn
 = 21,

186 
CAN1_SCE_IRQn
 = 22,

187 
EXTI9_5_IRQn
 = 23,

188 
TIM1_BRK_IRQn
 = 24,

189 
TIM1_UP_IRQn
 = 25,

190 
TIM1_TRG_COM_IRQn
 = 26,

191 
TIM1_CC_IRQn
 = 27,

192 
TIM2_IRQn
 = 28,

193 
TIM3_IRQn
 = 29,

194 
TIM4_IRQn
 = 30,

195 
I2C1_EV_IRQn
 = 31,

196 
I2C1_ER_IRQn
 = 32,

197 
I2C2_EV_IRQn
 = 33,

198 
I2C2_ER_IRQn
 = 34,

199 
SPI1_IRQn
 = 35,

200 
SPI2_IRQn
 = 36,

201 
USART1_IRQn
 = 37,

202 
USART2_IRQn
 = 38,

203 
USART3_IRQn
 = 39,

204 
EXTI15_10_IRQn
 = 40,

205 
RTCAœrm_IRQn
 = 41,

206 
USBWakeUp_IRQn
 = 42,

209 #ifde‡
STM32F10X_HD


210 
USB_HP_CAN1_TX_IRQn
 = 19,

211 
USB_LP_CAN1_RX0_IRQn
 = 20,

212 
CAN1_RX1_IRQn
 = 21,

213 
CAN1_SCE_IRQn
 = 22,

214 
EXTI9_5_IRQn
 = 23,

215 
TIM1_BRK_IRQn
 = 24,

216 
TIM1_UP_IRQn
 = 25,

217 
TIM1_TRG_COM_IRQn
 = 26,

218 
TIM1_CC_IRQn
 = 27,

219 
TIM2_IRQn
 = 28,

220 
TIM3_IRQn
 = 29,

221 
TIM4_IRQn
 = 30,

222 
I2C1_EV_IRQn
 = 31,

223 
I2C1_ER_IRQn
 = 32,

224 
I2C2_EV_IRQn
 = 33,

225 
I2C2_ER_IRQn
 = 34,

226 
SPI1_IRQn
 = 35,

227 
SPI2_IRQn
 = 36,

228 
USART1_IRQn
 = 37,

229 
USART2_IRQn
 = 38,

230 
USART3_IRQn
 = 39,

231 
EXTI15_10_IRQn
 = 40,

232 
RTCAœrm_IRQn
 = 41,

233 
USBWakeUp_IRQn
 = 42,

234 
TIM8_BRK_IRQn
 = 43,

235 
TIM8_UP_IRQn
 = 44,

236 
TIM8_TRG_COM_IRQn
 = 45,

237 
TIM8_CC_IRQn
 = 46,

238 
ADC3_IRQn
 = 47,

239 
FSMC_IRQn
 = 48,

240 
SDIO_IRQn
 = 49,

241 
TIM5_IRQn
 = 50,

242 
SPI3_IRQn
 = 51,

243 
UART4_IRQn
 = 52,

244 
UART5_IRQn
 = 53,

245 
TIM6_IRQn
 = 54,

246 
TIM7_IRQn
 = 55,

247 
DMA2_Ch™√l1_IRQn
 = 56,

248 
DMA2_Ch™√l2_IRQn
 = 57,

249 
DMA2_Ch™√l3_IRQn
 = 58,

250 
DMA2_Ch™√l4_5_IRQn
 = 59

253 #ifde‡
STM32F10X_CL


254 
CAN1_TX_IRQn
 = 19,

255 
CAN1_RX0_IRQn
 = 20,

256 
CAN1_RX1_IRQn
 = 21,

257 
CAN1_SCE_IRQn
 = 22,

258 
EXTI9_5_IRQn
 = 23,

259 
TIM1_BRK_IRQn
 = 24,

260 
TIM1_UP_IRQn
 = 25,

261 
TIM1_TRG_COM_IRQn
 = 26,

262 
TIM1_CC_IRQn
 = 27,

263 
TIM2_IRQn
 = 28,

264 
TIM3_IRQn
 = 29,

265 
TIM4_IRQn
 = 30,

266 
I2C1_EV_IRQn
 = 31,

267 
I2C1_ER_IRQn
 = 32,

268 
I2C2_EV_IRQn
 = 33,

269 
I2C2_ER_IRQn
 = 34,

270 
SPI1_IRQn
 = 35,

271 
SPI2_IRQn
 = 36,

272 
USART1_IRQn
 = 37,

273 
USART2_IRQn
 = 38,

274 
USART3_IRQn
 = 39,

275 
EXTI15_10_IRQn
 = 40,

276 
RTCAœrm_IRQn
 = 41,

277 
OTG_FS_WKUP_IRQn
 = 42,

278 
TIM5_IRQn
 = 50,

279 
SPI3_IRQn
 = 51,

280 
UART4_IRQn
 = 52,

281 
UART5_IRQn
 = 53,

282 
TIM6_IRQn
 = 54,

283 
TIM7_IRQn
 = 55,

284 
DMA2_Ch™√l1_IRQn
 = 56,

285 
DMA2_Ch™√l2_IRQn
 = 57,

286 
DMA2_Ch™√l3_IRQn
 = 58,

287 
DMA2_Ch™√l4_IRQn
 = 59,

288 
DMA2_Ch™√l5_IRQn
 = 60,

289 
ETH_IRQn
 = 61,

290 
ETH_WKUP_IRQn
 = 62,

291 
CAN2_TX_IRQn
 = 63,

292 
CAN2_RX0_IRQn
 = 64,

293 
CAN2_RX1_IRQn
 = 65,

294 
CAN2_SCE_IRQn
 = 66,

295 
OTG_FS_IRQn
 = 67

297 } 
	tIRQn_Ty≥
;

303 
	~"c‹e_cm3.h
"

304 
	~"sy°em_°m32f10x.h
"

305 
	~<°döt.h
>

312 
öt32_t
 
	ts32
;

313 
öt16_t
 
	ts16
;

314 
öt8_t
 
	ts8
;

316 c⁄° 
	töt32_t
 
	tsc32
;

317 c⁄° 
	töt16_t
 
	tsc16
;

318 c⁄° 
	töt8_t
 
	tsc8
;

320 
__IO
 
	töt32_t
 
	tvs32
;

321 
__IO
 
	töt16_t
 
	tvs16
;

322 
__IO
 
	töt8_t
 
	tvs8
;

324 
__I
 
	töt32_t
 
	tvsc32
;

325 
__I
 
	töt16_t
 
	tvsc16
;

326 
__I
 
	töt8_t
 
	tvsc8
;

328 
uöt32_t
 
	tu32
;

329 
uöt16_t
 
	tu16
;

330 
uöt8_t
 
	tu8
;

332 c⁄° 
	tuöt32_t
 
	tuc32
;

333 c⁄° 
	tuöt16_t
 
	tuc16
;

334 c⁄° 
	tuöt8_t
 
	tuc8
;

336 
__IO
 
	tuöt32_t
 
	tvu32
;

337 
__IO
 
	tuöt16_t
 
	tvu16
;

338 
__IO
 
	tuöt8_t
 
	tvu8
;

340 
__I
 
	tuöt32_t
 
	tvuc32
;

341 
__I
 
	tuöt16_t
 
	tvuc16
;

342 
__I
 
	tuöt8_t
 
	tvuc8
;

344 #i‚de‡
__˝lu•lus


345 íum {
FALSE
 = 0, 
TRUE
 = !FALSE} 
	tboﬁ
;

348 íum {
RESET
 = 0, 
SET
 = !RESET} 
	tFœgSètus
, 
	tITSètus
;

350 íum {
DISABLE
 = 0, 
ENABLE
 = !DISABLE} 
	tFun˘i⁄ÆSèã
;

351 
	#IS_FUNCTIONAL_STATE
(
STATE
Ë(((STATEË=
DISABLE
Ë|| ((STATEË=
ENABLE
))

	)

353 íum {
ERROR
 = 0, 
SUCCESS
 = !ERROR} 
	tEº‹Sètus
;

369 
__IO
 
uöt32_t
 
SR
;

370 
__IO
 
uöt32_t
 
CR1
;

371 
__IO
 
uöt32_t
 
CR2
;

372 
__IO
 
uöt32_t
 
SMPR1
;

373 
__IO
 
uöt32_t
 
SMPR2
;

374 
__IO
 
uöt32_t
 
JOFR1
;

375 
__IO
 
uöt32_t
 
JOFR2
;

376 
__IO
 
uöt32_t
 
JOFR3
;

377 
__IO
 
uöt32_t
 
JOFR4
;

378 
__IO
 
uöt32_t
 
HTR
;

379 
__IO
 
uöt32_t
 
LTR
;

380 
__IO
 
uöt32_t
 
SQR1
;

381 
__IO
 
uöt32_t
 
SQR2
;

382 
__IO
 
uöt32_t
 
SQR3
;

383 
__IO
 
uöt32_t
 
JSQR
;

384 
__IO
 
uöt32_t
 
JDR1
;

385 
__IO
 
uöt32_t
 
JDR2
;

386 
__IO
 
uöt32_t
 
JDR3
;

387 
__IO
 
uöt32_t
 
JDR4
;

388 
__IO
 
uöt32_t
 
DR
;

389 } 
	tADC_Ty≥Def
;

397 
uöt32_t
 
RESERVED0
;

398 
__IO
 
uöt16_t
 
DR1
;

399 
uöt16_t
 
RESERVED1
;

400 
__IO
 
uöt16_t
 
DR2
;

401 
uöt16_t
 
RESERVED2
;

402 
__IO
 
uöt16_t
 
DR3
;

403 
uöt16_t
 
RESERVED3
;

404 
__IO
 
uöt16_t
 
DR4
;

405 
uöt16_t
 
RESERVED4
;

406 
__IO
 
uöt16_t
 
DR5
;

407 
uöt16_t
 
RESERVED5
;

408 
__IO
 
uöt16_t
 
DR6
;

409 
uöt16_t
 
RESERVED6
;

410 
__IO
 
uöt16_t
 
DR7
;

411 
uöt16_t
 
RESERVED7
;

412 
__IO
 
uöt16_t
 
DR8
;

413 
uöt16_t
 
RESERVED8
;

414 
__IO
 
uöt16_t
 
DR9
;

415 
uöt16_t
 
RESERVED9
;

416 
__IO
 
uöt16_t
 
DR10
;

417 
uöt16_t
 
RESERVED10
;

418 
__IO
 
uöt16_t
 
RTCCR
;

419 
uöt16_t
 
RESERVED11
;

420 
__IO
 
uöt16_t
 
CR
;

421 
uöt16_t
 
RESERVED12
;

422 
__IO
 
uöt16_t
 
CSR
;

423 
uöt16_t
 
RESERVED13
[5];

424 
__IO
 
uöt16_t
 
DR11
;

425 
uöt16_t
 
RESERVED14
;

426 
__IO
 
uöt16_t
 
DR12
;

427 
uöt16_t
 
RESERVED15
;

428 
__IO
 
uöt16_t
 
DR13
;

429 
uöt16_t
 
RESERVED16
;

430 
__IO
 
uöt16_t
 
DR14
;

431 
uöt16_t
 
RESERVED17
;

432 
__IO
 
uöt16_t
 
DR15
;

433 
uöt16_t
 
RESERVED18
;

434 
__IO
 
uöt16_t
 
DR16
;

435 
uöt16_t
 
RESERVED19
;

436 
__IO
 
uöt16_t
 
DR17
;

437 
uöt16_t
 
RESERVED20
;

438 
__IO
 
uöt16_t
 
DR18
;

439 
uöt16_t
 
RESERVED21
;

440 
__IO
 
uöt16_t
 
DR19
;

441 
uöt16_t
 
RESERVED22
;

442 
__IO
 
uöt16_t
 
DR20
;

443 
uöt16_t
 
RESERVED23
;

444 
__IO
 
uöt16_t
 
DR21
;

445 
uöt16_t
 
RESERVED24
;

446 
__IO
 
uöt16_t
 
DR22
;

447 
uöt16_t
 
RESERVED25
;

448 
__IO
 
uöt16_t
 
DR23
;

449 
uöt16_t
 
RESERVED26
;

450 
__IO
 
uöt16_t
 
DR24
;

451 
uöt16_t
 
RESERVED27
;

452 
__IO
 
uöt16_t
 
DR25
;

453 
uöt16_t
 
RESERVED28
;

454 
__IO
 
uöt16_t
 
DR26
;

455 
uöt16_t
 
RESERVED29
;

456 
__IO
 
uöt16_t
 
DR27
;

457 
uöt16_t
 
RESERVED30
;

458 
__IO
 
uöt16_t
 
DR28
;

459 
uöt16_t
 
RESERVED31
;

460 
__IO
 
uöt16_t
 
DR29
;

461 
uöt16_t
 
RESERVED32
;

462 
__IO
 
uöt16_t
 
DR30
;

463 
uöt16_t
 
RESERVED33
;

464 
__IO
 
uöt16_t
 
DR31
;

465 
uöt16_t
 
RESERVED34
;

466 
__IO
 
uöt16_t
 
DR32
;

467 
uöt16_t
 
RESERVED35
;

468 
__IO
 
uöt16_t
 
DR33
;

469 
uöt16_t
 
RESERVED36
;

470 
__IO
 
uöt16_t
 
DR34
;

471 
uöt16_t
 
RESERVED37
;

472 
__IO
 
uöt16_t
 
DR35
;

473 
uöt16_t
 
RESERVED38
;

474 
__IO
 
uöt16_t
 
DR36
;

475 
uöt16_t
 
RESERVED39
;

476 
__IO
 
uöt16_t
 
DR37
;

477 
uöt16_t
 
RESERVED40
;

478 
__IO
 
uöt16_t
 
DR38
;

479 
uöt16_t
 
RESERVED41
;

480 
__IO
 
uöt16_t
 
DR39
;

481 
uöt16_t
 
RESERVED42
;

482 
__IO
 
uöt16_t
 
DR40
;

483 
uöt16_t
 
RESERVED43
;

484 
__IO
 
uöt16_t
 
DR41
;

485 
uöt16_t
 
RESERVED44
;

486 
__IO
 
uöt16_t
 
DR42
;

487 
uöt16_t
 
RESERVED45
;

488 } 
	tBKP_Ty≥Def
;

496 
__IO
 
uöt32_t
 
TIR
;

497 
__IO
 
uöt32_t
 
TDTR
;

498 
__IO
 
uöt32_t
 
TDLR
;

499 
__IO
 
uöt32_t
 
TDHR
;

500 } 
	tCAN_TxMaûBox_Ty≥Def
;

508 
__IO
 
uöt32_t
 
RIR
;

509 
__IO
 
uöt32_t
 
RDTR
;

510 
__IO
 
uöt32_t
 
RDLR
;

511 
__IO
 
uöt32_t
 
RDHR
;

512 } 
	tCAN_FIFOMaûBox_Ty≥Def
;

520 
__IO
 
uöt32_t
 
FR1
;

521 
__IO
 
uöt32_t
 
FR2
;

522 } 
	tCAN_FûãrRegi°î_Ty≥Def
;

530 
__IO
 
uöt32_t
 
MCR
;

531 
__IO
 
uöt32_t
 
MSR
;

532 
__IO
 
uöt32_t
 
TSR
;

533 
__IO
 
uöt32_t
 
RF0R
;

534 
__IO
 
uöt32_t
 
RF1R
;

535 
__IO
 
uöt32_t
 
IER
;

536 
__IO
 
uöt32_t
 
ESR
;

537 
__IO
 
uöt32_t
 
BTR
;

538 
uöt32_t
 
RESERVED0
[88];

539 
CAN_TxMaûBox_Ty≥Def
 
sTxMaûBox
[3];

540 
CAN_FIFOMaûBox_Ty≥Def
 
sFIFOMaûBox
[2];

541 
uöt32_t
 
RESERVED1
[12];

542 
__IO
 
uöt32_t
 
FMR
;

543 
__IO
 
uöt32_t
 
FM1R
;

544 
uöt32_t
 
RESERVED2
;

545 
__IO
 
uöt32_t
 
FS1R
;

546 
uöt32_t
 
RESERVED3
;

547 
__IO
 
uöt32_t
 
FFA1R
;

548 
uöt32_t
 
RESERVED4
;

549 
__IO
 
uöt32_t
 
FA1R
;

550 
uöt32_t
 
RESERVED5
[8];

551 #i‚de‡
STM32F10X_CL


552 
CAN_FûãrRegi°î_Ty≥Def
 
sFûãrRegi°î
[14];

554 
CAN_FûãrRegi°î_Ty≥Def
 
sFûãrRegi°î
[28];

556 } 
	tCAN_Ty≥Def
;

564 
__IO
 
uöt32_t
 
DR
;

565 
__IO
 
uöt8_t
 
IDR
;

566 
uöt8_t
 
RESERVED0
;

567 
uöt16_t
 
RESERVED1
;

568 
__IO
 
uöt32_t
 
CR
;

569 } 
	tCRC_Ty≥Def
;

577 
__IO
 
uöt32_t
 
CR
;

578 
__IO
 
uöt32_t
 
SWTRIGR
;

579 
__IO
 
uöt32_t
 
DHR12R1
;

580 
__IO
 
uöt32_t
 
DHR12L1
;

581 
__IO
 
uöt32_t
 
DHR8R1
;

582 
__IO
 
uöt32_t
 
DHR12R2
;

583 
__IO
 
uöt32_t
 
DHR12L2
;

584 
__IO
 
uöt32_t
 
DHR8R2
;

585 
__IO
 
uöt32_t
 
DHR12RD
;

586 
__IO
 
uöt32_t
 
DHR12LD
;

587 
__IO
 
uöt32_t
 
DHR8RD
;

588 
__IO
 
uöt32_t
 
DOR1
;

589 
__IO
 
uöt32_t
 
DOR2
;

590 } 
	tDAC_Ty≥Def
;

598 
__IO
 
uöt32_t
 
IDCODE
;

599 
__IO
 
uöt32_t
 
CR
;

600 }
	tDBGMCU_Ty≥Def
;

608 
__IO
 
uöt32_t
 
CCR
;

609 
__IO
 
uöt32_t
 
CNDTR
;

610 
__IO
 
uöt32_t
 
CPAR
;

611 
__IO
 
uöt32_t
 
CMAR
;

612 } 
	tDMA_Ch™√l_Ty≥Def
;

616 
__IO
 
uöt32_t
 
ISR
;

617 
__IO
 
uöt32_t
 
IFCR
;

618 } 
	tDMA_Ty≥Def
;

626 
__IO
 
uöt32_t
 
MACCR
;

627 
__IO
 
uöt32_t
 
MACFFR
;

628 
__IO
 
uöt32_t
 
MACHTHR
;

629 
__IO
 
uöt32_t
 
MACHTLR
;

630 
__IO
 
uöt32_t
 
MACMIIAR
;

631 
__IO
 
uöt32_t
 
MACMIIDR
;

632 
__IO
 
uöt32_t
 
MACFCR
;

633 
__IO
 
uöt32_t
 
MACVLANTR
;

634 
uöt32_t
 
RESERVED0
[2];

635 
__IO
 
uöt32_t
 
MACRWUFFR
;

636 
__IO
 
uöt32_t
 
MACPMTCSR
;

637 
uöt32_t
 
RESERVED1
[2];

638 
__IO
 
uöt32_t
 
MACSR
;

639 
__IO
 
uöt32_t
 
MACIMR
;

640 
__IO
 
uöt32_t
 
MACA0HR
;

641 
__IO
 
uöt32_t
 
MACA0LR
;

642 
__IO
 
uöt32_t
 
MACA1HR
;

643 
__IO
 
uöt32_t
 
MACA1LR
;

644 
__IO
 
uöt32_t
 
MACA2HR
;

645 
__IO
 
uöt32_t
 
MACA2LR
;

646 
__IO
 
uöt32_t
 
MACA3HR
;

647 
__IO
 
uöt32_t
 
MACA3LR
;

648 
uöt32_t
 
RESERVED2
[40];

649 
__IO
 
uöt32_t
 
MMCCR
;

650 
__IO
 
uöt32_t
 
MMCRIR
;

651 
__IO
 
uöt32_t
 
MMCTIR
;

652 
__IO
 
uöt32_t
 
MMCRIMR
;

653 
__IO
 
uöt32_t
 
MMCTIMR
;

654 
uöt32_t
 
RESERVED3
[14];

655 
__IO
 
uöt32_t
 
MMCTGFSCCR
;

656 
__IO
 
uöt32_t
 
MMCTGFMSCCR
;

657 
uöt32_t
 
RESERVED4
[5];

658 
__IO
 
uöt32_t
 
MMCTGFCR
;

659 
uöt32_t
 
RESERVED5
[10];

660 
__IO
 
uöt32_t
 
MMCRFCECR
;

661 
__IO
 
uöt32_t
 
MMCRFAECR
;

662 
uöt32_t
 
RESERVED6
[10];

663 
__IO
 
uöt32_t
 
MMCRGUFCR
;

664 
uöt32_t
 
RESERVED7
[334];

665 
__IO
 
uöt32_t
 
PTPTSCR
;

666 
__IO
 
uöt32_t
 
PTPSSIR
;

667 
__IO
 
uöt32_t
 
PTPTSHR
;

668 
__IO
 
uöt32_t
 
PTPTSLR
;

669 
__IO
 
uöt32_t
 
PTPTSHUR
;

670 
__IO
 
uöt32_t
 
PTPTSLUR
;

671 
__IO
 
uöt32_t
 
PTPTSAR
;

672 
__IO
 
uöt32_t
 
PTPTTHR
;

673 
__IO
 
uöt32_t
 
PTPTTLR
;

674 
uöt32_t
 
RESERVED8
[567];

675 
__IO
 
uöt32_t
 
DMABMR
;

676 
__IO
 
uöt32_t
 
DMATPDR
;

677 
__IO
 
uöt32_t
 
DMARPDR
;

678 
__IO
 
uöt32_t
 
DMARDLAR
;

679 
__IO
 
uöt32_t
 
DMATDLAR
;

680 
__IO
 
uöt32_t
 
DMASR
;

681 
__IO
 
uöt32_t
 
DMAOMR
;

682 
__IO
 
uöt32_t
 
DMAIER
;

683 
__IO
 
uöt32_t
 
DMAMFBOCR
;

684 
uöt32_t
 
RESERVED9
[9];

685 
__IO
 
uöt32_t
 
DMACHTDR
;

686 
__IO
 
uöt32_t
 
DMACHRDR
;

687 
__IO
 
uöt32_t
 
DMACHTBAR
;

688 
__IO
 
uöt32_t
 
DMACHRBAR
;

689 } 
	tETH_Ty≥Def
;

697 
__IO
 
uöt32_t
 
IMR
;

698 
__IO
 
uöt32_t
 
EMR
;

699 
__IO
 
uöt32_t
 
RTSR
;

700 
__IO
 
uöt32_t
 
FTSR
;

701 
__IO
 
uöt32_t
 
SWIER
;

702 
__IO
 
uöt32_t
 
PR
;

703 } 
	tEXTI_Ty≥Def
;

711 
__IO
 
uöt32_t
 
ACR
;

712 
__IO
 
uöt32_t
 
KEYR
;

713 
__IO
 
uöt32_t
 
OPTKEYR
;

714 
__IO
 
uöt32_t
 
SR
;

715 
__IO
 
uöt32_t
 
CR
;

716 
__IO
 
uöt32_t
 
AR
;

717 
__IO
 
uöt32_t
 
RESERVED
;

718 
__IO
 
uöt32_t
 
OBR
;

719 
__IO
 
uöt32_t
 
WRPR
;

720 } 
	tFLASH_Ty≥Def
;

728 
__IO
 
uöt16_t
 
RDP
;

729 
__IO
 
uöt16_t
 
USER
;

730 
__IO
 
uöt16_t
 
D©a0
;

731 
__IO
 
uöt16_t
 
D©a1
;

732 
__IO
 
uöt16_t
 
WRP0
;

733 
__IO
 
uöt16_t
 
WRP1
;

734 
__IO
 
uöt16_t
 
WRP2
;

735 
__IO
 
uöt16_t
 
WRP3
;

736 } 
	tOB_Ty≥Def
;

744 
__IO
 
uöt32_t
 
BTCR
[8];

745 } 
	tFSMC_B™k1_Ty≥Def
;

753 
__IO
 
uöt32_t
 
BWTR
[7];

754 } 
	tFSMC_B™k1E_Ty≥Def
;

762 
__IO
 
uöt32_t
 
PCR2
;

763 
__IO
 
uöt32_t
 
SR2
;

764 
__IO
 
uöt32_t
 
PMEM2
;

765 
__IO
 
uöt32_t
 
PATT2
;

766 
uöt32_t
 
RESERVED0
;

767 
__IO
 
uöt32_t
 
ECCR2
;

768 } 
	tFSMC_B™k2_Ty≥Def
;

776 
__IO
 
uöt32_t
 
PCR3
;

777 
__IO
 
uöt32_t
 
SR3
;

778 
__IO
 
uöt32_t
 
PMEM3
;

779 
__IO
 
uöt32_t
 
PATT3
;

780 
uöt32_t
 
RESERVED0
;

781 
__IO
 
uöt32_t
 
ECCR3
;

782 } 
	tFSMC_B™k3_Ty≥Def
;

790 
__IO
 
uöt32_t
 
PCR4
;

791 
__IO
 
uöt32_t
 
SR4
;

792 
__IO
 
uöt32_t
 
PMEM4
;

793 
__IO
 
uöt32_t
 
PATT4
;

794 
__IO
 
uöt32_t
 
PIO4
;

795 } 
	tFSMC_B™k4_Ty≥Def
;

803 
__IO
 
uöt32_t
 
CRL
;

804 
__IO
 
uöt32_t
 
CRH
;

805 
__IO
 
uöt32_t
 
IDR
;

806 
__IO
 
uöt32_t
 
ODR
;

807 
__IO
 
uöt32_t
 
BSRR
;

808 
__IO
 
uöt32_t
 
BRR
;

809 
__IO
 
uöt32_t
 
LCKR
;

810 } 
	tGPIO_Ty≥Def
;

818 
__IO
 
uöt32_t
 
EVCR
;

819 
__IO
 
uöt32_t
 
MAPR
;

820 
__IO
 
uöt32_t
 
EXTICR
[4];

821 } 
	tAFIO_Ty≥Def
;

828 
__IO
 
uöt16_t
 
CR1
;

829 
uöt16_t
 
RESERVED0
;

830 
__IO
 
uöt16_t
 
CR2
;

831 
uöt16_t
 
RESERVED1
;

832 
__IO
 
uöt16_t
 
OAR1
;

833 
uöt16_t
 
RESERVED2
;

834 
__IO
 
uöt16_t
 
OAR2
;

835 
uöt16_t
 
RESERVED3
;

836 
__IO
 
uöt16_t
 
DR
;

837 
uöt16_t
 
RESERVED4
;

838 
__IO
 
uöt16_t
 
SR1
;

839 
uöt16_t
 
RESERVED5
;

840 
__IO
 
uöt16_t
 
SR2
;

841 
uöt16_t
 
RESERVED6
;

842 
__IO
 
uöt16_t
 
CCR
;

843 
uöt16_t
 
RESERVED7
;

844 
__IO
 
uöt16_t
 
TRISE
;

845 
uöt16_t
 
RESERVED8
;

846 } 
	tI2C_Ty≥Def
;

854 
__IO
 
uöt32_t
 
KR
;

855 
__IO
 
uöt32_t
 
PR
;

856 
__IO
 
uöt32_t
 
RLR
;

857 
__IO
 
uöt32_t
 
SR
;

858 } 
	tIWDG_Ty≥Def
;

866 
__IO
 
uöt32_t
 
CR
;

867 
__IO
 
uöt32_t
 
CSR
;

868 } 
	tPWR_Ty≥Def
;

876 
__IO
 
uöt32_t
 
CR
;

877 
__IO
 
uöt32_t
 
CFGR
;

878 
__IO
 
uöt32_t
 
CIR
;

879 
__IO
 
uöt32_t
 
APB2RSTR
;

880 
__IO
 
uöt32_t
 
APB1RSTR
;

881 
__IO
 
uöt32_t
 
AHBENR
;

882 
__IO
 
uöt32_t
 
APB2ENR
;

883 
__IO
 
uöt32_t
 
APB1ENR
;

884 
__IO
 
uöt32_t
 
BDCR
;

885 
__IO
 
uöt32_t
 
CSR
;

886 #ifde‡
STM32F10X_CL


887 
__IO
 
uöt32_t
 
AHBRSTR
;

888 
__IO
 
uöt32_t
 
CFGR2
;

890 } 
	tRCC_Ty≥Def
;

898 
__IO
 
uöt16_t
 
CRH
;

899 
uöt16_t
 
RESERVED0
;

900 
__IO
 
uöt16_t
 
CRL
;

901 
uöt16_t
 
RESERVED1
;

902 
__IO
 
uöt16_t
 
PRLH
;

903 
uöt16_t
 
RESERVED2
;

904 
__IO
 
uöt16_t
 
PRLL
;

905 
uöt16_t
 
RESERVED3
;

906 
__IO
 
uöt16_t
 
DIVH
;

907 
uöt16_t
 
RESERVED4
;

908 
__IO
 
uöt16_t
 
DIVL
;

909 
uöt16_t
 
RESERVED5
;

910 
__IO
 
uöt16_t
 
CNTH
;

911 
uöt16_t
 
RESERVED6
;

912 
__IO
 
uöt16_t
 
CNTL
;

913 
uöt16_t
 
RESERVED7
;

914 
__IO
 
uöt16_t
 
ALRH
;

915 
uöt16_t
 
RESERVED8
;

916 
__IO
 
uöt16_t
 
ALRL
;

917 
uöt16_t
 
RESERVED9
;

918 } 
	tRTC_Ty≥Def
;

926 
__IO
 
uöt32_t
 
POWER
;

927 
__IO
 
uöt32_t
 
CLKCR
;

928 
__IO
 
uöt32_t
 
ARG
;

929 
__IO
 
uöt32_t
 
CMD
;

930 
__I
 
uöt32_t
 
RESPCMD
;

931 
__I
 
uöt32_t
 
RESP1
;

932 
__I
 
uöt32_t
 
RESP2
;

933 
__I
 
uöt32_t
 
RESP3
;

934 
__I
 
uöt32_t
 
RESP4
;

935 
__IO
 
uöt32_t
 
DTIMER
;

936 
__IO
 
uöt32_t
 
DLEN
;

937 
__IO
 
uöt32_t
 
DCTRL
;

938 
__I
 
uöt32_t
 
DCOUNT
;

939 
__I
 
uöt32_t
 
STA
;

940 
__IO
 
uöt32_t
 
ICR
;

941 
__IO
 
uöt32_t
 
MASK
;

942 
uöt32_t
 
RESERVED0
[2];

943 
__I
 
uöt32_t
 
FIFOCNT
;

944 
uöt32_t
 
RESERVED1
[13];

945 
__IO
 
uöt32_t
 
FIFO
;

946 } 
	tSDIO_Ty≥Def
;

954 
__IO
 
uöt16_t
 
CR1
;

955 
uöt16_t
 
RESERVED0
;

956 
__IO
 
uöt16_t
 
CR2
;

957 
uöt16_t
 
RESERVED1
;

958 
__IO
 
uöt16_t
 
SR
;

959 
uöt16_t
 
RESERVED2
;

960 
__IO
 
uöt16_t
 
DR
;

961 
uöt16_t
 
RESERVED3
;

962 
__IO
 
uöt16_t
 
CRCPR
;

963 
uöt16_t
 
RESERVED4
;

964 
__IO
 
uöt16_t
 
RXCRCR
;

965 
uöt16_t
 
RESERVED5
;

966 
__IO
 
uöt16_t
 
TXCRCR
;

967 
uöt16_t
 
RESERVED6
;

968 
__IO
 
uöt16_t
 
I2SCFGR
;

969 
uöt16_t
 
RESERVED7
;

970 
__IO
 
uöt16_t
 
I2SPR
;

971 
uöt16_t
 
RESERVED8
;

972 } 
	tSPI_Ty≥Def
;

980 
__IO
 
uöt16_t
 
CR1
;

981 
uöt16_t
 
RESERVED0
;

982 
__IO
 
uöt16_t
 
CR2
;

983 
uöt16_t
 
RESERVED1
;

984 
__IO
 
uöt16_t
 
SMCR
;

985 
uöt16_t
 
RESERVED2
;

986 
__IO
 
uöt16_t
 
DIER
;

987 
uöt16_t
 
RESERVED3
;

988 
__IO
 
uöt16_t
 
SR
;

989 
uöt16_t
 
RESERVED4
;

990 
__IO
 
uöt16_t
 
EGR
;

991 
uöt16_t
 
RESERVED5
;

992 
__IO
 
uöt16_t
 
CCMR1
;

993 
uöt16_t
 
RESERVED6
;

994 
__IO
 
uöt16_t
 
CCMR2
;

995 
uöt16_t
 
RESERVED7
;

996 
__IO
 
uöt16_t
 
CCER
;

997 
uöt16_t
 
RESERVED8
;

998 
__IO
 
uöt16_t
 
CNT
;

999 
uöt16_t
 
RESERVED9
;

1000 
__IO
 
uöt16_t
 
PSC
;

1001 
uöt16_t
 
RESERVED10
;

1002 
__IO
 
uöt16_t
 
ARR
;

1003 
uöt16_t
 
RESERVED11
;

1004 
__IO
 
uöt16_t
 
RCR
;

1005 
uöt16_t
 
RESERVED12
;

1006 
__IO
 
uöt16_t
 
CCR1
;

1007 
uöt16_t
 
RESERVED13
;

1008 
__IO
 
uöt16_t
 
CCR2
;

1009 
uöt16_t
 
RESERVED14
;

1010 
__IO
 
uöt16_t
 
CCR3
;

1011 
uöt16_t
 
RESERVED15
;

1012 
__IO
 
uöt16_t
 
CCR4
;

1013 
uöt16_t
 
RESERVED16
;

1014 
__IO
 
uöt16_t
 
BDTR
;

1015 
uöt16_t
 
RESERVED17
;

1016 
__IO
 
uöt16_t
 
DCR
;

1017 
uöt16_t
 
RESERVED18
;

1018 
__IO
 
uöt16_t
 
DMAR
;

1019 
uöt16_t
 
RESERVED19
;

1020 } 
	tTIM_Ty≥Def
;

1028 
__IO
 
uöt16_t
 
SR
;

1029 
uöt16_t
 
RESERVED0
;

1030 
__IO
 
uöt16_t
 
DR
;

1031 
uöt16_t
 
RESERVED1
;

1032 
__IO
 
uöt16_t
 
BRR
;

1033 
uöt16_t
 
RESERVED2
;

1034 
__IO
 
uöt16_t
 
CR1
;

1035 
uöt16_t
 
RESERVED3
;

1036 
__IO
 
uöt16_t
 
CR2
;

1037 
uöt16_t
 
RESERVED4
;

1038 
__IO
 
uöt16_t
 
CR3
;

1039 
uöt16_t
 
RESERVED5
;

1040 
__IO
 
uöt16_t
 
GTPR
;

1041 
uöt16_t
 
RESERVED6
;

1042 } 
	tUSART_Ty≥Def
;

1050 
__IO
 
uöt32_t
 
CR
;

1051 
__IO
 
uöt32_t
 
CFR
;

1052 
__IO
 
uöt32_t
 
SR
;

1053 } 
	tWWDG_Ty≥Def
;

1063 
	#PERIPH_BB_BASE
 ((
uöt32_t
)0x42000000Ë

	)

1064 
	#SRAM_BB_BASE
 ((
uöt32_t
)0x22000000Ë

	)

1066 
	#SRAM_BASE
 ((
uöt32_t
)0x20000000Ë

	)

1067 
	#PERIPH_BASE
 ((
uöt32_t
)0x40000000Ë

	)

1069 
	#FSMC_R_BASE
 ((
uöt32_t
)0xA0000000Ë

	)

1072 
	#APB1PERIPH_BASE
 
PERIPH_BASE


	)

1073 
	#APB2PERIPH_BASE
 (
PERIPH_BASE
 + 0x10000)

	)

1074 
	#AHBPERIPH_BASE
 (
PERIPH_BASE
 + 0x20000)

	)

1076 
	#TIM2_BASE
 (
APB1PERIPH_BASE
 + 0x0000)

	)

1077 
	#TIM3_BASE
 (
APB1PERIPH_BASE
 + 0x0400)

	)

1078 
	#TIM4_BASE
 (
APB1PERIPH_BASE
 + 0x0800)

	)

1079 
	#TIM5_BASE
 (
APB1PERIPH_BASE
 + 0x0C00)

	)

1080 
	#TIM6_BASE
 (
APB1PERIPH_BASE
 + 0x1000)

	)

1081 
	#TIM7_BASE
 (
APB1PERIPH_BASE
 + 0x1400)

	)

1082 
	#RTC_BASE
 (
APB1PERIPH_BASE
 + 0x2800)

	)

1083 
	#WWDG_BASE
 (
APB1PERIPH_BASE
 + 0x2C00)

	)

1084 
	#IWDG_BASE
 (
APB1PERIPH_BASE
 + 0x3000)

	)

1085 
	#SPI2_BASE
 (
APB1PERIPH_BASE
 + 0x3800)

	)

1086 
	#SPI3_BASE
 (
APB1PERIPH_BASE
 + 0x3C00)

	)

1087 
	#USART2_BASE
 (
APB1PERIPH_BASE
 + 0x4400)

	)

1088 
	#USART3_BASE
 (
APB1PERIPH_BASE
 + 0x4800)

	)

1089 
	#UART4_BASE
 (
APB1PERIPH_BASE
 + 0x4C00)

	)

1090 
	#UART5_BASE
 (
APB1PERIPH_BASE
 + 0x5000)

	)

1091 
	#I2C1_BASE
 (
APB1PERIPH_BASE
 + 0x5400)

	)

1092 
	#I2C2_BASE
 (
APB1PERIPH_BASE
 + 0x5800)

	)

1093 
	#CAN1_BASE
 (
APB1PERIPH_BASE
 + 0x6400)

	)

1094 
	#CAN2_BASE
 (
APB1PERIPH_BASE
 + 0x6800)

	)

1095 
	#BKP_BASE
 (
APB1PERIPH_BASE
 + 0x6C00)

	)

1096 
	#PWR_BASE
 (
APB1PERIPH_BASE
 + 0x7000)

	)

1097 
	#DAC_BASE
 (
APB1PERIPH_BASE
 + 0x7400)

	)

1099 
	#AFIO_BASE
 (
APB2PERIPH_BASE
 + 0x0000)

	)

1100 
	#EXTI_BASE
 (
APB2PERIPH_BASE
 + 0x0400)

	)

1101 
	#GPIOA_BASE
 (
APB2PERIPH_BASE
 + 0x0800)

	)

1102 
	#GPIOB_BASE
 (
APB2PERIPH_BASE
 + 0x0C00)

	)

1103 
	#GPIOC_BASE
 (
APB2PERIPH_BASE
 + 0x1000)

	)

1104 
	#GPIOD_BASE
 (
APB2PERIPH_BASE
 + 0x1400)

	)

1105 
	#GPIOE_BASE
 (
APB2PERIPH_BASE
 + 0x1800)

	)

1106 
	#GPIOF_BASE
 (
APB2PERIPH_BASE
 + 0x1C00)

	)

1107 
	#GPIOG_BASE
 (
APB2PERIPH_BASE
 + 0x2000)

	)

1108 
	#ADC1_BASE
 (
APB2PERIPH_BASE
 + 0x2400)

	)

1109 
	#ADC2_BASE
 (
APB2PERIPH_BASE
 + 0x2800)

	)

1110 
	#TIM1_BASE
 (
APB2PERIPH_BASE
 + 0x2C00)

	)

1111 
	#SPI1_BASE
 (
APB2PERIPH_BASE
 + 0x3000)

	)

1112 
	#TIM8_BASE
 (
APB2PERIPH_BASE
 + 0x3400)

	)

1113 
	#USART1_BASE
 (
APB2PERIPH_BASE
 + 0x3800)

	)

1114 
	#ADC3_BASE
 (
APB2PERIPH_BASE
 + 0x3C00)

	)

1116 
	#SDIO_BASE
 (
PERIPH_BASE
 + 0x18000)

	)

1118 
	#DMA1_BASE
 (
AHBPERIPH_BASE
 + 0x0000)

	)

1119 
	#DMA1_Ch™√l1_BASE
 (
AHBPERIPH_BASE
 + 0x0008)

	)

1120 
	#DMA1_Ch™√l2_BASE
 (
AHBPERIPH_BASE
 + 0x001C)

	)

1121 
	#DMA1_Ch™√l3_BASE
 (
AHBPERIPH_BASE
 + 0x0030)

	)

1122 
	#DMA1_Ch™√l4_BASE
 (
AHBPERIPH_BASE
 + 0x0044)

	)

1123 
	#DMA1_Ch™√l5_BASE
 (
AHBPERIPH_BASE
 + 0x0058)

	)

1124 
	#DMA1_Ch™√l6_BASE
 (
AHBPERIPH_BASE
 + 0x006C)

	)

1125 
	#DMA1_Ch™√l7_BASE
 (
AHBPERIPH_BASE
 + 0x0080)

	)

1126 
	#DMA2_BASE
 (
AHBPERIPH_BASE
 + 0x0400)

	)

1127 
	#DMA2_Ch™√l1_BASE
 (
AHBPERIPH_BASE
 + 0x0408)

	)

1128 
	#DMA2_Ch™√l2_BASE
 (
AHBPERIPH_BASE
 + 0x041C)

	)

1129 
	#DMA2_Ch™√l3_BASE
 (
AHBPERIPH_BASE
 + 0x0430)

	)

1130 
	#DMA2_Ch™√l4_BASE
 (
AHBPERIPH_BASE
 + 0x0444)

	)

1131 
	#DMA2_Ch™√l5_BASE
 (
AHBPERIPH_BASE
 + 0x0458)

	)

1132 
	#RCC_BASE
 (
AHBPERIPH_BASE
 + 0x1000)

	)

1133 
	#CRC_BASE
 (
AHBPERIPH_BASE
 + 0x3000)

	)

1135 
	#FLASH_R_BASE
 (
AHBPERIPH_BASE
 + 0x2000Ë

	)

1136 
	#OB_BASE
 ((
uöt32_t
)0x1FFFF800Ë

	)

1138 
	#ETH_BASE
 (
AHBPERIPH_BASE
 + 0x8000)

	)

1139 
	#ETH_MAC_BASE
 (
ETH_BASE
)

	)

1140 
	#ETH_MMC_BASE
 (
ETH_BASE
 + 0x0100)

	)

1141 
	#ETH_PTP_BASE
 (
ETH_BASE
 + 0x0700)

	)

1142 
	#ETH_DMA_BASE
 (
ETH_BASE
 + 0x1000)

	)

1144 
	#FSMC_B™k1_R_BASE
 (
FSMC_R_BASE
 + 0x0000Ë

	)

1145 
	#FSMC_B™k1E_R_BASE
 (
FSMC_R_BASE
 + 0x0104Ë

	)

1146 
	#FSMC_B™k2_R_BASE
 (
FSMC_R_BASE
 + 0x0060Ë

	)

1147 
	#FSMC_B™k3_R_BASE
 (
FSMC_R_BASE
 + 0x0080Ë

	)

1148 
	#FSMC_B™k4_R_BASE
 (
FSMC_R_BASE
 + 0x00A0Ë

	)

1150 
	#DBGMCU_BASE
 ((
uöt32_t
)0xE0042000Ë

	)

1160 
	#TIM2
 ((
TIM_Ty≥Def
 *Ë
TIM2_BASE
)

	)

1161 
	#TIM3
 ((
TIM_Ty≥Def
 *Ë
TIM3_BASE
)

	)

1162 
	#TIM4
 ((
TIM_Ty≥Def
 *Ë
TIM4_BASE
)

	)

1163 
	#TIM5
 ((
TIM_Ty≥Def
 *Ë
TIM5_BASE
)

	)

1164 
	#TIM6
 ((
TIM_Ty≥Def
 *Ë
TIM6_BASE
)

	)

1165 
	#TIM7
 ((
TIM_Ty≥Def
 *Ë
TIM7_BASE
)

	)

1166 
	#RTC
 ((
RTC_Ty≥Def
 *Ë
RTC_BASE
)

	)

1167 
	#WWDG
 ((
WWDG_Ty≥Def
 *Ë
WWDG_BASE
)

	)

1168 
	#IWDG
 ((
IWDG_Ty≥Def
 *Ë
IWDG_BASE
)

	)

1169 
	#SPI2
 ((
SPI_Ty≥Def
 *Ë
SPI2_BASE
)

	)

1170 
	#SPI3
 ((
SPI_Ty≥Def
 *Ë
SPI3_BASE
)

	)

1171 
	#USART2
 ((
USART_Ty≥Def
 *Ë
USART2_BASE
)

	)

1172 
	#USART3
 ((
USART_Ty≥Def
 *Ë
USART3_BASE
)

	)

1173 
	#UART4
 ((
USART_Ty≥Def
 *Ë
UART4_BASE
)

	)

1174 
	#UART5
 ((
USART_Ty≥Def
 *Ë
UART5_BASE
)

	)

1175 
	#I2C1
 ((
I2C_Ty≥Def
 *Ë
I2C1_BASE
)

	)

1176 
	#I2C2
 ((
I2C_Ty≥Def
 *Ë
I2C2_BASE
)

	)

1177 
	#CAN1
 ((
CAN_Ty≥Def
 *Ë
CAN1_BASE
)

	)

1178 
	#CAN2
 ((
CAN_Ty≥Def
 *Ë
CAN2_BASE
)

	)

1179 
	#BKP
 ((
BKP_Ty≥Def
 *Ë
BKP_BASE
)

	)

1180 
	#PWR
 ((
PWR_Ty≥Def
 *Ë
PWR_BASE
)

	)

1181 
	#DAC
 ((
DAC_Ty≥Def
 *Ë
DAC_BASE
)

	)

1182 
	#AFIO
 ((
AFIO_Ty≥Def
 *Ë
AFIO_BASE
)

	)

1183 
	#EXTI
 ((
EXTI_Ty≥Def
 *Ë
EXTI_BASE
)

	)

1184 
	#GPIOA
 ((
GPIO_Ty≥Def
 *Ë
GPIOA_BASE
)

	)

1185 
	#GPIOB
 ((
GPIO_Ty≥Def
 *Ë
GPIOB_BASE
)

	)

1186 
	#GPIOC
 ((
GPIO_Ty≥Def
 *Ë
GPIOC_BASE
)

	)

1187 
	#GPIOD
 ((
GPIO_Ty≥Def
 *Ë
GPIOD_BASE
)

	)

1188 
	#GPIOE
 ((
GPIO_Ty≥Def
 *Ë
GPIOE_BASE
)

	)

1189 
	#GPIOF
 ((
GPIO_Ty≥Def
 *Ë
GPIOF_BASE
)

	)

1190 
	#GPIOG
 ((
GPIO_Ty≥Def
 *Ë
GPIOG_BASE
)

	)

1191 
	#ADC1
 ((
ADC_Ty≥Def
 *Ë
ADC1_BASE
)

	)

1192 
	#ADC2
 ((
ADC_Ty≥Def
 *Ë
ADC2_BASE
)

	)

1193 
	#TIM1
 ((
TIM_Ty≥Def
 *Ë
TIM1_BASE
)

	)

1194 
	#SPI1
 ((
SPI_Ty≥Def
 *Ë
SPI1_BASE
)

	)

1195 
	#TIM8
 ((
TIM_Ty≥Def
 *Ë
TIM8_BASE
)

	)

1196 
	#USART1
 ((
USART_Ty≥Def
 *Ë
USART1_BASE
)

	)

1197 
	#ADC3
 ((
ADC_Ty≥Def
 *Ë
ADC3_BASE
)

	)

1198 
	#SDIO
 ((
SDIO_Ty≥Def
 *Ë
SDIO_BASE
)

	)

1199 
	#DMA1
 ((
DMA_Ty≥Def
 *Ë
DMA1_BASE
)

	)

1200 
	#DMA2
 ((
DMA_Ty≥Def
 *Ë
DMA2_BASE
)

	)

1201 
	#DMA1_Ch™√l1
 ((
DMA_Ch™√l_Ty≥Def
 *Ë
DMA1_Ch™√l1_BASE
)

	)

1202 
	#DMA1_Ch™√l2
 ((
DMA_Ch™√l_Ty≥Def
 *Ë
DMA1_Ch™√l2_BASE
)

	)

1203 
	#DMA1_Ch™√l3
 ((
DMA_Ch™√l_Ty≥Def
 *Ë
DMA1_Ch™√l3_BASE
)

	)

1204 
	#DMA1_Ch™√l4
 ((
DMA_Ch™√l_Ty≥Def
 *Ë
DMA1_Ch™√l4_BASE
)

	)

1205 
	#DMA1_Ch™√l5
 ((
DMA_Ch™√l_Ty≥Def
 *Ë
DMA1_Ch™√l5_BASE
)

	)

1206 
	#DMA1_Ch™√l6
 ((
DMA_Ch™√l_Ty≥Def
 *Ë
DMA1_Ch™√l6_BASE
)

	)

1207 
	#DMA1_Ch™√l7
 ((
DMA_Ch™√l_Ty≥Def
 *Ë
DMA1_Ch™√l7_BASE
)

	)

1208 
	#DMA2_Ch™√l1
 ((
DMA_Ch™√l_Ty≥Def
 *Ë
DMA2_Ch™√l1_BASE
)

	)

1209 
	#DMA2_Ch™√l2
 ((
DMA_Ch™√l_Ty≥Def
 *Ë
DMA2_Ch™√l2_BASE
)

	)

1210 
	#DMA2_Ch™√l3
 ((
DMA_Ch™√l_Ty≥Def
 *Ë
DMA2_Ch™√l3_BASE
)

	)

1211 
	#DMA2_Ch™√l4
 ((
DMA_Ch™√l_Ty≥Def
 *Ë
DMA2_Ch™√l4_BASE
)

	)

1212 
	#DMA2_Ch™√l5
 ((
DMA_Ch™√l_Ty≥Def
 *Ë
DMA2_Ch™√l5_BASE
)

	)

1213 
	#RCC
 ((
RCC_Ty≥Def
 *Ë
RCC_BASE
)

	)

1214 
	#CRC
 ((
CRC_Ty≥Def
 *Ë
CRC_BASE
)

	)

1215 
	#FLASH
 ((
FLASH_Ty≥Def
 *Ë
FLASH_R_BASE
)

	)

1216 
	#OB
 ((
OB_Ty≥Def
 *Ë
OB_BASE
)

	)

1217 
	#ETH
 ((
ETH_Ty≥Def
 *Ë
ETH_BASE
)

	)

1218 
	#FSMC_B™k1
 ((
FSMC_B™k1_Ty≥Def
 *Ë
FSMC_B™k1_R_BASE
)

	)

1219 
	#FSMC_B™k1E
 ((
FSMC_B™k1E_Ty≥Def
 *Ë
FSMC_B™k1E_R_BASE
)

	)

1220 
	#FSMC_B™k2
 ((
FSMC_B™k2_Ty≥Def
 *Ë
FSMC_B™k2_R_BASE
)

	)

1221 
	#FSMC_B™k3
 ((
FSMC_B™k3_Ty≥Def
 *Ë
FSMC_B™k3_R_BASE
)

	)

1222 
	#FSMC_B™k4
 ((
FSMC_B™k4_Ty≥Def
 *Ë
FSMC_B™k4_R_BASE
)

	)

1223 
	#DBGMCU
 ((
DBGMCU_Ty≥Def
 *Ë
DBGMCU_BASE
)

	)

1248 
	#CRC_DR_DR
 ((
uöt32_t
)0xFFFFFFFFË

	)

1252 
	#CRC_IDR_IDR
 ((
uöt8_t
)0xFFË

	)

1256 
	#CRC_CR_RESET
 ((
uöt8_t
)0x01Ë

	)

1265 
	#PWR_CR_LPDS
 ((
uöt16_t
)0x0001Ë

	)

1266 
	#PWR_CR_PDDS
 ((
uöt16_t
)0x0002Ë

	)

1267 
	#PWR_CR_CWUF
 ((
uöt16_t
)0x0004Ë

	)

1268 
	#PWR_CR_CSBF
 ((
uöt16_t
)0x0008Ë

	)

1269 
	#PWR_CR_PVDE
 ((
uöt16_t
)0x0010Ë

	)

1271 
	#PWR_CR_PLS
 ((
uöt16_t
)0x00E0Ë

	)

1272 
	#PWR_CR_PLS_0
 ((
uöt16_t
)0x0020Ë

	)

1273 
	#PWR_CR_PLS_1
 ((
uöt16_t
)0x0040Ë

	)

1274 
	#PWR_CR_PLS_2
 ((
uöt16_t
)0x0080Ë

	)

1277 
	#PWR_CR_PLS_2V2
 ((
uöt16_t
)0x0000Ë

	)

1278 
	#PWR_CR_PLS_2V3
 ((
uöt16_t
)0x0020Ë

	)

1279 
	#PWR_CR_PLS_2V4
 ((
uöt16_t
)0x0040Ë

	)

1280 
	#PWR_CR_PLS_2V5
 ((
uöt16_t
)0x0060Ë

	)

1281 
	#PWR_CR_PLS_2V6
 ((
uöt16_t
)0x0080Ë

	)

1282 
	#PWR_CR_PLS_2V7
 ((
uöt16_t
)0x00A0Ë

	)

1283 
	#PWR_CR_PLS_2V8
 ((
uöt16_t
)0x00C0Ë

	)

1284 
	#PWR_CR_PLS_2V9
 ((
uöt16_t
)0x00E0Ë

	)

1286 
	#PWR_CR_DBP
 ((
uöt16_t
)0x0100Ë

	)

1290 
	#PWR_CSR_WUF
 ((
uöt16_t
)0x0001Ë

	)

1291 
	#PWR_CSR_SBF
 ((
uöt16_t
)0x0002Ë

	)

1292 
	#PWR_CSR_PVDO
 ((
uöt16_t
)0x0004Ë

	)

1293 
	#PWR_CSR_EWUP
 ((
uöt16_t
)0x0100Ë

	)

1302 
	#BKP_DR1_D
 ((
uöt16_t
)0xFFFFË

	)

1305 
	#BKP_DR2_D
 ((
uöt16_t
)0xFFFFË

	)

1308 
	#BKP_DR3_D
 ((
uöt16_t
)0xFFFFË

	)

1311 
	#BKP_DR4_D
 ((
uöt16_t
)0xFFFFË

	)

1314 
	#BKP_DR5_D
 ((
uöt16_t
)0xFFFFË

	)

1317 
	#BKP_DR6_D
 ((
uöt16_t
)0xFFFFË

	)

1320 
	#BKP_DR7_D
 ((
uöt16_t
)0xFFFFË

	)

1323 
	#BKP_DR8_D
 ((
uöt16_t
)0xFFFFË

	)

1326 
	#BKP_DR9_D
 ((
uöt16_t
)0xFFFFË

	)

1329 
	#BKP_DR10_D
 ((
uöt16_t
)0xFFFFË

	)

1332 
	#BKP_DR11_D
 ((
uöt16_t
)0xFFFFË

	)

1335 
	#BKP_DR12_D
 ((
uöt16_t
)0xFFFFË

	)

1338 
	#BKP_DR13_D
 ((
uöt16_t
)0xFFFFË

	)

1341 
	#BKP_DR14_D
 ((
uöt16_t
)0xFFFFË

	)

1344 
	#BKP_DR15_D
 ((
uöt16_t
)0xFFFFË

	)

1347 
	#BKP_DR16_D
 ((
uöt16_t
)0xFFFFË

	)

1350 
	#BKP_DR17_D
 ((
uöt16_t
)0xFFFFË

	)

1353 
	#BKP_DR18_D
 ((
uöt16_t
)0xFFFFË

	)

1356 
	#BKP_DR19_D
 ((
uöt16_t
)0xFFFFË

	)

1359 
	#BKP_DR20_D
 ((
uöt16_t
)0xFFFFË

	)

1362 
	#BKP_DR21_D
 ((
uöt16_t
)0xFFFFË

	)

1365 
	#BKP_DR22_D
 ((
uöt16_t
)0xFFFFË

	)

1368 
	#BKP_DR23_D
 ((
uöt16_t
)0xFFFFË

	)

1371 
	#BKP_DR24_D
 ((
uöt16_t
)0xFFFFË

	)

1374 
	#BKP_DR25_D
 ((
uöt16_t
)0xFFFFË

	)

1377 
	#BKP_DR26_D
 ((
uöt16_t
)0xFFFFË

	)

1380 
	#BKP_DR27_D
 ((
uöt16_t
)0xFFFFË

	)

1383 
	#BKP_DR28_D
 ((
uöt16_t
)0xFFFFË

	)

1386 
	#BKP_DR29_D
 ((
uöt16_t
)0xFFFFË

	)

1389 
	#BKP_DR30_D
 ((
uöt16_t
)0xFFFFË

	)

1392 
	#BKP_DR31_D
 ((
uöt16_t
)0xFFFFË

	)

1395 
	#BKP_DR32_D
 ((
uöt16_t
)0xFFFFË

	)

1398 
	#BKP_DR33_D
 ((
uöt16_t
)0xFFFFË

	)

1401 
	#BKP_DR34_D
 ((
uöt16_t
)0xFFFFË

	)

1404 
	#BKP_DR35_D
 ((
uöt16_t
)0xFFFFË

	)

1407 
	#BKP_DR36_D
 ((
uöt16_t
)0xFFFFË

	)

1410 
	#BKP_DR37_D
 ((
uöt16_t
)0xFFFFË

	)

1413 
	#BKP_DR38_D
 ((
uöt16_t
)0xFFFFË

	)

1416 
	#BKP_DR39_D
 ((
uöt16_t
)0xFFFFË

	)

1419 
	#BKP_DR40_D
 ((
uöt16_t
)0xFFFFË

	)

1422 
	#BKP_DR41_D
 ((
uöt16_t
)0xFFFFË

	)

1425 
	#BKP_DR42_D
 ((
uöt16_t
)0xFFFFË

	)

1428 
	#BKP_RTCCR_CAL
 ((
uöt16_t
)0x007FË

	)

1429 
	#BKP_RTCCR_CCO
 ((
uöt16_t
)0x0080Ë

	)

1430 
	#BKP_RTCCR_ASOE
 ((
uöt16_t
)0x0100Ë

	)

1431 
	#BKP_RTCCR_ASOS
 ((
uöt16_t
)0x0200Ë

	)

1434 
	#BKP_CR_TPE
 ((
uöt8_t
)0x01Ë

	)

1435 
	#BKP_CR_TPAL
 ((
uöt8_t
)0x02Ë

	)

1438 
	#BKP_CSR_CTE
 ((
uöt16_t
)0x0001Ë

	)

1439 
	#BKP_CSR_CTI
 ((
uöt16_t
)0x0002Ë

	)

1440 
	#BKP_CSR_TPIE
 ((
uöt16_t
)0x0004Ë

	)

1441 
	#BKP_CSR_TEF
 ((
uöt16_t
)0x0100Ë

	)

1442 
	#BKP_CSR_TIF
 ((
uöt16_t
)0x0200Ë

	)

1451 
	#RCC_CR_HSION
 ((
uöt32_t
)0x00000001Ë

	)

1452 
	#RCC_CR_HSIRDY
 ((
uöt32_t
)0x00000002Ë

	)

1453 
	#RCC_CR_HSITRIM
 ((
uöt32_t
)0x000000F8Ë

	)

1454 
	#RCC_CR_HSICAL
 ((
uöt32_t
)0x0000FF00Ë

	)

1455 
	#RCC_CR_HSEON
 ((
uöt32_t
)0x00010000Ë

	)

1456 
	#RCC_CR_HSERDY
 ((
uöt32_t
)0x00020000Ë

	)

1457 
	#RCC_CR_HSEBYP
 ((
uöt32_t
)0x00040000Ë

	)

1458 
	#RCC_CR_CSSON
 ((
uöt32_t
)0x00080000Ë

	)

1459 
	#RCC_CR_PLLON
 ((
uöt32_t
)0x01000000Ë

	)

1460 
	#RCC_CR_PLLRDY
 ((
uöt32_t
)0x02000000Ë

	)

1462 #ifde‡
STM32F10X_CL


1463 
	#RCC_CR_PLL2ON
 ((
uöt32_t
)0x04000000Ë

	)

1464 
	#RCC_CR_PLL2RDY
 ((
uöt32_t
)0x08000000Ë

	)

1465 
	#RCC_CR_PLL3ON
 ((
uöt32_t
)0x10000000Ë

	)

1466 
	#RCC_CR_PLL3RDY
 ((
uöt32_t
)0x20000000Ë

	)

1471 
	#RCC_CFGR_SW
 ((
uöt32_t
)0x00000003Ë

	)

1472 
	#RCC_CFGR_SW_0
 ((
uöt32_t
)0x00000001Ë

	)

1473 
	#RCC_CFGR_SW_1
 ((
uöt32_t
)0x00000002Ë

	)

1475 
	#RCC_CFGR_SW_HSI
 ((
uöt32_t
)0x00000000Ë

	)

1476 
	#RCC_CFGR_SW_HSE
 ((
uöt32_t
)0x00000001Ë

	)

1477 
	#RCC_CFGR_SW_PLL
 ((
uöt32_t
)0x00000002Ë

	)

1480 
	#RCC_CFGR_SWS
 ((
uöt32_t
)0x0000000CË

	)

1481 
	#RCC_CFGR_SWS_0
 ((
uöt32_t
)0x00000004Ë

	)

1482 
	#RCC_CFGR_SWS_1
 ((
uöt32_t
)0x00000008Ë

	)

1484 
	#RCC_CFGR_SWS_HSI
 ((
uöt32_t
)0x00000000Ë

	)

1485 
	#RCC_CFGR_SWS_HSE
 ((
uöt32_t
)0x00000004Ë

	)

1486 
	#RCC_CFGR_SWS_PLL
 ((
uöt32_t
)0x00000008Ë

	)

1489 
	#RCC_CFGR_HPRE
 ((
uöt32_t
)0x000000F0Ë

	)

1490 
	#RCC_CFGR_HPRE_0
 ((
uöt32_t
)0x00000010Ë

	)

1491 
	#RCC_CFGR_HPRE_1
 ((
uöt32_t
)0x00000020Ë

	)

1492 
	#RCC_CFGR_HPRE_2
 ((
uöt32_t
)0x00000040Ë

	)

1493 
	#RCC_CFGR_HPRE_3
 ((
uöt32_t
)0x00000080Ë

	)

1495 
	#RCC_CFGR_HPRE_DIV1
 ((
uöt32_t
)0x00000000Ë

	)

1496 
	#RCC_CFGR_HPRE_DIV2
 ((
uöt32_t
)0x00000080Ë

	)

1497 
	#RCC_CFGR_HPRE_DIV4
 ((
uöt32_t
)0x00000090Ë

	)

1498 
	#RCC_CFGR_HPRE_DIV8
 ((
uöt32_t
)0x000000A0Ë

	)

1499 
	#RCC_CFGR_HPRE_DIV16
 ((
uöt32_t
)0x000000B0Ë

	)

1500 
	#RCC_CFGR_HPRE_DIV64
 ((
uöt32_t
)0x000000C0Ë

	)

1501 
	#RCC_CFGR_HPRE_DIV128
 ((
uöt32_t
)0x000000D0Ë

	)

1502 
	#RCC_CFGR_HPRE_DIV256
 ((
uöt32_t
)0x000000E0Ë

	)

1503 
	#RCC_CFGR_HPRE_DIV512
 ((
uöt32_t
)0x000000F0Ë

	)

1506 
	#RCC_CFGR_PPRE1
 ((
uöt32_t
)0x00000700Ë

	)

1507 
	#RCC_CFGR_PPRE1_0
 ((
uöt32_t
)0x00000100Ë

	)

1508 
	#RCC_CFGR_PPRE1_1
 ((
uöt32_t
)0x00000200Ë

	)

1509 
	#RCC_CFGR_PPRE1_2
 ((
uöt32_t
)0x00000400Ë

	)

1511 
	#RCC_CFGR_PPRE1_DIV1
 ((
uöt32_t
)0x00000000Ë

	)

1512 
	#RCC_CFGR_PPRE1_DIV2
 ((
uöt32_t
)0x00000400Ë

	)

1513 
	#RCC_CFGR_PPRE1_DIV4
 ((
uöt32_t
)0x00000500Ë

	)

1514 
	#RCC_CFGR_PPRE1_DIV8
 ((
uöt32_t
)0x00000600Ë

	)

1515 
	#RCC_CFGR_PPRE1_DIV16
 ((
uöt32_t
)0x00000700Ë

	)

1518 
	#RCC_CFGR_PPRE2
 ((
uöt32_t
)0x00003800Ë

	)

1519 
	#RCC_CFGR_PPRE2_0
 ((
uöt32_t
)0x00000800Ë

	)

1520 
	#RCC_CFGR_PPRE2_1
 ((
uöt32_t
)0x00001000Ë

	)

1521 
	#RCC_CFGR_PPRE2_2
 ((
uöt32_t
)0x00002000Ë

	)

1523 
	#RCC_CFGR_PPRE2_DIV1
 ((
uöt32_t
)0x00000000Ë

	)

1524 
	#RCC_CFGR_PPRE2_DIV2
 ((
uöt32_t
)0x00002000Ë

	)

1525 
	#RCC_CFGR_PPRE2_DIV4
 ((
uöt32_t
)0x00002800Ë

	)

1526 
	#RCC_CFGR_PPRE2_DIV8
 ((
uöt32_t
)0x00003000Ë

	)

1527 
	#RCC_CFGR_PPRE2_DIV16
 ((
uöt32_t
)0x00003800Ë

	)

1530 
	#RCC_CFGR_ADCPRE
 ((
uöt32_t
)0x0000C000Ë

	)

1531 
	#RCC_CFGR_ADCPRE_0
 ((
uöt32_t
)0x00004000Ë

	)

1532 
	#RCC_CFGR_ADCPRE_1
 ((
uöt32_t
)0x00008000Ë

	)

1534 
	#RCC_CFGR_ADCPRE_DIV2
 ((
uöt32_t
)0x00000000Ë

	)

1535 
	#RCC_CFGR_ADCPRE_DIV4
 ((
uöt32_t
)0x00004000Ë

	)

1536 
	#RCC_CFGR_ADCPRE_DIV6
 ((
uöt32_t
)0x00008000Ë

	)

1537 
	#RCC_CFGR_ADCPRE_DIV8
 ((
uöt32_t
)0x0000C000Ë

	)

1539 
	#RCC_CFGR_PLLSRC
 ((
uöt32_t
)0x00010000Ë

	)

1541 
	#RCC_CFGR_PLLXTPRE
 ((
uöt32_t
)0x00020000Ë

	)

1544 
	#RCC_CFGR_PLLMULL
 ((
uöt32_t
)0x003C0000Ë

	)

1545 
	#RCC_CFGR_PLLMULL_0
 ((
uöt32_t
)0x00040000Ë

	)

1546 
	#RCC_CFGR_PLLMULL_1
 ((
uöt32_t
)0x00080000Ë

	)

1547 
	#RCC_CFGR_PLLMULL_2
 ((
uöt32_t
)0x00100000Ë

	)

1548 
	#RCC_CFGR_PLLMULL_3
 ((
uöt32_t
)0x00200000Ë

	)

1550 #ifde‡
STM32F10X_CL


1551 
	#RCC_CFGR_PLLSRC_HSI_Div2
 ((
uöt32_t
)0x00000000Ë

	)

1552 
	#RCC_CFGR_PLLSRC_PREDIV1
 ((
uöt32_t
)0x00010000Ë

	)

1554 
	#RCC_CFGR_PLLXTPRE_PREDIV1
 ((
uöt32_t
)0x00000000Ë

	)

1555 
	#RCC_CFGR_PLLXTPRE_PREDIV1_Div2
 ((
uöt32_t
)0x00020000Ë

	)

1557 
	#RCC_CFGR_PLLMULL4
 ((
uöt32_t
)0x00080000Ë

	)

1558 
	#RCC_CFGR_PLLMULL5
 ((
uöt32_t
)0x000C0000Ë

	)

1559 
	#RCC_CFGR_PLLMULL6
 ((
uöt32_t
)0x00100000Ë

	)

1560 
	#RCC_CFGR_PLLMULL7
 ((
uöt32_t
)0x00140000Ë

	)

1561 
	#RCC_CFGR_PLLMULL8
 ((
uöt32_t
)0x00180000Ë

	)

1562 
	#RCC_CFGR_PLLMULL9
 ((
uöt32_t
)0x001C0000Ë

	)

1563 
	#RCC_CFGR_PLLMULL6_5
 ((
uöt32_t
)0x00340000Ë

	)

1565 
	#RCC_CFGR_OTGFSPRE
 ((
uöt32_t
)0x00400000Ë

	)

1568 
	#RCC_CFGR_MCO
 ((
uöt32_t
)0x0F000000Ë

	)

1569 
	#RCC_CFGR_MCO_0
 ((
uöt32_t
)0x01000000Ë

	)

1570 
	#RCC_CFGR_MCO_1
 ((
uöt32_t
)0x02000000Ë

	)

1571 
	#RCC_CFGR_MCO_2
 ((
uöt32_t
)0x04000000Ë

	)

1572 
	#RCC_CFGR_MCO_3
 ((
uöt32_t
)0x08000000Ë

	)

1574 
	#RCC_CFGR_MCO_NOCLOCK
 ((
uöt32_t
)0x00000000Ë

	)

1575 
	#RCC_CFGR_MCO_SYSCLK
 ((
uöt32_t
)0x04000000Ë

	)

1576 
	#RCC_CFGR_MCO_HSI
 ((
uöt32_t
)0x05000000Ë

	)

1577 
	#RCC_CFGR_MCO_HSE
 ((
uöt32_t
)0x06000000Ë

	)

1578 
	#RCC_CFGR_MCO_PLLCLK_Div2
 ((
uöt32_t
)0x07000000Ë

	)

1579 
	#RCC_CFGR_MCO_PLL2CLK
 ((
uöt32_t
)0x08000000Ë

	)

1580 
	#RCC_CFGR_MCO_PLL3CLK_Div2
 ((
uöt32_t
)0x09000000Ë

	)

1581 
	#RCC_CFGR_MCO_Ext_HSE
 ((
uöt32_t
)0x0A000000Ë

	)

1582 
	#RCC_CFGR_MCO_PLL3CLK
 ((
uöt32_t
)0x0B000000Ë

	)

1584 
	#RCC_CFGR_PLLSRC_HSI_Div2
 ((
uöt32_t
)0x00000000Ë

	)

1585 
	#RCC_CFGR_PLLSRC_HSE
 ((
uöt32_t
)0x00010000Ë

	)

1587 
	#RCC_CFGR_PLLXTPRE_HSE
 ((
uöt32_t
)0x00000000Ë

	)

1588 
	#RCC_CFGR_PLLXTPRE_HSE_Div2
 ((
uöt32_t
)0x00020000Ë

	)

1590 
	#RCC_CFGR_PLLMULL2
 ((
uöt32_t
)0x00000000Ë

	)

1591 
	#RCC_CFGR_PLLMULL3
 ((
uöt32_t
)0x00040000Ë

	)

1592 
	#RCC_CFGR_PLLMULL4
 ((
uöt32_t
)0x00080000Ë

	)

1593 
	#RCC_CFGR_PLLMULL5
 ((
uöt32_t
)0x000C0000Ë

	)

1594 
	#RCC_CFGR_PLLMULL6
 ((
uöt32_t
)0x00100000Ë

	)

1595 
	#RCC_CFGR_PLLMULL7
 ((
uöt32_t
)0x00140000Ë

	)

1596 
	#RCC_CFGR_PLLMULL8
 ((
uöt32_t
)0x00180000Ë

	)

1597 
	#RCC_CFGR_PLLMULL9
 ((
uöt32_t
)0x001C0000Ë

	)

1598 
	#RCC_CFGR_PLLMULL10
 ((
uöt32_t
)0x00200000Ë

	)

1599 
	#RCC_CFGR_PLLMULL11
 ((
uöt32_t
)0x00240000Ë

	)

1600 
	#RCC_CFGR_PLLMULL12
 ((
uöt32_t
)0x00280000Ë

	)

1601 
	#RCC_CFGR_PLLMULL13
 ((
uöt32_t
)0x002C0000Ë

	)

1602 
	#RCC_CFGR_PLLMULL14
 ((
uöt32_t
)0x00300000Ë

	)

1603 
	#RCC_CFGR_PLLMULL15
 ((
uöt32_t
)0x00340000Ë

	)

1604 
	#RCC_CFGR_PLLMULL16
 ((
uöt32_t
)0x00380000Ë

	)

1605 
	#RCC_CFGR_USBPRE
 ((
uöt32_t
)0x00400000Ë

	)

1608 
	#RCC_CFGR_MCO
 ((
uöt32_t
)0x07000000Ë

	)

1609 
	#RCC_CFGR_MCO_0
 ((
uöt32_t
)0x01000000Ë

	)

1610 
	#RCC_CFGR_MCO_1
 ((
uöt32_t
)0x02000000Ë

	)

1611 
	#RCC_CFGR_MCO_2
 ((
uöt32_t
)0x04000000Ë

	)

1613 
	#RCC_CFGR_MCO_NOCLOCK
 ((
uöt32_t
)0x00000000Ë

	)

1614 
	#RCC_CFGR_MCO_SYSCLK
 ((
uöt32_t
)0x04000000Ë

	)

1615 
	#RCC_CFGR_MCO_HSI
 ((
uöt32_t
)0x05000000Ë

	)

1616 
	#RCC_CFGR_MCO_HSE
 ((
uöt32_t
)0x06000000Ë

	)

1617 
	#RCC_CFGR_MCO_PLL
 ((
uöt32_t
)0x07000000Ë

	)

1621 
	#RCC_CIR_LSIRDYF
 ((
uöt32_t
)0x00000001Ë

	)

1622 
	#RCC_CIR_LSERDYF
 ((
uöt32_t
)0x00000002Ë

	)

1623 
	#RCC_CIR_HSIRDYF
 ((
uöt32_t
)0x00000004Ë

	)

1624 
	#RCC_CIR_HSERDYF
 ((
uöt32_t
)0x00000008Ë

	)

1625 
	#RCC_CIR_PLLRDYF
 ((
uöt32_t
)0x00000010Ë

	)

1626 
	#RCC_CIR_CSSF
 ((
uöt32_t
)0x00000080Ë

	)

1627 
	#RCC_CIR_LSIRDYIE
 ((
uöt32_t
)0x00000100Ë

	)

1628 
	#RCC_CIR_LSERDYIE
 ((
uöt32_t
)0x00000200Ë

	)

1629 
	#RCC_CIR_HSIRDYIE
 ((
uöt32_t
)0x00000400Ë

	)

1630 
	#RCC_CIR_HSERDYIE
 ((
uöt32_t
)0x00000800Ë

	)

1631 
	#RCC_CIR_PLLRDYIE
 ((
uöt32_t
)0x00001000Ë

	)

1632 
	#RCC_CIR_LSIRDYC
 ((
uöt32_t
)0x00010000Ë

	)

1633 
	#RCC_CIR_LSERDYC
 ((
uöt32_t
)0x00020000Ë

	)

1634 
	#RCC_CIR_HSIRDYC
 ((
uöt32_t
)0x00040000Ë

	)

1635 
	#RCC_CIR_HSERDYC
 ((
uöt32_t
)0x00080000Ë

	)

1636 
	#RCC_CIR_PLLRDYC
 ((
uöt32_t
)0x00100000Ë

	)

1637 
	#RCC_CIR_CSSC
 ((
uöt32_t
)0x00800000Ë

	)

1639 #ifde‡
STM32F10X_CL


1640 
	#RCC_CIR_PLL2RDYF
 ((
uöt32_t
)0x00000020Ë

	)

1641 
	#RCC_CIR_PLL3RDYF
 ((
uöt32_t
)0x00000040Ë

	)

1642 
	#RCC_CIR_PLL2RDYIE
 ((
uöt32_t
)0x00002000Ë

	)

1643 
	#RCC_CIR_PLL3RDYIE
 ((
uöt32_t
)0x00004000Ë

	)

1644 
	#RCC_CIR_PLL2RDYC
 ((
uöt32_t
)0x00200000Ë

	)

1645 
	#RCC_CIR_PLL3RDYC
 ((
uöt32_t
)0x00400000Ë

	)

1649 
	#RCC_APB2RSTR_AFIORST
 ((
uöt16_t
)0x0001Ë

	)

1650 
	#RCC_APB2RSTR_IOPARST
 ((
uöt16_t
)0x0004Ë

	)

1651 
	#RCC_APB2RSTR_IOPBRST
 ((
uöt16_t
)0x0008Ë

	)

1652 
	#RCC_APB2RSTR_IOPCRST
 ((
uöt16_t
)0x0010Ë

	)

1653 
	#RCC_APB2RSTR_IOPDRST
 ((
uöt16_t
)0x0020Ë

	)

1654 
	#RCC_APB2RSTR_ADC1RST
 ((
uöt16_t
)0x0200Ë

	)

1655 
	#RCC_APB2RSTR_ADC2RST
 ((
uöt16_t
)0x0400Ë

	)

1656 
	#RCC_APB2RSTR_TIM1RST
 ((
uöt16_t
)0x0800Ë

	)

1657 
	#RCC_APB2RSTR_SPI1RST
 ((
uöt16_t
)0x1000Ë

	)

1658 
	#RCC_APB2RSTR_USART1RST
 ((
uöt16_t
)0x4000Ë

	)

1660 #i‚de‡
STM32F10X_LD


1661 
	#RCC_APB2RSTR_IOPERST
 ((
uöt16_t
)0x0040Ë

	)

1664 #ifde‡
STM32F10X_HD


1665 
	#RCC_APB2RSTR_IOPFRST
 ((
uöt16_t
)0x0080Ë

	)

1666 
	#RCC_APB2RSTR_IOPGRST
 ((
uöt16_t
)0x0100Ë

	)

1667 
	#RCC_APB2RSTR_TIM8RST
 ((
uöt16_t
)0x2000Ë

	)

1668 
	#RCC_APB2RSTR_ADC3RST
 ((
uöt16_t
)0x8000Ë

	)

1672 
	#RCC_APB1RSTR_TIM2RST
 ((
uöt32_t
)0x00000001Ë

	)

1673 
	#RCC_APB1RSTR_TIM3RST
 ((
uöt32_t
)0x00000002Ë

	)

1674 
	#RCC_APB1RSTR_WWDGRST
 ((
uöt32_t
)0x00000800Ë

	)

1675 
	#RCC_APB1RSTR_USART2RST
 ((
uöt32_t
)0x00020000Ë

	)

1676 
	#RCC_APB1RSTR_I2C1RST
 ((
uöt32_t
)0x00200000Ë

	)

1677 
	#RCC_APB1RSTR_CAN1RST
 ((
uöt32_t
)0x02000000Ë

	)

1678 
	#RCC_APB1RSTR_BKPRST
 ((
uöt32_t
)0x08000000Ë

	)

1679 
	#RCC_APB1RSTR_PWRRST
 ((
uöt32_t
)0x10000000Ë

	)

1681 #i‚de‡
STM32F10X_LD


1682 
	#RCC_APB1RSTR_TIM4RST
 ((
uöt32_t
)0x00000004Ë

	)

1683 
	#RCC_APB1RSTR_SPI2RST
 ((
uöt32_t
)0x00004000Ë

	)

1684 
	#RCC_APB1RSTR_USART3RST
 ((
uöt32_t
)0x00040000Ë

	)

1685 
	#RCC_APB1RSTR_I2C2RST
 ((
uöt32_t
)0x00400000Ë

	)

1688 #i‡
deföed
 (
STM32F10X_HD
Ë|| deföed (
STM32F10X_MD
Ë|| deföed (
STM32F10X_LD
)

1689 
	#RCC_APB1RSTR_USBRST
 ((
uöt32_t
)0x00800000Ë

	)

1692 #i‡
deföed
 (
STM32F10X_HD
Ë|| deföed (
STM32F10X_CL
)

1693 
	#RCC_APB1RSTR_TIM5RST
 ((
uöt32_t
)0x00000008Ë

	)

1694 
	#RCC_APB1RSTR_TIM6RST
 ((
uöt32_t
)0x00000010Ë

	)

1695 
	#RCC_APB1RSTR_TIM7RST
 ((
uöt32_t
)0x00000020Ë

	)

1696 
	#RCC_APB1RSTR_SPI3RST
 ((
uöt32_t
)0x00008000Ë

	)

1697 
	#RCC_APB1RSTR_UART4RST
 ((
uöt32_t
)0x00080000Ë

	)

1698 
	#RCC_APB1RSTR_UART5RST
 ((
uöt32_t
)0x00100000Ë

	)

1699 
	#RCC_APB1RSTR_DACRST
 ((
uöt32_t
)0x20000000Ë

	)

1702 #ifde‡
STM32F10X_CL


1703 
	#RCC_APB1RSTR_CAN2RST
 ((
uöt32_t
)0x08000000Ë

	)

1707 
	#RCC_AHBENR_DMA1EN
 ((
uöt16_t
)0x0001Ë

	)

1708 
	#RCC_AHBENR_SRAMEN
 ((
uöt16_t
)0x0004Ë

	)

1709 
	#RCC_AHBENR_FLITFEN
 ((
uöt16_t
)0x0010Ë

	)

1710 
	#RCC_AHBENR_CRCEN
 ((
uöt16_t
)0x0040Ë

	)

1712 #i‡
deföed
 (
STM32F10X_HD
Ë|| deföed (
STM32F10X_CL
)

1713 
	#RCC_AHBENR_DMA2EN
 ((
uöt16_t
)0x0002Ë

	)

1716 #ifde‡
STM32F10X_HD


1717 
	#RCC_AHBENR_FSMCEN
 ((
uöt16_t
)0x0100Ë

	)

1718 
	#RCC_AHBENR_SDIOEN
 ((
uöt16_t
)0x0400Ë

	)

1721 #ifde‡
STM32F10X_CL


1722 
	#RCC_AHBENR_OTGFSEN
 ((
uöt32_t
)0x00001000Ë

	)

1723 
	#RCC_AHBENR_ETHMACEN
 ((
uöt32_t
)0x00004000Ë

	)

1724 
	#RCC_AHBENR_ETHMACTXEN
 ((
uöt32_t
)0x00008000Ë

	)

1725 
	#RCC_AHBENR_ETHMACRXEN
 ((
uöt32_t
)0x00010000Ë

	)

1729 
	#RCC_APB2ENR_AFIOEN
 ((
uöt16_t
)0x0001Ë

	)

1730 
	#RCC_APB2ENR_IOPAEN
 ((
uöt16_t
)0x0004Ë

	)

1731 
	#RCC_APB2ENR_IOPBEN
 ((
uöt16_t
)0x0008Ë

	)

1732 
	#RCC_APB2ENR_IOPCEN
 ((
uöt16_t
)0x0010Ë

	)

1733 
	#RCC_APB2ENR_IOPDEN
 ((
uöt16_t
)0x0020Ë

	)

1734 
	#RCC_APB2ENR_ADC1EN
 ((
uöt16_t
)0x0200Ë

	)

1735 
	#RCC_APB2ENR_ADC2EN
 ((
uöt16_t
)0x0400Ë

	)

1736 
	#RCC_APB2ENR_TIM1EN
 ((
uöt16_t
)0x0800Ë

	)

1737 
	#RCC_APB2ENR_SPI1EN
 ((
uöt16_t
)0x1000Ë

	)

1738 
	#RCC_APB2ENR_USART1EN
 ((
uöt16_t
)0x4000Ë

	)

1740 #i‚de‡
STM32F10X_LD


1741 
	#RCC_APB2ENR_IOPEEN
 ((
uöt16_t
)0x0040Ë

	)

1744 #ifde‡
STM32F10X_HD


1745 
	#RCC_APB2ENR_IOPFEN
 ((
uöt16_t
)0x0080Ë

	)

1746 
	#RCC_APB2ENR_IOPGEN
 ((
uöt16_t
)0x0100Ë

	)

1747 
	#RCC_APB2ENR_TIM8EN
 ((
uöt16_t
)0x2000Ë

	)

1748 
	#RCC_APB2ENR_ADC3EN
 ((
uöt16_t
)0x8000Ë

	)

1752 
	#RCC_APB1ENR_TIM2EN
 ((
uöt32_t
)0x00000001Ë

	)

1753 
	#RCC_APB1ENR_TIM3EN
 ((
uöt32_t
)0x00000002Ë

	)

1754 
	#RCC_APB1ENR_WWDGEN
 ((
uöt32_t
)0x00000800Ë

	)

1755 
	#RCC_APB1ENR_USART2EN
 ((
uöt32_t
)0x00020000Ë

	)

1756 
	#RCC_APB1ENR_I2C1EN
 ((
uöt32_t
)0x00200000Ë

	)

1757 
	#RCC_APB1ENR_CAN1EN
 ((
uöt32_t
)0x02000000Ë

	)

1758 
	#RCC_APB1ENR_BKPEN
 ((
uöt32_t
)0x08000000Ë

	)

1759 
	#RCC_APB1ENR_PWREN
 ((
uöt32_t
)0x10000000Ë

	)

1761 #i‚de‡
STM32F10X_LD


1762 
	#RCC_APB1ENR_TIM4EN
 ((
uöt32_t
)0x00000004Ë

	)

1763 
	#RCC_APB1ENR_SPI2EN
 ((
uöt32_t
)0x00004000Ë

	)

1764 
	#RCC_APB1ENR_USART3EN
 ((
uöt32_t
)0x00040000Ë

	)

1765 
	#RCC_APB1ENR_I2C2EN
 ((
uöt32_t
)0x00400000Ë

	)

1768 #i‡
deföed
 (
STM32F10X_HD
Ë|| deföed (
STM32F10X_MD
Ë|| deföed (
STM32F10X_LD
)

1769 
	#RCC_APB1ENR_USBEN
 ((
uöt32_t
)0x00800000Ë

	)

1772 #i‡
deföed
 (
STM32F10X_HD
Ë|| deföed (
STM32F10X_CL
)

1773 
	#RCC_APB1ENR_TIM5EN
 ((
uöt32_t
)0x00000008Ë

	)

1774 
	#RCC_APB1ENR_TIM6EN
 ((
uöt32_t
)0x00000010Ë

	)

1775 
	#RCC_APB1ENR_TIM7EN
 ((
uöt32_t
)0x00000020Ë

	)

1776 
	#RCC_APB1ENR_SPI3EN
 ((
uöt32_t
)0x00008000Ë

	)

1777 
	#RCC_APB1ENR_UART4EN
 ((
uöt32_t
)0x00080000Ë

	)

1778 
	#RCC_APB1ENR_UART5EN
 ((
uöt32_t
)0x00100000Ë

	)

1779 
	#RCC_APB1ENR_DACEN
 ((
uöt32_t
)0x20000000Ë

	)

1782 #ifde‡
STM32F10X_CL


1783 
	#RCC_APB1ENR_CAN2EN
 ((
uöt32_t
)0x08000000Ë

	)

1787 
	#RCC_BDCR_LSEON
 ((
uöt32_t
)0x00000001Ë

	)

1788 
	#RCC_BDCR_LSERDY
 ((
uöt32_t
)0x00000002Ë

	)

1789 
	#RCC_BDCR_LSEBYP
 ((
uöt32_t
)0x00000004Ë

	)

1791 
	#RCC_BDCR_RTCSEL
 ((
uöt32_t
)0x00000300Ë

	)

1792 
	#RCC_BDCR_RTCSEL_0
 ((
uöt32_t
)0x00000100Ë

	)

1793 
	#RCC_BDCR_RTCSEL_1
 ((
uöt32_t
)0x00000200Ë

	)

1796 
	#RCC_BDCR_RTCSEL_NOCLOCK
 ((
uöt32_t
)0x00000000Ë

	)

1797 
	#RCC_BDCR_RTCSEL_LSE
 ((
uöt32_t
)0x00000100Ë

	)

1798 
	#RCC_BDCR_RTCSEL_LSI
 ((
uöt32_t
)0x00000200Ë

	)

1799 
	#RCC_BDCR_RTCSEL_HSE
 ((
uöt32_t
)0x00000300Ë

	)

1801 
	#RCC_BDCR_RTCEN
 ((
uöt32_t
)0x00008000Ë

	)

1802 
	#RCC_BDCR_BDRST
 ((
uöt32_t
)0x00010000Ë

	)

1805 
	#RCC_CSR_LSION
 ((
uöt32_t
)0x00000001Ë

	)

1806 
	#RCC_CSR_LSIRDY
 ((
uöt32_t
)0x00000002Ë

	)

1807 
	#RCC_CSR_RMVF
 ((
uöt32_t
)0x01000000Ë

	)

1808 
	#RCC_CSR_PINRSTF
 ((
uöt32_t
)0x04000000Ë

	)

1809 
	#RCC_CSR_PORRSTF
 ((
uöt32_t
)0x08000000Ë

	)

1810 
	#RCC_CSR_SFTRSTF
 ((
uöt32_t
)0x10000000Ë

	)

1811 
	#RCC_CSR_IWDGRSTF
 ((
uöt32_t
)0x20000000Ë

	)

1812 
	#RCC_CSR_WWDGRSTF
 ((
uöt32_t
)0x40000000Ë

	)

1813 
	#RCC_CSR_LPWRRSTF
 ((
uöt32_t
)0x80000000Ë

	)

1815 #ifde‡
STM32F10X_CL


1817 
	#RCC_AHBRSTR_OTGFSRST
 ((
uöt32_t
)0x00001000Ë

	)

1818 
	#RCC_AHBRSTR_ETHMACRST
 ((
uöt32_t
)0x00004000Ë

	)

1822 
	#RCC_CFGR2_PREDIV1
 ((
uöt32_t
)0x0000000FË

	)

1823 
	#RCC_CFGR2_PREDIV1_0
 ((
uöt32_t
)0x00000001Ë

	)

1824 
	#RCC_CFGR2_PREDIV1_1
 ((
uöt32_t
)0x00000002Ë

	)

1825 
	#RCC_CFGR2_PREDIV1_2
 ((
uöt32_t
)0x00000004Ë

	)

1826 
	#RCC_CFGR2_PREDIV1_3
 ((
uöt32_t
)0x00000008Ë

	)

1828 
	#RCC_CFGR2_PREDIV1_DIV1
 ((
uöt32_t
)0x00000000Ë

	)

1829 
	#RCC_CFGR2_PREDIV1_DIV2
 ((
uöt32_t
)0x00000001Ë

	)

1830 
	#RCC_CFGR2_PREDIV1_DIV3
 ((
uöt32_t
)0x00000002Ë

	)

1831 
	#RCC_CFGR2_PREDIV1_DIV4
 ((
uöt32_t
)0x00000003Ë

	)

1832 
	#RCC_CFGR2_PREDIV1_DIV5
 ((
uöt32_t
)0x00000004Ë

	)

1833 
	#RCC_CFGR2_PREDIV1_DIV6
 ((
uöt32_t
)0x00000005Ë

	)

1834 
	#RCC_CFGR2_PREDIV1_DIV7
 ((
uöt32_t
)0x00000006Ë

	)

1835 
	#RCC_CFGR2_PREDIV1_DIV8
 ((
uöt32_t
)0x00000007Ë

	)

1836 
	#RCC_CFGR2_PREDIV1_DIV9
 ((
uöt32_t
)0x00000008Ë

	)

1837 
	#RCC_CFGR2_PREDIV1_DIV10
 ((
uöt32_t
)0x00000009Ë

	)

1838 
	#RCC_CFGR2_PREDIV1_DIV11
 ((
uöt32_t
)0x0000000AË

	)

1839 
	#RCC_CFGR2_PREDIV1_DIV12
 ((
uöt32_t
)0x0000000BË

	)

1840 
	#RCC_CFGR2_PREDIV1_DIV13
 ((
uöt32_t
)0x0000000CË

	)

1841 
	#RCC_CFGR2_PREDIV1_DIV14
 ((
uöt32_t
)0x0000000DË

	)

1842 
	#RCC_CFGR2_PREDIV1_DIV15
 ((
uöt32_t
)0x0000000EË

	)

1843 
	#RCC_CFGR2_PREDIV1_DIV16
 ((
uöt32_t
)0x0000000FË

	)

1846 
	#RCC_CFGR2_PREDIV2
 ((
uöt32_t
)0x000000F0Ë

	)

1847 
	#RCC_CFGR2_PREDIV2_0
 ((
uöt32_t
)0x00000010Ë

	)

1848 
	#RCC_CFGR2_PREDIV2_1
 ((
uöt32_t
)0x00000020Ë

	)

1849 
	#RCC_CFGR2_PREDIV2_2
 ((
uöt32_t
)0x00000040Ë

	)

1850 
	#RCC_CFGR2_PREDIV2_3
 ((
uöt32_t
)0x00000080Ë

	)

1852 
	#RCC_CFGR2_PREDIV2_DIV1
 ((
uöt32_t
)0x00000000Ë

	)

1853 
	#RCC_CFGR2_PREDIV2_DIV2
 ((
uöt32_t
)0x00000010Ë

	)

1854 
	#RCC_CFGR2_PREDIV2_DIV3
 ((
uöt32_t
)0x00000020Ë

	)

1855 
	#RCC_CFGR2_PREDIV2_DIV4
 ((
uöt32_t
)0x00000030Ë

	)

1856 
	#RCC_CFGR2_PREDIV2_DIV5
 ((
uöt32_t
)0x00000040Ë

	)

1857 
	#RCC_CFGR2_PREDIV2_DIV6
 ((
uöt32_t
)0x00000050Ë

	)

1858 
	#RCC_CFGR2_PREDIV2_DIV7
 ((
uöt32_t
)0x00000060Ë

	)

1859 
	#RCC_CFGR2_PREDIV2_DIV8
 ((
uöt32_t
)0x00000070Ë

	)

1860 
	#RCC_CFGR2_PREDIV2_DIV9
 ((
uöt32_t
)0x00000080Ë

	)

1861 
	#RCC_CFGR2_PREDIV2_DIV10
 ((
uöt32_t
)0x00000090Ë

	)

1862 
	#RCC_CFGR2_PREDIV2_DIV11
 ((
uöt32_t
)0x000000A0Ë

	)

1863 
	#RCC_CFGR2_PREDIV2_DIV12
 ((
uöt32_t
)0x000000B0Ë

	)

1864 
	#RCC_CFGR2_PREDIV2_DIV13
 ((
uöt32_t
)0x000000C0Ë

	)

1865 
	#RCC_CFGR2_PREDIV2_DIV14
 ((
uöt32_t
)0x000000D0Ë

	)

1866 
	#RCC_CFGR2_PREDIV2_DIV15
 ((
uöt32_t
)0x000000E0Ë

	)

1867 
	#RCC_CFGR2_PREDIV2_DIV16
 ((
uöt32_t
)0x000000F0Ë

	)

1870 
	#RCC_CFGR2_PLL2MUL
 ((
uöt32_t
)0x00000F00Ë

	)

1871 
	#RCC_CFGR2_PLL2MUL_0
 ((
uöt32_t
)0x00000100Ë

	)

1872 
	#RCC_CFGR2_PLL2MUL_1
 ((
uöt32_t
)0x00000200Ë

	)

1873 
	#RCC_CFGR2_PLL2MUL_2
 ((
uöt32_t
)0x00000400Ë

	)

1874 
	#RCC_CFGR2_PLL2MUL_3
 ((
uöt32_t
)0x00000800Ë

	)

1876 
	#RCC_CFGR2_PLL2MUL8
 ((
uöt32_t
)0x00000600Ë

	)

1877 
	#RCC_CFGR2_PLL2MUL9
 ((
uöt32_t
)0x00000700Ë

	)

1878 
	#RCC_CFGR2_PLL2MUL10
 ((
uöt32_t
)0x00000800Ë

	)

1879 
	#RCC_CFGR2_PLL2MUL11
 ((
uöt32_t
)0x00000900Ë

	)

1880 
	#RCC_CFGR2_PLL2MUL12
 ((
uöt32_t
)0x00000A00Ë

	)

1881 
	#RCC_CFGR2_PLL2MUL13
 ((
uöt32_t
)0x00000B00Ë

	)

1882 
	#RCC_CFGR2_PLL2MUL14
 ((
uöt32_t
)0x00000C00Ë

	)

1883 
	#RCC_CFGR2_PLL2MUL16
 ((
uöt32_t
)0x00000E00Ë

	)

1884 
	#RCC_CFGR2_PLL2MUL20
 ((
uöt32_t
)0x00000F00Ë

	)

1887 
	#RCC_CFGR2_PLL3MUL
 ((
uöt32_t
)0x0000F000Ë

	)

1888 
	#RCC_CFGR2_PLL3MUL_0
 ((
uöt32_t
)0x00001000Ë

	)

1889 
	#RCC_CFGR2_PLL3MUL_1
 ((
uöt32_t
)0x00002000Ë

	)

1890 
	#RCC_CFGR2_PLL3MUL_2
 ((
uöt32_t
)0x00004000Ë

	)

1891 
	#RCC_CFGR2_PLL3MUL_3
 ((
uöt32_t
)0x00008000Ë

	)

1893 
	#RCC_CFGR2_PLL3MUL8
 ((
uöt32_t
)0x00006000Ë

	)

1894 
	#RCC_CFGR2_PLL3MUL9
 ((
uöt32_t
)0x00007000Ë

	)

1895 
	#RCC_CFGR2_PLL3MUL10
 ((
uöt32_t
)0x00008000Ë

	)

1896 
	#RCC_CFGR2_PLL3MUL11
 ((
uöt32_t
)0x00009000Ë

	)

1897 
	#RCC_CFGR2_PLL3MUL12
 ((
uöt32_t
)0x0000A000Ë

	)

1898 
	#RCC_CFGR2_PLL3MUL13
 ((
uöt32_t
)0x0000B000Ë

	)

1899 
	#RCC_CFGR2_PLL3MUL14
 ((
uöt32_t
)0x0000C000Ë

	)

1900 
	#RCC_CFGR2_PLL3MUL16
 ((
uöt32_t
)0x0000E000Ë

	)

1901 
	#RCC_CFGR2_PLL3MUL20
 ((
uöt32_t
)0x0000F000Ë

	)

1903 
	#RCC_CFGR2_PREDIV1SRC
 ((
uöt32_t
)0x00010000Ë

	)

1904 
	#RCC_CFGR2_PREDIV1SRC_PLL2
 ((
uöt32_t
)0x00010000Ë

	)

1905 
	#RCC_CFGR2_PREDIV1SRC_HSE
 ((
uöt32_t
)0x00000000Ë

	)

1906 
	#RCC_CFGR2_I2S2SRC
 ((
uöt32_t
)0x00020000Ë

	)

1907 
	#RCC_CFGR2_I2S3SRC
 ((
uöt32_t
)0x00040000Ë

	)

1917 
	#GPIO_CRL_MODE
 ((
uöt32_t
)0x33333333Ë

	)

1919 
	#GPIO_CRL_MODE0
 ((
uöt32_t
)0x00000003Ë

	)

1920 
	#GPIO_CRL_MODE0_0
 ((
uöt32_t
)0x00000001Ë

	)

1921 
	#GPIO_CRL_MODE0_1
 ((
uöt32_t
)0x00000002Ë

	)

1923 
	#GPIO_CRL_MODE1
 ((
uöt32_t
)0x00000030Ë

	)

1924 
	#GPIO_CRL_MODE1_0
 ((
uöt32_t
)0x00000010Ë

	)

1925 
	#GPIO_CRL_MODE1_1
 ((
uöt32_t
)0x00000020Ë

	)

1927 
	#GPIO_CRL_MODE2
 ((
uöt32_t
)0x00000300Ë

	)

1928 
	#GPIO_CRL_MODE2_0
 ((
uöt32_t
)0x00000100Ë

	)

1929 
	#GPIO_CRL_MODE2_1
 ((
uöt32_t
)0x00000200Ë

	)

1931 
	#GPIO_CRL_MODE3
 ((
uöt32_t
)0x00003000Ë

	)

1932 
	#GPIO_CRL_MODE3_0
 ((
uöt32_t
)0x00001000Ë

	)

1933 
	#GPIO_CRL_MODE3_1
 ((
uöt32_t
)0x00002000Ë

	)

1935 
	#GPIO_CRL_MODE4
 ((
uöt32_t
)0x00030000Ë

	)

1936 
	#GPIO_CRL_MODE4_0
 ((
uöt32_t
)0x00010000Ë

	)

1937 
	#GPIO_CRL_MODE4_1
 ((
uöt32_t
)0x00020000Ë

	)

1939 
	#GPIO_CRL_MODE5
 ((
uöt32_t
)0x00300000Ë

	)

1940 
	#GPIO_CRL_MODE5_0
 ((
uöt32_t
)0x00100000Ë

	)

1941 
	#GPIO_CRL_MODE5_1
 ((
uöt32_t
)0x00200000Ë

	)

1943 
	#GPIO_CRL_MODE6
 ((
uöt32_t
)0x03000000Ë

	)

1944 
	#GPIO_CRL_MODE6_0
 ((
uöt32_t
)0x01000000Ë

	)

1945 
	#GPIO_CRL_MODE6_1
 ((
uöt32_t
)0x02000000Ë

	)

1947 
	#GPIO_CRL_MODE7
 ((
uöt32_t
)0x30000000Ë

	)

1948 
	#GPIO_CRL_MODE7_0
 ((
uöt32_t
)0x10000000Ë

	)

1949 
	#GPIO_CRL_MODE7_1
 ((
uöt32_t
)0x20000000Ë

	)

1951 
	#GPIO_CRL_CNF
 ((
uöt32_t
)0xCCCCCCCCË

	)

1953 
	#GPIO_CRL_CNF0
 ((
uöt32_t
)0x0000000CË

	)

1954 
	#GPIO_CRL_CNF0_0
 ((
uöt32_t
)0x00000004Ë

	)

1955 
	#GPIO_CRL_CNF0_1
 ((
uöt32_t
)0x00000008Ë

	)

1957 
	#GPIO_CRL_CNF1
 ((
uöt32_t
)0x000000C0Ë

	)

1958 
	#GPIO_CRL_CNF1_0
 ((
uöt32_t
)0x00000040Ë

	)

1959 
	#GPIO_CRL_CNF1_1
 ((
uöt32_t
)0x00000080Ë

	)

1961 
	#GPIO_CRL_CNF2
 ((
uöt32_t
)0x00000C00Ë

	)

1962 
	#GPIO_CRL_CNF2_0
 ((
uöt32_t
)0x00000400Ë

	)

1963 
	#GPIO_CRL_CNF2_1
 ((
uöt32_t
)0x00000800Ë

	)

1965 
	#GPIO_CRL_CNF3
 ((
uöt32_t
)0x0000C000Ë

	)

1966 
	#GPIO_CRL_CNF3_0
 ((
uöt32_t
)0x00004000Ë

	)

1967 
	#GPIO_CRL_CNF3_1
 ((
uöt32_t
)0x00008000Ë

	)

1969 
	#GPIO_CRL_CNF4
 ((
uöt32_t
)0x000C0000Ë

	)

1970 
	#GPIO_CRL_CNF4_0
 ((
uöt32_t
)0x00040000Ë

	)

1971 
	#GPIO_CRL_CNF4_1
 ((
uöt32_t
)0x00080000Ë

	)

1973 
	#GPIO_CRL_CNF5
 ((
uöt32_t
)0x00C00000Ë

	)

1974 
	#GPIO_CRL_CNF5_0
 ((
uöt32_t
)0x00400000Ë

	)

1975 
	#GPIO_CRL_CNF5_1
 ((
uöt32_t
)0x00800000Ë

	)

1977 
	#GPIO_CRL_CNF6
 ((
uöt32_t
)0x0C000000Ë

	)

1978 
	#GPIO_CRL_CNF6_0
 ((
uöt32_t
)0x04000000Ë

	)

1979 
	#GPIO_CRL_CNF6_1
 ((
uöt32_t
)0x08000000Ë

	)

1981 
	#GPIO_CRL_CNF7
 ((
uöt32_t
)0xC0000000Ë

	)

1982 
	#GPIO_CRL_CNF7_0
 ((
uöt32_t
)0x40000000Ë

	)

1983 
	#GPIO_CRL_CNF7_1
 ((
uöt32_t
)0x80000000Ë

	)

1986 
	#GPIO_CRH_MODE
 ((
uöt32_t
)0x33333333Ë

	)

1988 
	#GPIO_CRH_MODE8
 ((
uöt32_t
)0x00000003Ë

	)

1989 
	#GPIO_CRH_MODE8_0
 ((
uöt32_t
)0x00000001Ë

	)

1990 
	#GPIO_CRH_MODE8_1
 ((
uöt32_t
)0x00000002Ë

	)

1992 
	#GPIO_CRH_MODE9
 ((
uöt32_t
)0x00000030Ë

	)

1993 
	#GPIO_CRH_MODE9_0
 ((
uöt32_t
)0x00000010Ë

	)

1994 
	#GPIO_CRH_MODE9_1
 ((
uöt32_t
)0x00000020Ë

	)

1996 
	#GPIO_CRH_MODE10
 ((
uöt32_t
)0x00000300Ë

	)

1997 
	#GPIO_CRH_MODE10_0
 ((
uöt32_t
)0x00000100Ë

	)

1998 
	#GPIO_CRH_MODE10_1
 ((
uöt32_t
)0x00000200Ë

	)

2000 
	#GPIO_CRH_MODE11
 ((
uöt32_t
)0x00003000Ë

	)

2001 
	#GPIO_CRH_MODE11_0
 ((
uöt32_t
)0x00001000Ë

	)

2002 
	#GPIO_CRH_MODE11_1
 ((
uöt32_t
)0x00002000Ë

	)

2004 
	#GPIO_CRH_MODE12
 ((
uöt32_t
)0x00030000Ë

	)

2005 
	#GPIO_CRH_MODE12_0
 ((
uöt32_t
)0x00010000Ë

	)

2006 
	#GPIO_CRH_MODE12_1
 ((
uöt32_t
)0x00020000Ë

	)

2008 
	#GPIO_CRH_MODE13
 ((
uöt32_t
)0x00300000Ë

	)

2009 
	#GPIO_CRH_MODE13_0
 ((
uöt32_t
)0x00100000Ë

	)

2010 
	#GPIO_CRH_MODE13_1
 ((
uöt32_t
)0x00200000Ë

	)

2012 
	#GPIO_CRH_MODE14
 ((
uöt32_t
)0x03000000Ë

	)

2013 
	#GPIO_CRH_MODE14_0
 ((
uöt32_t
)0x01000000Ë

	)

2014 
	#GPIO_CRH_MODE14_1
 ((
uöt32_t
)0x02000000Ë

	)

2016 
	#GPIO_CRH_MODE15
 ((
uöt32_t
)0x30000000Ë

	)

2017 
	#GPIO_CRH_MODE15_0
 ((
uöt32_t
)0x10000000Ë

	)

2018 
	#GPIO_CRH_MODE15_1
 ((
uöt32_t
)0x20000000Ë

	)

2020 
	#GPIO_CRH_CNF
 ((
uöt32_t
)0xCCCCCCCCË

	)

2022 
	#GPIO_CRH_CNF8
 ((
uöt32_t
)0x0000000CË

	)

2023 
	#GPIO_CRH_CNF8_0
 ((
uöt32_t
)0x00000004Ë

	)

2024 
	#GPIO_CRH_CNF8_1
 ((
uöt32_t
)0x00000008Ë

	)

2026 
	#GPIO_CRH_CNF9
 ((
uöt32_t
)0x000000C0Ë

	)

2027 
	#GPIO_CRH_CNF9_0
 ((
uöt32_t
)0x00000040Ë

	)

2028 
	#GPIO_CRH_CNF9_1
 ((
uöt32_t
)0x00000080Ë

	)

2030 
	#GPIO_CRH_CNF10
 ((
uöt32_t
)0x00000C00Ë

	)

2031 
	#GPIO_CRH_CNF10_0
 ((
uöt32_t
)0x00000400Ë

	)

2032 
	#GPIO_CRH_CNF10_1
 ((
uöt32_t
)0x00000800Ë

	)

2034 
	#GPIO_CRH_CNF11
 ((
uöt32_t
)0x0000C000Ë

	)

2035 
	#GPIO_CRH_CNF11_0
 ((
uöt32_t
)0x00004000Ë

	)

2036 
	#GPIO_CRH_CNF11_1
 ((
uöt32_t
)0x00008000Ë

	)

2038 
	#GPIO_CRH_CNF12
 ((
uöt32_t
)0x000C0000Ë

	)

2039 
	#GPIO_CRH_CNF12_0
 ((
uöt32_t
)0x00040000Ë

	)

2040 
	#GPIO_CRH_CNF12_1
 ((
uöt32_t
)0x00080000Ë

	)

2042 
	#GPIO_CRH_CNF13
 ((
uöt32_t
)0x00C00000Ë

	)

2043 
	#GPIO_CRH_CNF13_0
 ((
uöt32_t
)0x00400000Ë

	)

2044 
	#GPIO_CRH_CNF13_1
 ((
uöt32_t
)0x00800000Ë

	)

2046 
	#GPIO_CRH_CNF14
 ((
uöt32_t
)0x0C000000Ë

	)

2047 
	#GPIO_CRH_CNF14_0
 ((
uöt32_t
)0x04000000Ë

	)

2048 
	#GPIO_CRH_CNF14_1
 ((
uöt32_t
)0x08000000Ë

	)

2050 
	#GPIO_CRH_CNF15
 ((
uöt32_t
)0xC0000000Ë

	)

2051 
	#GPIO_CRH_CNF15_0
 ((
uöt32_t
)0x40000000Ë

	)

2052 
	#GPIO_CRH_CNF15_1
 ((
uöt32_t
)0x80000000Ë

	)

2055 
	#GPIO_IDR_IDR0
 ((
uöt16_t
)0x0001Ë

	)

2056 
	#GPIO_IDR_IDR1
 ((
uöt16_t
)0x0002Ë

	)

2057 
	#GPIO_IDR_IDR2
 ((
uöt16_t
)0x0004Ë

	)

2058 
	#GPIO_IDR_IDR3
 ((
uöt16_t
)0x0008Ë

	)

2059 
	#GPIO_IDR_IDR4
 ((
uöt16_t
)0x0010Ë

	)

2060 
	#GPIO_IDR_IDR5
 ((
uöt16_t
)0x0020Ë

	)

2061 
	#GPIO_IDR_IDR6
 ((
uöt16_t
)0x0040Ë

	)

2062 
	#GPIO_IDR_IDR7
 ((
uöt16_t
)0x0080Ë

	)

2063 
	#GPIO_IDR_IDR8
 ((
uöt16_t
)0x0100Ë

	)

2064 
	#GPIO_IDR_IDR9
 ((
uöt16_t
)0x0200Ë

	)

2065 
	#GPIO_IDR_IDR10
 ((
uöt16_t
)0x0400Ë

	)

2066 
	#GPIO_IDR_IDR11
 ((
uöt16_t
)0x0800Ë

	)

2067 
	#GPIO_IDR_IDR12
 ((
uöt16_t
)0x1000Ë

	)

2068 
	#GPIO_IDR_IDR13
 ((
uöt16_t
)0x2000Ë

	)

2069 
	#GPIO_IDR_IDR14
 ((
uöt16_t
)0x4000Ë

	)

2070 
	#GPIO_IDR_IDR15
 ((
uöt16_t
)0x8000Ë

	)

2073 
	#GPIO_ODR_ODR0
 ((
uöt16_t
)0x0001Ë

	)

2074 
	#GPIO_ODR_ODR1
 ((
uöt16_t
)0x0002Ë

	)

2075 
	#GPIO_ODR_ODR2
 ((
uöt16_t
)0x0004Ë

	)

2076 
	#GPIO_ODR_ODR3
 ((
uöt16_t
)0x0008Ë

	)

2077 
	#GPIO_ODR_ODR4
 ((
uöt16_t
)0x0010Ë

	)

2078 
	#GPIO_ODR_ODR5
 ((
uöt16_t
)0x0020Ë

	)

2079 
	#GPIO_ODR_ODR6
 ((
uöt16_t
)0x0040Ë

	)

2080 
	#GPIO_ODR_ODR7
 ((
uöt16_t
)0x0080Ë

	)

2081 
	#GPIO_ODR_ODR8
 ((
uöt16_t
)0x0100Ë

	)

2082 
	#GPIO_ODR_ODR9
 ((
uöt16_t
)0x0200Ë

	)

2083 
	#GPIO_ODR_ODR10
 ((
uöt16_t
)0x0400Ë

	)

2084 
	#GPIO_ODR_ODR11
 ((
uöt16_t
)0x0800Ë

	)

2085 
	#GPIO_ODR_ODR12
 ((
uöt16_t
)0x1000Ë

	)

2086 
	#GPIO_ODR_ODR13
 ((
uöt16_t
)0x2000Ë

	)

2087 
	#GPIO_ODR_ODR14
 ((
uöt16_t
)0x4000Ë

	)

2088 
	#GPIO_ODR_ODR15
 ((
uöt16_t
)0x8000Ë

	)

2091 
	#GPIO_BSRR_BS0
 ((
uöt32_t
)0x00000001Ë

	)

2092 
	#GPIO_BSRR_BS1
 ((
uöt32_t
)0x00000002Ë

	)

2093 
	#GPIO_BSRR_BS2
 ((
uöt32_t
)0x00000004Ë

	)

2094 
	#GPIO_BSRR_BS3
 ((
uöt32_t
)0x00000008Ë

	)

2095 
	#GPIO_BSRR_BS4
 ((
uöt32_t
)0x00000010Ë

	)

2096 
	#GPIO_BSRR_BS5
 ((
uöt32_t
)0x00000020Ë

	)

2097 
	#GPIO_BSRR_BS6
 ((
uöt32_t
)0x00000040Ë

	)

2098 
	#GPIO_BSRR_BS7
 ((
uöt32_t
)0x00000080Ë

	)

2099 
	#GPIO_BSRR_BS8
 ((
uöt32_t
)0x00000100Ë

	)

2100 
	#GPIO_BSRR_BS9
 ((
uöt32_t
)0x00000200Ë

	)

2101 
	#GPIO_BSRR_BS10
 ((
uöt32_t
)0x00000400Ë

	)

2102 
	#GPIO_BSRR_BS11
 ((
uöt32_t
)0x00000800Ë

	)

2103 
	#GPIO_BSRR_BS12
 ((
uöt32_t
)0x00001000Ë

	)

2104 
	#GPIO_BSRR_BS13
 ((
uöt32_t
)0x00002000Ë

	)

2105 
	#GPIO_BSRR_BS14
 ((
uöt32_t
)0x00004000Ë

	)

2106 
	#GPIO_BSRR_BS15
 ((
uöt32_t
)0x00008000Ë

	)

2108 
	#GPIO_BSRR_BR0
 ((
uöt32_t
)0x00010000Ë

	)

2109 
	#GPIO_BSRR_BR1
 ((
uöt32_t
)0x00020000Ë

	)

2110 
	#GPIO_BSRR_BR2
 ((
uöt32_t
)0x00040000Ë

	)

2111 
	#GPIO_BSRR_BR3
 ((
uöt32_t
)0x00080000Ë

	)

2112 
	#GPIO_BSRR_BR4
 ((
uöt32_t
)0x00100000Ë

	)

2113 
	#GPIO_BSRR_BR5
 ((
uöt32_t
)0x00200000Ë

	)

2114 
	#GPIO_BSRR_BR6
 ((
uöt32_t
)0x00400000Ë

	)

2115 
	#GPIO_BSRR_BR7
 ((
uöt32_t
)0x00800000Ë

	)

2116 
	#GPIO_BSRR_BR8
 ((
uöt32_t
)0x01000000Ë

	)

2117 
	#GPIO_BSRR_BR9
 ((
uöt32_t
)0x02000000Ë

	)

2118 
	#GPIO_BSRR_BR10
 ((
uöt32_t
)0x04000000Ë

	)

2119 
	#GPIO_BSRR_BR11
 ((
uöt32_t
)0x08000000Ë

	)

2120 
	#GPIO_BSRR_BR12
 ((
uöt32_t
)0x10000000Ë

	)

2121 
	#GPIO_BSRR_BR13
 ((
uöt32_t
)0x20000000Ë

	)

2122 
	#GPIO_BSRR_BR14
 ((
uöt32_t
)0x40000000Ë

	)

2123 
	#GPIO_BSRR_BR15
 ((
uöt32_t
)0x80000000Ë

	)

2126 
	#GPIO_BRR_BR0
 ((
uöt16_t
)0x0001Ë

	)

2127 
	#GPIO_BRR_BR1
 ((
uöt16_t
)0x0002Ë

	)

2128 
	#GPIO_BRR_BR2
 ((
uöt16_t
)0x0004Ë

	)

2129 
	#GPIO_BRR_BR3
 ((
uöt16_t
)0x0008Ë

	)

2130 
	#GPIO_BRR_BR4
 ((
uöt16_t
)0x0010Ë

	)

2131 
	#GPIO_BRR_BR5
 ((
uöt16_t
)0x0020Ë

	)

2132 
	#GPIO_BRR_BR6
 ((
uöt16_t
)0x0040Ë

	)

2133 
	#GPIO_BRR_BR7
 ((
uöt16_t
)0x0080Ë

	)

2134 
	#GPIO_BRR_BR8
 ((
uöt16_t
)0x0100Ë

	)

2135 
	#GPIO_BRR_BR9
 ((
uöt16_t
)0x0200Ë

	)

2136 
	#GPIO_BRR_BR10
 ((
uöt16_t
)0x0400Ë

	)

2137 
	#GPIO_BRR_BR11
 ((
uöt16_t
)0x0800Ë

	)

2138 
	#GPIO_BRR_BR12
 ((
uöt16_t
)0x1000Ë

	)

2139 
	#GPIO_BRR_BR13
 ((
uöt16_t
)0x2000Ë

	)

2140 
	#GPIO_BRR_BR14
 ((
uöt16_t
)0x4000Ë

	)

2141 
	#GPIO_BRR_BR15
 ((
uöt16_t
)0x8000Ë

	)

2144 
	#GPIO_LCKR_LCK0
 ((
uöt32_t
)0x00000001Ë

	)

2145 
	#GPIO_LCKR_LCK1
 ((
uöt32_t
)0x00000002Ë

	)

2146 
	#GPIO_LCKR_LCK2
 ((
uöt32_t
)0x00000004Ë

	)

2147 
	#GPIO_LCKR_LCK3
 ((
uöt32_t
)0x00000008Ë

	)

2148 
	#GPIO_LCKR_LCK4
 ((
uöt32_t
)0x00000010Ë

	)

2149 
	#GPIO_LCKR_LCK5
 ((
uöt32_t
)0x00000020Ë

	)

2150 
	#GPIO_LCKR_LCK6
 ((
uöt32_t
)0x00000040Ë

	)

2151 
	#GPIO_LCKR_LCK7
 ((
uöt32_t
)0x00000080Ë

	)

2152 
	#GPIO_LCKR_LCK8
 ((
uöt32_t
)0x00000100Ë

	)

2153 
	#GPIO_LCKR_LCK9
 ((
uöt32_t
)0x00000200Ë

	)

2154 
	#GPIO_LCKR_LCK10
 ((
uöt32_t
)0x00000400Ë

	)

2155 
	#GPIO_LCKR_LCK11
 ((
uöt32_t
)0x00000800Ë

	)

2156 
	#GPIO_LCKR_LCK12
 ((
uöt32_t
)0x00001000Ë

	)

2157 
	#GPIO_LCKR_LCK13
 ((
uöt32_t
)0x00002000Ë

	)

2158 
	#GPIO_LCKR_LCK14
 ((
uöt32_t
)0x00004000Ë

	)

2159 
	#GPIO_LCKR_LCK15
 ((
uöt32_t
)0x00008000Ë

	)

2160 
	#GPIO_LCKR_LCKK
 ((
uöt32_t
)0x00010000Ë

	)

2165 
	#AFIO_EVCR_PIN
 ((
uöt8_t
)0x0FË

	)

2166 
	#AFIO_EVCR_PIN_0
 ((
uöt8_t
)0x01Ë

	)

2167 
	#AFIO_EVCR_PIN_1
 ((
uöt8_t
)0x02Ë

	)

2168 
	#AFIO_EVCR_PIN_2
 ((
uöt8_t
)0x04Ë

	)

2169 
	#AFIO_EVCR_PIN_3
 ((
uöt8_t
)0x08Ë

	)

2172 
	#AFIO_EVCR_PIN_PX0
 ((
uöt8_t
)0x00Ë

	)

2173 
	#AFIO_EVCR_PIN_PX1
 ((
uöt8_t
)0x01Ë

	)

2174 
	#AFIO_EVCR_PIN_PX2
 ((
uöt8_t
)0x02Ë

	)

2175 
	#AFIO_EVCR_PIN_PX3
 ((
uöt8_t
)0x03Ë

	)

2176 
	#AFIO_EVCR_PIN_PX4
 ((
uöt8_t
)0x04Ë

	)

2177 
	#AFIO_EVCR_PIN_PX5
 ((
uöt8_t
)0x05Ë

	)

2178 
	#AFIO_EVCR_PIN_PX6
 ((
uöt8_t
)0x06Ë

	)

2179 
	#AFIO_EVCR_PIN_PX7
 ((
uöt8_t
)0x07Ë

	)

2180 
	#AFIO_EVCR_PIN_PX8
 ((
uöt8_t
)0x08Ë

	)

2181 
	#AFIO_EVCR_PIN_PX9
 ((
uöt8_t
)0x09Ë

	)

2182 
	#AFIO_EVCR_PIN_PX10
 ((
uöt8_t
)0x0AË

	)

2183 
	#AFIO_EVCR_PIN_PX11
 ((
uöt8_t
)0x0BË

	)

2184 
	#AFIO_EVCR_PIN_PX12
 ((
uöt8_t
)0x0CË

	)

2185 
	#AFIO_EVCR_PIN_PX13
 ((
uöt8_t
)0x0DË

	)

2186 
	#AFIO_EVCR_PIN_PX14
 ((
uöt8_t
)0x0EË

	)

2187 
	#AFIO_EVCR_PIN_PX15
 ((
uöt8_t
)0x0FË

	)

2189 
	#AFIO_EVCR_PORT
 ((
uöt8_t
)0x70Ë

	)

2190 
	#AFIO_EVCR_PORT_0
 ((
uöt8_t
)0x10Ë

	)

2191 
	#AFIO_EVCR_PORT_1
 ((
uöt8_t
)0x20Ë

	)

2192 
	#AFIO_EVCR_PORT_2
 ((
uöt8_t
)0x40Ë

	)

2195 
	#AFIO_EVCR_PORT_PA
 ((
uöt8_t
)0x00Ë

	)

2196 
	#AFIO_EVCR_PORT_PB
 ((
uöt8_t
)0x10Ë

	)

2197 
	#AFIO_EVCR_PORT_PC
 ((
uöt8_t
)0x20Ë

	)

2198 
	#AFIO_EVCR_PORT_PD
 ((
uöt8_t
)0x30Ë

	)

2199 
	#AFIO_EVCR_PORT_PE
 ((
uöt8_t
)0x40Ë

	)

2201 
	#AFIO_EVCR_EVOE
 ((
uöt8_t
)0x80Ë

	)

2204 
	#AFIO_MAPR_SPI1_REMAP
 ((
uöt32_t
)0x00000001Ë

	)

2205 
	#AFIO_MAPR_I2C1_REMAP
 ((
uöt32_t
)0x00000002Ë

	)

2206 
	#AFIO_MAPR_USART1_REMAP
 ((
uöt32_t
)0x00000004Ë

	)

2207 
	#AFIO_MAPR_USART2_REMAP
 ((
uöt32_t
)0x00000008Ë

	)

2209 
	#AFIO_MAPR_USART3_REMAP
 ((
uöt32_t
)0x00000030Ë

	)

2210 
	#AFIO_MAPR_USART3_REMAP_0
 ((
uöt32_t
)0x00000010Ë

	)

2211 
	#AFIO_MAPR_USART3_REMAP_1
 ((
uöt32_t
)0x00000020Ë

	)

2214 
	#AFIO_MAPR_USART3_REMAP_NOREMAP
 ((
uöt32_t
)0x00000000Ë

	)

2215 
	#AFIO_MAPR_USART3_REMAP_PARTIALREMAP
 ((
uöt32_t
)0x00000010Ë

	)

2216 
	#AFIO_MAPR_USART3_REMAP_FULLREMAP
 ((
uöt32_t
)0x00000030Ë

	)

2218 
	#AFIO_MAPR_TIM1_REMAP
 ((
uöt32_t
)0x000000C0Ë

	)

2219 
	#AFIO_MAPR_TIM1_REMAP_0
 ((
uöt32_t
)0x00000040Ë

	)

2220 
	#AFIO_MAPR_TIM1_REMAP_1
 ((
uöt32_t
)0x00000080Ë

	)

2223 
	#AFIO_MAPR_TIM1_REMAP_NOREMAP
 ((
uöt32_t
)0x00000000Ë

	)

2224 
	#AFIO_MAPR_TIM1_REMAP_PARTIALREMAP
 ((
uöt32_t
)0x00000040Ë

	)

2225 
	#AFIO_MAPR_TIM1_REMAP_FULLREMAP
 ((
uöt32_t
)0x000000C0Ë

	)

2227 
	#AFIO_MAPR_TIM2_REMAP
 ((
uöt32_t
)0x00000300Ë

	)

2228 
	#AFIO_MAPR_TIM2_REMAP_0
 ((
uöt32_t
)0x00000100Ë

	)

2229 
	#AFIO_MAPR_TIM2_REMAP_1
 ((
uöt32_t
)0x00000200Ë

	)

2232 
	#AFIO_MAPR_TIM2_REMAP_NOREMAP
 ((
uöt32_t
)0x00000000Ë

	)

2233 
	#AFIO_MAPR_TIM2_REMAP_PARTIALREMAP1
 ((
uöt32_t
)0x00000100Ë

	)

2234 
	#AFIO_MAPR_TIM2_REMAP_PARTIALREMAP2
 ((
uöt32_t
)0x00000200Ë

	)

2235 
	#AFIO_MAPR_TIM2_REMAP_FULLREMAP
 ((
uöt32_t
)0x00000300Ë

	)

2237 
	#AFIO_MAPR_TIM3_REMAP
 ((
uöt32_t
)0x00000C00Ë

	)

2238 
	#AFIO_MAPR_TIM3_REMAP_0
 ((
uöt32_t
)0x00000400Ë

	)

2239 
	#AFIO_MAPR_TIM3_REMAP_1
 ((
uöt32_t
)0x00000800Ë

	)

2242 
	#AFIO_MAPR_TIM3_REMAP_NOREMAP
 ((
uöt32_t
)0x00000000Ë

	)

2243 
	#AFIO_MAPR_TIM3_REMAP_PARTIALREMAP
 ((
uöt32_t
)0x00000800Ë

	)

2244 
	#AFIO_MAPR_TIM3_REMAP_FULLREMAP
 ((
uöt32_t
)0x00000C00Ë

	)

2246 
	#AFIO_MAPR_TIM4_REMAP
 ((
uöt32_t
)0x00001000Ë

	)

2248 
	#AFIO_MAPR_CAN_REMAP
 ((
uöt32_t
)0x00006000Ë

	)

2249 
	#AFIO_MAPR_CAN_REMAP_0
 ((
uöt32_t
)0x00002000Ë

	)

2250 
	#AFIO_MAPR_CAN_REMAP_1
 ((
uöt32_t
)0x00004000Ë

	)

2253 
	#AFIO_MAPR_CAN_REMAP_REMAP1
 ((
uöt32_t
)0x00000000Ë

	)

2254 
	#AFIO_MAPR_CAN_REMAP_REMAP2
 ((
uöt32_t
)0x00004000Ë

	)

2255 
	#AFIO_MAPR_CAN_REMAP_REMAP3
 ((
uöt32_t
)0x00006000Ë

	)

2257 
	#AFIO_MAPR_PD01_REMAP
 ((
uöt32_t
)0x00008000Ë

	)

2258 
	#AFIO_MAPR_TIM5CH4_IREMAP
 ((
uöt32_t
)0x00010000Ë

	)

2259 
	#AFIO_MAPR_ADC1_ETRGINJ_REMAP
 ((
uöt32_t
)0x00020000Ë

	)

2260 
	#AFIO_MAPR_ADC1_ETRGREG_REMAP
 ((
uöt32_t
)0x00040000Ë

	)

2261 
	#AFIO_MAPR_ADC2_ETRGINJ_REMAP
 ((
uöt32_t
)0x00080000Ë

	)

2262 
	#AFIO_MAPR_ADC2_ETRGREG_REMAP
 ((
uöt32_t
)0x00100000Ë

	)

2265 
	#AFIO_MAPR_SWJ_CFG
 ((
uöt32_t
)0x07000000Ë

	)

2266 
	#AFIO_MAPR_SWJ_CFG_0
 ((
uöt32_t
)0x01000000Ë

	)

2267 
	#AFIO_MAPR_SWJ_CFG_1
 ((
uöt32_t
)0x02000000Ë

	)

2268 
	#AFIO_MAPR_SWJ_CFG_2
 ((
uöt32_t
)0x04000000Ë

	)

2270 
	#AFIO_MAPR_SWJ_CFG_RESET
 ((
uöt32_t
)0x00000000Ë

	)

2271 
	#AFIO_MAPR_SWJ_CFG_NOJNTRST
 ((
uöt32_t
)0x01000000Ë

	)

2272 
	#AFIO_MAPR_SWJ_CFG_JTAGDISABLE
 ((
uöt32_t
)0x02000000Ë

	)

2273 
	#AFIO_MAPR_SWJ_CFG_DISABLE
 ((
uöt32_t
)0x04000000Ë

	)

2275 #ifde‡
STM32F10X_CL


2277 
	#AFIO_MAPR_ETH_REMAP
 ((
uöt32_t
)0x00200000Ë

	)

2280 
	#AFIO_MAPR_CAN2_REMAP
 ((
uöt32_t
)0x00400000Ë

	)

2283 
	#AFIO_MAPR_MII_RMII_SEL
 ((
uöt32_t
)0x00800000Ë

	)

2286 
	#AFIO_MAPR_SPI3_REMAP
 ((
uöt32_t
)0x10000000Ë

	)

2289 
	#AFIO_MAPR_TIM2ITR1_IREMAP
 ((
uöt32_t
)0x20000000Ë

	)

2292 
	#AFIO_MAPR_PTP_PPS_REMAP
 ((
uöt32_t
)0x20000000Ë

	)

2296 
	#AFIO_EXTICR1_EXTI0
 ((
uöt16_t
)0x000FË

	)

2297 
	#AFIO_EXTICR1_EXTI1
 ((
uöt16_t
)0x00F0Ë

	)

2298 
	#AFIO_EXTICR1_EXTI2
 ((
uöt16_t
)0x0F00Ë

	)

2299 
	#AFIO_EXTICR1_EXTI3
 ((
uöt16_t
)0xF000Ë

	)

2302 
	#AFIO_EXTICR1_EXTI0_PA
 ((
uöt16_t
)0x0000Ë

	)

2303 
	#AFIO_EXTICR1_EXTI0_PB
 ((
uöt16_t
)0x0001Ë

	)

2304 
	#AFIO_EXTICR1_EXTI0_PC
 ((
uöt16_t
)0x0002Ë

	)

2305 
	#AFIO_EXTICR1_EXTI0_PD
 ((
uöt16_t
)0x0003Ë

	)

2306 
	#AFIO_EXTICR1_EXTI0_PE
 ((
uöt16_t
)0x0004Ë

	)

2307 
	#AFIO_EXTICR1_EXTI0_PF
 ((
uöt16_t
)0x0005Ë

	)

2308 
	#AFIO_EXTICR1_EXTI0_PG
 ((
uöt16_t
)0x0006Ë

	)

2311 
	#AFIO_EXTICR1_EXTI1_PA
 ((
uöt16_t
)0x0000Ë

	)

2312 
	#AFIO_EXTICR1_EXTI1_PB
 ((
uöt16_t
)0x0010Ë

	)

2313 
	#AFIO_EXTICR1_EXTI1_PC
 ((
uöt16_t
)0x0020Ë

	)

2314 
	#AFIO_EXTICR1_EXTI1_PD
 ((
uöt16_t
)0x0030Ë

	)

2315 
	#AFIO_EXTICR1_EXTI1_PE
 ((
uöt16_t
)0x0040Ë

	)

2316 
	#AFIO_EXTICR1_EXTI1_PF
 ((
uöt16_t
)0x0050Ë

	)

2317 
	#AFIO_EXTICR1_EXTI1_PG
 ((
uöt16_t
)0x0060Ë

	)

2320 
	#AFIO_EXTICR1_EXTI2_PA
 ((
uöt16_t
)0x0000Ë

	)

2321 
	#AFIO_EXTICR1_EXTI2_PB
 ((
uöt16_t
)0x0100Ë

	)

2322 
	#AFIO_EXTICR1_EXTI2_PC
 ((
uöt16_t
)0x0200Ë

	)

2323 
	#AFIO_EXTICR1_EXTI2_PD
 ((
uöt16_t
)0x0300Ë

	)

2324 
	#AFIO_EXTICR1_EXTI2_PE
 ((
uöt16_t
)0x0400Ë

	)

2325 
	#AFIO_EXTICR1_EXTI2_PF
 ((
uöt16_t
)0x0500Ë

	)

2326 
	#AFIO_EXTICR1_EXTI2_PG
 ((
uöt16_t
)0x0600Ë

	)

2329 
	#AFIO_EXTICR1_EXTI3_PA
 ((
uöt16_t
)0x0000Ë

	)

2330 
	#AFIO_EXTICR1_EXTI3_PB
 ((
uöt16_t
)0x1000Ë

	)

2331 
	#AFIO_EXTICR1_EXTI3_PC
 ((
uöt16_t
)0x2000Ë

	)

2332 
	#AFIO_EXTICR1_EXTI3_PD
 ((
uöt16_t
)0x3000Ë

	)

2333 
	#AFIO_EXTICR1_EXTI3_PE
 ((
uöt16_t
)0x4000Ë

	)

2334 
	#AFIO_EXTICR1_EXTI3_PF
 ((
uöt16_t
)0x5000Ë

	)

2335 
	#AFIO_EXTICR1_EXTI3_PG
 ((
uöt16_t
)0x6000Ë

	)

2338 
	#AFIO_EXTICR2_EXTI4
 ((
uöt16_t
)0x000FË

	)

2339 
	#AFIO_EXTICR2_EXTI5
 ((
uöt16_t
)0x00F0Ë

	)

2340 
	#AFIO_EXTICR2_EXTI6
 ((
uöt16_t
)0x0F00Ë

	)

2341 
	#AFIO_EXTICR2_EXTI7
 ((
uöt16_t
)0xF000Ë

	)

2344 
	#AFIO_EXTICR2_EXTI4_PA
 ((
uöt16_t
)0x0000Ë

	)

2345 
	#AFIO_EXTICR2_EXTI4_PB
 ((
uöt16_t
)0x0001Ë

	)

2346 
	#AFIO_EXTICR2_EXTI4_PC
 ((
uöt16_t
)0x0002Ë

	)

2347 
	#AFIO_EXTICR2_EXTI4_PD
 ((
uöt16_t
)0x0003Ë

	)

2348 
	#AFIO_EXTICR2_EXTI4_PE
 ((
uöt16_t
)0x0004Ë

	)

2349 
	#AFIO_EXTICR2_EXTI4_PF
 ((
uöt16_t
)0x0005Ë

	)

2350 
	#AFIO_EXTICR2_EXTI4_PG
 ((
uöt16_t
)0x0006Ë

	)

2353 
	#AFIO_EXTICR2_EXTI5_PA
 ((
uöt16_t
)0x0000Ë

	)

2354 
	#AFIO_EXTICR2_EXTI5_PB
 ((
uöt16_t
)0x0010Ë

	)

2355 
	#AFIO_EXTICR2_EXTI5_PC
 ((
uöt16_t
)0x0020Ë

	)

2356 
	#AFIO_EXTICR2_EXTI5_PD
 ((
uöt16_t
)0x0030Ë

	)

2357 
	#AFIO_EXTICR2_EXTI5_PE
 ((
uöt16_t
)0x0040Ë

	)

2358 
	#AFIO_EXTICR2_EXTI5_PF
 ((
uöt16_t
)0x0050Ë

	)

2359 
	#AFIO_EXTICR2_EXTI5_PG
 ((
uöt16_t
)0x0060Ë

	)

2362 
	#AFIO_EXTICR2_EXTI6_PA
 ((
uöt16_t
)0x0000Ë

	)

2363 
	#AFIO_EXTICR2_EXTI6_PB
 ((
uöt16_t
)0x0100Ë

	)

2364 
	#AFIO_EXTICR2_EXTI6_PC
 ((
uöt16_t
)0x0200Ë

	)

2365 
	#AFIO_EXTICR2_EXTI6_PD
 ((
uöt16_t
)0x0300Ë

	)

2366 
	#AFIO_EXTICR2_EXTI6_PE
 ((
uöt16_t
)0x0400Ë

	)

2367 
	#AFIO_EXTICR2_EXTI6_PF
 ((
uöt16_t
)0x0500Ë

	)

2368 
	#AFIO_EXTICR2_EXTI6_PG
 ((
uöt16_t
)0x0600Ë

	)

2371 
	#AFIO_EXTICR2_EXTI7_PA
 ((
uöt16_t
)0x0000Ë

	)

2372 
	#AFIO_EXTICR2_EXTI7_PB
 ((
uöt16_t
)0x1000Ë

	)

2373 
	#AFIO_EXTICR2_EXTI7_PC
 ((
uöt16_t
)0x2000Ë

	)

2374 
	#AFIO_EXTICR2_EXTI7_PD
 ((
uöt16_t
)0x3000Ë

	)

2375 
	#AFIO_EXTICR2_EXTI7_PE
 ((
uöt16_t
)0x4000Ë

	)

2376 
	#AFIO_EXTICR2_EXTI7_PF
 ((
uöt16_t
)0x5000Ë

	)

2377 
	#AFIO_EXTICR2_EXTI7_PG
 ((
uöt16_t
)0x6000Ë

	)

2380 
	#AFIO_EXTICR3_EXTI8
 ((
uöt16_t
)0x000FË

	)

2381 
	#AFIO_EXTICR3_EXTI9
 ((
uöt16_t
)0x00F0Ë

	)

2382 
	#AFIO_EXTICR3_EXTI10
 ((
uöt16_t
)0x0F00Ë

	)

2383 
	#AFIO_EXTICR3_EXTI11
 ((
uöt16_t
)0xF000Ë

	)

2386 
	#AFIO_EXTICR3_EXTI8_PA
 ((
uöt16_t
)0x0000Ë

	)

2387 
	#AFIO_EXTICR3_EXTI8_PB
 ((
uöt16_t
)0x0001Ë

	)

2388 
	#AFIO_EXTICR3_EXTI8_PC
 ((
uöt16_t
)0x0002Ë

	)

2389 
	#AFIO_EXTICR3_EXTI8_PD
 ((
uöt16_t
)0x0003Ë

	)

2390 
	#AFIO_EXTICR3_EXTI8_PE
 ((
uöt16_t
)0x0004Ë

	)

2391 
	#AFIO_EXTICR3_EXTI8_PF
 ((
uöt16_t
)0x0005Ë

	)

2392 
	#AFIO_EXTICR3_EXTI8_PG
 ((
uöt16_t
)0x0006Ë

	)

2395 
	#AFIO_EXTICR3_EXTI9_PA
 ((
uöt16_t
)0x0000Ë

	)

2396 
	#AFIO_EXTICR3_EXTI9_PB
 ((
uöt16_t
)0x0010Ë

	)

2397 
	#AFIO_EXTICR3_EXTI9_PC
 ((
uöt16_t
)0x0020Ë

	)

2398 
	#AFIO_EXTICR3_EXTI9_PD
 ((
uöt16_t
)0x0030Ë

	)

2399 
	#AFIO_EXTICR3_EXTI9_PE
 ((
uöt16_t
)0x0040Ë

	)

2400 
	#AFIO_EXTICR3_EXTI9_PF
 ((
uöt16_t
)0x0050Ë

	)

2401 
	#AFIO_EXTICR3_EXTI9_PG
 ((
uöt16_t
)0x0060Ë

	)

2404 
	#AFIO_EXTICR3_EXTI10_PA
 ((
uöt16_t
)0x0000Ë

	)

2405 
	#AFIO_EXTICR3_EXTI10_PB
 ((
uöt16_t
)0x0100Ë

	)

2406 
	#AFIO_EXTICR3_EXTI10_PC
 ((
uöt16_t
)0x0200Ë

	)

2407 
	#AFIO_EXTICR3_EXTI10_PD
 ((
uöt16_t
)0x0300Ë

	)

2408 
	#AFIO_EXTICR3_EXTI10_PE
 ((
uöt16_t
)0x0400Ë

	)

2409 
	#AFIO_EXTICR3_EXTI10_PF
 ((
uöt16_t
)0x0500Ë

	)

2410 
	#AFIO_EXTICR3_EXTI10_PG
 ((
uöt16_t
)0x0600Ë

	)

2413 
	#AFIO_EXTICR3_EXTI11_PA
 ((
uöt16_t
)0x0000Ë

	)

2414 
	#AFIO_EXTICR3_EXTI11_PB
 ((
uöt16_t
)0x1000Ë

	)

2415 
	#AFIO_EXTICR3_EXTI11_PC
 ((
uöt16_t
)0x2000Ë

	)

2416 
	#AFIO_EXTICR3_EXTI11_PD
 ((
uöt16_t
)0x3000Ë

	)

2417 
	#AFIO_EXTICR3_EXTI11_PE
 ((
uöt16_t
)0x4000Ë

	)

2418 
	#AFIO_EXTICR3_EXTI11_PF
 ((
uöt16_t
)0x5000Ë

	)

2419 
	#AFIO_EXTICR3_EXTI11_PG
 ((
uöt16_t
)0x6000Ë

	)

2422 
	#AFIO_EXTICR4_EXTI12
 ((
uöt16_t
)0x000FË

	)

2423 
	#AFIO_EXTICR4_EXTI13
 ((
uöt16_t
)0x00F0Ë

	)

2424 
	#AFIO_EXTICR4_EXTI14
 ((
uöt16_t
)0x0F00Ë

	)

2425 
	#AFIO_EXTICR4_EXTI15
 ((
uöt16_t
)0xF000Ë

	)

2428 
	#AFIO_EXTICR4_EXTI12_PA
 ((
uöt16_t
)0x0000Ë

	)

2429 
	#AFIO_EXTICR4_EXTI12_PB
 ((
uöt16_t
)0x0001Ë

	)

2430 
	#AFIO_EXTICR4_EXTI12_PC
 ((
uöt16_t
)0x0002Ë

	)

2431 
	#AFIO_EXTICR4_EXTI12_PD
 ((
uöt16_t
)0x0003Ë

	)

2432 
	#AFIO_EXTICR4_EXTI12_PE
 ((
uöt16_t
)0x0004Ë

	)

2433 
	#AFIO_EXTICR4_EXTI12_PF
 ((
uöt16_t
)0x0005Ë

	)

2434 
	#AFIO_EXTICR4_EXTI12_PG
 ((
uöt16_t
)0x0006Ë

	)

2437 
	#AFIO_EXTICR4_EXTI13_PA
 ((
uöt16_t
)0x0000Ë

	)

2438 
	#AFIO_EXTICR4_EXTI13_PB
 ((
uöt16_t
)0x0010Ë

	)

2439 
	#AFIO_EXTICR4_EXTI13_PC
 ((
uöt16_t
)0x0020Ë

	)

2440 
	#AFIO_EXTICR4_EXTI13_PD
 ((
uöt16_t
)0x0030Ë

	)

2441 
	#AFIO_EXTICR4_EXTI13_PE
 ((
uöt16_t
)0x0040Ë

	)

2442 
	#AFIO_EXTICR4_EXTI13_PF
 ((
uöt16_t
)0x0050Ë

	)

2443 
	#AFIO_EXTICR4_EXTI13_PG
 ((
uöt16_t
)0x0060Ë

	)

2446 
	#AFIO_EXTICR4_EXTI14_PA
 ((
uöt16_t
)0x0000Ë

	)

2447 
	#AFIO_EXTICR4_EXTI14_PB
 ((
uöt16_t
)0x0100Ë

	)

2448 
	#AFIO_EXTICR4_EXTI14_PC
 ((
uöt16_t
)0x0200Ë

	)

2449 
	#AFIO_EXTICR4_EXTI14_PD
 ((
uöt16_t
)0x0300Ë

	)

2450 
	#AFIO_EXTICR4_EXTI14_PE
 ((
uöt16_t
)0x0400Ë

	)

2451 
	#AFIO_EXTICR4_EXTI14_PF
 ((
uöt16_t
)0x0500Ë

	)

2452 
	#AFIO_EXTICR4_EXTI14_PG
 ((
uöt16_t
)0x0600Ë

	)

2455 
	#AFIO_EXTICR4_EXTI15_PA
 ((
uöt16_t
)0x0000Ë

	)

2456 
	#AFIO_EXTICR4_EXTI15_PB
 ((
uöt16_t
)0x1000Ë

	)

2457 
	#AFIO_EXTICR4_EXTI15_PC
 ((
uöt16_t
)0x2000Ë

	)

2458 
	#AFIO_EXTICR4_EXTI15_PD
 ((
uöt16_t
)0x3000Ë

	)

2459 
	#AFIO_EXTICR4_EXTI15_PE
 ((
uöt16_t
)0x4000Ë

	)

2460 
	#AFIO_EXTICR4_EXTI15_PF
 ((
uöt16_t
)0x5000Ë

	)

2461 
	#AFIO_EXTICR4_EXTI15_PG
 ((
uöt16_t
)0x6000Ë

	)

2470 
	#SysTick_CTRL_ENABLE
 ((
uöt32_t
)0x00000001Ë

	)

2471 
	#SysTick_CTRL_TICKINT
 ((
uöt32_t
)0x00000002Ë

	)

2472 
	#SysTick_CTRL_CLKSOURCE
 ((
uöt32_t
)0x00000004Ë

	)

2473 
	#SysTick_CTRL_COUNTFLAG
 ((
uöt32_t
)0x00010000Ë

	)

2476 
	#SysTick_LOAD_RELOAD
 ((
uöt32_t
)0x00FFFFFFË

	)

2479 
	#SysTick_VAL_CURRENT
 ((
uöt32_t
)0x00FFFFFFË

	)

2482 
	#SysTick_CALIB_TENMS
 ((
uöt32_t
)0x00FFFFFFË

	)

2483 
	#SysTick_CALIB_SKEW
 ((
uöt32_t
)0x40000000Ë

	)

2484 
	#SysTick_CALIB_NOREF
 ((
uöt32_t
)0x80000000Ë

	)

2493 
	#NVIC_ISER_SETENA
 ((
uöt32_t
)0xFFFFFFFFË

	)

2494 
	#NVIC_ISER_SETENA_0
 ((
uöt32_t
)0x00000001Ë

	)

2495 
	#NVIC_ISER_SETENA_1
 ((
uöt32_t
)0x00000002Ë

	)

2496 
	#NVIC_ISER_SETENA_2
 ((
uöt32_t
)0x00000004Ë

	)

2497 
	#NVIC_ISER_SETENA_3
 ((
uöt32_t
)0x00000008Ë

	)

2498 
	#NVIC_ISER_SETENA_4
 ((
uöt32_t
)0x00000010Ë

	)

2499 
	#NVIC_ISER_SETENA_5
 ((
uöt32_t
)0x00000020Ë

	)

2500 
	#NVIC_ISER_SETENA_6
 ((
uöt32_t
)0x00000040Ë

	)

2501 
	#NVIC_ISER_SETENA_7
 ((
uöt32_t
)0x00000080Ë

	)

2502 
	#NVIC_ISER_SETENA_8
 ((
uöt32_t
)0x00000100Ë

	)

2503 
	#NVIC_ISER_SETENA_9
 ((
uöt32_t
)0x00000200Ë

	)

2504 
	#NVIC_ISER_SETENA_10
 ((
uöt32_t
)0x00000400Ë

	)

2505 
	#NVIC_ISER_SETENA_11
 ((
uöt32_t
)0x00000800Ë

	)

2506 
	#NVIC_ISER_SETENA_12
 ((
uöt32_t
)0x00001000Ë

	)

2507 
	#NVIC_ISER_SETENA_13
 ((
uöt32_t
)0x00002000Ë

	)

2508 
	#NVIC_ISER_SETENA_14
 ((
uöt32_t
)0x00004000Ë

	)

2509 
	#NVIC_ISER_SETENA_15
 ((
uöt32_t
)0x00008000Ë

	)

2510 
	#NVIC_ISER_SETENA_16
 ((
uöt32_t
)0x00010000Ë

	)

2511 
	#NVIC_ISER_SETENA_17
 ((
uöt32_t
)0x00020000Ë

	)

2512 
	#NVIC_ISER_SETENA_18
 ((
uöt32_t
)0x00040000Ë

	)

2513 
	#NVIC_ISER_SETENA_19
 ((
uöt32_t
)0x00080000Ë

	)

2514 
	#NVIC_ISER_SETENA_20
 ((
uöt32_t
)0x00100000Ë

	)

2515 
	#NVIC_ISER_SETENA_21
 ((
uöt32_t
)0x00200000Ë

	)

2516 
	#NVIC_ISER_SETENA_22
 ((
uöt32_t
)0x00400000Ë

	)

2517 
	#NVIC_ISER_SETENA_23
 ((
uöt32_t
)0x00800000Ë

	)

2518 
	#NVIC_ISER_SETENA_24
 ((
uöt32_t
)0x01000000Ë

	)

2519 
	#NVIC_ISER_SETENA_25
 ((
uöt32_t
)0x02000000Ë

	)

2520 
	#NVIC_ISER_SETENA_26
 ((
uöt32_t
)0x04000000Ë

	)

2521 
	#NVIC_ISER_SETENA_27
 ((
uöt32_t
)0x08000000Ë

	)

2522 
	#NVIC_ISER_SETENA_28
 ((
uöt32_t
)0x10000000Ë

	)

2523 
	#NVIC_ISER_SETENA_29
 ((
uöt32_t
)0x20000000Ë

	)

2524 
	#NVIC_ISER_SETENA_30
 ((
uöt32_t
)0x40000000Ë

	)

2525 
	#NVIC_ISER_SETENA_31
 ((
uöt32_t
)0x80000000Ë

	)

2528 
	#NVIC_ICER_CLRENA
 ((
uöt32_t
)0xFFFFFFFFË

	)

2529 
	#NVIC_ICER_CLRENA_0
 ((
uöt32_t
)0x00000001Ë

	)

2530 
	#NVIC_ICER_CLRENA_1
 ((
uöt32_t
)0x00000002Ë

	)

2531 
	#NVIC_ICER_CLRENA_2
 ((
uöt32_t
)0x00000004Ë

	)

2532 
	#NVIC_ICER_CLRENA_3
 ((
uöt32_t
)0x00000008Ë

	)

2533 
	#NVIC_ICER_CLRENA_4
 ((
uöt32_t
)0x00000010Ë

	)

2534 
	#NVIC_ICER_CLRENA_5
 ((
uöt32_t
)0x00000020Ë

	)

2535 
	#NVIC_ICER_CLRENA_6
 ((
uöt32_t
)0x00000040Ë

	)

2536 
	#NVIC_ICER_CLRENA_7
 ((
uöt32_t
)0x00000080Ë

	)

2537 
	#NVIC_ICER_CLRENA_8
 ((
uöt32_t
)0x00000100Ë

	)

2538 
	#NVIC_ICER_CLRENA_9
 ((
uöt32_t
)0x00000200Ë

	)

2539 
	#NVIC_ICER_CLRENA_10
 ((
uöt32_t
)0x00000400Ë

	)

2540 
	#NVIC_ICER_CLRENA_11
 ((
uöt32_t
)0x00000800Ë

	)

2541 
	#NVIC_ICER_CLRENA_12
 ((
uöt32_t
)0x00001000Ë

	)

2542 
	#NVIC_ICER_CLRENA_13
 ((
uöt32_t
)0x00002000Ë

	)

2543 
	#NVIC_ICER_CLRENA_14
 ((
uöt32_t
)0x00004000Ë

	)

2544 
	#NVIC_ICER_CLRENA_15
 ((
uöt32_t
)0x00008000Ë

	)

2545 
	#NVIC_ICER_CLRENA_16
 ((
uöt32_t
)0x00010000Ë

	)

2546 
	#NVIC_ICER_CLRENA_17
 ((
uöt32_t
)0x00020000Ë

	)

2547 
	#NVIC_ICER_CLRENA_18
 ((
uöt32_t
)0x00040000Ë

	)

2548 
	#NVIC_ICER_CLRENA_19
 ((
uöt32_t
)0x00080000Ë

	)

2549 
	#NVIC_ICER_CLRENA_20
 ((
uöt32_t
)0x00100000Ë

	)

2550 
	#NVIC_ICER_CLRENA_21
 ((
uöt32_t
)0x00200000Ë

	)

2551 
	#NVIC_ICER_CLRENA_22
 ((
uöt32_t
)0x00400000Ë

	)

2552 
	#NVIC_ICER_CLRENA_23
 ((
uöt32_t
)0x00800000Ë

	)

2553 
	#NVIC_ICER_CLRENA_24
 ((
uöt32_t
)0x01000000Ë

	)

2554 
	#NVIC_ICER_CLRENA_25
 ((
uöt32_t
)0x02000000Ë

	)

2555 
	#NVIC_ICER_CLRENA_26
 ((
uöt32_t
)0x04000000Ë

	)

2556 
	#NVIC_ICER_CLRENA_27
 ((
uöt32_t
)0x08000000Ë

	)

2557 
	#NVIC_ICER_CLRENA_28
 ((
uöt32_t
)0x10000000Ë

	)

2558 
	#NVIC_ICER_CLRENA_29
 ((
uöt32_t
)0x20000000Ë

	)

2559 
	#NVIC_ICER_CLRENA_30
 ((
uöt32_t
)0x40000000Ë

	)

2560 
	#NVIC_ICER_CLRENA_31
 ((
uöt32_t
)0x80000000Ë

	)

2563 
	#NVIC_ISPR_SETPEND
 ((
uöt32_t
)0xFFFFFFFFË

	)

2564 
	#NVIC_ISPR_SETPEND_0
 ((
uöt32_t
)0x00000001Ë

	)

2565 
	#NVIC_ISPR_SETPEND_1
 ((
uöt32_t
)0x00000002Ë

	)

2566 
	#NVIC_ISPR_SETPEND_2
 ((
uöt32_t
)0x00000004Ë

	)

2567 
	#NVIC_ISPR_SETPEND_3
 ((
uöt32_t
)0x00000008Ë

	)

2568 
	#NVIC_ISPR_SETPEND_4
 ((
uöt32_t
)0x00000010Ë

	)

2569 
	#NVIC_ISPR_SETPEND_5
 ((
uöt32_t
)0x00000020Ë

	)

2570 
	#NVIC_ISPR_SETPEND_6
 ((
uöt32_t
)0x00000040Ë

	)

2571 
	#NVIC_ISPR_SETPEND_7
 ((
uöt32_t
)0x00000080Ë

	)

2572 
	#NVIC_ISPR_SETPEND_8
 ((
uöt32_t
)0x00000100Ë

	)

2573 
	#NVIC_ISPR_SETPEND_9
 ((
uöt32_t
)0x00000200Ë

	)

2574 
	#NVIC_ISPR_SETPEND_10
 ((
uöt32_t
)0x00000400Ë

	)

2575 
	#NVIC_ISPR_SETPEND_11
 ((
uöt32_t
)0x00000800Ë

	)

2576 
	#NVIC_ISPR_SETPEND_12
 ((
uöt32_t
)0x00001000Ë

	)

2577 
	#NVIC_ISPR_SETPEND_13
 ((
uöt32_t
)0x00002000Ë

	)

2578 
	#NVIC_ISPR_SETPEND_14
 ((
uöt32_t
)0x00004000Ë

	)

2579 
	#NVIC_ISPR_SETPEND_15
 ((
uöt32_t
)0x00008000Ë

	)

2580 
	#NVIC_ISPR_SETPEND_16
 ((
uöt32_t
)0x00010000Ë

	)

2581 
	#NVIC_ISPR_SETPEND_17
 ((
uöt32_t
)0x00020000Ë

	)

2582 
	#NVIC_ISPR_SETPEND_18
 ((
uöt32_t
)0x00040000Ë

	)

2583 
	#NVIC_ISPR_SETPEND_19
 ((
uöt32_t
)0x00080000Ë

	)

2584 
	#NVIC_ISPR_SETPEND_20
 ((
uöt32_t
)0x00100000Ë

	)

2585 
	#NVIC_ISPR_SETPEND_21
 ((
uöt32_t
)0x00200000Ë

	)

2586 
	#NVIC_ISPR_SETPEND_22
 ((
uöt32_t
)0x00400000Ë

	)

2587 
	#NVIC_ISPR_SETPEND_23
 ((
uöt32_t
)0x00800000Ë

	)

2588 
	#NVIC_ISPR_SETPEND_24
 ((
uöt32_t
)0x01000000Ë

	)

2589 
	#NVIC_ISPR_SETPEND_25
 ((
uöt32_t
)0x02000000Ë

	)

2590 
	#NVIC_ISPR_SETPEND_26
 ((
uöt32_t
)0x04000000Ë

	)

2591 
	#NVIC_ISPR_SETPEND_27
 ((
uöt32_t
)0x08000000Ë

	)

2592 
	#NVIC_ISPR_SETPEND_28
 ((
uöt32_t
)0x10000000Ë

	)

2593 
	#NVIC_ISPR_SETPEND_29
 ((
uöt32_t
)0x20000000Ë

	)

2594 
	#NVIC_ISPR_SETPEND_30
 ((
uöt32_t
)0x40000000Ë

	)

2595 
	#NVIC_ISPR_SETPEND_31
 ((
uöt32_t
)0x80000000Ë

	)

2598 
	#NVIC_ICPR_CLRPEND
 ((
uöt32_t
)0xFFFFFFFFË

	)

2599 
	#NVIC_ICPR_CLRPEND_0
 ((
uöt32_t
)0x00000001Ë

	)

2600 
	#NVIC_ICPR_CLRPEND_1
 ((
uöt32_t
)0x00000002Ë

	)

2601 
	#NVIC_ICPR_CLRPEND_2
 ((
uöt32_t
)0x00000004Ë

	)

2602 
	#NVIC_ICPR_CLRPEND_3
 ((
uöt32_t
)0x00000008Ë

	)

2603 
	#NVIC_ICPR_CLRPEND_4
 ((
uöt32_t
)0x00000010Ë

	)

2604 
	#NVIC_ICPR_CLRPEND_5
 ((
uöt32_t
)0x00000020Ë

	)

2605 
	#NVIC_ICPR_CLRPEND_6
 ((
uöt32_t
)0x00000040Ë

	)

2606 
	#NVIC_ICPR_CLRPEND_7
 ((
uöt32_t
)0x00000080Ë

	)

2607 
	#NVIC_ICPR_CLRPEND_8
 ((
uöt32_t
)0x00000100Ë

	)

2608 
	#NVIC_ICPR_CLRPEND_9
 ((
uöt32_t
)0x00000200Ë

	)

2609 
	#NVIC_ICPR_CLRPEND_10
 ((
uöt32_t
)0x00000400Ë

	)

2610 
	#NVIC_ICPR_CLRPEND_11
 ((
uöt32_t
)0x00000800Ë

	)

2611 
	#NVIC_ICPR_CLRPEND_12
 ((
uöt32_t
)0x00001000Ë

	)

2612 
	#NVIC_ICPR_CLRPEND_13
 ((
uöt32_t
)0x00002000Ë

	)

2613 
	#NVIC_ICPR_CLRPEND_14
 ((
uöt32_t
)0x00004000Ë

	)

2614 
	#NVIC_ICPR_CLRPEND_15
 ((
uöt32_t
)0x00008000Ë

	)

2615 
	#NVIC_ICPR_CLRPEND_16
 ((
uöt32_t
)0x00010000Ë

	)

2616 
	#NVIC_ICPR_CLRPEND_17
 ((
uöt32_t
)0x00020000Ë

	)

2617 
	#NVIC_ICPR_CLRPEND_18
 ((
uöt32_t
)0x00040000Ë

	)

2618 
	#NVIC_ICPR_CLRPEND_19
 ((
uöt32_t
)0x00080000Ë

	)

2619 
	#NVIC_ICPR_CLRPEND_20
 ((
uöt32_t
)0x00100000Ë

	)

2620 
	#NVIC_ICPR_CLRPEND_21
 ((
uöt32_t
)0x00200000Ë

	)

2621 
	#NVIC_ICPR_CLRPEND_22
 ((
uöt32_t
)0x00400000Ë

	)

2622 
	#NVIC_ICPR_CLRPEND_23
 ((
uöt32_t
)0x00800000Ë

	)

2623 
	#NVIC_ICPR_CLRPEND_24
 ((
uöt32_t
)0x01000000Ë

	)

2624 
	#NVIC_ICPR_CLRPEND_25
 ((
uöt32_t
)0x02000000Ë

	)

2625 
	#NVIC_ICPR_CLRPEND_26
 ((
uöt32_t
)0x04000000Ë

	)

2626 
	#NVIC_ICPR_CLRPEND_27
 ((
uöt32_t
)0x08000000Ë

	)

2627 
	#NVIC_ICPR_CLRPEND_28
 ((
uöt32_t
)0x10000000Ë

	)

2628 
	#NVIC_ICPR_CLRPEND_29
 ((
uöt32_t
)0x20000000Ë

	)

2629 
	#NVIC_ICPR_CLRPEND_30
 ((
uöt32_t
)0x40000000Ë

	)

2630 
	#NVIC_ICPR_CLRPEND_31
 ((
uöt32_t
)0x80000000Ë

	)

2633 
	#NVIC_IABR_ACTIVE
 ((
uöt32_t
)0xFFFFFFFFË

	)

2634 
	#NVIC_IABR_ACTIVE_0
 ((
uöt32_t
)0x00000001Ë

	)

2635 
	#NVIC_IABR_ACTIVE_1
 ((
uöt32_t
)0x00000002Ë

	)

2636 
	#NVIC_IABR_ACTIVE_2
 ((
uöt32_t
)0x00000004Ë

	)

2637 
	#NVIC_IABR_ACTIVE_3
 ((
uöt32_t
)0x00000008Ë

	)

2638 
	#NVIC_IABR_ACTIVE_4
 ((
uöt32_t
)0x00000010Ë

	)

2639 
	#NVIC_IABR_ACTIVE_5
 ((
uöt32_t
)0x00000020Ë

	)

2640 
	#NVIC_IABR_ACTIVE_6
 ((
uöt32_t
)0x00000040Ë

	)

2641 
	#NVIC_IABR_ACTIVE_7
 ((
uöt32_t
)0x00000080Ë

	)

2642 
	#NVIC_IABR_ACTIVE_8
 ((
uöt32_t
)0x00000100Ë

	)

2643 
	#NVIC_IABR_ACTIVE_9
 ((
uöt32_t
)0x00000200Ë

	)

2644 
	#NVIC_IABR_ACTIVE_10
 ((
uöt32_t
)0x00000400Ë

	)

2645 
	#NVIC_IABR_ACTIVE_11
 ((
uöt32_t
)0x00000800Ë

	)

2646 
	#NVIC_IABR_ACTIVE_12
 ((
uöt32_t
)0x00001000Ë

	)

2647 
	#NVIC_IABR_ACTIVE_13
 ((
uöt32_t
)0x00002000Ë

	)

2648 
	#NVIC_IABR_ACTIVE_14
 ((
uöt32_t
)0x00004000Ë

	)

2649 
	#NVIC_IABR_ACTIVE_15
 ((
uöt32_t
)0x00008000Ë

	)

2650 
	#NVIC_IABR_ACTIVE_16
 ((
uöt32_t
)0x00010000Ë

	)

2651 
	#NVIC_IABR_ACTIVE_17
 ((
uöt32_t
)0x00020000Ë

	)

2652 
	#NVIC_IABR_ACTIVE_18
 ((
uöt32_t
)0x00040000Ë

	)

2653 
	#NVIC_IABR_ACTIVE_19
 ((
uöt32_t
)0x00080000Ë

	)

2654 
	#NVIC_IABR_ACTIVE_20
 ((
uöt32_t
)0x00100000Ë

	)

2655 
	#NVIC_IABR_ACTIVE_21
 ((
uöt32_t
)0x00200000Ë

	)

2656 
	#NVIC_IABR_ACTIVE_22
 ((
uöt32_t
)0x00400000Ë

	)

2657 
	#NVIC_IABR_ACTIVE_23
 ((
uöt32_t
)0x00800000Ë

	)

2658 
	#NVIC_IABR_ACTIVE_24
 ((
uöt32_t
)0x01000000Ë

	)

2659 
	#NVIC_IABR_ACTIVE_25
 ((
uöt32_t
)0x02000000Ë

	)

2660 
	#NVIC_IABR_ACTIVE_26
 ((
uöt32_t
)0x04000000Ë

	)

2661 
	#NVIC_IABR_ACTIVE_27
 ((
uöt32_t
)0x08000000Ë

	)

2662 
	#NVIC_IABR_ACTIVE_28
 ((
uöt32_t
)0x10000000Ë

	)

2663 
	#NVIC_IABR_ACTIVE_29
 ((
uöt32_t
)0x20000000Ë

	)

2664 
	#NVIC_IABR_ACTIVE_30
 ((
uöt32_t
)0x40000000Ë

	)

2665 
	#NVIC_IABR_ACTIVE_31
 ((
uöt32_t
)0x80000000Ë

	)

2668 
	#NVIC_IPR0_PRI_0
 ((
uöt32_t
)0x000000FFË

	)

2669 
	#NVIC_IPR0_PRI_1
 ((
uöt32_t
)0x0000FF00Ë

	)

2670 
	#NVIC_IPR0_PRI_2
 ((
uöt32_t
)0x00FF0000Ë

	)

2671 
	#NVIC_IPR0_PRI_3
 ((
uöt32_t
)0xFF000000Ë

	)

2674 
	#NVIC_IPR1_PRI_4
 ((
uöt32_t
)0x000000FFË

	)

2675 
	#NVIC_IPR1_PRI_5
 ((
uöt32_t
)0x0000FF00Ë

	)

2676 
	#NVIC_IPR1_PRI_6
 ((
uöt32_t
)0x00FF0000Ë

	)

2677 
	#NVIC_IPR1_PRI_7
 ((
uöt32_t
)0xFF000000Ë

	)

2680 
	#NVIC_IPR2_PRI_8
 ((
uöt32_t
)0x000000FFË

	)

2681 
	#NVIC_IPR2_PRI_9
 ((
uöt32_t
)0x0000FF00Ë

	)

2682 
	#NVIC_IPR2_PRI_10
 ((
uöt32_t
)0x00FF0000Ë

	)

2683 
	#NVIC_IPR2_PRI_11
 ((
uöt32_t
)0xFF000000Ë

	)

2686 
	#NVIC_IPR3_PRI_12
 ((
uöt32_t
)0x000000FFË

	)

2687 
	#NVIC_IPR3_PRI_13
 ((
uöt32_t
)0x0000FF00Ë

	)

2688 
	#NVIC_IPR3_PRI_14
 ((
uöt32_t
)0x00FF0000Ë

	)

2689 
	#NVIC_IPR3_PRI_15
 ((
uöt32_t
)0xFF000000Ë

	)

2692 
	#NVIC_IPR4_PRI_16
 ((
uöt32_t
)0x000000FFË

	)

2693 
	#NVIC_IPR4_PRI_17
 ((
uöt32_t
)0x0000FF00Ë

	)

2694 
	#NVIC_IPR4_PRI_18
 ((
uöt32_t
)0x00FF0000Ë

	)

2695 
	#NVIC_IPR4_PRI_19
 ((
uöt32_t
)0xFF000000Ë

	)

2698 
	#NVIC_IPR5_PRI_20
 ((
uöt32_t
)0x000000FFË

	)

2699 
	#NVIC_IPR5_PRI_21
 ((
uöt32_t
)0x0000FF00Ë

	)

2700 
	#NVIC_IPR5_PRI_22
 ((
uöt32_t
)0x00FF0000Ë

	)

2701 
	#NVIC_IPR5_PRI_23
 ((
uöt32_t
)0xFF000000Ë

	)

2704 
	#NVIC_IPR6_PRI_24
 ((
uöt32_t
)0x000000FFË

	)

2705 
	#NVIC_IPR6_PRI_25
 ((
uöt32_t
)0x0000FF00Ë

	)

2706 
	#NVIC_IPR6_PRI_26
 ((
uöt32_t
)0x00FF0000Ë

	)

2707 
	#NVIC_IPR6_PRI_27
 ((
uöt32_t
)0xFF000000Ë

	)

2710 
	#NVIC_IPR7_PRI_28
 ((
uöt32_t
)0x000000FFË

	)

2711 
	#NVIC_IPR7_PRI_29
 ((
uöt32_t
)0x0000FF00Ë

	)

2712 
	#NVIC_IPR7_PRI_30
 ((
uöt32_t
)0x00FF0000Ë

	)

2713 
	#NVIC_IPR7_PRI_31
 ((
uöt32_t
)0xFF000000Ë

	)

2716 
	#SCB_CPUID_REVISION
 ((
uöt32_t
)0x0000000FË

	)

2717 
	#SCB_CPUID_PARTNO
 ((
uöt32_t
)0x0000FFF0Ë

	)

2718 
	#SCB_CPUID_C⁄°™t
 ((
uöt32_t
)0x000F0000Ë

	)

2719 
	#SCB_CPUID_VARIANT
 ((
uöt32_t
)0x00F00000Ë

	)

2720 
	#SCB_CPUID_IMPLEMENTER
 ((
uöt32_t
)0xFF000000Ë

	)

2723 
	#SCB_ICSR_VECTACTIVE
 ((
uöt32_t
)0x000001FFË

	)

2724 
	#SCB_ICSR_RETTOBASE
 ((
uöt32_t
)0x00000800Ë

	)

2725 
	#SCB_ICSR_VECTPENDING
 ((
uöt32_t
)0x003FF000Ë

	)

2726 
	#SCB_ICSR_ISRPENDING
 ((
uöt32_t
)0x00400000Ë

	)

2727 
	#SCB_ICSR_ISRPREEMPT
 ((
uöt32_t
)0x00800000Ë

	)

2728 
	#SCB_ICSR_PENDSTCLR
 ((
uöt32_t
)0x02000000Ë

	)

2729 
	#SCB_ICSR_PENDSTSET
 ((
uöt32_t
)0x04000000Ë

	)

2730 
	#SCB_ICSR_PENDSVCLR
 ((
uöt32_t
)0x08000000Ë

	)

2731 
	#SCB_ICSR_PENDSVSET
 ((
uöt32_t
)0x10000000Ë

	)

2732 
	#SCB_ICSR_NMIPENDSET
 ((
uöt32_t
)0x80000000Ë

	)

2735 
	#SCB_VTOR_TBLOFF
 ((
uöt32_t
)0x1FFFFF80Ë

	)

2736 
	#SCB_VTOR_TBLBASE
 ((
uöt32_t
)0x20000000Ë

	)

2739 
	#SCB_AIRCR_VECTRESET
 ((
uöt32_t
)0x00000001Ë

	)

2740 
	#SCB_AIRCR_VECTCLRACTIVE
 ((
uöt32_t
)0x00000002Ë

	)

2741 
	#SCB_AIRCR_SYSRESETREQ
 ((
uöt32_t
)0x00000004Ë

	)

2743 
	#SCB_AIRCR_PRIGROUP
 ((
uöt32_t
)0x00000700Ë

	)

2744 
	#SCB_AIRCR_PRIGROUP_0
 ((
uöt32_t
)0x00000100Ë

	)

2745 
	#SCB_AIRCR_PRIGROUP_1
 ((
uöt32_t
)0x00000200Ë

	)

2746 
	#SCB_AIRCR_PRIGROUP_2
 ((
uöt32_t
)0x00000400Ë

	)

2749 
	#SCB_AIRCR_PRIGROUP0
 ((
uöt32_t
)0x00000000Ë

	)

2750 
	#SCB_AIRCR_PRIGROUP1
 ((
uöt32_t
)0x00000100Ë

	)

2751 
	#SCB_AIRCR_PRIGROUP2
 ((
uöt32_t
)0x00000200Ë

	)

2752 
	#SCB_AIRCR_PRIGROUP3
 ((
uöt32_t
)0x00000300Ë

	)

2753 
	#SCB_AIRCR_PRIGROUP4
 ((
uöt32_t
)0x00000400Ë

	)

2754 
	#SCB_AIRCR_PRIGROUP5
 ((
uöt32_t
)0x00000500Ë

	)

2755 
	#SCB_AIRCR_PRIGROUP6
 ((
uöt32_t
)0x00000600Ë

	)

2756 
	#SCB_AIRCR_PRIGROUP7
 ((
uöt32_t
)0x00000700Ë

	)

2758 
	#SCB_AIRCR_ENDIANESS
 ((
uöt32_t
)0x00008000Ë

	)

2759 
	#SCB_AIRCR_VECTKEY
 ((
uöt32_t
)0xFFFF0000Ë

	)

2762 
	#SCB_SCR_SLEEPONEXIT
 ((
uöt8_t
)0x02Ë

	)

2763 
	#SCB_SCR_SLEEPDEEP
 ((
uöt8_t
)0x04Ë

	)

2764 
	#SCB_SCR_SEVONPEND
 ((
uöt8_t
)0x10Ë

	)

2767 
	#SCB_CCR_NONBASETHRDENA
 ((
uöt16_t
)0x0001Ë

	)

2768 
	#SCB_CCR_USERSETMPEND
 ((
uöt16_t
)0x0002Ë

	)

2769 
	#SCB_CCR_UNALIGN_TRP
 ((
uöt16_t
)0x0008Ë

	)

2770 
	#SCB_CCR_DIV_0_TRP
 ((
uöt16_t
)0x0010Ë

	)

2771 
	#SCB_CCR_BFHFNMIGN
 ((
uöt16_t
)0x0100Ë

	)

2772 
	#SCB_CCR_STKALIGN
 ((
uöt16_t
)0x0200Ë

	)

2775 
	#SCB_SHPR_PRI_N
 ((
uöt32_t
)0x000000FFË

	)

2776 
	#SCB_SHPR_PRI_N1
 ((
uöt32_t
)0x0000FF00Ë

	)

2777 
	#SCB_SHPR_PRI_N2
 ((
uöt32_t
)0x00FF0000Ë

	)

2778 
	#SCB_SHPR_PRI_N3
 ((
uöt32_t
)0xFF000000Ë

	)

2781 
	#SCB_SHCSR_MEMFAULTACT
 ((
uöt32_t
)0x00000001Ë

	)

2782 
	#SCB_SHCSR_BUSFAULTACT
 ((
uöt32_t
)0x00000002Ë

	)

2783 
	#SCB_SHCSR_USGFAULTACT
 ((
uöt32_t
)0x00000008Ë

	)

2784 
	#SCB_SHCSR_SVCALLACT
 ((
uöt32_t
)0x00000080Ë

	)

2785 
	#SCB_SHCSR_MONITORACT
 ((
uöt32_t
)0x00000100Ë

	)

2786 
	#SCB_SHCSR_PENDSVACT
 ((
uöt32_t
)0x00000400Ë

	)

2787 
	#SCB_SHCSR_SYSTICKACT
 ((
uöt32_t
)0x00000800Ë

	)

2788 
	#SCB_SHCSR_USGFAULTPENDED
 ((
uöt32_t
)0x00001000Ë

	)

2789 
	#SCB_SHCSR_MEMFAULTPENDED
 ((
uöt32_t
)0x00002000Ë

	)

2790 
	#SCB_SHCSR_BUSFAULTPENDED
 ((
uöt32_t
)0x00004000Ë

	)

2791 
	#SCB_SHCSR_SVCALLPENDED
 ((
uöt32_t
)0x00008000Ë

	)

2792 
	#SCB_SHCSR_MEMFAULTENA
 ((
uöt32_t
)0x00010000Ë

	)

2793 
	#SCB_SHCSR_BUSFAULTENA
 ((
uöt32_t
)0x00020000Ë

	)

2794 
	#SCB_SHCSR_USGFAULTENA
 ((
uöt32_t
)0x00040000Ë

	)

2798 
	#SCB_CFSR_IACCVIOL
 ((
uöt32_t
)0x00000001Ë

	)

2799 
	#SCB_CFSR_DACCVIOL
 ((
uöt32_t
)0x00000002Ë

	)

2800 
	#SCB_CFSR_MUNSTKERR
 ((
uöt32_t
)0x00000008Ë

	)

2801 
	#SCB_CFSR_MSTKERR
 ((
uöt32_t
)0x00000010Ë

	)

2802 
	#SCB_CFSR_MMARVALID
 ((
uöt32_t
)0x00000080Ë

	)

2804 
	#SCB_CFSR_IBUSERR
 ((
uöt32_t
)0x00000100Ë

	)

2805 
	#SCB_CFSR_PRECISERR
 ((
uöt32_t
)0x00000200Ë

	)

2806 
	#SCB_CFSR_IMPRECISERR
 ((
uöt32_t
)0x00000400Ë

	)

2807 
	#SCB_CFSR_UNSTKERR
 ((
uöt32_t
)0x00000800Ë

	)

2808 
	#SCB_CFSR_STKERR
 ((
uöt32_t
)0x00001000Ë

	)

2809 
	#SCB_CFSR_BFARVALID
 ((
uöt32_t
)0x00008000Ë

	)

2811 
	#SCB_CFSR_UNDEFINSTR
 ((
uöt32_t
)0x00010000Ë

	)

2812 
	#SCB_CFSR_INVSTATE
 ((
uöt32_t
)0x00020000Ë

	)

2813 
	#SCB_CFSR_INVPC
 ((
uöt32_t
)0x00040000Ë

	)

2814 
	#SCB_CFSR_NOCP
 ((
uöt32_t
)0x00080000Ë

	)

2815 
	#SCB_CFSR_UNALIGNED
 ((
uöt32_t
)0x01000000Ë

	)

2816 
	#SCB_CFSR_DIVBYZERO
 ((
uöt32_t
)0x02000000Ë

	)

2819 
	#SCB_HFSR_VECTTBL
 ((
uöt32_t
)0x00000002Ë

	)

2820 
	#SCB_HFSR_FORCED
 ((
uöt32_t
)0x40000000Ë

	)

2821 
	#SCB_HFSR_DEBUGEVT
 ((
uöt32_t
)0x80000000Ë

	)

2824 
	#SCB_DFSR_HALTED
 ((
uöt8_t
)0x01Ë

	)

2825 
	#SCB_DFSR_BKPT
 ((
uöt8_t
)0x02Ë

	)

2826 
	#SCB_DFSR_DWTTRAP
 ((
uöt8_t
)0x04Ë

	)

2827 
	#SCB_DFSR_VCATCH
 ((
uöt8_t
)0x08Ë

	)

2828 
	#SCB_DFSR_EXTERNAL
 ((
uöt8_t
)0x10Ë

	)

2831 
	#SCB_MMFAR_ADDRESS
 ((
uöt32_t
)0xFFFFFFFFË

	)

2834 
	#SCB_BFAR_ADDRESS
 ((
uöt32_t
)0xFFFFFFFFË

	)

2837 
	#SCB_AFSR_IMPDEF
 ((
uöt32_t
)0xFFFFFFFFË

	)

2846 
	#EXTI_IMR_MR0
 ((
uöt32_t
)0x00000001Ë

	)

2847 
	#EXTI_IMR_MR1
 ((
uöt32_t
)0x00000002Ë

	)

2848 
	#EXTI_IMR_MR2
 ((
uöt32_t
)0x00000004Ë

	)

2849 
	#EXTI_IMR_MR3
 ((
uöt32_t
)0x00000008Ë

	)

2850 
	#EXTI_IMR_MR4
 ((
uöt32_t
)0x00000010Ë

	)

2851 
	#EXTI_IMR_MR5
 ((
uöt32_t
)0x00000020Ë

	)

2852 
	#EXTI_IMR_MR6
 ((
uöt32_t
)0x00000040Ë

	)

2853 
	#EXTI_IMR_MR7
 ((
uöt32_t
)0x00000080Ë

	)

2854 
	#EXTI_IMR_MR8
 ((
uöt32_t
)0x00000100Ë

	)

2855 
	#EXTI_IMR_MR9
 ((
uöt32_t
)0x00000200Ë

	)

2856 
	#EXTI_IMR_MR10
 ((
uöt32_t
)0x00000400Ë

	)

2857 
	#EXTI_IMR_MR11
 ((
uöt32_t
)0x00000800Ë

	)

2858 
	#EXTI_IMR_MR12
 ((
uöt32_t
)0x00001000Ë

	)

2859 
	#EXTI_IMR_MR13
 ((
uöt32_t
)0x00002000Ë

	)

2860 
	#EXTI_IMR_MR14
 ((
uöt32_t
)0x00004000Ë

	)

2861 
	#EXTI_IMR_MR15
 ((
uöt32_t
)0x00008000Ë

	)

2862 
	#EXTI_IMR_MR16
 ((
uöt32_t
)0x00010000Ë

	)

2863 
	#EXTI_IMR_MR17
 ((
uöt32_t
)0x00020000Ë

	)

2864 
	#EXTI_IMR_MR18
 ((
uöt32_t
)0x00040000Ë

	)

2865 
	#EXTI_IMR_MR19
 ((
uöt32_t
)0x00080000Ë

	)

2868 
	#EXTI_EMR_MR0
 ((
uöt32_t
)0x00000001Ë

	)

2869 
	#EXTI_EMR_MR1
 ((
uöt32_t
)0x00000002Ë

	)

2870 
	#EXTI_EMR_MR2
 ((
uöt32_t
)0x00000004Ë

	)

2871 
	#EXTI_EMR_MR3
 ((
uöt32_t
)0x00000008Ë

	)

2872 
	#EXTI_EMR_MR4
 ((
uöt32_t
)0x00000010Ë

	)

2873 
	#EXTI_EMR_MR5
 ((
uöt32_t
)0x00000020Ë

	)

2874 
	#EXTI_EMR_MR6
 ((
uöt32_t
)0x00000040Ë

	)

2875 
	#EXTI_EMR_MR7
 ((
uöt32_t
)0x00000080Ë

	)

2876 
	#EXTI_EMR_MR8
 ((
uöt32_t
)0x00000100Ë

	)

2877 
	#EXTI_EMR_MR9
 ((
uöt32_t
)0x00000200Ë

	)

2878 
	#EXTI_EMR_MR10
 ((
uöt32_t
)0x00000400Ë

	)

2879 
	#EXTI_EMR_MR11
 ((
uöt32_t
)0x00000800Ë

	)

2880 
	#EXTI_EMR_MR12
 ((
uöt32_t
)0x00001000Ë

	)

2881 
	#EXTI_EMR_MR13
 ((
uöt32_t
)0x00002000Ë

	)

2882 
	#EXTI_EMR_MR14
 ((
uöt32_t
)0x00004000Ë

	)

2883 
	#EXTI_EMR_MR15
 ((
uöt32_t
)0x00008000Ë

	)

2884 
	#EXTI_EMR_MR16
 ((
uöt32_t
)0x00010000Ë

	)

2885 
	#EXTI_EMR_MR17
 ((
uöt32_t
)0x00020000Ë

	)

2886 
	#EXTI_EMR_MR18
 ((
uöt32_t
)0x00040000Ë

	)

2887 
	#EXTI_EMR_MR19
 ((
uöt32_t
)0x00080000Ë

	)

2890 
	#EXTI_RTSR_TR0
 ((
uöt32_t
)0x00000001Ë

	)

2891 
	#EXTI_RTSR_TR1
 ((
uöt32_t
)0x00000002Ë

	)

2892 
	#EXTI_RTSR_TR2
 ((
uöt32_t
)0x00000004Ë

	)

2893 
	#EXTI_RTSR_TR3
 ((
uöt32_t
)0x00000008Ë

	)

2894 
	#EXTI_RTSR_TR4
 ((
uöt32_t
)0x00000010Ë

	)

2895 
	#EXTI_RTSR_TR5
 ((
uöt32_t
)0x00000020Ë

	)

2896 
	#EXTI_RTSR_TR6
 ((
uöt32_t
)0x00000040Ë

	)

2897 
	#EXTI_RTSR_TR7
 ((
uöt32_t
)0x00000080Ë

	)

2898 
	#EXTI_RTSR_TR8
 ((
uöt32_t
)0x00000100Ë

	)

2899 
	#EXTI_RTSR_TR9
 ((
uöt32_t
)0x00000200Ë

	)

2900 
	#EXTI_RTSR_TR10
 ((
uöt32_t
)0x00000400Ë

	)

2901 
	#EXTI_RTSR_TR11
 ((
uöt32_t
)0x00000800Ë

	)

2902 
	#EXTI_RTSR_TR12
 ((
uöt32_t
)0x00001000Ë

	)

2903 
	#EXTI_RTSR_TR13
 ((
uöt32_t
)0x00002000Ë

	)

2904 
	#EXTI_RTSR_TR14
 ((
uöt32_t
)0x00004000Ë

	)

2905 
	#EXTI_RTSR_TR15
 ((
uöt32_t
)0x00008000Ë

	)

2906 
	#EXTI_RTSR_TR16
 ((
uöt32_t
)0x00010000Ë

	)

2907 
	#EXTI_RTSR_TR17
 ((
uöt32_t
)0x00020000Ë

	)

2908 
	#EXTI_RTSR_TR18
 ((
uöt32_t
)0x00040000Ë

	)

2909 
	#EXTI_RTSR_TR19
 ((
uöt32_t
)0x00080000Ë

	)

2912 
	#EXTI_FTSR_TR0
 ((
uöt32_t
)0x00000001Ë

	)

2913 
	#EXTI_FTSR_TR1
 ((
uöt32_t
)0x00000002Ë

	)

2914 
	#EXTI_FTSR_TR2
 ((
uöt32_t
)0x00000004Ë

	)

2915 
	#EXTI_FTSR_TR3
 ((
uöt32_t
)0x00000008Ë

	)

2916 
	#EXTI_FTSR_TR4
 ((
uöt32_t
)0x00000010Ë

	)

2917 
	#EXTI_FTSR_TR5
 ((
uöt32_t
)0x00000020Ë

	)

2918 
	#EXTI_FTSR_TR6
 ((
uöt32_t
)0x00000040Ë

	)

2919 
	#EXTI_FTSR_TR7
 ((
uöt32_t
)0x00000080Ë

	)

2920 
	#EXTI_FTSR_TR8
 ((
uöt32_t
)0x00000100Ë

	)

2921 
	#EXTI_FTSR_TR9
 ((
uöt32_t
)0x00000200Ë

	)

2922 
	#EXTI_FTSR_TR10
 ((
uöt32_t
)0x00000400Ë

	)

2923 
	#EXTI_FTSR_TR11
 ((
uöt32_t
)0x00000800Ë

	)

2924 
	#EXTI_FTSR_TR12
 ((
uöt32_t
)0x00001000Ë

	)

2925 
	#EXTI_FTSR_TR13
 ((
uöt32_t
)0x00002000Ë

	)

2926 
	#EXTI_FTSR_TR14
 ((
uöt32_t
)0x00004000Ë

	)

2927 
	#EXTI_FTSR_TR15
 ((
uöt32_t
)0x00008000Ë

	)

2928 
	#EXTI_FTSR_TR16
 ((
uöt32_t
)0x00010000Ë

	)

2929 
	#EXTI_FTSR_TR17
 ((
uöt32_t
)0x00020000Ë

	)

2930 
	#EXTI_FTSR_TR18
 ((
uöt32_t
)0x00040000Ë

	)

2931 
	#EXTI_FTSR_TR19
 ((
uöt32_t
)0x00080000Ë

	)

2934 
	#EXTI_SWIER_SWIER0
 ((
uöt32_t
)0x00000001Ë

	)

2935 
	#EXTI_SWIER_SWIER1
 ((
uöt32_t
)0x00000002Ë

	)

2936 
	#EXTI_SWIER_SWIER2
 ((
uöt32_t
)0x00000004Ë

	)

2937 
	#EXTI_SWIER_SWIER3
 ((
uöt32_t
)0x00000008Ë

	)

2938 
	#EXTI_SWIER_SWIER4
 ((
uöt32_t
)0x00000010Ë

	)

2939 
	#EXTI_SWIER_SWIER5
 ((
uöt32_t
)0x00000020Ë

	)

2940 
	#EXTI_SWIER_SWIER6
 ((
uöt32_t
)0x00000040Ë

	)

2941 
	#EXTI_SWIER_SWIER7
 ((
uöt32_t
)0x00000080Ë

	)

2942 
	#EXTI_SWIER_SWIER8
 ((
uöt32_t
)0x00000100Ë

	)

2943 
	#EXTI_SWIER_SWIER9
 ((
uöt32_t
)0x00000200Ë

	)

2944 
	#EXTI_SWIER_SWIER10
 ((
uöt32_t
)0x00000400Ë

	)

2945 
	#EXTI_SWIER_SWIER11
 ((
uöt32_t
)0x00000800Ë

	)

2946 
	#EXTI_SWIER_SWIER12
 ((
uöt32_t
)0x00001000Ë

	)

2947 
	#EXTI_SWIER_SWIER13
 ((
uöt32_t
)0x00002000Ë

	)

2948 
	#EXTI_SWIER_SWIER14
 ((
uöt32_t
)0x00004000Ë

	)

2949 
	#EXTI_SWIER_SWIER15
 ((
uöt32_t
)0x00008000Ë

	)

2950 
	#EXTI_SWIER_SWIER16
 ((
uöt32_t
)0x00010000Ë

	)

2951 
	#EXTI_SWIER_SWIER17
 ((
uöt32_t
)0x00020000Ë

	)

2952 
	#EXTI_SWIER_SWIER18
 ((
uöt32_t
)0x00040000Ë

	)

2953 
	#EXTI_SWIER_SWIER19
 ((
uöt32_t
)0x00080000Ë

	)

2956 
	#EXTI_PR_PR0
 ((
uöt32_t
)0x00000001Ë

	)

2957 
	#EXTI_PR_PR1
 ((
uöt32_t
)0x00000002Ë

	)

2958 
	#EXTI_PR_PR2
 ((
uöt32_t
)0x00000004Ë

	)

2959 
	#EXTI_PR_PR3
 ((
uöt32_t
)0x00000008Ë

	)

2960 
	#EXTI_PR_PR4
 ((
uöt32_t
)0x00000010Ë

	)

2961 
	#EXTI_PR_PR5
 ((
uöt32_t
)0x00000020Ë

	)

2962 
	#EXTI_PR_PR6
 ((
uöt32_t
)0x00000040Ë

	)

2963 
	#EXTI_PR_PR7
 ((
uöt32_t
)0x00000080Ë

	)

2964 
	#EXTI_PR_PR8
 ((
uöt32_t
)0x00000100Ë

	)

2965 
	#EXTI_PR_PR9
 ((
uöt32_t
)0x00000200Ë

	)

2966 
	#EXTI_PR_PR10
 ((
uöt32_t
)0x00000400Ë

	)

2967 
	#EXTI_PR_PR11
 ((
uöt32_t
)0x00000800Ë

	)

2968 
	#EXTI_PR_PR12
 ((
uöt32_t
)0x00001000Ë

	)

2969 
	#EXTI_PR_PR13
 ((
uöt32_t
)0x00002000Ë

	)

2970 
	#EXTI_PR_PR14
 ((
uöt32_t
)0x00004000Ë

	)

2971 
	#EXTI_PR_PR15
 ((
uöt32_t
)0x00008000Ë

	)

2972 
	#EXTI_PR_PR16
 ((
uöt32_t
)0x00010000Ë

	)

2973 
	#EXTI_PR_PR17
 ((
uöt32_t
)0x00020000Ë

	)

2974 
	#EXTI_PR_PR18
 ((
uöt32_t
)0x00040000Ë

	)

2975 
	#EXTI_PR_PR19
 ((
uöt32_t
)0x00080000Ë

	)

2984 
	#DMA_ISR_GIF1
 ((
uöt32_t
)0x00000001Ë

	)

2985 
	#DMA_ISR_TCIF1
 ((
uöt32_t
)0x00000002Ë

	)

2986 
	#DMA_ISR_HTIF1
 ((
uöt32_t
)0x00000004Ë

	)

2987 
	#DMA_ISR_TEIF1
 ((
uöt32_t
)0x00000008Ë

	)

2988 
	#DMA_ISR_GIF2
 ((
uöt32_t
)0x00000010Ë

	)

2989 
	#DMA_ISR_TCIF2
 ((
uöt32_t
)0x00000020Ë

	)

2990 
	#DMA_ISR_HTIF2
 ((
uöt32_t
)0x00000040Ë

	)

2991 
	#DMA_ISR_TEIF2
 ((
uöt32_t
)0x00000080Ë

	)

2992 
	#DMA_ISR_GIF3
 ((
uöt32_t
)0x00000100Ë

	)

2993 
	#DMA_ISR_TCIF3
 ((
uöt32_t
)0x00000200Ë

	)

2994 
	#DMA_ISR_HTIF3
 ((
uöt32_t
)0x00000400Ë

	)

2995 
	#DMA_ISR_TEIF3
 ((
uöt32_t
)0x00000800Ë

	)

2996 
	#DMA_ISR_GIF4
 ((
uöt32_t
)0x00001000Ë

	)

2997 
	#DMA_ISR_TCIF4
 ((
uöt32_t
)0x00002000Ë

	)

2998 
	#DMA_ISR_HTIF4
 ((
uöt32_t
)0x00004000Ë

	)

2999 
	#DMA_ISR_TEIF4
 ((
uöt32_t
)0x00008000Ë

	)

3000 
	#DMA_ISR_GIF5
 ((
uöt32_t
)0x00010000Ë

	)

3001 
	#DMA_ISR_TCIF5
 ((
uöt32_t
)0x00020000Ë

	)

3002 
	#DMA_ISR_HTIF5
 ((
uöt32_t
)0x00040000Ë

	)

3003 
	#DMA_ISR_TEIF5
 ((
uöt32_t
)0x00080000Ë

	)

3004 
	#DMA_ISR_GIF6
 ((
uöt32_t
)0x00100000Ë

	)

3005 
	#DMA_ISR_TCIF6
 ((
uöt32_t
)0x00200000Ë

	)

3006 
	#DMA_ISR_HTIF6
 ((
uöt32_t
)0x00400000Ë

	)

3007 
	#DMA_ISR_TEIF6
 ((
uöt32_t
)0x00800000Ë

	)

3008 
	#DMA_ISR_GIF7
 ((
uöt32_t
)0x01000000Ë

	)

3009 
	#DMA_ISR_TCIF7
 ((
uöt32_t
)0x02000000Ë

	)

3010 
	#DMA_ISR_HTIF7
 ((
uöt32_t
)0x04000000Ë

	)

3011 
	#DMA_ISR_TEIF7
 ((
uöt32_t
)0x08000000Ë

	)

3014 
	#DMA_IFCR_CGIF1
 ((
uöt32_t
)0x00000001Ë

	)

3015 
	#DMA_IFCR_CTCIF1
 ((
uöt32_t
)0x00000002Ë

	)

3016 
	#DMA_IFCR_CHTIF1
 ((
uöt32_t
)0x00000004Ë

	)

3017 
	#DMA_IFCR_CTEIF1
 ((
uöt32_t
)0x00000008Ë

	)

3018 
	#DMA_IFCR_CGIF2
 ((
uöt32_t
)0x00000010Ë

	)

3019 
	#DMA_IFCR_CTCIF2
 ((
uöt32_t
)0x00000020Ë

	)

3020 
	#DMA_IFCR_CHTIF2
 ((
uöt32_t
)0x00000040Ë

	)

3021 
	#DMA_IFCR_CTEIF2
 ((
uöt32_t
)0x00000080Ë

	)

3022 
	#DMA_IFCR_CGIF3
 ((
uöt32_t
)0x00000100Ë

	)

3023 
	#DMA_IFCR_CTCIF3
 ((
uöt32_t
)0x00000200Ë

	)

3024 
	#DMA_IFCR_CHTIF3
 ((
uöt32_t
)0x00000400Ë

	)

3025 
	#DMA_IFCR_CTEIF3
 ((
uöt32_t
)0x00000800Ë

	)

3026 
	#DMA_IFCR_CGIF4
 ((
uöt32_t
)0x00001000Ë

	)

3027 
	#DMA_IFCR_CTCIF4
 ((
uöt32_t
)0x00002000Ë

	)

3028 
	#DMA_IFCR_CHTIF4
 ((
uöt32_t
)0x00004000Ë

	)

3029 
	#DMA_IFCR_CTEIF4
 ((
uöt32_t
)0x00008000Ë

	)

3030 
	#DMA_IFCR_CGIF5
 ((
uöt32_t
)0x00010000Ë

	)

3031 
	#DMA_IFCR_CTCIF5
 ((
uöt32_t
)0x00020000Ë

	)

3032 
	#DMA_IFCR_CHTIF5
 ((
uöt32_t
)0x00040000Ë

	)

3033 
	#DMA_IFCR_CTEIF5
 ((
uöt32_t
)0x00080000Ë

	)

3034 
	#DMA_IFCR_CGIF6
 ((
uöt32_t
)0x00100000Ë

	)

3035 
	#DMA_IFCR_CTCIF6
 ((
uöt32_t
)0x00200000Ë

	)

3036 
	#DMA_IFCR_CHTIF6
 ((
uöt32_t
)0x00400000Ë

	)

3037 
	#DMA_IFCR_CTEIF6
 ((
uöt32_t
)0x00800000Ë

	)

3038 
	#DMA_IFCR_CGIF7
 ((
uöt32_t
)0x01000000Ë

	)

3039 
	#DMA_IFCR_CTCIF7
 ((
uöt32_t
)0x02000000Ë

	)

3040 
	#DMA_IFCR_CHTIF7
 ((
uöt32_t
)0x04000000Ë

	)

3041 
	#DMA_IFCR_CTEIF7
 ((
uöt32_t
)0x08000000Ë

	)

3044 
	#DMA_CCR1_EN
 ((
uöt16_t
)0x0001Ë

	)

3045 
	#DMA_CCR1_TCIE
 ((
uöt16_t
)0x0002Ë

	)

3046 
	#DMA_CCR1_HTIE
 ((
uöt16_t
)0x0004Ë

	)

3047 
	#DMA_CCR1_TEIE
 ((
uöt16_t
)0x0008Ë

	)

3048 
	#DMA_CCR1_DIR
 ((
uöt16_t
)0x0010Ë

	)

3049 
	#DMA_CCR1_CIRC
 ((
uöt16_t
)0x0020Ë

	)

3050 
	#DMA_CCR1_PINC
 ((
uöt16_t
)0x0040Ë

	)

3051 
	#DMA_CCR1_MINC
 ((
uöt16_t
)0x0080Ë

	)

3053 
	#DMA_CCR1_PSIZE
 ((
uöt16_t
)0x0300Ë

	)

3054 
	#DMA_CCR1_PSIZE_0
 ((
uöt16_t
)0x0100Ë

	)

3055 
	#DMA_CCR1_PSIZE_1
 ((
uöt16_t
)0x0200Ë

	)

3057 
	#DMA_CCR1_MSIZE
 ((
uöt16_t
)0x0C00Ë

	)

3058 
	#DMA_CCR1_MSIZE_0
 ((
uöt16_t
)0x0400Ë

	)

3059 
	#DMA_CCR1_MSIZE_1
 ((
uöt16_t
)0x0800Ë

	)

3061 
	#DMA_CCR1_PL
 ((
uöt16_t
)0x3000Ë

	)

3062 
	#DMA_CCR1_PL_0
 ((
uöt16_t
)0x1000Ë

	)

3063 
	#DMA_CCR1_PL_1
 ((
uöt16_t
)0x2000Ë

	)

3065 
	#DMA_CCR1_MEM2MEM
 ((
uöt16_t
)0x4000Ë

	)

3068 
	#DMA_CCR2_EN
 ((
uöt16_t
)0x0001Ë

	)

3069 
	#DMA_CCR2_TCIE
 ((
uöt16_t
)0x0002Ë

	)

3070 
	#DMA_CCR2_HTIE
 ((
uöt16_t
)0x0004Ë

	)

3071 
	#DMA_CCR2_TEIE
 ((
uöt16_t
)0x0008Ë

	)

3072 
	#DMA_CCR2_DIR
 ((
uöt16_t
)0x0010Ë

	)

3073 
	#DMA_CCR2_CIRC
 ((
uöt16_t
)0x0020Ë

	)

3074 
	#DMA_CCR2_PINC
 ((
uöt16_t
)0x0040Ë

	)

3075 
	#DMA_CCR2_MINC
 ((
uöt16_t
)0x0080Ë

	)

3077 
	#DMA_CCR2_PSIZE
 ((
uöt16_t
)0x0300Ë

	)

3078 
	#DMA_CCR2_PSIZE_0
 ((
uöt16_t
)0x0100Ë

	)

3079 
	#DMA_CCR2_PSIZE_1
 ((
uöt16_t
)0x0200Ë

	)

3081 
	#DMA_CCR2_MSIZE
 ((
uöt16_t
)0x0C00Ë

	)

3082 
	#DMA_CCR2_MSIZE_0
 ((
uöt16_t
)0x0400Ë

	)

3083 
	#DMA_CCR2_MSIZE_1
 ((
uöt16_t
)0x0800Ë

	)

3085 
	#DMA_CCR2_PL
 ((
uöt16_t
)0x3000Ë

	)

3086 
	#DMA_CCR2_PL_0
 ((
uöt16_t
)0x1000Ë

	)

3087 
	#DMA_CCR2_PL_1
 ((
uöt16_t
)0x2000Ë

	)

3089 
	#DMA_CCR2_MEM2MEM
 ((
uöt16_t
)0x4000Ë

	)

3092 
	#DMA_CCR3_EN
 ((
uöt16_t
)0x0001Ë

	)

3093 
	#DMA_CCR3_TCIE
 ((
uöt16_t
)0x0002Ë

	)

3094 
	#DMA_CCR3_HTIE
 ((
uöt16_t
)0x0004Ë

	)

3095 
	#DMA_CCR3_TEIE
 ((
uöt16_t
)0x0008Ë

	)

3096 
	#DMA_CCR3_DIR
 ((
uöt16_t
)0x0010Ë

	)

3097 
	#DMA_CCR3_CIRC
 ((
uöt16_t
)0x0020Ë

	)

3098 
	#DMA_CCR3_PINC
 ((
uöt16_t
)0x0040Ë

	)

3099 
	#DMA_CCR3_MINC
 ((
uöt16_t
)0x0080Ë

	)

3101 
	#DMA_CCR3_PSIZE
 ((
uöt16_t
)0x0300Ë

	)

3102 
	#DMA_CCR3_PSIZE_0
 ((
uöt16_t
)0x0100Ë

	)

3103 
	#DMA_CCR3_PSIZE_1
 ((
uöt16_t
)0x0200Ë

	)

3105 
	#DMA_CCR3_MSIZE
 ((
uöt16_t
)0x0C00Ë

	)

3106 
	#DMA_CCR3_MSIZE_0
 ((
uöt16_t
)0x0400Ë

	)

3107 
	#DMA_CCR3_MSIZE_1
 ((
uöt16_t
)0x0800Ë

	)

3109 
	#DMA_CCR3_PL
 ((
uöt16_t
)0x3000Ë

	)

3110 
	#DMA_CCR3_PL_0
 ((
uöt16_t
)0x1000Ë

	)

3111 
	#DMA_CCR3_PL_1
 ((
uöt16_t
)0x2000Ë

	)

3113 
	#DMA_CCR3_MEM2MEM
 ((
uöt16_t
)0x4000Ë

	)

3116 
	#DMA_CCR4_EN
 ((
uöt16_t
)0x0001Ë

	)

3117 
	#DMA_CCR4_TCIE
 ((
uöt16_t
)0x0002Ë

	)

3118 
	#DMA_CCR4_HTIE
 ((
uöt16_t
)0x0004Ë

	)

3119 
	#DMA_CCR4_TEIE
 ((
uöt16_t
)0x0008Ë

	)

3120 
	#DMA_CCR4_DIR
 ((
uöt16_t
)0x0010Ë

	)

3121 
	#DMA_CCR4_CIRC
 ((
uöt16_t
)0x0020Ë

	)

3122 
	#DMA_CCR4_PINC
 ((
uöt16_t
)0x0040Ë

	)

3123 
	#DMA_CCR4_MINC
 ((
uöt16_t
)0x0080Ë

	)

3125 
	#DMA_CCR4_PSIZE
 ((
uöt16_t
)0x0300Ë

	)

3126 
	#DMA_CCR4_PSIZE_0
 ((
uöt16_t
)0x0100Ë

	)

3127 
	#DMA_CCR4_PSIZE_1
 ((
uöt16_t
)0x0200Ë

	)

3129 
	#DMA_CCR4_MSIZE
 ((
uöt16_t
)0x0C00Ë

	)

3130 
	#DMA_CCR4_MSIZE_0
 ((
uöt16_t
)0x0400Ë

	)

3131 
	#DMA_CCR4_MSIZE_1
 ((
uöt16_t
)0x0800Ë

	)

3133 
	#DMA_CCR4_PL
 ((
uöt16_t
)0x3000Ë

	)

3134 
	#DMA_CCR4_PL_0
 ((
uöt16_t
)0x1000Ë

	)

3135 
	#DMA_CCR4_PL_1
 ((
uöt16_t
)0x2000Ë

	)

3137 
	#DMA_CCR4_MEM2MEM
 ((
uöt16_t
)0x4000Ë

	)

3140 
	#DMA_CCR5_EN
 ((
uöt16_t
)0x0001Ë

	)

3141 
	#DMA_CCR5_TCIE
 ((
uöt16_t
)0x0002Ë

	)

3142 
	#DMA_CCR5_HTIE
 ((
uöt16_t
)0x0004Ë

	)

3143 
	#DMA_CCR5_TEIE
 ((
uöt16_t
)0x0008Ë

	)

3144 
	#DMA_CCR5_DIR
 ((
uöt16_t
)0x0010Ë

	)

3145 
	#DMA_CCR5_CIRC
 ((
uöt16_t
)0x0020Ë

	)

3146 
	#DMA_CCR5_PINC
 ((
uöt16_t
)0x0040Ë

	)

3147 
	#DMA_CCR5_MINC
 ((
uöt16_t
)0x0080Ë

	)

3149 
	#DMA_CCR5_PSIZE
 ((
uöt16_t
)0x0300Ë

	)

3150 
	#DMA_CCR5_PSIZE_0
 ((
uöt16_t
)0x0100Ë

	)

3151 
	#DMA_CCR5_PSIZE_1
 ((
uöt16_t
)0x0200Ë

	)

3153 
	#DMA_CCR5_MSIZE
 ((
uöt16_t
)0x0C00Ë

	)

3154 
	#DMA_CCR5_MSIZE_0
 ((
uöt16_t
)0x0400Ë

	)

3155 
	#DMA_CCR5_MSIZE_1
 ((
uöt16_t
)0x0800Ë

	)

3157 
	#DMA_CCR5_PL
 ((
uöt16_t
)0x3000Ë

	)

3158 
	#DMA_CCR5_PL_0
 ((
uöt16_t
)0x1000Ë

	)

3159 
	#DMA_CCR5_PL_1
 ((
uöt16_t
)0x2000Ë

	)

3161 
	#DMA_CCR5_MEM2MEM
 ((
uöt16_t
)0x4000Ë

	)

3164 
	#DMA_CCR6_EN
 ((
uöt16_t
)0x0001Ë

	)

3165 
	#DMA_CCR6_TCIE
 ((
uöt16_t
)0x0002Ë

	)

3166 
	#DMA_CCR6_HTIE
 ((
uöt16_t
)0x0004Ë

	)

3167 
	#DMA_CCR6_TEIE
 ((
uöt16_t
)0x0008Ë

	)

3168 
	#DMA_CCR6_DIR
 ((
uöt16_t
)0x0010Ë

	)

3169 
	#DMA_CCR6_CIRC
 ((
uöt16_t
)0x0020Ë

	)

3170 
	#DMA_CCR6_PINC
 ((
uöt16_t
)0x0040Ë

	)

3171 
	#DMA_CCR6_MINC
 ((
uöt16_t
)0x0080Ë

	)

3173 
	#DMA_CCR6_PSIZE
 ((
uöt16_t
)0x0300Ë

	)

3174 
	#DMA_CCR6_PSIZE_0
 ((
uöt16_t
)0x0100Ë

	)

3175 
	#DMA_CCR6_PSIZE_1
 ((
uöt16_t
)0x0200Ë

	)

3177 
	#DMA_CCR6_MSIZE
 ((
uöt16_t
)0x0C00Ë

	)

3178 
	#DMA_CCR6_MSIZE_0
 ((
uöt16_t
)0x0400Ë

	)

3179 
	#DMA_CCR6_MSIZE_1
 ((
uöt16_t
)0x0800Ë

	)

3181 
	#DMA_CCR6_PL
 ((
uöt16_t
)0x3000Ë

	)

3182 
	#DMA_CCR6_PL_0
 ((
uöt16_t
)0x1000Ë

	)

3183 
	#DMA_CCR6_PL_1
 ((
uöt16_t
)0x2000Ë

	)

3185 
	#DMA_CCR6_MEM2MEM
 ((
uöt16_t
)0x4000Ë

	)

3188 
	#DMA_CCR7_EN
 ((
uöt16_t
)0x0001Ë

	)

3189 
	#DMA_CCR7_TCIE
 ((
uöt16_t
)0x0002Ë

	)

3190 
	#DMA_CCR7_HTIE
 ((
uöt16_t
)0x0004Ë

	)

3191 
	#DMA_CCR7_TEIE
 ((
uöt16_t
)0x0008Ë

	)

3192 
	#DMA_CCR7_DIR
 ((
uöt16_t
)0x0010Ë

	)

3193 
	#DMA_CCR7_CIRC
 ((
uöt16_t
)0x0020Ë

	)

3194 
	#DMA_CCR7_PINC
 ((
uöt16_t
)0x0040Ë

	)

3195 
	#DMA_CCR7_MINC
 ((
uöt16_t
)0x0080Ë

	)

3197 
	#DMA_CCR7_PSIZE
 , ((
uöt16_t
)0x0300Ë

	)

3198 
	#DMA_CCR7_PSIZE_0
 ((
uöt16_t
)0x0100Ë

	)

3199 
	#DMA_CCR7_PSIZE_1
 ((
uöt16_t
)0x0200Ë

	)

3201 
	#DMA_CCR7_MSIZE
 ((
uöt16_t
)0x0C00Ë

	)

3202 
	#DMA_CCR7_MSIZE_0
 ((
uöt16_t
)0x0400Ë

	)

3203 
	#DMA_CCR7_MSIZE_1
 ((
uöt16_t
)0x0800Ë

	)

3205 
	#DMA_CCR7_PL
 ((
uöt16_t
)0x3000Ë

	)

3206 
	#DMA_CCR7_PL_0
 ((
uöt16_t
)0x1000Ë

	)

3207 
	#DMA_CCR7_PL_1
 ((
uöt16_t
)0x2000Ë

	)

3209 
	#DMA_CCR7_MEM2MEM
 ((
uöt16_t
)0x4000Ë

	)

3212 
	#DMA_CNDTR1_NDT
 ((
uöt16_t
)0xFFFFË

	)

3215 
	#DMA_CNDTR2_NDT
 ((
uöt16_t
)0xFFFFË

	)

3218 
	#DMA_CNDTR3_NDT
 ((
uöt16_t
)0xFFFFË

	)

3221 
	#DMA_CNDTR4_NDT
 ((
uöt16_t
)0xFFFFË

	)

3224 
	#DMA_CNDTR5_NDT
 ((
uöt16_t
)0xFFFFË

	)

3227 
	#DMA_CNDTR6_NDT
 ((
uöt16_t
)0xFFFFË

	)

3230 
	#DMA_CNDTR7_NDT
 ((
uöt16_t
)0xFFFFË

	)

3233 
	#DMA_CPAR1_PA
 ((
uöt32_t
)0xFFFFFFFFË

	)

3236 
	#DMA_CPAR2_PA
 ((
uöt32_t
)0xFFFFFFFFË

	)

3239 
	#DMA_CPAR3_PA
 ((
uöt32_t
)0xFFFFFFFFË

	)

3243 
	#DMA_CPAR4_PA
 ((
uöt32_t
)0xFFFFFFFFË

	)

3246 
	#DMA_CPAR5_PA
 ((
uöt32_t
)0xFFFFFFFFË

	)

3249 
	#DMA_CPAR6_PA
 ((
uöt32_t
)0xFFFFFFFFË

	)

3253 
	#DMA_CPAR7_PA
 ((
uöt32_t
)0xFFFFFFFFË

	)

3256 
	#DMA_CMAR1_MA
 ((
uöt32_t
)0xFFFFFFFFË

	)

3259 
	#DMA_CMAR2_MA
 ((
uöt32_t
)0xFFFFFFFFË

	)

3262 
	#DMA_CMAR3_MA
 ((
uöt32_t
)0xFFFFFFFFË

	)

3266 
	#DMA_CMAR4_MA
 ((
uöt32_t
)0xFFFFFFFFË

	)

3269 
	#DMA_CMAR5_MA
 ((
uöt32_t
)0xFFFFFFFFË

	)

3272 
	#DMA_CMAR6_MA
 ((
uöt32_t
)0xFFFFFFFFË

	)

3275 
	#DMA_CMAR7_MA
 ((
uöt32_t
)0xFFFFFFFFË

	)

3284 
	#ADC_SR_AWD
 ((
uöt8_t
)0x01Ë

	)

3285 
	#ADC_SR_EOC
 ((
uöt8_t
)0x02Ë

	)

3286 
	#ADC_SR_JEOC
 ((
uöt8_t
)0x04Ë

	)

3287 
	#ADC_SR_JSTRT
 ((
uöt8_t
)0x08Ë

	)

3288 
	#ADC_SR_STRT
 ((
uöt8_t
)0x10Ë

	)

3291 
	#ADC_CR1_AWDCH
 ((
uöt32_t
)0x0000001FË

	)

3292 
	#ADC_CR1_AWDCH_0
 ((
uöt32_t
)0x00000001Ë

	)

3293 
	#ADC_CR1_AWDCH_1
 ((
uöt32_t
)0x00000002Ë

	)

3294 
	#ADC_CR1_AWDCH_2
 ((
uöt32_t
)0x00000004Ë

	)

3295 
	#ADC_CR1_AWDCH_3
 ((
uöt32_t
)0x00000008Ë

	)

3296 
	#ADC_CR1_AWDCH_4
 ((
uöt32_t
)0x00000010Ë

	)

3298 
	#ADC_CR1_EOCIE
 ((
uöt32_t
)0x00000020Ë

	)

3299 
	#ADC_CR1_AWDIE
 ((
uöt32_t
)0x00000040Ë

	)

3300 
	#ADC_CR1_JEOCIE
 ((
uöt32_t
)0x00000080Ë

	)

3301 
	#ADC_CR1_SCAN
 ((
uöt32_t
)0x00000100Ë

	)

3302 
	#ADC_CR1_AWDSGL
 ((
uöt32_t
)0x00000200Ë

	)

3303 
	#ADC_CR1_JAUTO
 ((
uöt32_t
)0x00000400Ë

	)

3304 
	#ADC_CR1_DISCEN
 ((
uöt32_t
)0x00000800Ë

	)

3305 
	#ADC_CR1_JDISCEN
 ((
uöt32_t
)0x00001000Ë

	)

3307 
	#ADC_CR1_DISCNUM
 ((
uöt32_t
)0x0000E000Ë

	)

3308 
	#ADC_CR1_DISCNUM_0
 ((
uöt32_t
)0x00002000Ë

	)

3309 
	#ADC_CR1_DISCNUM_1
 ((
uöt32_t
)0x00004000Ë

	)

3310 
	#ADC_CR1_DISCNUM_2
 ((
uöt32_t
)0x00008000Ë

	)

3312 
	#ADC_CR1_DUALMOD
 ((
uöt32_t
)0x000F0000Ë

	)

3313 
	#ADC_CR1_DUALMOD_0
 ((
uöt32_t
)0x00010000Ë

	)

3314 
	#ADC_CR1_DUALMOD_1
 ((
uöt32_t
)0x00020000Ë

	)

3315 
	#ADC_CR1_DUALMOD_2
 ((
uöt32_t
)0x00040000Ë

	)

3316 
	#ADC_CR1_DUALMOD_3
 ((
uöt32_t
)0x00080000Ë

	)

3318 
	#ADC_CR1_JAWDEN
 ((
uöt32_t
)0x00400000Ë

	)

3319 
	#ADC_CR1_AWDEN
 ((
uöt32_t
)0x00800000Ë

	)

3323 
	#ADC_CR2_ADON
 ((
uöt32_t
)0x00000001Ë

	)

3324 
	#ADC_CR2_CONT
 ((
uöt32_t
)0x00000002Ë

	)

3325 
	#ADC_CR2_CAL
 ((
uöt32_t
)0x00000004Ë

	)

3326 
	#ADC_CR2_RSTCAL
 ((
uöt32_t
)0x00000008Ë

	)

3327 
	#ADC_CR2_DMA
 ((
uöt32_t
)0x00000100Ë

	)

3328 
	#ADC_CR2_ALIGN
 ((
uöt32_t
)0x00000800Ë

	)

3330 
	#ADC_CR2_JEXTSEL
 ((
uöt32_t
)0x00007000Ë

	)

3331 
	#ADC_CR2_JEXTSEL_0
 ((
uöt32_t
)0x00001000Ë

	)

3332 
	#ADC_CR2_JEXTSEL_1
 ((
uöt32_t
)0x00002000Ë

	)

3333 
	#ADC_CR2_JEXTSEL_2
 ((
uöt32_t
)0x00004000Ë

	)

3335 
	#ADC_CR2_JEXTTRIG
 ((
uöt32_t
)0x00008000Ë

	)

3337 
	#ADC_CR2_EXTSEL
 ((
uöt32_t
)0x000E0000Ë

	)

3338 
	#ADC_CR2_EXTSEL_0
 ((
uöt32_t
)0x00020000Ë

	)

3339 
	#ADC_CR2_EXTSEL_1
 ((
uöt32_t
)0x00040000Ë

	)

3340 
	#ADC_CR2_EXTSEL_2
 ((
uöt32_t
)0x00080000Ë

	)

3342 
	#ADC_CR2_EXTTRIG
 ((
uöt32_t
)0x00100000Ë

	)

3343 
	#ADC_CR2_JSWSTART
 ((
uöt32_t
)0x00200000Ë

	)

3344 
	#ADC_CR2_SWSTART
 ((
uöt32_t
)0x00400000Ë

	)

3345 
	#ADC_CR2_TSVREFE
 ((
uöt32_t
)0x00800000Ë

	)

3348 
	#ADC_SMPR1_SMP10
 ((
uöt32_t
)0x00000007Ë

	)

3349 
	#ADC_SMPR1_SMP10_0
 ((
uöt32_t
)0x00000001Ë

	)

3350 
	#ADC_SMPR1_SMP10_1
 ((
uöt32_t
)0x00000002Ë

	)

3351 
	#ADC_SMPR1_SMP10_2
 ((
uöt32_t
)0x00000004Ë

	)

3353 
	#ADC_SMPR1_SMP11
 ((
uöt32_t
)0x00000038Ë

	)

3354 
	#ADC_SMPR1_SMP11_0
 ((
uöt32_t
)0x00000008Ë

	)

3355 
	#ADC_SMPR1_SMP11_1
 ((
uöt32_t
)0x00000010Ë

	)

3356 
	#ADC_SMPR1_SMP11_2
 ((
uöt32_t
)0x00000020Ë

	)

3358 
	#ADC_SMPR1_SMP12
 ((
uöt32_t
)0x000001C0Ë

	)

3359 
	#ADC_SMPR1_SMP12_0
 ((
uöt32_t
)0x00000040Ë

	)

3360 
	#ADC_SMPR1_SMP12_1
 ((
uöt32_t
)0x00000080Ë

	)

3361 
	#ADC_SMPR1_SMP12_2
 ((
uöt32_t
)0x00000100Ë

	)

3363 
	#ADC_SMPR1_SMP13
 ((
uöt32_t
)0x00000E00Ë

	)

3364 
	#ADC_SMPR1_SMP13_0
 ((
uöt32_t
)0x00000200Ë

	)

3365 
	#ADC_SMPR1_SMP13_1
 ((
uöt32_t
)0x00000400Ë

	)

3366 
	#ADC_SMPR1_SMP13_2
 ((
uöt32_t
)0x00000800Ë

	)

3368 
	#ADC_SMPR1_SMP14
 ((
uöt32_t
)0x00007000Ë

	)

3369 
	#ADC_SMPR1_SMP14_0
 ((
uöt32_t
)0x00001000Ë

	)

3370 
	#ADC_SMPR1_SMP14_1
 ((
uöt32_t
)0x00002000Ë

	)

3371 
	#ADC_SMPR1_SMP14_2
 ((
uöt32_t
)0x00004000Ë

	)

3373 
	#ADC_SMPR1_SMP15
 ((
uöt32_t
)0x00038000Ë

	)

3374 
	#ADC_SMPR1_SMP15_0
 ((
uöt32_t
)0x00008000Ë

	)

3375 
	#ADC_SMPR1_SMP15_1
 ((
uöt32_t
)0x00010000Ë

	)

3376 
	#ADC_SMPR1_SMP15_2
 ((
uöt32_t
)0x00020000Ë

	)

3378 
	#ADC_SMPR1_SMP16
 ((
uöt32_t
)0x001C0000Ë

	)

3379 
	#ADC_SMPR1_SMP16_0
 ((
uöt32_t
)0x00040000Ë

	)

3380 
	#ADC_SMPR1_SMP16_1
 ((
uöt32_t
)0x00080000Ë

	)

3381 
	#ADC_SMPR1_SMP16_2
 ((
uöt32_t
)0x00100000Ë

	)

3383 
	#ADC_SMPR1_SMP17
 ((
uöt32_t
)0x00E00000Ë

	)

3384 
	#ADC_SMPR1_SMP17_0
 ((
uöt32_t
)0x00200000Ë

	)

3385 
	#ADC_SMPR1_SMP17_1
 ((
uöt32_t
)0x00400000Ë

	)

3386 
	#ADC_SMPR1_SMP17_2
 ((
uöt32_t
)0x00800000Ë

	)

3389 
	#ADC_SMPR2_SMP0
 ((
uöt32_t
)0x00000007Ë

	)

3390 
	#ADC_SMPR2_SMP0_0
 ((
uöt32_t
)0x00000001Ë

	)

3391 
	#ADC_SMPR2_SMP0_1
 ((
uöt32_t
)0x00000002Ë

	)

3392 
	#ADC_SMPR2_SMP0_2
 ((
uöt32_t
)0x00000004Ë

	)

3394 
	#ADC_SMPR2_SMP1
 ((
uöt32_t
)0x00000038Ë

	)

3395 
	#ADC_SMPR2_SMP1_0
 ((
uöt32_t
)0x00000008Ë

	)

3396 
	#ADC_SMPR2_SMP1_1
 ((
uöt32_t
)0x00000010Ë

	)

3397 
	#ADC_SMPR2_SMP1_2
 ((
uöt32_t
)0x00000020Ë

	)

3399 
	#ADC_SMPR2_SMP2
 ((
uöt32_t
)0x000001C0Ë

	)

3400 
	#ADC_SMPR2_SMP2_0
 ((
uöt32_t
)0x00000040Ë

	)

3401 
	#ADC_SMPR2_SMP2_1
 ((
uöt32_t
)0x00000080Ë

	)

3402 
	#ADC_SMPR2_SMP2_2
 ((
uöt32_t
)0x00000100Ë

	)

3404 
	#ADC_SMPR2_SMP3
 ((
uöt32_t
)0x00000E00Ë

	)

3405 
	#ADC_SMPR2_SMP3_0
 ((
uöt32_t
)0x00000200Ë

	)

3406 
	#ADC_SMPR2_SMP3_1
 ((
uöt32_t
)0x00000400Ë

	)

3407 
	#ADC_SMPR2_SMP3_2
 ((
uöt32_t
)0x00000800Ë

	)

3409 
	#ADC_SMPR2_SMP4
 ((
uöt32_t
)0x00007000Ë

	)

3410 
	#ADC_SMPR2_SMP4_0
 ((
uöt32_t
)0x00001000Ë

	)

3411 
	#ADC_SMPR2_SMP4_1
 ((
uöt32_t
)0x00002000Ë

	)

3412 
	#ADC_SMPR2_SMP4_2
 ((
uöt32_t
)0x00004000Ë

	)

3414 
	#ADC_SMPR2_SMP5
 ((
uöt32_t
)0x00038000Ë

	)

3415 
	#ADC_SMPR2_SMP5_0
 ((
uöt32_t
)0x00008000Ë

	)

3416 
	#ADC_SMPR2_SMP5_1
 ((
uöt32_t
)0x00010000Ë

	)

3417 
	#ADC_SMPR2_SMP5_2
 ((
uöt32_t
)0x00020000Ë

	)

3419 
	#ADC_SMPR2_SMP6
 ((
uöt32_t
)0x001C0000Ë

	)

3420 
	#ADC_SMPR2_SMP6_0
 ((
uöt32_t
)0x00040000Ë

	)

3421 
	#ADC_SMPR2_SMP6_1
 ((
uöt32_t
)0x00080000Ë

	)

3422 
	#ADC_SMPR2_SMP6_2
 ((
uöt32_t
)0x00100000Ë

	)

3424 
	#ADC_SMPR2_SMP7
 ((
uöt32_t
)0x00E00000Ë

	)

3425 
	#ADC_SMPR2_SMP7_0
 ((
uöt32_t
)0x00200000Ë

	)

3426 
	#ADC_SMPR2_SMP7_1
 ((
uöt32_t
)0x00400000Ë

	)

3427 
	#ADC_SMPR2_SMP7_2
 ((
uöt32_t
)0x00800000Ë

	)

3429 
	#ADC_SMPR2_SMP8
 ((
uöt32_t
)0x07000000Ë

	)

3430 
	#ADC_SMPR2_SMP8_0
 ((
uöt32_t
)0x01000000Ë

	)

3431 
	#ADC_SMPR2_SMP8_1
 ((
uöt32_t
)0x02000000Ë

	)

3432 
	#ADC_SMPR2_SMP8_2
 ((
uöt32_t
)0x04000000Ë

	)

3434 
	#ADC_SMPR2_SMP9
 ((
uöt32_t
)0x38000000Ë

	)

3435 
	#ADC_SMPR2_SMP9_0
 ((
uöt32_t
)0x08000000Ë

	)

3436 
	#ADC_SMPR2_SMP9_1
 ((
uöt32_t
)0x10000000Ë

	)

3437 
	#ADC_SMPR2_SMP9_2
 ((
uöt32_t
)0x20000000Ë

	)

3440 
	#ADC_JOFR1_JOFFSET1
 ((
uöt16_t
)0x0FFFË

	)

3443 
	#ADC_JOFR2_JOFFSET2
 ((
uöt16_t
)0x0FFFË

	)

3446 
	#ADC_JOFR3_JOFFSET3
 ((
uöt16_t
)0x0FFFË

	)

3449 
	#ADC_JOFR4_JOFFSET4
 ((
uöt16_t
)0x0FFFË

	)

3452 
	#ADC_HTR_HT
 ((
uöt16_t
)0x0FFFË

	)

3455 
	#ADC_LTR_LT
 ((
uöt16_t
)0x0FFFË

	)

3458 
	#ADC_SQR1_SQ13
 ((
uöt32_t
)0x0000001FË

	)

3459 
	#ADC_SQR1_SQ13_0
 ((
uöt32_t
)0x00000001Ë

	)

3460 
	#ADC_SQR1_SQ13_1
 ((
uöt32_t
)0x00000002Ë

	)

3461 
	#ADC_SQR1_SQ13_2
 ((
uöt32_t
)0x00000004Ë

	)

3462 
	#ADC_SQR1_SQ13_3
 ((
uöt32_t
)0x00000008Ë

	)

3463 
	#ADC_SQR1_SQ13_4
 ((
uöt32_t
)0x00000010Ë

	)

3465 
	#ADC_SQR1_SQ14
 ((
uöt32_t
)0x000003E0Ë

	)

3466 
	#ADC_SQR1_SQ14_0
 ((
uöt32_t
)0x00000020Ë

	)

3467 
	#ADC_SQR1_SQ14_1
 ((
uöt32_t
)0x00000040Ë

	)

3468 
	#ADC_SQR1_SQ14_2
 ((
uöt32_t
)0x00000080Ë

	)

3469 
	#ADC_SQR1_SQ14_3
 ((
uöt32_t
)0x00000100Ë

	)

3470 
	#ADC_SQR1_SQ14_4
 ((
uöt32_t
)0x00000200Ë

	)

3472 
	#ADC_SQR1_SQ15
 ((
uöt32_t
)0x00007C00Ë

	)

3473 
	#ADC_SQR1_SQ15_0
 ((
uöt32_t
)0x00000400Ë

	)

3474 
	#ADC_SQR1_SQ15_1
 ((
uöt32_t
)0x00000800Ë

	)

3475 
	#ADC_SQR1_SQ15_2
 ((
uöt32_t
)0x00001000Ë

	)

3476 
	#ADC_SQR1_SQ15_3
 ((
uöt32_t
)0x00002000Ë

	)

3477 
	#ADC_SQR1_SQ15_4
 ((
uöt32_t
)0x00004000Ë

	)

3479 
	#ADC_SQR1_SQ16
 ((
uöt32_t
)0x000F8000Ë

	)

3480 
	#ADC_SQR1_SQ16_0
 ((
uöt32_t
)0x00008000Ë

	)

3481 
	#ADC_SQR1_SQ16_1
 ((
uöt32_t
)0x00010000Ë

	)

3482 
	#ADC_SQR1_SQ16_2
 ((
uöt32_t
)0x00020000Ë

	)

3483 
	#ADC_SQR1_SQ16_3
 ((
uöt32_t
)0x00040000Ë

	)

3484 
	#ADC_SQR1_SQ16_4
 ((
uöt32_t
)0x00080000Ë

	)

3486 
	#ADC_SQR1_L
 ((
uöt32_t
)0x00F00000Ë

	)

3487 
	#ADC_SQR1_L_0
 ((
uöt32_t
)0x00100000Ë

	)

3488 
	#ADC_SQR1_L_1
 ((
uöt32_t
)0x00200000Ë

	)

3489 
	#ADC_SQR1_L_2
 ((
uöt32_t
)0x00400000Ë

	)

3490 
	#ADC_SQR1_L_3
 ((
uöt32_t
)0x00800000Ë

	)

3493 
	#ADC_SQR2_SQ7
 ((
uöt32_t
)0x0000001FË

	)

3494 
	#ADC_SQR2_SQ7_0
 ((
uöt32_t
)0x00000001Ë

	)

3495 
	#ADC_SQR2_SQ7_1
 ((
uöt32_t
)0x00000002Ë

	)

3496 
	#ADC_SQR2_SQ7_2
 ((
uöt32_t
)0x00000004Ë

	)

3497 
	#ADC_SQR2_SQ7_3
 ((
uöt32_t
)0x00000008Ë

	)

3498 
	#ADC_SQR2_SQ7_4
 ((
uöt32_t
)0x00000010Ë

	)

3500 
	#ADC_SQR2_SQ8
 ((
uöt32_t
)0x000003E0Ë

	)

3501 
	#ADC_SQR2_SQ8_0
 ((
uöt32_t
)0x00000020Ë

	)

3502 
	#ADC_SQR2_SQ8_1
 ((
uöt32_t
)0x00000040Ë

	)

3503 
	#ADC_SQR2_SQ8_2
 ((
uöt32_t
)0x00000080Ë

	)

3504 
	#ADC_SQR2_SQ8_3
 ((
uöt32_t
)0x00000100Ë

	)

3505 
	#ADC_SQR2_SQ8_4
 ((
uöt32_t
)0x00000200Ë

	)

3507 
	#ADC_SQR2_SQ9
 ((
uöt32_t
)0x00007C00Ë

	)

3508 
	#ADC_SQR2_SQ9_0
 ((
uöt32_t
)0x00000400Ë

	)

3509 
	#ADC_SQR2_SQ9_1
 ((
uöt32_t
)0x00000800Ë

	)

3510 
	#ADC_SQR2_SQ9_2
 ((
uöt32_t
)0x00001000Ë

	)

3511 
	#ADC_SQR2_SQ9_3
 ((
uöt32_t
)0x00002000Ë

	)

3512 
	#ADC_SQR2_SQ9_4
 ((
uöt32_t
)0x00004000Ë

	)

3514 
	#ADC_SQR2_SQ10
 ((
uöt32_t
)0x000F8000Ë

	)

3515 
	#ADC_SQR2_SQ10_0
 ((
uöt32_t
)0x00008000Ë

	)

3516 
	#ADC_SQR2_SQ10_1
 ((
uöt32_t
)0x00010000Ë

	)

3517 
	#ADC_SQR2_SQ10_2
 ((
uöt32_t
)0x00020000Ë

	)

3518 
	#ADC_SQR2_SQ10_3
 ((
uöt32_t
)0x00040000Ë

	)

3519 
	#ADC_SQR2_SQ10_4
 ((
uöt32_t
)0x00080000Ë

	)

3521 
	#ADC_SQR2_SQ11
 ((
uöt32_t
)0x01F00000Ë

	)

3522 
	#ADC_SQR2_SQ11_0
 ((
uöt32_t
)0x00100000Ë

	)

3523 
	#ADC_SQR2_SQ11_1
 ((
uöt32_t
)0x00200000Ë

	)

3524 
	#ADC_SQR2_SQ11_2
 ((
uöt32_t
)0x00400000Ë

	)

3525 
	#ADC_SQR2_SQ11_3
 ((
uöt32_t
)0x00800000Ë

	)

3526 
	#ADC_SQR2_SQ11_4
 ((
uöt32_t
)0x01000000Ë

	)

3528 
	#ADC_SQR2_SQ12
 ((
uöt32_t
)0x3E000000Ë

	)

3529 
	#ADC_SQR2_SQ12_0
 ((
uöt32_t
)0x02000000Ë

	)

3530 
	#ADC_SQR2_SQ12_1
 ((
uöt32_t
)0x04000000Ë

	)

3531 
	#ADC_SQR2_SQ12_2
 ((
uöt32_t
)0x08000000Ë

	)

3532 
	#ADC_SQR2_SQ12_3
 ((
uöt32_t
)0x10000000Ë

	)

3533 
	#ADC_SQR2_SQ12_4
 ((
uöt32_t
)0x20000000Ë

	)

3536 
	#ADC_SQR3_SQ1
 ((
uöt32_t
)0x0000001FË

	)

3537 
	#ADC_SQR3_SQ1_0
 ((
uöt32_t
)0x00000001Ë

	)

3538 
	#ADC_SQR3_SQ1_1
 ((
uöt32_t
)0x00000002Ë

	)

3539 
	#ADC_SQR3_SQ1_2
 ((
uöt32_t
)0x00000004Ë

	)

3540 
	#ADC_SQR3_SQ1_3
 ((
uöt32_t
)0x00000008Ë

	)

3541 
	#ADC_SQR3_SQ1_4
 ((
uöt32_t
)0x00000010Ë

	)

3543 
	#ADC_SQR3_SQ2
 ((
uöt32_t
)0x000003E0Ë

	)

3544 
	#ADC_SQR3_SQ2_0
 ((
uöt32_t
)0x00000020Ë

	)

3545 
	#ADC_SQR3_SQ2_1
 ((
uöt32_t
)0x00000040Ë

	)

3546 
	#ADC_SQR3_SQ2_2
 ((
uöt32_t
)0x00000080Ë

	)

3547 
	#ADC_SQR3_SQ2_3
 ((
uöt32_t
)0x00000100Ë

	)

3548 
	#ADC_SQR3_SQ2_4
 ((
uöt32_t
)0x00000200Ë

	)

3550 
	#ADC_SQR3_SQ3
 ((
uöt32_t
)0x00007C00Ë

	)

3551 
	#ADC_SQR3_SQ3_0
 ((
uöt32_t
)0x00000400Ë

	)

3552 
	#ADC_SQR3_SQ3_1
 ((
uöt32_t
)0x00000800Ë

	)

3553 
	#ADC_SQR3_SQ3_2
 ((
uöt32_t
)0x00001000Ë

	)

3554 
	#ADC_SQR3_SQ3_3
 ((
uöt32_t
)0x00002000Ë

	)

3555 
	#ADC_SQR3_SQ3_4
 ((
uöt32_t
)0x00004000Ë

	)

3557 
	#ADC_SQR3_SQ4
 ((
uöt32_t
)0x000F8000Ë

	)

3558 
	#ADC_SQR3_SQ4_0
 ((
uöt32_t
)0x00008000Ë

	)

3559 
	#ADC_SQR3_SQ4_1
 ((
uöt32_t
)0x00010000Ë

	)

3560 
	#ADC_SQR3_SQ4_2
 ((
uöt32_t
)0x00020000Ë

	)

3561 
	#ADC_SQR3_SQ4_3
 ((
uöt32_t
)0x00040000Ë

	)

3562 
	#ADC_SQR3_SQ4_4
 ((
uöt32_t
)0x00080000Ë

	)

3564 
	#ADC_SQR3_SQ5
 ((
uöt32_t
)0x01F00000Ë

	)

3565 
	#ADC_SQR3_SQ5_0
 ((
uöt32_t
)0x00100000Ë

	)

3566 
	#ADC_SQR3_SQ5_1
 ((
uöt32_t
)0x00200000Ë

	)

3567 
	#ADC_SQR3_SQ5_2
 ((
uöt32_t
)0x00400000Ë

	)

3568 
	#ADC_SQR3_SQ5_3
 ((
uöt32_t
)0x00800000Ë

	)

3569 
	#ADC_SQR3_SQ5_4
 ((
uöt32_t
)0x01000000Ë

	)

3571 
	#ADC_SQR3_SQ6
 ((
uöt32_t
)0x3E000000Ë

	)

3572 
	#ADC_SQR3_SQ6_0
 ((
uöt32_t
)0x02000000Ë

	)

3573 
	#ADC_SQR3_SQ6_1
 ((
uöt32_t
)0x04000000Ë

	)

3574 
	#ADC_SQR3_SQ6_2
 ((
uöt32_t
)0x08000000Ë

	)

3575 
	#ADC_SQR3_SQ6_3
 ((
uöt32_t
)0x10000000Ë

	)

3576 
	#ADC_SQR3_SQ6_4
 ((
uöt32_t
)0x20000000Ë

	)

3579 
	#ADC_JSQR_JSQ1
 ((
uöt32_t
)0x0000001FË

	)

3580 
	#ADC_JSQR_JSQ1_0
 ((
uöt32_t
)0x00000001Ë

	)

3581 
	#ADC_JSQR_JSQ1_1
 ((
uöt32_t
)0x00000002Ë

	)

3582 
	#ADC_JSQR_JSQ1_2
 ((
uöt32_t
)0x00000004Ë

	)

3583 
	#ADC_JSQR_JSQ1_3
 ((
uöt32_t
)0x00000008Ë

	)

3584 
	#ADC_JSQR_JSQ1_4
 ((
uöt32_t
)0x00000010Ë

	)

3586 
	#ADC_JSQR_JSQ2
 ((
uöt32_t
)0x000003E0Ë

	)

3587 
	#ADC_JSQR_JSQ2_0
 ((
uöt32_t
)0x00000020Ë

	)

3588 
	#ADC_JSQR_JSQ2_1
 ((
uöt32_t
)0x00000040Ë

	)

3589 
	#ADC_JSQR_JSQ2_2
 ((
uöt32_t
)0x00000080Ë

	)

3590 
	#ADC_JSQR_JSQ2_3
 ((
uöt32_t
)0x00000100Ë

	)

3591 
	#ADC_JSQR_JSQ2_4
 ((
uöt32_t
)0x00000200Ë

	)

3593 
	#ADC_JSQR_JSQ3
 ((
uöt32_t
)0x00007C00Ë

	)

3594 
	#ADC_JSQR_JSQ3_0
 ((
uöt32_t
)0x00000400Ë

	)

3595 
	#ADC_JSQR_JSQ3_1
 ((
uöt32_t
)0x00000800Ë

	)

3596 
	#ADC_JSQR_JSQ3_2
 ((
uöt32_t
)0x00001000Ë

	)

3597 
	#ADC_JSQR_JSQ3_3
 ((
uöt32_t
)0x00002000Ë

	)

3598 
	#ADC_JSQR_JSQ3_4
 ((
uöt32_t
)0x00004000Ë

	)

3600 
	#ADC_JSQR_JSQ4
 ((
uöt32_t
)0x000F8000Ë

	)

3601 
	#ADC_JSQR_JSQ4_0
 ((
uöt32_t
)0x00008000Ë

	)

3602 
	#ADC_JSQR_JSQ4_1
 ((
uöt32_t
)0x00010000Ë

	)

3603 
	#ADC_JSQR_JSQ4_2
 ((
uöt32_t
)0x00020000Ë

	)

3604 
	#ADC_JSQR_JSQ4_3
 ((
uöt32_t
)0x00040000Ë

	)

3605 
	#ADC_JSQR_JSQ4_4
 ((
uöt32_t
)0x00080000Ë

	)

3607 
	#ADC_JSQR_JL
 ((
uöt32_t
)0x00300000Ë

	)

3608 
	#ADC_JSQR_JL_0
 ((
uöt32_t
)0x00100000Ë

	)

3609 
	#ADC_JSQR_JL_1
 ((
uöt32_t
)0x00200000Ë

	)

3612 
	#ADC_JDR1_JDATA
 ((
uöt16_t
)0xFFFFË

	)

3615 
	#ADC_JDR2_JDATA
 ((
uöt16_t
)0xFFFFË

	)

3618 
	#ADC_JDR3_JDATA
 ((
uöt16_t
)0xFFFFË

	)

3621 
	#ADC_JDR4_JDATA
 ((
uöt16_t
)0xFFFFË

	)

3624 
	#ADC_DR_DATA
 ((
uöt32_t
)0x0000FFFFË

	)

3625 
	#ADC_DR_ADC2DATA
 ((
uöt32_t
)0xFFFF0000Ë

	)

3634 
	#DAC_CR_EN1
 ((
uöt32_t
)0x00000001Ë

	)

3635 
	#DAC_CR_BOFF1
 ((
uöt32_t
)0x00000002Ë

	)

3636 
	#DAC_CR_TEN1
 ((
uöt32_t
)0x00000004Ë

	)

3638 
	#DAC_CR_TSEL1
 ((
uöt32_t
)0x00000038Ë

	)

3639 
	#DAC_CR_TSEL1_0
 ((
uöt32_t
)0x00000008Ë

	)

3640 
	#DAC_CR_TSEL1_1
 ((
uöt32_t
)0x00000010Ë

	)

3641 
	#DAC_CR_TSEL1_2
 ((
uöt32_t
)0x00000020Ë

	)

3643 
	#DAC_CR_WAVE1
 ((
uöt32_t
)0x000000C0Ë

	)

3644 
	#DAC_CR_WAVE1_0
 ((
uöt32_t
)0x00000040Ë

	)

3645 
	#DAC_CR_WAVE1_1
 ((
uöt32_t
)0x00000080Ë

	)

3647 
	#DAC_CR_MAMP1
 ((
uöt32_t
)0x00000F00Ë

	)

3648 
	#DAC_CR_MAMP1_0
 ((
uöt32_t
)0x00000100Ë

	)

3649 
	#DAC_CR_MAMP1_1
 ((
uöt32_t
)0x00000200Ë

	)

3650 
	#DAC_CR_MAMP1_2
 ((
uöt32_t
)0x00000400Ë

	)

3651 
	#DAC_CR_MAMP1_3
 ((
uöt32_t
)0x00000800Ë

	)

3653 
	#DAC_CR_DMAEN1
 ((
uöt32_t
)0x00001000Ë

	)

3654 
	#DAC_CR_EN2
 ((
uöt32_t
)0x00010000Ë

	)

3655 
	#DAC_CR_BOFF2
 ((
uöt32_t
)0x00020000Ë

	)

3656 
	#DAC_CR_TEN2
 ((
uöt32_t
)0x00040000Ë

	)

3658 
	#DAC_CR_TSEL2
 ((
uöt32_t
)0x00380000Ë

	)

3659 
	#DAC_CR_TSEL2_0
 ((
uöt32_t
)0x00080000Ë

	)

3660 
	#DAC_CR_TSEL2_1
 ((
uöt32_t
)0x00100000Ë

	)

3661 
	#DAC_CR_TSEL2_2
 ((
uöt32_t
)0x00200000Ë

	)

3663 
	#DAC_CR_WAVE2
 ((
uöt32_t
)0x00C00000Ë

	)

3664 
	#DAC_CR_WAVE2_0
 ((
uöt32_t
)0x00400000Ë

	)

3665 
	#DAC_CR_WAVE2_1
 ((
uöt32_t
)0x00800000Ë

	)

3667 
	#DAC_CR_MAMP2
 ((
uöt32_t
)0x0F000000Ë

	)

3668 
	#DAC_CR_MAMP2_0
 ((
uöt32_t
)0x01000000Ë

	)

3669 
	#DAC_CR_MAMP2_1
 ((
uöt32_t
)0x02000000Ë

	)

3670 
	#DAC_CR_MAMP2_2
 ((
uöt32_t
)0x04000000Ë

	)

3671 
	#DAC_CR_MAMP2_3
 ((
uöt32_t
)0x08000000Ë

	)

3673 
	#DAC_CR_DMAEN2
 ((
uöt32_t
)0x10000000Ë

	)

3676 
	#DAC_SWTRIGR_SWTRIG1
 ((
uöt8_t
)0x01Ë

	)

3677 
	#DAC_SWTRIGR_SWTRIG2
 ((
uöt8_t
)0x02Ë

	)

3680 
	#DAC_DHR12R1_DACC1DHR
 ((
uöt16_t
)0x0FFFË

	)

3683 
	#DAC_DHR12L1_DACC1DHR
 ((
uöt16_t
)0xFFF0Ë

	)

3686 
	#DAC_DHR8R1_DACC1DHR
 ((
uöt8_t
)0xFFË

	)

3689 
	#DAC_DHR12R2_DACC2DHR
 ((
uöt16_t
)0x0FFFË

	)

3692 
	#DAC_DHR12L2_DACC2DHR
 ((
uöt16_t
)0xFFF0Ë

	)

3695 
	#DAC_DHR8R2_DACC2DHR
 ((
uöt8_t
)0xFFË

	)

3698 
	#DAC_DHR12RD_DACC1DHR
 ((
uöt32_t
)0x00000FFFË

	)

3699 
	#DAC_DHR12RD_DACC2DHR
 ((
uöt32_t
)0x0FFF0000Ë

	)

3702 
	#DAC_DHR12LD_DACC1DHR
 ((
uöt32_t
)0x0000FFF0Ë

	)

3703 
	#DAC_DHR12LD_DACC2DHR
 ((
uöt32_t
)0xFFF00000Ë

	)

3706 
	#DAC_DHR8RD_DACC1DHR
 ((
uöt16_t
)0x00FFË

	)

3707 
	#DAC_DHR8RD_DACC2DHR
 ((
uöt16_t
)0xFF00Ë

	)

3710 
	#DAC_DOR1_DACC1DOR
 ((
uöt16_t
)0x0FFFË

	)

3713 
	#DAC_DOR2_DACC2DOR
 ((
uöt16_t
)0x0FFFË

	)

3722 
	#TIM_CR1_CEN
 ((
uöt16_t
)0x0001Ë

	)

3723 
	#TIM_CR1_UDIS
 ((
uöt16_t
)0x0002Ë

	)

3724 
	#TIM_CR1_URS
 ((
uöt16_t
)0x0004Ë

	)

3725 
	#TIM_CR1_OPM
 ((
uöt16_t
)0x0008Ë

	)

3726 
	#TIM_CR1_DIR
 ((
uöt16_t
)0x0010Ë

	)

3728 
	#TIM_CR1_CMS
 ((
uöt16_t
)0x0060Ë

	)

3729 
	#TIM_CR1_CMS_0
 ((
uöt16_t
)0x0020Ë

	)

3730 
	#TIM_CR1_CMS_1
 ((
uöt16_t
)0x0040Ë

	)

3732 
	#TIM_CR1_ARPE
 ((
uöt16_t
)0x0080Ë

	)

3734 
	#TIM_CR1_CKD
 ((
uöt16_t
)0x0300Ë

	)

3735 
	#TIM_CR1_CKD_0
 ((
uöt16_t
)0x0100Ë

	)

3736 
	#TIM_CR1_CKD_1
 ((
uöt16_t
)0x0200Ë

	)

3739 
	#TIM_CR2_CCPC
 ((
uöt16_t
)0x0001Ë

	)

3740 
	#TIM_CR2_CCUS
 ((
uöt16_t
)0x0004Ë

	)

3741 
	#TIM_CR2_CCDS
 ((
uöt16_t
)0x0008Ë

	)

3743 
	#TIM_CR2_MMS
 ((
uöt16_t
)0x0070Ë

	)

3744 
	#TIM_CR2_MMS_0
 ((
uöt16_t
)0x0010Ë

	)

3745 
	#TIM_CR2_MMS_1
 ((
uöt16_t
)0x0020Ë

	)

3746 
	#TIM_CR2_MMS_2
 ((
uöt16_t
)0x0040Ë

	)

3748 
	#TIM_CR2_TI1S
 ((
uöt16_t
)0x0080Ë

	)

3749 
	#TIM_CR2_OIS1
 ((
uöt16_t
)0x0100Ë

	)

3750 
	#TIM_CR2_OIS1N
 ((
uöt16_t
)0x0200Ë

	)

3751 
	#TIM_CR2_OIS2
 ((
uöt16_t
)0x0400Ë

	)

3752 
	#TIM_CR2_OIS2N
 ((
uöt16_t
)0x0800Ë

	)

3753 
	#TIM_CR2_OIS3
 ((
uöt16_t
)0x1000Ë

	)

3754 
	#TIM_CR2_OIS3N
 ((
uöt16_t
)0x2000Ë

	)

3755 
	#TIM_CR2_OIS4
 ((
uöt16_t
)0x4000Ë

	)

3758 
	#TIM_SMCR_SMS
 ((
uöt16_t
)0x0007Ë

	)

3759 
	#TIM_SMCR_SMS_0
 ((
uöt16_t
)0x0001Ë

	)

3760 
	#TIM_SMCR_SMS_1
 ((
uöt16_t
)0x0002Ë

	)

3761 
	#TIM_SMCR_SMS_2
 ((
uöt16_t
)0x0004Ë

	)

3763 
	#TIM_SMCR_TS
 ((
uöt16_t
)0x0070Ë

	)

3764 
	#TIM_SMCR_TS_0
 ((
uöt16_t
)0x0010Ë

	)

3765 
	#TIM_SMCR_TS_1
 ((
uöt16_t
)0x0020Ë

	)

3766 
	#TIM_SMCR_TS_2
 ((
uöt16_t
)0x0040Ë

	)

3768 
	#TIM_SMCR_MSM
 ((
uöt16_t
)0x0080Ë

	)

3770 
	#TIM_SMCR_ETF
 ((
uöt16_t
)0x0F00Ë

	)

3771 
	#TIM_SMCR_ETF_0
 ((
uöt16_t
)0x0100Ë

	)

3772 
	#TIM_SMCR_ETF_1
 ((
uöt16_t
)0x0200Ë

	)

3773 
	#TIM_SMCR_ETF_2
 ((
uöt16_t
)0x0400Ë

	)

3774 
	#TIM_SMCR_ETF_3
 ((
uöt16_t
)0x0800Ë

	)

3776 
	#TIM_SMCR_ETPS
 ((
uöt16_t
)0x3000Ë

	)

3777 
	#TIM_SMCR_ETPS_0
 ((
uöt16_t
)0x1000Ë

	)

3778 
	#TIM_SMCR_ETPS_1
 ((
uöt16_t
)0x2000Ë

	)

3780 
	#TIM_SMCR_ECE
 ((
uöt16_t
)0x4000Ë

	)

3781 
	#TIM_SMCR_ETP
 ((
uöt16_t
)0x8000Ë

	)

3784 
	#TIM_DIER_UIE
 ((
uöt16_t
)0x0001Ë

	)

3785 
	#TIM_DIER_CC1IE
 ((
uöt16_t
)0x0002Ë

	)

3786 
	#TIM_DIER_CC2IE
 ((
uöt16_t
)0x0004Ë

	)

3787 
	#TIM_DIER_CC3IE
 ((
uöt16_t
)0x0008Ë

	)

3788 
	#TIM_DIER_CC4IE
 ((
uöt16_t
)0x0010Ë

	)

3789 
	#TIM_DIER_COMIE
 ((
uöt16_t
)0x0020Ë

	)

3790 
	#TIM_DIER_TIE
 ((
uöt16_t
)0x0040Ë

	)

3791 
	#TIM_DIER_BIE
 ((
uöt16_t
)0x0080Ë

	)

3792 
	#TIM_DIER_UDE
 ((
uöt16_t
)0x0100Ë

	)

3793 
	#TIM_DIER_CC1DE
 ((
uöt16_t
)0x0200Ë

	)

3794 
	#TIM_DIER_CC2DE
 ((
uöt16_t
)0x0400Ë

	)

3795 
	#TIM_DIER_CC3DE
 ((
uöt16_t
)0x0800Ë

	)

3796 
	#TIM_DIER_CC4DE
 ((
uöt16_t
)0x1000Ë

	)

3797 
	#TIM_DIER_COMDE
 ((
uöt16_t
)0x2000Ë

	)

3798 
	#TIM_DIER_TDE
 ((
uöt16_t
)0x4000Ë

	)

3801 
	#TIM_SR_UIF
 ((
uöt16_t
)0x0001Ë

	)

3802 
	#TIM_SR_CC1IF
 ((
uöt16_t
)0x0002Ë

	)

3803 
	#TIM_SR_CC2IF
 ((
uöt16_t
)0x0004Ë

	)

3804 
	#TIM_SR_CC3IF
 ((
uöt16_t
)0x0008Ë

	)

3805 
	#TIM_SR_CC4IF
 ((
uöt16_t
)0x0010Ë

	)

3806 
	#TIM_SR_COMIF
 ((
uöt16_t
)0x0020Ë

	)

3807 
	#TIM_SR_TIF
 ((
uöt16_t
)0x0040Ë

	)

3808 
	#TIM_SR_BIF
 ((
uöt16_t
)0x0080Ë

	)

3809 
	#TIM_SR_CC1OF
 ((
uöt16_t
)0x0200Ë

	)

3810 
	#TIM_SR_CC2OF
 ((
uöt16_t
)0x0400Ë

	)

3811 
	#TIM_SR_CC3OF
 ((
uöt16_t
)0x0800Ë

	)

3812 
	#TIM_SR_CC4OF
 ((
uöt16_t
)0x1000Ë

	)

3815 
	#TIM_EGR_UG
 ((
uöt8_t
)0x01Ë

	)

3816 
	#TIM_EGR_CC1G
 ((
uöt8_t
)0x02Ë

	)

3817 
	#TIM_EGR_CC2G
 ((
uöt8_t
)0x04Ë

	)

3818 
	#TIM_EGR_CC3G
 ((
uöt8_t
)0x08Ë

	)

3819 
	#TIM_EGR_CC4G
 ((
uöt8_t
)0x10Ë

	)

3820 
	#TIM_EGR_COMG
 ((
uöt8_t
)0x20Ë

	)

3821 
	#TIM_EGR_TG
 ((
uöt8_t
)0x40Ë

	)

3822 
	#TIM_EGR_BG
 ((
uöt8_t
)0x80Ë

	)

3825 
	#TIM_CCMR1_CC1S
 ((
uöt16_t
)0x0003Ë

	)

3826 
	#TIM_CCMR1_CC1S_0
 ((
uöt16_t
)0x0001Ë

	)

3827 
	#TIM_CCMR1_CC1S_1
 ((
uöt16_t
)0x0002Ë

	)

3829 
	#TIM_CCMR1_OC1FE
 ((
uöt16_t
)0x0004Ë

	)

3830 
	#TIM_CCMR1_OC1PE
 ((
uöt16_t
)0x0008Ë

	)

3832 
	#TIM_CCMR1_OC1M
 ((
uöt16_t
)0x0070Ë

	)

3833 
	#TIM_CCMR1_OC1M_0
 ((
uöt16_t
)0x0010Ë

	)

3834 
	#TIM_CCMR1_OC1M_1
 ((
uöt16_t
)0x0020Ë

	)

3835 
	#TIM_CCMR1_OC1M_2
 ((
uöt16_t
)0x0040Ë

	)

3837 
	#TIM_CCMR1_OC1CE
 ((
uöt16_t
)0x0080Ë

	)

3839 
	#TIM_CCMR1_CC2S
 ((
uöt16_t
)0x0300Ë

	)

3840 
	#TIM_CCMR1_CC2S_0
 ((
uöt16_t
)0x0100Ë

	)

3841 
	#TIM_CCMR1_CC2S_1
 ((
uöt16_t
)0x0200Ë

	)

3843 
	#TIM_CCMR1_OC2FE
 ((
uöt16_t
)0x0400Ë

	)

3844 
	#TIM_CCMR1_OC2PE
 ((
uöt16_t
)0x0800Ë

	)

3846 
	#TIM_CCMR1_OC2M
 ((
uöt16_t
)0x7000Ë

	)

3847 
	#TIM_CCMR1_OC2M_0
 ((
uöt16_t
)0x1000Ë

	)

3848 
	#TIM_CCMR1_OC2M_1
 ((
uöt16_t
)0x2000Ë

	)

3849 
	#TIM_CCMR1_OC2M_2
 ((
uöt16_t
)0x4000Ë

	)

3851 
	#TIM_CCMR1_OC2CE
 ((
uöt16_t
)0x8000Ë

	)

3855 
	#TIM_CCMR1_IC1PSC
 ((
uöt16_t
)0x000CË

	)

3856 
	#TIM_CCMR1_IC1PSC_0
 ((
uöt16_t
)0x0004Ë

	)

3857 
	#TIM_CCMR1_IC1PSC_1
 ((
uöt16_t
)0x0008Ë

	)

3859 
	#TIM_CCMR1_IC1F
 ((
uöt16_t
)0x00F0Ë

	)

3860 
	#TIM_CCMR1_IC1F_0
 ((
uöt16_t
)0x0010Ë

	)

3861 
	#TIM_CCMR1_IC1F_1
 ((
uöt16_t
)0x0020Ë

	)

3862 
	#TIM_CCMR1_IC1F_2
 ((
uöt16_t
)0x0040Ë

	)

3863 
	#TIM_CCMR1_IC1F_3
 ((
uöt16_t
)0x0080Ë

	)

3865 
	#TIM_CCMR1_IC2PSC
 ((
uöt16_t
)0x0C00Ë

	)

3866 
	#TIM_CCMR1_IC2PSC_0
 ((
uöt16_t
)0x0400Ë

	)

3867 
	#TIM_CCMR1_IC2PSC_1
 ((
uöt16_t
)0x0800Ë

	)

3869 
	#TIM_CCMR1_IC2F
 ((
uöt16_t
)0xF000Ë

	)

3870 
	#TIM_CCMR1_IC2F_0
 ((
uöt16_t
)0x1000Ë

	)

3871 
	#TIM_CCMR1_IC2F_1
 ((
uöt16_t
)0x2000Ë

	)

3872 
	#TIM_CCMR1_IC2F_2
 ((
uöt16_t
)0x4000Ë

	)

3873 
	#TIM_CCMR1_IC2F_3
 ((
uöt16_t
)0x8000Ë

	)

3876 
	#TIM_CCMR2_CC3S
 ((
uöt16_t
)0x0003Ë

	)

3877 
	#TIM_CCMR2_CC3S_0
 ((
uöt16_t
)0x0001Ë

	)

3878 
	#TIM_CCMR2_CC3S_1
 ((
uöt16_t
)0x0002Ë

	)

3880 
	#TIM_CCMR2_OC3FE
 ((
uöt16_t
)0x0004Ë

	)

3881 
	#TIM_CCMR2_OC3PE
 ((
uöt16_t
)0x0008Ë

	)

3883 
	#TIM_CCMR2_OC3M
 ((
uöt16_t
)0x0070Ë

	)

3884 
	#TIM_CCMR2_OC3M_0
 ((
uöt16_t
)0x0010Ë

	)

3885 
	#TIM_CCMR2_OC3M_1
 ((
uöt16_t
)0x0020Ë

	)

3886 
	#TIM_CCMR2_OC3M_2
 ((
uöt16_t
)0x0040Ë

	)

3888 
	#TIM_CCMR2_OC3CE
 ((
uöt16_t
)0x0080Ë

	)

3890 
	#TIM_CCMR2_CC4S
 ((
uöt16_t
)0x0300Ë

	)

3891 
	#TIM_CCMR2_CC4S_0
 ((
uöt16_t
)0x0100Ë

	)

3892 
	#TIM_CCMR2_CC4S_1
 ((
uöt16_t
)0x0200Ë

	)

3894 
	#TIM_CCMR2_OC4FE
 ((
uöt16_t
)0x0400Ë

	)

3895 
	#TIM_CCMR2_OC4PE
 ((
uöt16_t
)0x0800Ë

	)

3897 
	#TIM_CCMR2_OC4M
 ((
uöt16_t
)0x7000Ë

	)

3898 
	#TIM_CCMR2_OC4M_0
 ((
uöt16_t
)0x1000Ë

	)

3899 
	#TIM_CCMR2_OC4M_1
 ((
uöt16_t
)0x2000Ë

	)

3900 
	#TIM_CCMR2_OC4M_2
 ((
uöt16_t
)0x4000Ë

	)

3902 
	#TIM_CCMR2_OC4CE
 ((
uöt16_t
)0x8000Ë

	)

3906 
	#TIM_CCMR2_IC3PSC
 ((
uöt16_t
)0x000CË

	)

3907 
	#TIM_CCMR2_IC3PSC_0
 ((
uöt16_t
)0x0004Ë

	)

3908 
	#TIM_CCMR2_IC3PSC_1
 ((
uöt16_t
)0x0008Ë

	)

3910 
	#TIM_CCMR2_IC3F
 ((
uöt16_t
)0x00F0Ë

	)

3911 
	#TIM_CCMR2_IC3F_0
 ((
uöt16_t
)0x0010Ë

	)

3912 
	#TIM_CCMR2_IC3F_1
 ((
uöt16_t
)0x0020Ë

	)

3913 
	#TIM_CCMR2_IC3F_2
 ((
uöt16_t
)0x0040Ë

	)

3914 
	#TIM_CCMR2_IC3F_3
 ((
uöt16_t
)0x0080Ë

	)

3916 
	#TIM_CCMR2_IC4PSC
 ((
uöt16_t
)0x0C00Ë

	)

3917 
	#TIM_CCMR2_IC4PSC_0
 ((
uöt16_t
)0x0400Ë

	)

3918 
	#TIM_CCMR2_IC4PSC_1
 ((
uöt16_t
)0x0800Ë

	)

3920 
	#TIM_CCMR2_IC4F
 ((
uöt16_t
)0xF000Ë

	)

3921 
	#TIM_CCMR2_IC4F_0
 ((
uöt16_t
)0x1000Ë

	)

3922 
	#TIM_CCMR2_IC4F_1
 ((
uöt16_t
)0x2000Ë

	)

3923 
	#TIM_CCMR2_IC4F_2
 ((
uöt16_t
)0x4000Ë

	)

3924 
	#TIM_CCMR2_IC4F_3
 ((
uöt16_t
)0x8000Ë

	)

3927 
	#TIM_CCER_CC1E
 ((
uöt16_t
)0x0001Ë

	)

3928 
	#TIM_CCER_CC1P
 ((
uöt16_t
)0x0002Ë

	)

3929 
	#TIM_CCER_CC1NE
 ((
uöt16_t
)0x0004Ë

	)

3930 
	#TIM_CCER_CC1NP
 ((
uöt16_t
)0x0008Ë

	)

3931 
	#TIM_CCER_CC2E
 ((
uöt16_t
)0x0010Ë

	)

3932 
	#TIM_CCER_CC2P
 ((
uöt16_t
)0x0020Ë

	)

3933 
	#TIM_CCER_CC2NE
 ((
uöt16_t
)0x0040Ë

	)

3934 
	#TIM_CCER_CC2NP
 ((
uöt16_t
)0x0080Ë

	)

3935 
	#TIM_CCER_CC3E
 ((
uöt16_t
)0x0100Ë

	)

3936 
	#TIM_CCER_CC3P
 ((
uöt16_t
)0x0200Ë

	)

3937 
	#TIM_CCER_CC3NE
 ((
uöt16_t
)0x0400Ë

	)

3938 
	#TIM_CCER_CC3NP
 ((
uöt16_t
)0x0800Ë

	)

3939 
	#TIM_CCER_CC4E
 ((
uöt16_t
)0x1000Ë

	)

3940 
	#TIM_CCER_CC4P
 ((
uöt16_t
)0x2000Ë

	)

3943 
	#TIM_CNT_CNT
 ((
uöt16_t
)0xFFFFË

	)

3946 
	#TIM_PSC_PSC
 ((
uöt16_t
)0xFFFFË

	)

3949 
	#TIM_ARR_ARR
 ((
uöt16_t
)0xFFFFË

	)

3952 
	#TIM_RCR_REP
 ((
uöt8_t
)0xFFË

	)

3955 
	#TIM_CCR1_CCR1
 ((
uöt16_t
)0xFFFFË

	)

3958 
	#TIM_CCR2_CCR2
 ((
uöt16_t
)0xFFFFË

	)

3961 
	#TIM_CCR3_CCR3
 ((
uöt16_t
)0xFFFFË

	)

3964 
	#TIM_CCR4_CCR4
 ((
uöt16_t
)0xFFFFË

	)

3967 
	#TIM_BDTR_DTG
 ((
uöt16_t
)0x00FFË

	)

3968 
	#TIM_BDTR_DTG_0
 ((
uöt16_t
)0x0001Ë

	)

3969 
	#TIM_BDTR_DTG_1
 ((
uöt16_t
)0x0002Ë

	)

3970 
	#TIM_BDTR_DTG_2
 ((
uöt16_t
)0x0004Ë

	)

3971 
	#TIM_BDTR_DTG_3
 ((
uöt16_t
)0x0008Ë

	)

3972 
	#TIM_BDTR_DTG_4
 ((
uöt16_t
)0x0010Ë

	)

3973 
	#TIM_BDTR_DTG_5
 ((
uöt16_t
)0x0020Ë

	)

3974 
	#TIM_BDTR_DTG_6
 ((
uöt16_t
)0x0040Ë

	)

3975 
	#TIM_BDTR_DTG_7
 ((
uöt16_t
)0x0080Ë

	)

3977 
	#TIM_BDTR_LOCK
 ((
uöt16_t
)0x0300Ë

	)

3978 
	#TIM_BDTR_LOCK_0
 ((
uöt16_t
)0x0100Ë

	)

3979 
	#TIM_BDTR_LOCK_1
 ((
uöt16_t
)0x0200Ë

	)

3981 
	#TIM_BDTR_OSSI
 ((
uöt16_t
)0x0400Ë

	)

3982 
	#TIM_BDTR_OSSR
 ((
uöt16_t
)0x0800Ë

	)

3983 
	#TIM_BDTR_BKE
 ((
uöt16_t
)0x1000Ë

	)

3984 
	#TIM_BDTR_BKP
 ((
uöt16_t
)0x2000Ë

	)

3985 
	#TIM_BDTR_AOE
 ((
uöt16_t
)0x4000Ë

	)

3986 
	#TIM_BDTR_MOE
 ((
uöt16_t
)0x8000Ë

	)

3989 
	#TIM_DCR_DBA
 ((
uöt16_t
)0x001FË

	)

3990 
	#TIM_DCR_DBA_0
 ((
uöt16_t
)0x0001Ë

	)

3991 
	#TIM_DCR_DBA_1
 ((
uöt16_t
)0x0002Ë

	)

3992 
	#TIM_DCR_DBA_2
 ((
uöt16_t
)0x0004Ë

	)

3993 
	#TIM_DCR_DBA_3
 ((
uöt16_t
)0x0008Ë

	)

3994 
	#TIM_DCR_DBA_4
 ((
uöt16_t
)0x0010Ë

	)

3996 
	#TIM_DCR_DBL
 ((
uöt16_t
)0x1F00Ë

	)

3997 
	#TIM_DCR_DBL_0
 ((
uöt16_t
)0x0100Ë

	)

3998 
	#TIM_DCR_DBL_1
 ((
uöt16_t
)0x0200Ë

	)

3999 
	#TIM_DCR_DBL_2
 ((
uöt16_t
)0x0400Ë

	)

4000 
	#TIM_DCR_DBL_3
 ((
uöt16_t
)0x0800Ë

	)

4001 
	#TIM_DCR_DBL_4
 ((
uöt16_t
)0x1000Ë

	)

4004 
	#TIM_DMAR_DMAB
 ((
uöt16_t
)0xFFFFË

	)

4013 
	#RTC_CRH_SECIE
 ((
uöt8_t
)0x01Ë

	)

4014 
	#RTC_CRH_ALRIE
 ((
uöt8_t
)0x02Ë

	)

4015 
	#RTC_CRH_OWIE
 ((
uöt8_t
)0x04Ë

	)

4018 
	#RTC_CRL_SECF
 ((
uöt8_t
)0x01Ë

	)

4019 
	#RTC_CRL_ALRF
 ((
uöt8_t
)0x02Ë

	)

4020 
	#RTC_CRL_OWF
 ((
uöt8_t
)0x04Ë

	)

4021 
	#RTC_CRL_RSF
 ((
uöt8_t
)0x08Ë

	)

4022 
	#RTC_CRL_CNF
 ((
uöt8_t
)0x10Ë

	)

4023 
	#RTC_CRL_RTOFF
 ((
uöt8_t
)0x20Ë

	)

4026 
	#RTC_PRLH_PRL
 ((
uöt16_t
)0x000FË

	)

4029 
	#RTC_PRLL_PRL
 ((
uöt16_t
)0xFFFFË

	)

4032 
	#RTC_DIVH_RTC_DIV
 ((
uöt16_t
)0x000FË

	)

4035 
	#RTC_DIVL_RTC_DIV
 ((
uöt16_t
)0xFFFFË

	)

4038 
	#RTC_CNTH_RTC_CNT
 ((
uöt16_t
)0xFFFFË

	)

4041 
	#RTC_CNTL_RTC_CNT
 ((
uöt16_t
)0xFFFFË

	)

4044 
	#RTC_ALRH_RTC_ALR
 ((
uöt16_t
)0xFFFFË

	)

4047 
	#RTC_ALRL_RTC_ALR
 ((
uöt16_t
)0xFFFFË

	)

4056 
	#IWDG_KR_KEY
 ((
uöt16_t
)0xFFFFË

	)

4059 
	#IWDG_PR_PR
 ((
uöt8_t
)0x07Ë

	)

4060 
	#IWDG_PR_PR_0
 ((
uöt8_t
)0x01Ë

	)

4061 
	#IWDG_PR_PR_1
 ((
uöt8_t
)0x02Ë

	)

4062 
	#IWDG_PR_PR_2
 ((
uöt8_t
)0x04Ë

	)

4065 
	#IWDG_RLR_RL
 ((
uöt16_t
)0x0FFFË

	)

4068 
	#IWDG_SR_PVU
 ((
uöt8_t
)0x01Ë

	)

4069 
	#IWDG_SR_RVU
 ((
uöt8_t
)0x02Ë

	)

4078 
	#WWDG_CR_T
 ((
uöt8_t
)0x7FË

	)

4079 
	#WWDG_CR_T0
 ((
uöt8_t
)0x01Ë

	)

4080 
	#WWDG_CR_T1
 ((
uöt8_t
)0x02Ë

	)

4081 
	#WWDG_CR_T2
 ((
uöt8_t
)0x04Ë

	)

4082 
	#WWDG_CR_T3
 ((
uöt8_t
)0x08Ë

	)

4083 
	#WWDG_CR_T4
 ((
uöt8_t
)0x10Ë

	)

4084 
	#WWDG_CR_T5
 ((
uöt8_t
)0x20Ë

	)

4085 
	#WWDG_CR_T6
 ((
uöt8_t
)0x40Ë

	)

4087 
	#WWDG_CR_WDGA
 ((
uöt8_t
)0x80Ë

	)

4090 
	#WWDG_CFR_W
 ((
uöt16_t
)0x007FË

	)

4091 
	#WWDG_CFR_W0
 ((
uöt16_t
)0x0001Ë

	)

4092 
	#WWDG_CFR_W1
 ((
uöt16_t
)0x0002Ë

	)

4093 
	#WWDG_CFR_W2
 ((
uöt16_t
)0x0004Ë

	)

4094 
	#WWDG_CFR_W3
 ((
uöt16_t
)0x0008Ë

	)

4095 
	#WWDG_CFR_W4
 ((
uöt16_t
)0x0010Ë

	)

4096 
	#WWDG_CFR_W5
 ((
uöt16_t
)0x0020Ë

	)

4097 
	#WWDG_CFR_W6
 ((
uöt16_t
)0x0040Ë

	)

4099 
	#WWDG_CFR_WDGTB
 ((
uöt16_t
)0x0180Ë

	)

4100 
	#WWDG_CFR_WDGTB0
 ((
uöt16_t
)0x0080Ë

	)

4101 
	#WWDG_CFR_WDGTB1
 ((
uöt16_t
)0x0100Ë

	)

4103 
	#WWDG_CFR_EWI
 ((
uöt16_t
)0x0200Ë

	)

4106 
	#WWDG_SR_EWIF
 ((
uöt8_t
)0x01Ë

	)

4115 
	#FSMC_BCR1_MBKEN
 ((
uöt32_t
)0x00000001Ë

	)

4116 
	#FSMC_BCR1_MUXEN
 ((
uöt32_t
)0x00000002Ë

	)

4118 
	#FSMC_BCR1_MTYP
 ((
uöt32_t
)0x0000000CË

	)

4119 
	#FSMC_BCR1_MTYP_0
 ((
uöt32_t
)0x00000004Ë

	)

4120 
	#FSMC_BCR1_MTYP_1
 ((
uöt32_t
)0x00000008Ë

	)

4122 
	#FSMC_BCR1_MWID
 ((
uöt32_t
)0x00000030Ë

	)

4123 
	#FSMC_BCR1_MWID_0
 ((
uöt32_t
)0x00000010Ë

	)

4124 
	#FSMC_BCR1_MWID_1
 ((
uöt32_t
)0x00000020Ë

	)

4126 
	#FSMC_BCR1_FACCEN
 ((
uöt32_t
)0x00000040Ë

	)

4127 
	#FSMC_BCR1_BURSTEN
 ((
uöt32_t
)0x00000100Ë

	)

4128 
	#FSMC_BCR1_WAITPOL
 ((
uöt32_t
)0x00000200Ë

	)

4129 
	#FSMC_BCR1_WRAPMOD
 ((
uöt32_t
)0x00000400Ë

	)

4130 
	#FSMC_BCR1_WAITCFG
 ((
uöt32_t
)0x00000800Ë

	)

4131 
	#FSMC_BCR1_WREN
 ((
uöt32_t
)0x00001000Ë

	)

4132 
	#FSMC_BCR1_WAITEN
 ((
uöt32_t
)0x00002000Ë

	)

4133 
	#FSMC_BCR1_EXTMOD
 ((
uöt32_t
)0x00004000Ë

	)

4134 
	#FSMC_BCR1_CBURSTRW
 ((
uöt32_t
)0x00080000Ë

	)

4137 
	#FSMC_BCR2_MBKEN
 ((
uöt32_t
)0x00000001Ë

	)

4138 
	#FSMC_BCR2_MUXEN
 ((
uöt32_t
)0x00000002Ë

	)

4140 
	#FSMC_BCR2_MTYP
 ((
uöt32_t
)0x0000000CË

	)

4141 
	#FSMC_BCR2_MTYP_0
 ((
uöt32_t
)0x00000004Ë

	)

4142 
	#FSMC_BCR2_MTYP_1
 ((
uöt32_t
)0x00000008Ë

	)

4144 
	#FSMC_BCR2_MWID
 ((
uöt32_t
)0x00000030Ë

	)

4145 
	#FSMC_BCR2_MWID_0
 ((
uöt32_t
)0x00000010Ë

	)

4146 
	#FSMC_BCR2_MWID_1
 ((
uöt32_t
)0x00000020Ë

	)

4148 
	#FSMC_BCR2_FACCEN
 ((
uöt32_t
)0x00000040Ë

	)

4149 
	#FSMC_BCR2_BURSTEN
 ((
uöt32_t
)0x00000100Ë

	)

4150 
	#FSMC_BCR2_WAITPOL
 ((
uöt32_t
)0x00000200Ë

	)

4151 
	#FSMC_BCR2_WRAPMOD
 ((
uöt32_t
)0x00000400Ë

	)

4152 
	#FSMC_BCR2_WAITCFG
 ((
uöt32_t
)0x00000800Ë

	)

4153 
	#FSMC_BCR2_WREN
 ((
uöt32_t
)0x00001000Ë

	)

4154 
	#FSMC_BCR2_WAITEN
 ((
uöt32_t
)0x00002000Ë

	)

4155 
	#FSMC_BCR2_EXTMOD
 ((
uöt32_t
)0x00004000Ë

	)

4156 
	#FSMC_BCR2_CBURSTRW
 ((
uöt32_t
)0x00080000Ë

	)

4159 
	#FSMC_BCR3_MBKEN
 ((
uöt32_t
)0x00000001Ë

	)

4160 
	#FSMC_BCR3_MUXEN
 ((
uöt32_t
)0x00000002Ë

	)

4162 
	#FSMC_BCR3_MTYP
 ((
uöt32_t
)0x0000000CË

	)

4163 
	#FSMC_BCR3_MTYP_0
 ((
uöt32_t
)0x00000004Ë

	)

4164 
	#FSMC_BCR3_MTYP_1
 ((
uöt32_t
)0x00000008Ë

	)

4166 
	#FSMC_BCR3_MWID
 ((
uöt32_t
)0x00000030Ë

	)

4167 
	#FSMC_BCR3_MWID_0
 ((
uöt32_t
)0x00000010Ë

	)

4168 
	#FSMC_BCR3_MWID_1
 ((
uöt32_t
)0x00000020Ë

	)

4170 
	#FSMC_BCR3_FACCEN
 ((
uöt32_t
)0x00000040Ë

	)

4171 
	#FSMC_BCR3_BURSTEN
 ((
uöt32_t
)0x00000100Ë

	)

4172 
	#FSMC_BCR3_WAITPOL
 ((
uöt32_t
)0x00000200Ë

	)

4173 
	#FSMC_BCR3_WRAPMOD
 ((
uöt32_t
)0x00000400Ë

	)

4174 
	#FSMC_BCR3_WAITCFG
 ((
uöt32_t
)0x00000800Ë

	)

4175 
	#FSMC_BCR3_WREN
 ((
uöt32_t
)0x00001000Ë

	)

4176 
	#FSMC_BCR3_WAITEN
 ((
uöt32_t
)0x00002000Ë

	)

4177 
	#FSMC_BCR3_EXTMOD
 ((
uöt32_t
)0x00004000Ë

	)

4178 
	#FSMC_BCR3_CBURSTRW
 ((
uöt32_t
)0x00080000Ë

	)

4181 
	#FSMC_BCR4_MBKEN
 ((
uöt32_t
)0x00000001Ë

	)

4182 
	#FSMC_BCR4_MUXEN
 ((
uöt32_t
)0x00000002Ë

	)

4184 
	#FSMC_BCR4_MTYP
 ((
uöt32_t
)0x0000000CË

	)

4185 
	#FSMC_BCR4_MTYP_0
 ((
uöt32_t
)0x00000004Ë

	)

4186 
	#FSMC_BCR4_MTYP_1
 ((
uöt32_t
)0x00000008Ë

	)

4188 
	#FSMC_BCR4_MWID
 ((
uöt32_t
)0x00000030Ë

	)

4189 
	#FSMC_BCR4_MWID_0
 ((
uöt32_t
)0x00000010Ë

	)

4190 
	#FSMC_BCR4_MWID_1
 ((
uöt32_t
)0x00000020Ë

	)

4192 
	#FSMC_BCR4_FACCEN
 ((
uöt32_t
)0x00000040Ë

	)

4193 
	#FSMC_BCR4_BURSTEN
 ((
uöt32_t
)0x00000100Ë

	)

4194 
	#FSMC_BCR4_WAITPOL
 ((
uöt32_t
)0x00000200Ë

	)

4195 
	#FSMC_BCR4_WRAPMOD
 ((
uöt32_t
)0x00000400Ë

	)

4196 
	#FSMC_BCR4_WAITCFG
 ((
uöt32_t
)0x00000800Ë

	)

4197 
	#FSMC_BCR4_WREN
 ((
uöt32_t
)0x00001000Ë

	)

4198 
	#FSMC_BCR4_WAITEN
 ((
uöt32_t
)0x00002000Ë

	)

4199 
	#FSMC_BCR4_EXTMOD
 ((
uöt32_t
)0x00004000Ë

	)

4200 
	#FSMC_BCR4_CBURSTRW
 ((
uöt32_t
)0x00080000Ë

	)

4203 
	#FSMC_BTR1_ADDSET
 ((
uöt32_t
)0x0000000FË

	)

4204 
	#FSMC_BTR1_ADDSET_0
 ((
uöt32_t
)0x00000001Ë

	)

4205 
	#FSMC_BTR1_ADDSET_1
 ((
uöt32_t
)0x00000002Ë

	)

4206 
	#FSMC_BTR1_ADDSET_2
 ((
uöt32_t
)0x00000004Ë

	)

4207 
	#FSMC_BTR1_ADDSET_3
 ((
uöt32_t
)0x00000008Ë

	)

4209 
	#FSMC_BTR1_ADDHLD
 ((
uöt32_t
)0x000000F0Ë

	)

4210 
	#FSMC_BTR1_ADDHLD_0
 ((
uöt32_t
)0x00000010Ë

	)

4211 
	#FSMC_BTR1_ADDHLD_1
 ((
uöt32_t
)0x00000020Ë

	)

4212 
	#FSMC_BTR1_ADDHLD_2
 ((
uöt32_t
)0x00000040Ë

	)

4213 
	#FSMC_BTR1_ADDHLD_3
 ((
uöt32_t
)0x00000080Ë

	)

4215 
	#FSMC_BTR1_DATAST
 ((
uöt32_t
)0x0000FF00Ë

	)

4216 
	#FSMC_BTR1_DATAST_0
 ((
uöt32_t
)0x00000100Ë

	)

4217 
	#FSMC_BTR1_DATAST_1
 ((
uöt32_t
)0x00000200Ë

	)

4218 
	#FSMC_BTR1_DATAST_2
 ((
uöt32_t
)0x00000400Ë

	)

4219 
	#FSMC_BTR1_DATAST_3
 ((
uöt32_t
)0x00000800Ë

	)

4221 
	#FSMC_BTR1_BUSTURN
 ((
uöt32_t
)0x000F0000Ë

	)

4222 
	#FSMC_BTR1_BUSTURN_0
 ((
uöt32_t
)0x00010000Ë

	)

4223 
	#FSMC_BTR1_BUSTURN_1
 ((
uöt32_t
)0x00020000Ë

	)

4224 
	#FSMC_BTR1_BUSTURN_2
 ((
uöt32_t
)0x00040000Ë

	)

4225 
	#FSMC_BTR1_BUSTURN_3
 ((
uöt32_t
)0x00080000Ë

	)

4227 
	#FSMC_BTR1_CLKDIV
 ((
uöt32_t
)0x00F00000Ë

	)

4228 
	#FSMC_BTR1_CLKDIV_0
 ((
uöt32_t
)0x00100000Ë

	)

4229 
	#FSMC_BTR1_CLKDIV_1
 ((
uöt32_t
)0x00200000Ë

	)

4230 
	#FSMC_BTR1_CLKDIV_2
 ((
uöt32_t
)0x00400000Ë

	)

4231 
	#FSMC_BTR1_CLKDIV_3
 ((
uöt32_t
)0x00800000Ë

	)

4233 
	#FSMC_BTR1_DATLAT
 ((
uöt32_t
)0x0F000000Ë

	)

4234 
	#FSMC_BTR1_DATLAT_0
 ((
uöt32_t
)0x01000000Ë

	)

4235 
	#FSMC_BTR1_DATLAT_1
 ((
uöt32_t
)0x02000000Ë

	)

4236 
	#FSMC_BTR1_DATLAT_2
 ((
uöt32_t
)0x04000000Ë

	)

4237 
	#FSMC_BTR1_DATLAT_3
 ((
uöt32_t
)0x08000000Ë

	)

4239 
	#FSMC_BTR1_ACCMOD
 ((
uöt32_t
)0x30000000Ë

	)

4240 
	#FSMC_BTR1_ACCMOD_0
 ((
uöt32_t
)0x10000000Ë

	)

4241 
	#FSMC_BTR1_ACCMOD_1
 ((
uöt32_t
)0x20000000Ë

	)

4244 
	#FSMC_BTR2_ADDSET
 ((
uöt32_t
)0x0000000FË

	)

4245 
	#FSMC_BTR2_ADDSET_0
 ((
uöt32_t
)0x00000001Ë

	)

4246 
	#FSMC_BTR2_ADDSET_1
 ((
uöt32_t
)0x00000002Ë

	)

4247 
	#FSMC_BTR2_ADDSET_2
 ((
uöt32_t
)0x00000004Ë

	)

4248 
	#FSMC_BTR2_ADDSET_3
 ((
uöt32_t
)0x00000008Ë

	)

4250 
	#FSMC_BTR2_ADDHLD
 ((
uöt32_t
)0x000000F0Ë

	)

4251 
	#FSMC_BTR2_ADDHLD_0
 ((
uöt32_t
)0x00000010Ë

	)

4252 
	#FSMC_BTR2_ADDHLD_1
 ((
uöt32_t
)0x00000020Ë

	)

4253 
	#FSMC_BTR2_ADDHLD_2
 ((
uöt32_t
)0x00000040Ë

	)

4254 
	#FSMC_BTR2_ADDHLD_3
 ((
uöt32_t
)0x00000080Ë

	)

4256 
	#FSMC_BTR2_DATAST
 ((
uöt32_t
)0x0000FF00Ë

	)

4257 
	#FSMC_BTR2_DATAST_0
 ((
uöt32_t
)0x00000100Ë

	)

4258 
	#FSMC_BTR2_DATAST_1
 ((
uöt32_t
)0x00000200Ë

	)

4259 
	#FSMC_BTR2_DATAST_2
 ((
uöt32_t
)0x00000400Ë

	)

4260 
	#FSMC_BTR2_DATAST_3
 ((
uöt32_t
)0x00000800Ë

	)

4262 
	#FSMC_BTR2_BUSTURN
 ((
uöt32_t
)0x000F0000Ë

	)

4263 
	#FSMC_BTR2_BUSTURN_0
 ((
uöt32_t
)0x00010000Ë

	)

4264 
	#FSMC_BTR2_BUSTURN_1
 ((
uöt32_t
)0x00020000Ë

	)

4265 
	#FSMC_BTR2_BUSTURN_2
 ((
uöt32_t
)0x00040000Ë

	)

4266 
	#FSMC_BTR2_BUSTURN_3
 ((
uöt32_t
)0x00080000Ë

	)

4268 
	#FSMC_BTR2_CLKDIV
 ((
uöt32_t
)0x00F00000Ë

	)

4269 
	#FSMC_BTR2_CLKDIV_0
 ((
uöt32_t
)0x00100000Ë

	)

4270 
	#FSMC_BTR2_CLKDIV_1
 ((
uöt32_t
)0x00200000Ë

	)

4271 
	#FSMC_BTR2_CLKDIV_2
 ((
uöt32_t
)0x00400000Ë

	)

4272 
	#FSMC_BTR2_CLKDIV_3
 ((
uöt32_t
)0x00800000Ë

	)

4274 
	#FSMC_BTR2_DATLAT
 ((
uöt32_t
)0x0F000000Ë

	)

4275 
	#FSMC_BTR2_DATLAT_0
 ((
uöt32_t
)0x01000000Ë

	)

4276 
	#FSMC_BTR2_DATLAT_1
 ((
uöt32_t
)0x02000000Ë

	)

4277 
	#FSMC_BTR2_DATLAT_2
 ((
uöt32_t
)0x04000000Ë

	)

4278 
	#FSMC_BTR2_DATLAT_3
 ((
uöt32_t
)0x08000000Ë

	)

4280 
	#FSMC_BTR2_ACCMOD
 ((
uöt32_t
)0x30000000Ë

	)

4281 
	#FSMC_BTR2_ACCMOD_0
 ((
uöt32_t
)0x10000000Ë

	)

4282 
	#FSMC_BTR2_ACCMOD_1
 ((
uöt32_t
)0x20000000Ë

	)

4285 
	#FSMC_BTR3_ADDSET
 ((
uöt32_t
)0x0000000FË

	)

4286 
	#FSMC_BTR3_ADDSET_0
 ((
uöt32_t
)0x00000001Ë

	)

4287 
	#FSMC_BTR3_ADDSET_1
 ((
uöt32_t
)0x00000002Ë

	)

4288 
	#FSMC_BTR3_ADDSET_2
 ((
uöt32_t
)0x00000004Ë

	)

4289 
	#FSMC_BTR3_ADDSET_3
 ((
uöt32_t
)0x00000008Ë

	)

4291 
	#FSMC_BTR3_ADDHLD
 ((
uöt32_t
)0x000000F0Ë

	)

4292 
	#FSMC_BTR3_ADDHLD_0
 ((
uöt32_t
)0x00000010Ë

	)

4293 
	#FSMC_BTR3_ADDHLD_1
 ((
uöt32_t
)0x00000020Ë

	)

4294 
	#FSMC_BTR3_ADDHLD_2
 ((
uöt32_t
)0x00000040Ë

	)

4295 
	#FSMC_BTR3_ADDHLD_3
 ((
uöt32_t
)0x00000080Ë

	)

4297 
	#FSMC_BTR3_DATAST
 ((
uöt32_t
)0x0000FF00Ë

	)

4298 
	#FSMC_BTR3_DATAST_0
 ((
uöt32_t
)0x00000100Ë

	)

4299 
	#FSMC_BTR3_DATAST_1
 ((
uöt32_t
)0x00000200Ë

	)

4300 
	#FSMC_BTR3_DATAST_2
 ((
uöt32_t
)0x00000400Ë

	)

4301 
	#FSMC_BTR3_DATAST_3
 ((
uöt32_t
)0x00000800Ë

	)

4303 
	#FSMC_BTR3_BUSTURN
 ((
uöt32_t
)0x000F0000Ë

	)

4304 
	#FSMC_BTR3_BUSTURN_0
 ((
uöt32_t
)0x00010000Ë

	)

4305 
	#FSMC_BTR3_BUSTURN_1
 ((
uöt32_t
)0x00020000Ë

	)

4306 
	#FSMC_BTR3_BUSTURN_2
 ((
uöt32_t
)0x00040000Ë

	)

4307 
	#FSMC_BTR3_BUSTURN_3
 ((
uöt32_t
)0x00080000Ë

	)

4309 
	#FSMC_BTR3_CLKDIV
 ((
uöt32_t
)0x00F00000Ë

	)

4310 
	#FSMC_BTR3_CLKDIV_0
 ((
uöt32_t
)0x00100000Ë

	)

4311 
	#FSMC_BTR3_CLKDIV_1
 ((
uöt32_t
)0x00200000Ë

	)

4312 
	#FSMC_BTR3_CLKDIV_2
 ((
uöt32_t
)0x00400000Ë

	)

4313 
	#FSMC_BTR3_CLKDIV_3
 ((
uöt32_t
)0x00800000Ë

	)

4315 
	#FSMC_BTR3_DATLAT
 ((
uöt32_t
)0x0F000000Ë

	)

4316 
	#FSMC_BTR3_DATLAT_0
 ((
uöt32_t
)0x01000000Ë

	)

4317 
	#FSMC_BTR3_DATLAT_1
 ((
uöt32_t
)0x02000000Ë

	)

4318 
	#FSMC_BTR3_DATLAT_2
 ((
uöt32_t
)0x04000000Ë

	)

4319 
	#FSMC_BTR3_DATLAT_3
 ((
uöt32_t
)0x08000000Ë

	)

4321 
	#FSMC_BTR3_ACCMOD
 ((
uöt32_t
)0x30000000Ë

	)

4322 
	#FSMC_BTR3_ACCMOD_0
 ((
uöt32_t
)0x10000000Ë

	)

4323 
	#FSMC_BTR3_ACCMOD_1
 ((
uöt32_t
)0x20000000Ë

	)

4326 
	#FSMC_BTR4_ADDSET
 ((
uöt32_t
)0x0000000FË

	)

4327 
	#FSMC_BTR4_ADDSET_0
 ((
uöt32_t
)0x00000001Ë

	)

4328 
	#FSMC_BTR4_ADDSET_1
 ((
uöt32_t
)0x00000002Ë

	)

4329 
	#FSMC_BTR4_ADDSET_2
 ((
uöt32_t
)0x00000004Ë

	)

4330 
	#FSMC_BTR4_ADDSET_3
 ((
uöt32_t
)0x00000008Ë

	)

4332 
	#FSMC_BTR4_ADDHLD
 ((
uöt32_t
)0x000000F0Ë

	)

4333 
	#FSMC_BTR4_ADDHLD_0
 ((
uöt32_t
)0x00000010Ë

	)

4334 
	#FSMC_BTR4_ADDHLD_1
 ((
uöt32_t
)0x00000020Ë

	)

4335 
	#FSMC_BTR4_ADDHLD_2
 ((
uöt32_t
)0x00000040Ë

	)

4336 
	#FSMC_BTR4_ADDHLD_3
 ((
uöt32_t
)0x00000080Ë

	)

4338 
	#FSMC_BTR4_DATAST
 ((
uöt32_t
)0x0000FF00Ë

	)

4339 
	#FSMC_BTR4_DATAST_0
 ((
uöt32_t
)0x00000100Ë

	)

4340 
	#FSMC_BTR4_DATAST_1
 ((
uöt32_t
)0x00000200Ë

	)

4341 
	#FSMC_BTR4_DATAST_2
 ((
uöt32_t
)0x00000400Ë

	)

4342 
	#FSMC_BTR4_DATAST_3
 ((
uöt32_t
)0x00000800Ë

	)

4344 
	#FSMC_BTR4_BUSTURN
 ((
uöt32_t
)0x000F0000Ë

	)

4345 
	#FSMC_BTR4_BUSTURN_0
 ((
uöt32_t
)0x00010000Ë

	)

4346 
	#FSMC_BTR4_BUSTURN_1
 ((
uöt32_t
)0x00020000Ë

	)

4347 
	#FSMC_BTR4_BUSTURN_2
 ((
uöt32_t
)0x00040000Ë

	)

4348 
	#FSMC_BTR4_BUSTURN_3
 ((
uöt32_t
)0x00080000Ë

	)

4350 
	#FSMC_BTR4_CLKDIV
 ((
uöt32_t
)0x00F00000Ë

	)

4351 
	#FSMC_BTR4_CLKDIV_0
 ((
uöt32_t
)0x00100000Ë

	)

4352 
	#FSMC_BTR4_CLKDIV_1
 ((
uöt32_t
)0x00200000Ë

	)

4353 
	#FSMC_BTR4_CLKDIV_2
 ((
uöt32_t
)0x00400000Ë

	)

4354 
	#FSMC_BTR4_CLKDIV_3
 ((
uöt32_t
)0x00800000Ë

	)

4356 
	#FSMC_BTR4_DATLAT
 ((
uöt32_t
)0x0F000000Ë

	)

4357 
	#FSMC_BTR4_DATLAT_0
 ((
uöt32_t
)0x01000000Ë

	)

4358 
	#FSMC_BTR4_DATLAT_1
 ((
uöt32_t
)0x02000000Ë

	)

4359 
	#FSMC_BTR4_DATLAT_2
 ((
uöt32_t
)0x04000000Ë

	)

4360 
	#FSMC_BTR4_DATLAT_3
 ((
uöt32_t
)0x08000000Ë

	)

4362 
	#FSMC_BTR4_ACCMOD
 ((
uöt32_t
)0x30000000Ë

	)

4363 
	#FSMC_BTR4_ACCMOD_0
 ((
uöt32_t
)0x10000000Ë

	)

4364 
	#FSMC_BTR4_ACCMOD_1
 ((
uöt32_t
)0x20000000Ë

	)

4367 
	#FSMC_BWTR1_ADDSET
 ((
uöt32_t
)0x0000000FË

	)

4368 
	#FSMC_BWTR1_ADDSET_0
 ((
uöt32_t
)0x00000001Ë

	)

4369 
	#FSMC_BWTR1_ADDSET_1
 ((
uöt32_t
)0x00000002Ë

	)

4370 
	#FSMC_BWTR1_ADDSET_2
 ((
uöt32_t
)0x00000004Ë

	)

4371 
	#FSMC_BWTR1_ADDSET_3
 ((
uöt32_t
)0x00000008Ë

	)

4373 
	#FSMC_BWTR1_ADDHLD
 ((
uöt32_t
)0x000000F0Ë

	)

4374 
	#FSMC_BWTR1_ADDHLD_0
 ((
uöt32_t
)0x00000010Ë

	)

4375 
	#FSMC_BWTR1_ADDHLD_1
 ((
uöt32_t
)0x00000020Ë

	)

4376 
	#FSMC_BWTR1_ADDHLD_2
 ((
uöt32_t
)0x00000040Ë

	)

4377 
	#FSMC_BWTR1_ADDHLD_3
 ((
uöt32_t
)0x00000080Ë

	)

4379 
	#FSMC_BWTR1_DATAST
 ((
uöt32_t
)0x0000FF00Ë

	)

4380 
	#FSMC_BWTR1_DATAST_0
 ((
uöt32_t
)0x00000100Ë

	)

4381 
	#FSMC_BWTR1_DATAST_1
 ((
uöt32_t
)0x00000200Ë

	)

4382 
	#FSMC_BWTR1_DATAST_2
 ((
uöt32_t
)0x00000400Ë

	)

4383 
	#FSMC_BWTR1_DATAST_3
 ((
uöt32_t
)0x00000800Ë

	)

4385 
	#FSMC_BWTR1_CLKDIV
 ((
uöt32_t
)0x00F00000Ë

	)

4386 
	#FSMC_BWTR1_CLKDIV_0
 ((
uöt32_t
)0x00100000Ë

	)

4387 
	#FSMC_BWTR1_CLKDIV_1
 ((
uöt32_t
)0x00200000Ë

	)

4388 
	#FSMC_BWTR1_CLKDIV_2
 ((
uöt32_t
)0x00400000Ë

	)

4389 
	#FSMC_BWTR1_CLKDIV_3
 ((
uöt32_t
)0x00800000Ë

	)

4391 
	#FSMC_BWTR1_DATLAT
 ((
uöt32_t
)0x0F000000Ë

	)

4392 
	#FSMC_BWTR1_DATLAT_0
 ((
uöt32_t
)0x01000000Ë

	)

4393 
	#FSMC_BWTR1_DATLAT_1
 ((
uöt32_t
)0x02000000Ë

	)

4394 
	#FSMC_BWTR1_DATLAT_2
 ((
uöt32_t
)0x04000000Ë

	)

4395 
	#FSMC_BWTR1_DATLAT_3
 ((
uöt32_t
)0x08000000Ë

	)

4397 
	#FSMC_BWTR1_ACCMOD
 ((
uöt32_t
)0x30000000Ë

	)

4398 
	#FSMC_BWTR1_ACCMOD_0
 ((
uöt32_t
)0x10000000Ë

	)

4399 
	#FSMC_BWTR1_ACCMOD_1
 ((
uöt32_t
)0x20000000Ë

	)

4402 
	#FSMC_BWTR2_ADDSET
 ((
uöt32_t
)0x0000000FË

	)

4403 
	#FSMC_BWTR2_ADDSET_0
 ((
uöt32_t
)0x00000001Ë

	)

4404 
	#FSMC_BWTR2_ADDSET_1
 ((
uöt32_t
)0x00000002Ë

	)

4405 
	#FSMC_BWTR2_ADDSET_2
 ((
uöt32_t
)0x00000004Ë

	)

4406 
	#FSMC_BWTR2_ADDSET_3
 ((
uöt32_t
)0x00000008Ë

	)

4408 
	#FSMC_BWTR2_ADDHLD
 ((
uöt32_t
)0x000000F0Ë

	)

4409 
	#FSMC_BWTR2_ADDHLD_0
 ((
uöt32_t
)0x00000010Ë

	)

4410 
	#FSMC_BWTR2_ADDHLD_1
 ((
uöt32_t
)0x00000020Ë

	)

4411 
	#FSMC_BWTR2_ADDHLD_2
 ((
uöt32_t
)0x00000040Ë

	)

4412 
	#FSMC_BWTR2_ADDHLD_3
 ((
uöt32_t
)0x00000080Ë

	)

4414 
	#FSMC_BWTR2_DATAST
 ((
uöt32_t
)0x0000FF00Ë

	)

4415 
	#FSMC_BWTR2_DATAST_0
 ((
uöt32_t
)0x00000100Ë

	)

4416 
	#FSMC_BWTR2_DATAST_1
 ((
uöt32_t
)0x00000200Ë

	)

4417 
	#FSMC_BWTR2_DATAST_2
 ((
uöt32_t
)0x00000400Ë

	)

4418 
	#FSMC_BWTR2_DATAST_3
 ((
uöt32_t
)0x00000800Ë

	)

4420 
	#FSMC_BWTR2_CLKDIV
 ((
uöt32_t
)0x00F00000Ë

	)

4421 
	#FSMC_BWTR2_CLKDIV_0
 ((
uöt32_t
)0x00100000Ë

	)

4422 
	#FSMC_BWTR2_CLKDIV_1
 ((
uöt32_t
)0x00200000Ë

	)

4423 
	#FSMC_BWTR2_CLKDIV_2
 ((
uöt32_t
)0x00400000Ë

	)

4424 
	#FSMC_BWTR2_CLKDIV_3
 ((
uöt32_t
)0x00800000Ë

	)

4426 
	#FSMC_BWTR2_DATLAT
 ((
uöt32_t
)0x0F000000Ë

	)

4427 
	#FSMC_BWTR2_DATLAT_0
 ((
uöt32_t
)0x01000000Ë

	)

4428 
	#FSMC_BWTR2_DATLAT_1
 ((
uöt32_t
)0x02000000Ë

	)

4429 
	#FSMC_BWTR2_DATLAT_2
 ((
uöt32_t
)0x04000000Ë

	)

4430 
	#FSMC_BWTR2_DATLAT_3
 ((
uöt32_t
)0x08000000Ë

	)

4432 
	#FSMC_BWTR2_ACCMOD
 ((
uöt32_t
)0x30000000Ë

	)

4433 
	#FSMC_BWTR2_ACCMOD_0
 ((
uöt32_t
)0x10000000Ë

	)

4434 
	#FSMC_BWTR2_ACCMOD_1
 ((
uöt32_t
)0x20000000Ë

	)

4437 
	#FSMC_BWTR3_ADDSET
 ((
uöt32_t
)0x0000000FË

	)

4438 
	#FSMC_BWTR3_ADDSET_0
 ((
uöt32_t
)0x00000001Ë

	)

4439 
	#FSMC_BWTR3_ADDSET_1
 ((
uöt32_t
)0x00000002Ë

	)

4440 
	#FSMC_BWTR3_ADDSET_2
 ((
uöt32_t
)0x00000004Ë

	)

4441 
	#FSMC_BWTR3_ADDSET_3
 ((
uöt32_t
)0x00000008Ë

	)

4443 
	#FSMC_BWTR3_ADDHLD
 ((
uöt32_t
)0x000000F0Ë

	)

4444 
	#FSMC_BWTR3_ADDHLD_0
 ((
uöt32_t
)0x00000010Ë

	)

4445 
	#FSMC_BWTR3_ADDHLD_1
 ((
uöt32_t
)0x00000020Ë

	)

4446 
	#FSMC_BWTR3_ADDHLD_2
 ((
uöt32_t
)0x00000040Ë

	)

4447 
	#FSMC_BWTR3_ADDHLD_3
 ((
uöt32_t
)0x00000080Ë

	)

4449 
	#FSMC_BWTR3_DATAST
 ((
uöt32_t
)0x0000FF00Ë

	)

4450 
	#FSMC_BWTR3_DATAST_0
 ((
uöt32_t
)0x00000100Ë

	)

4451 
	#FSMC_BWTR3_DATAST_1
 ((
uöt32_t
)0x00000200Ë

	)

4452 
	#FSMC_BWTR3_DATAST_2
 ((
uöt32_t
)0x00000400Ë

	)

4453 
	#FSMC_BWTR3_DATAST_3
 ((
uöt32_t
)0x00000800Ë

	)

4455 
	#FSMC_BWTR3_CLKDIV
 ((
uöt32_t
)0x00F00000Ë

	)

4456 
	#FSMC_BWTR3_CLKDIV_0
 ((
uöt32_t
)0x00100000Ë

	)

4457 
	#FSMC_BWTR3_CLKDIV_1
 ((
uöt32_t
)0x00200000Ë

	)

4458 
	#FSMC_BWTR3_CLKDIV_2
 ((
uöt32_t
)0x00400000Ë

	)

4459 
	#FSMC_BWTR3_CLKDIV_3
 ((
uöt32_t
)0x00800000Ë

	)

4461 
	#FSMC_BWTR3_DATLAT
 ((
uöt32_t
)0x0F000000Ë

	)

4462 
	#FSMC_BWTR3_DATLAT_0
 ((
uöt32_t
)0x01000000Ë

	)

4463 
	#FSMC_BWTR3_DATLAT_1
 ((
uöt32_t
)0x02000000Ë

	)

4464 
	#FSMC_BWTR3_DATLAT_2
 ((
uöt32_t
)0x04000000Ë

	)

4465 
	#FSMC_BWTR3_DATLAT_3
 ((
uöt32_t
)0x08000000Ë

	)

4467 
	#FSMC_BWTR3_ACCMOD
 ((
uöt32_t
)0x30000000Ë

	)

4468 
	#FSMC_BWTR3_ACCMOD_0
 ((
uöt32_t
)0x10000000Ë

	)

4469 
	#FSMC_BWTR3_ACCMOD_1
 ((
uöt32_t
)0x20000000Ë

	)

4472 
	#FSMC_BWTR4_ADDSET
 ((
uöt32_t
)0x0000000FË

	)

4473 
	#FSMC_BWTR4_ADDSET_0
 ((
uöt32_t
)0x00000001Ë

	)

4474 
	#FSMC_BWTR4_ADDSET_1
 ((
uöt32_t
)0x00000002Ë

	)

4475 
	#FSMC_BWTR4_ADDSET_2
 ((
uöt32_t
)0x00000004Ë

	)

4476 
	#FSMC_BWTR4_ADDSET_3
 ((
uöt32_t
)0x00000008Ë

	)

4478 
	#FSMC_BWTR4_ADDHLD
 ((
uöt32_t
)0x000000F0Ë

	)

4479 
	#FSMC_BWTR4_ADDHLD_0
 ((
uöt32_t
)0x00000010Ë

	)

4480 
	#FSMC_BWTR4_ADDHLD_1
 ((
uöt32_t
)0x00000020Ë

	)

4481 
	#FSMC_BWTR4_ADDHLD_2
 ((
uöt32_t
)0x00000040Ë

	)

4482 
	#FSMC_BWTR4_ADDHLD_3
 ((
uöt32_t
)0x00000080Ë

	)

4484 
	#FSMC_BWTR4_DATAST
 ((
uöt32_t
)0x0000FF00Ë

	)

4485 
	#FSMC_BWTR4_DATAST_0
 ((
uöt32_t
)0x00000100Ë

	)

4486 
	#FSMC_BWTR4_DATAST_1
 ((
uöt32_t
)0x00000200Ë

	)

4487 
	#FSMC_BWTR4_DATAST_2
 ((
uöt32_t
)0x00000400Ë

	)

4488 
	#FSMC_BWTR4_DATAST_3
 ((
uöt32_t
)0x00000800Ë

	)

4490 
	#FSMC_BWTR4_CLKDIV
 ((
uöt32_t
)0x00F00000Ë

	)

4491 
	#FSMC_BWTR4_CLKDIV_0
 ((
uöt32_t
)0x00100000Ë

	)

4492 
	#FSMC_BWTR4_CLKDIV_1
 ((
uöt32_t
)0x00200000Ë

	)

4493 
	#FSMC_BWTR4_CLKDIV_2
 ((
uöt32_t
)0x00400000Ë

	)

4494 
	#FSMC_BWTR4_CLKDIV_3
 ((
uöt32_t
)0x00800000Ë

	)

4496 
	#FSMC_BWTR4_DATLAT
 ((
uöt32_t
)0x0F000000Ë

	)

4497 
	#FSMC_BWTR4_DATLAT_0
 ((
uöt32_t
)0x01000000Ë

	)

4498 
	#FSMC_BWTR4_DATLAT_1
 ((
uöt32_t
)0x02000000Ë

	)

4499 
	#FSMC_BWTR4_DATLAT_2
 ((
uöt32_t
)0x04000000Ë

	)

4500 
	#FSMC_BWTR4_DATLAT_3
 ((
uöt32_t
)0x08000000Ë

	)

4502 
	#FSMC_BWTR4_ACCMOD
 ((
uöt32_t
)0x30000000Ë

	)

4503 
	#FSMC_BWTR4_ACCMOD_0
 ((
uöt32_t
)0x10000000Ë

	)

4504 
	#FSMC_BWTR4_ACCMOD_1
 ((
uöt32_t
)0x20000000Ë

	)

4507 
	#FSMC_PCR2_PWAITEN
 ((
uöt32_t
)0x00000002Ë

	)

4508 
	#FSMC_PCR2_PBKEN
 ((
uöt32_t
)0x00000004Ë

	)

4509 
	#FSMC_PCR2_PTYP
 ((
uöt32_t
)0x00000008Ë

	)

4511 
	#FSMC_PCR2_PWID
 ((
uöt32_t
)0x00000030Ë

	)

4512 
	#FSMC_PCR2_PWID_0
 ((
uöt32_t
)0x00000010Ë

	)

4513 
	#FSMC_PCR2_PWID_1
 ((
uöt32_t
)0x00000020Ë

	)

4515 
	#FSMC_PCR2_ECCEN
 ((
uöt32_t
)0x00000040Ë

	)

4517 
	#FSMC_PCR2_TCLR
 ((
uöt32_t
)0x00001E00Ë

	)

4518 
	#FSMC_PCR2_TCLR_0
 ((
uöt32_t
)0x00000200Ë

	)

4519 
	#FSMC_PCR2_TCLR_1
 ((
uöt32_t
)0x00000400Ë

	)

4520 
	#FSMC_PCR2_TCLR_2
 ((
uöt32_t
)0x00000800Ë

	)

4521 
	#FSMC_PCR2_TCLR_3
 ((
uöt32_t
)0x00001000Ë

	)

4523 
	#FSMC_PCR2_TAR
 ((
uöt32_t
)0x0001E000Ë

	)

4524 
	#FSMC_PCR2_TAR_0
 ((
uöt32_t
)0x00002000Ë

	)

4525 
	#FSMC_PCR2_TAR_1
 ((
uöt32_t
)0x00004000Ë

	)

4526 
	#FSMC_PCR2_TAR_2
 ((
uöt32_t
)0x00008000Ë

	)

4527 
	#FSMC_PCR2_TAR_3
 ((
uöt32_t
)0x00010000Ë

	)

4529 
	#FSMC_PCR2_ECCPS
 ((
uöt32_t
)0x000E0000Ë

	)

4530 
	#FSMC_PCR2_ECCPS_0
 ((
uöt32_t
)0x00020000Ë

	)

4531 
	#FSMC_PCR2_ECCPS_1
 ((
uöt32_t
)0x00040000Ë

	)

4532 
	#FSMC_PCR2_ECCPS_2
 ((
uöt32_t
)0x00080000Ë

	)

4535 
	#FSMC_PCR3_PWAITEN
 ((
uöt32_t
)0x00000002Ë

	)

4536 
	#FSMC_PCR3_PBKEN
 ((
uöt32_t
)0x00000004Ë

	)

4537 
	#FSMC_PCR3_PTYP
 ((
uöt32_t
)0x00000008Ë

	)

4539 
	#FSMC_PCR3_PWID
 ((
uöt32_t
)0x00000030Ë

	)

4540 
	#FSMC_PCR3_PWID_0
 ((
uöt32_t
)0x00000010Ë

	)

4541 
	#FSMC_PCR3_PWID_1
 ((
uöt32_t
)0x00000020Ë

	)

4543 
	#FSMC_PCR3_ECCEN
 ((
uöt32_t
)0x00000040Ë

	)

4545 
	#FSMC_PCR3_TCLR
 ((
uöt32_t
)0x00001E00Ë

	)

4546 
	#FSMC_PCR3_TCLR_0
 ((
uöt32_t
)0x00000200Ë

	)

4547 
	#FSMC_PCR3_TCLR_1
 ((
uöt32_t
)0x00000400Ë

	)

4548 
	#FSMC_PCR3_TCLR_2
 ((
uöt32_t
)0x00000800Ë

	)

4549 
	#FSMC_PCR3_TCLR_3
 ((
uöt32_t
)0x00001000Ë

	)

4551 
	#FSMC_PCR3_TAR
 ((
uöt32_t
)0x0001E000Ë

	)

4552 
	#FSMC_PCR3_TAR_0
 ((
uöt32_t
)0x00002000Ë

	)

4553 
	#FSMC_PCR3_TAR_1
 ((
uöt32_t
)0x00004000Ë

	)

4554 
	#FSMC_PCR3_TAR_2
 ((
uöt32_t
)0x00008000Ë

	)

4555 
	#FSMC_PCR3_TAR_3
 ((
uöt32_t
)0x00010000Ë

	)

4557 
	#FSMC_PCR3_ECCPS
 ((
uöt32_t
)0x000E0000Ë

	)

4558 
	#FSMC_PCR3_ECCPS_0
 ((
uöt32_t
)0x00020000Ë

	)

4559 
	#FSMC_PCR3_ECCPS_1
 ((
uöt32_t
)0x00040000Ë

	)

4560 
	#FSMC_PCR3_ECCPS_2
 ((
uöt32_t
)0x00080000Ë

	)

4563 
	#FSMC_PCR4_PWAITEN
 ((
uöt32_t
)0x00000002Ë

	)

4564 
	#FSMC_PCR4_PBKEN
 ((
uöt32_t
)0x00000004Ë

	)

4565 
	#FSMC_PCR4_PTYP
 ((
uöt32_t
)0x00000008Ë

	)

4567 
	#FSMC_PCR4_PWID
 ((
uöt32_t
)0x00000030Ë

	)

4568 
	#FSMC_PCR4_PWID_0
 ((
uöt32_t
)0x00000010Ë

	)

4569 
	#FSMC_PCR4_PWID_1
 ((
uöt32_t
)0x00000020Ë

	)

4571 
	#FSMC_PCR4_ECCEN
 ((
uöt32_t
)0x00000040Ë

	)

4573 
	#FSMC_PCR4_TCLR
 ((
uöt32_t
)0x00001E00Ë

	)

4574 
	#FSMC_PCR4_TCLR_0
 ((
uöt32_t
)0x00000200Ë

	)

4575 
	#FSMC_PCR4_TCLR_1
 ((
uöt32_t
)0x00000400Ë

	)

4576 
	#FSMC_PCR4_TCLR_2
 ((
uöt32_t
)0x00000800Ë

	)

4577 
	#FSMC_PCR4_TCLR_3
 ((
uöt32_t
)0x00001000Ë

	)

4579 
	#FSMC_PCR4_TAR
 ((
uöt32_t
)0x0001E000Ë

	)

4580 
	#FSMC_PCR4_TAR_0
 ((
uöt32_t
)0x00002000Ë

	)

4581 
	#FSMC_PCR4_TAR_1
 ((
uöt32_t
)0x00004000Ë

	)

4582 
	#FSMC_PCR4_TAR_2
 ((
uöt32_t
)0x00008000Ë

	)

4583 
	#FSMC_PCR4_TAR_3
 ((
uöt32_t
)0x00010000Ë

	)

4585 
	#FSMC_PCR4_ECCPS
 ((
uöt32_t
)0x000E0000Ë

	)

4586 
	#FSMC_PCR4_ECCPS_0
 ((
uöt32_t
)0x00020000Ë

	)

4587 
	#FSMC_PCR4_ECCPS_1
 ((
uöt32_t
)0x00040000Ë

	)

4588 
	#FSMC_PCR4_ECCPS_2
 ((
uöt32_t
)0x00080000Ë

	)

4591 
	#FSMC_SR2_IRS
 ((
uöt8_t
)0x01Ë

	)

4592 
	#FSMC_SR2_ILS
 ((
uöt8_t
)0x02Ë

	)

4593 
	#FSMC_SR2_IFS
 ((
uöt8_t
)0x04Ë

	)

4594 
	#FSMC_SR2_IREN
 ((
uöt8_t
)0x08Ë

	)

4595 
	#FSMC_SR2_ILEN
 ((
uöt8_t
)0x10Ë

	)

4596 
	#FSMC_SR2_IFEN
 ((
uöt8_t
)0x20Ë

	)

4597 
	#FSMC_SR2_FEMPT
 ((
uöt8_t
)0x40Ë

	)

4600 
	#FSMC_SR3_IRS
 ((
uöt8_t
)0x01Ë

	)

4601 
	#FSMC_SR3_ILS
 ((
uöt8_t
)0x02Ë

	)

4602 
	#FSMC_SR3_IFS
 ((
uöt8_t
)0x04Ë

	)

4603 
	#FSMC_SR3_IREN
 ((
uöt8_t
)0x08Ë

	)

4604 
	#FSMC_SR3_ILEN
 ((
uöt8_t
)0x10Ë

	)

4605 
	#FSMC_SR3_IFEN
 ((
uöt8_t
)0x20Ë

	)

4606 
	#FSMC_SR3_FEMPT
 ((
uöt8_t
)0x40Ë

	)

4609 
	#FSMC_SR4_IRS
 ((
uöt8_t
)0x01Ë

	)

4610 
	#FSMC_SR4_ILS
 ((
uöt8_t
)0x02Ë

	)

4611 
	#FSMC_SR4_IFS
 ((
uöt8_t
)0x04Ë

	)

4612 
	#FSMC_SR4_IREN
 ((
uöt8_t
)0x08Ë

	)

4613 
	#FSMC_SR4_ILEN
 ((
uöt8_t
)0x10Ë

	)

4614 
	#FSMC_SR4_IFEN
 ((
uöt8_t
)0x20Ë

	)

4615 
	#FSMC_SR4_FEMPT
 ((
uöt8_t
)0x40Ë

	)

4618 
	#FSMC_PMEM2_MEMSET2
 ((
uöt32_t
)0x000000FFË

	)

4619 
	#FSMC_PMEM2_MEMSET2_0
 ((
uöt32_t
)0x00000001Ë

	)

4620 
	#FSMC_PMEM2_MEMSET2_1
 ((
uöt32_t
)0x00000002Ë

	)

4621 
	#FSMC_PMEM2_MEMSET2_2
 ((
uöt32_t
)0x00000004Ë

	)

4622 
	#FSMC_PMEM2_MEMSET2_3
 ((
uöt32_t
)0x00000008Ë

	)

4623 
	#FSMC_PMEM2_MEMSET2_4
 ((
uöt32_t
)0x00000010Ë

	)

4624 
	#FSMC_PMEM2_MEMSET2_5
 ((
uöt32_t
)0x00000020Ë

	)

4625 
	#FSMC_PMEM2_MEMSET2_6
 ((
uöt32_t
)0x00000040Ë

	)

4626 
	#FSMC_PMEM2_MEMSET2_7
 ((
uöt32_t
)0x00000080Ë

	)

4628 
	#FSMC_PMEM2_MEMWAIT2
 ((
uöt32_t
)0x0000FF00Ë

	)

4629 
	#FSMC_PMEM2_MEMWAIT2_0
 ((
uöt32_t
)0x00000100Ë

	)

4630 
	#FSMC_PMEM2_MEMWAIT2_1
 ((
uöt32_t
)0x00000200Ë

	)

4631 
	#FSMC_PMEM2_MEMWAIT2_2
 ((
uöt32_t
)0x00000400Ë

	)

4632 
	#FSMC_PMEM2_MEMWAIT2_3
 ((
uöt32_t
)0x00000800Ë

	)

4633 
	#FSMC_PMEM2_MEMWAIT2_4
 ((
uöt32_t
)0x00001000Ë

	)

4634 
	#FSMC_PMEM2_MEMWAIT2_5
 ((
uöt32_t
)0x00002000Ë

	)

4635 
	#FSMC_PMEM2_MEMWAIT2_6
 ((
uöt32_t
)0x00004000Ë

	)

4636 
	#FSMC_PMEM2_MEMWAIT2_7
 ((
uöt32_t
)0x00008000Ë

	)

4638 
	#FSMC_PMEM2_MEMHOLD2
 ((
uöt32_t
)0x00FF0000Ë

	)

4639 
	#FSMC_PMEM2_MEMHOLD2_0
 ((
uöt32_t
)0x00010000Ë

	)

4640 
	#FSMC_PMEM2_MEMHOLD2_1
 ((
uöt32_t
)0x00020000Ë

	)

4641 
	#FSMC_PMEM2_MEMHOLD2_2
 ((
uöt32_t
)0x00040000Ë

	)

4642 
	#FSMC_PMEM2_MEMHOLD2_3
 ((
uöt32_t
)0x00080000Ë

	)

4643 
	#FSMC_PMEM2_MEMHOLD2_4
 ((
uöt32_t
)0x00100000Ë

	)

4644 
	#FSMC_PMEM2_MEMHOLD2_5
 ((
uöt32_t
)0x00200000Ë

	)

4645 
	#FSMC_PMEM2_MEMHOLD2_6
 ((
uöt32_t
)0x00400000Ë

	)

4646 
	#FSMC_PMEM2_MEMHOLD2_7
 ((
uöt32_t
)0x00800000Ë

	)

4648 
	#FSMC_PMEM2_MEMHIZ2
 ((
uöt32_t
)0xFF000000Ë

	)

4649 
	#FSMC_PMEM2_MEMHIZ2_0
 ((
uöt32_t
)0x01000000Ë

	)

4650 
	#FSMC_PMEM2_MEMHIZ2_1
 ((
uöt32_t
)0x02000000Ë

	)

4651 
	#FSMC_PMEM2_MEMHIZ2_2
 ((
uöt32_t
)0x04000000Ë

	)

4652 
	#FSMC_PMEM2_MEMHIZ2_3
 ((
uöt32_t
)0x08000000Ë

	)

4653 
	#FSMC_PMEM2_MEMHIZ2_4
 ((
uöt32_t
)0x10000000Ë

	)

4654 
	#FSMC_PMEM2_MEMHIZ2_5
 ((
uöt32_t
)0x20000000Ë

	)

4655 
	#FSMC_PMEM2_MEMHIZ2_6
 ((
uöt32_t
)0x40000000Ë

	)

4656 
	#FSMC_PMEM2_MEMHIZ2_7
 ((
uöt32_t
)0x80000000Ë

	)

4659 
	#FSMC_PMEM3_MEMSET3
 ((
uöt32_t
)0x000000FFË

	)

4660 
	#FSMC_PMEM3_MEMSET3_0
 ((
uöt32_t
)0x00000001Ë

	)

4661 
	#FSMC_PMEM3_MEMSET3_1
 ((
uöt32_t
)0x00000002Ë

	)

4662 
	#FSMC_PMEM3_MEMSET3_2
 ((
uöt32_t
)0x00000004Ë

	)

4663 
	#FSMC_PMEM3_MEMSET3_3
 ((
uöt32_t
)0x00000008Ë

	)

4664 
	#FSMC_PMEM3_MEMSET3_4
 ((
uöt32_t
)0x00000010Ë

	)

4665 
	#FSMC_PMEM3_MEMSET3_5
 ((
uöt32_t
)0x00000020Ë

	)

4666 
	#FSMC_PMEM3_MEMSET3_6
 ((
uöt32_t
)0x00000040Ë

	)

4667 
	#FSMC_PMEM3_MEMSET3_7
 ((
uöt32_t
)0x00000080Ë

	)

4669 
	#FSMC_PMEM3_MEMWAIT3
 ((
uöt32_t
)0x0000FF00Ë

	)

4670 
	#FSMC_PMEM3_MEMWAIT3_0
 ((
uöt32_t
)0x00000100Ë

	)

4671 
	#FSMC_PMEM3_MEMWAIT3_1
 ((
uöt32_t
)0x00000200Ë

	)

4672 
	#FSMC_PMEM3_MEMWAIT3_2
 ((
uöt32_t
)0x00000400Ë

	)

4673 
	#FSMC_PMEM3_MEMWAIT3_3
 ((
uöt32_t
)0x00000800Ë

	)

4674 
	#FSMC_PMEM3_MEMWAIT3_4
 ((
uöt32_t
)0x00001000Ë

	)

4675 
	#FSMC_PMEM3_MEMWAIT3_5
 ((
uöt32_t
)0x00002000Ë

	)

4676 
	#FSMC_PMEM3_MEMWAIT3_6
 ((
uöt32_t
)0x00004000Ë

	)

4677 
	#FSMC_PMEM3_MEMWAIT3_7
 ((
uöt32_t
)0x00008000Ë

	)

4679 
	#FSMC_PMEM3_MEMHOLD3
 ((
uöt32_t
)0x00FF0000Ë

	)

4680 
	#FSMC_PMEM3_MEMHOLD3_0
 ((
uöt32_t
)0x00010000Ë

	)

4681 
	#FSMC_PMEM3_MEMHOLD3_1
 ((
uöt32_t
)0x00020000Ë

	)

4682 
	#FSMC_PMEM3_MEMHOLD3_2
 ((
uöt32_t
)0x00040000Ë

	)

4683 
	#FSMC_PMEM3_MEMHOLD3_3
 ((
uöt32_t
)0x00080000Ë

	)

4684 
	#FSMC_PMEM3_MEMHOLD3_4
 ((
uöt32_t
)0x00100000Ë

	)

4685 
	#FSMC_PMEM3_MEMHOLD3_5
 ((
uöt32_t
)0x00200000Ë

	)

4686 
	#FSMC_PMEM3_MEMHOLD3_6
 ((
uöt32_t
)0x00400000Ë

	)

4687 
	#FSMC_PMEM3_MEMHOLD3_7
 ((
uöt32_t
)0x00800000Ë

	)

4689 
	#FSMC_PMEM3_MEMHIZ3
 ((
uöt32_t
)0xFF000000Ë

	)

4690 
	#FSMC_PMEM3_MEMHIZ3_0
 ((
uöt32_t
)0x01000000Ë

	)

4691 
	#FSMC_PMEM3_MEMHIZ3_1
 ((
uöt32_t
)0x02000000Ë

	)

4692 
	#FSMC_PMEM3_MEMHIZ3_2
 ((
uöt32_t
)0x04000000Ë

	)

4693 
	#FSMC_PMEM3_MEMHIZ3_3
 ((
uöt32_t
)0x08000000Ë

	)

4694 
	#FSMC_PMEM3_MEMHIZ3_4
 ((
uöt32_t
)0x10000000Ë

	)

4695 
	#FSMC_PMEM3_MEMHIZ3_5
 ((
uöt32_t
)0x20000000Ë

	)

4696 
	#FSMC_PMEM3_MEMHIZ3_6
 ((
uöt32_t
)0x40000000Ë

	)

4697 
	#FSMC_PMEM3_MEMHIZ3_7
 ((
uöt32_t
)0x80000000Ë

	)

4700 
	#FSMC_PMEM4_MEMSET4
 ((
uöt32_t
)0x000000FFË

	)

4701 
	#FSMC_PMEM4_MEMSET4_0
 ((
uöt32_t
)0x00000001Ë

	)

4702 
	#FSMC_PMEM4_MEMSET4_1
 ((
uöt32_t
)0x00000002Ë

	)

4703 
	#FSMC_PMEM4_MEMSET4_2
 ((
uöt32_t
)0x00000004Ë

	)

4704 
	#FSMC_PMEM4_MEMSET4_3
 ((
uöt32_t
)0x00000008Ë

	)

4705 
	#FSMC_PMEM4_MEMSET4_4
 ((
uöt32_t
)0x00000010Ë

	)

4706 
	#FSMC_PMEM4_MEMSET4_5
 ((
uöt32_t
)0x00000020Ë

	)

4707 
	#FSMC_PMEM4_MEMSET4_6
 ((
uöt32_t
)0x00000040Ë

	)

4708 
	#FSMC_PMEM4_MEMSET4_7
 ((
uöt32_t
)0x00000080Ë

	)

4710 
	#FSMC_PMEM4_MEMWAIT4
 ((
uöt32_t
)0x0000FF00Ë

	)

4711 
	#FSMC_PMEM4_MEMWAIT4_0
 ((
uöt32_t
)0x00000100Ë

	)

4712 
	#FSMC_PMEM4_MEMWAIT4_1
 ((
uöt32_t
)0x00000200Ë

	)

4713 
	#FSMC_PMEM4_MEMWAIT4_2
 ((
uöt32_t
)0x00000400Ë

	)

4714 
	#FSMC_PMEM4_MEMWAIT4_3
 ((
uöt32_t
)0x00000800Ë

	)

4715 
	#FSMC_PMEM4_MEMWAIT4_4
 ((
uöt32_t
)0x00001000Ë

	)

4716 
	#FSMC_PMEM4_MEMWAIT4_5
 ((
uöt32_t
)0x00002000Ë

	)

4717 
	#FSMC_PMEM4_MEMWAIT4_6
 ((
uöt32_t
)0x00004000Ë

	)

4718 
	#FSMC_PMEM4_MEMWAIT4_7
 ((
uöt32_t
)0x00008000Ë

	)

4720 
	#FSMC_PMEM4_MEMHOLD4
 ((
uöt32_t
)0x00FF0000Ë

	)

4721 
	#FSMC_PMEM4_MEMHOLD4_0
 ((
uöt32_t
)0x00010000Ë

	)

4722 
	#FSMC_PMEM4_MEMHOLD4_1
 ((
uöt32_t
)0x00020000Ë

	)

4723 
	#FSMC_PMEM4_MEMHOLD4_2
 ((
uöt32_t
)0x00040000Ë

	)

4724 
	#FSMC_PMEM4_MEMHOLD4_3
 ((
uöt32_t
)0x00080000Ë

	)

4725 
	#FSMC_PMEM4_MEMHOLD4_4
 ((
uöt32_t
)0x00100000Ë

	)

4726 
	#FSMC_PMEM4_MEMHOLD4_5
 ((
uöt32_t
)0x00200000Ë

	)

4727 
	#FSMC_PMEM4_MEMHOLD4_6
 ((
uöt32_t
)0x00400000Ë

	)

4728 
	#FSMC_PMEM4_MEMHOLD4_7
 ((
uöt32_t
)0x00800000Ë

	)

4730 
	#FSMC_PMEM4_MEMHIZ4
 ((
uöt32_t
)0xFF000000Ë

	)

4731 
	#FSMC_PMEM4_MEMHIZ4_0
 ((
uöt32_t
)0x01000000Ë

	)

4732 
	#FSMC_PMEM4_MEMHIZ4_1
 ((
uöt32_t
)0x02000000Ë

	)

4733 
	#FSMC_PMEM4_MEMHIZ4_2
 ((
uöt32_t
)0x04000000Ë

	)

4734 
	#FSMC_PMEM4_MEMHIZ4_3
 ((
uöt32_t
)0x08000000Ë

	)

4735 
	#FSMC_PMEM4_MEMHIZ4_4
 ((
uöt32_t
)0x10000000Ë

	)

4736 
	#FSMC_PMEM4_MEMHIZ4_5
 ((
uöt32_t
)0x20000000Ë

	)

4737 
	#FSMC_PMEM4_MEMHIZ4_6
 ((
uöt32_t
)0x40000000Ë

	)

4738 
	#FSMC_PMEM4_MEMHIZ4_7
 ((
uöt32_t
)0x80000000Ë

	)

4741 
	#FSMC_PATT2_ATTSET2
 ((
uöt32_t
)0x000000FFË

	)

4742 
	#FSMC_PATT2_ATTSET2_0
 ((
uöt32_t
)0x00000001Ë

	)

4743 
	#FSMC_PATT2_ATTSET2_1
 ((
uöt32_t
)0x00000002Ë

	)

4744 
	#FSMC_PATT2_ATTSET2_2
 ((
uöt32_t
)0x00000004Ë

	)

4745 
	#FSMC_PATT2_ATTSET2_3
 ((
uöt32_t
)0x00000008Ë

	)

4746 
	#FSMC_PATT2_ATTSET2_4
 ((
uöt32_t
)0x00000010Ë

	)

4747 
	#FSMC_PATT2_ATTSET2_5
 ((
uöt32_t
)0x00000020Ë

	)

4748 
	#FSMC_PATT2_ATTSET2_6
 ((
uöt32_t
)0x00000040Ë

	)

4749 
	#FSMC_PATT2_ATTSET2_7
 ((
uöt32_t
)0x00000080Ë

	)

4751 
	#FSMC_PATT2_ATTWAIT2
 ((
uöt32_t
)0x0000FF00Ë

	)

4752 
	#FSMC_PATT2_ATTWAIT2_0
 ((
uöt32_t
)0x00000100Ë

	)

4753 
	#FSMC_PATT2_ATTWAIT2_1
 ((
uöt32_t
)0x00000200Ë

	)

4754 
	#FSMC_PATT2_ATTWAIT2_2
 ((
uöt32_t
)0x00000400Ë

	)

4755 
	#FSMC_PATT2_ATTWAIT2_3
 ((
uöt32_t
)0x00000800Ë

	)

4756 
	#FSMC_PATT2_ATTWAIT2_4
 ((
uöt32_t
)0x00001000Ë

	)

4757 
	#FSMC_PATT2_ATTWAIT2_5
 ((
uöt32_t
)0x00002000Ë

	)

4758 
	#FSMC_PATT2_ATTWAIT2_6
 ((
uöt32_t
)0x00004000Ë

	)

4759 
	#FSMC_PATT2_ATTWAIT2_7
 ((
uöt32_t
)0x00008000Ë

	)

4761 
	#FSMC_PATT2_ATTHOLD2
 ((
uöt32_t
)0x00FF0000Ë

	)

4762 
	#FSMC_PATT2_ATTHOLD2_0
 ((
uöt32_t
)0x00010000Ë

	)

4763 
	#FSMC_PATT2_ATTHOLD2_1
 ((
uöt32_t
)0x00020000Ë

	)

4764 
	#FSMC_PATT2_ATTHOLD2_2
 ((
uöt32_t
)0x00040000Ë

	)

4765 
	#FSMC_PATT2_ATTHOLD2_3
 ((
uöt32_t
)0x00080000Ë

	)

4766 
	#FSMC_PATT2_ATTHOLD2_4
 ((
uöt32_t
)0x00100000Ë

	)

4767 
	#FSMC_PATT2_ATTHOLD2_5
 ((
uöt32_t
)0x00200000Ë

	)

4768 
	#FSMC_PATT2_ATTHOLD2_6
 ((
uöt32_t
)0x00400000Ë

	)

4769 
	#FSMC_PATT2_ATTHOLD2_7
 ((
uöt32_t
)0x00800000Ë

	)

4771 
	#FSMC_PATT2_ATTHIZ2
 ((
uöt32_t
)0xFF000000Ë

	)

4772 
	#FSMC_PATT2_ATTHIZ2_0
 ((
uöt32_t
)0x01000000Ë

	)

4773 
	#FSMC_PATT2_ATTHIZ2_1
 ((
uöt32_t
)0x02000000Ë

	)

4774 
	#FSMC_PATT2_ATTHIZ2_2
 ((
uöt32_t
)0x04000000Ë

	)

4775 
	#FSMC_PATT2_ATTHIZ2_3
 ((
uöt32_t
)0x08000000Ë

	)

4776 
	#FSMC_PATT2_ATTHIZ2_4
 ((
uöt32_t
)0x10000000Ë

	)

4777 
	#FSMC_PATT2_ATTHIZ2_5
 ((
uöt32_t
)0x20000000Ë

	)

4778 
	#FSMC_PATT2_ATTHIZ2_6
 ((
uöt32_t
)0x40000000Ë

	)

4779 
	#FSMC_PATT2_ATTHIZ2_7
 ((
uöt32_t
)0x80000000Ë

	)

4782 
	#FSMC_PATT3_ATTSET3
 ((
uöt32_t
)0x000000FFË

	)

4783 
	#FSMC_PATT3_ATTSET3_0
 ((
uöt32_t
)0x00000001Ë

	)

4784 
	#FSMC_PATT3_ATTSET3_1
 ((
uöt32_t
)0x00000002Ë

	)

4785 
	#FSMC_PATT3_ATTSET3_2
 ((
uöt32_t
)0x00000004Ë

	)

4786 
	#FSMC_PATT3_ATTSET3_3
 ((
uöt32_t
)0x00000008Ë

	)

4787 
	#FSMC_PATT3_ATTSET3_4
 ((
uöt32_t
)0x00000010Ë

	)

4788 
	#FSMC_PATT3_ATTSET3_5
 ((
uöt32_t
)0x00000020Ë

	)

4789 
	#FSMC_PATT3_ATTSET3_6
 ((
uöt32_t
)0x00000040Ë

	)

4790 
	#FSMC_PATT3_ATTSET3_7
 ((
uöt32_t
)0x00000080Ë

	)

4792 
	#FSMC_PATT3_ATTWAIT3
 ((
uöt32_t
)0x0000FF00Ë

	)

4793 
	#FSMC_PATT3_ATTWAIT3_0
 ((
uöt32_t
)0x00000100Ë

	)

4794 
	#FSMC_PATT3_ATTWAIT3_1
 ((
uöt32_t
)0x00000200Ë

	)

4795 
	#FSMC_PATT3_ATTWAIT3_2
 ((
uöt32_t
)0x00000400Ë

	)

4796 
	#FSMC_PATT3_ATTWAIT3_3
 ((
uöt32_t
)0x00000800Ë

	)

4797 
	#FSMC_PATT3_ATTWAIT3_4
 ((
uöt32_t
)0x00001000Ë

	)

4798 
	#FSMC_PATT3_ATTWAIT3_5
 ((
uöt32_t
)0x00002000Ë

	)

4799 
	#FSMC_PATT3_ATTWAIT3_6
 ((
uöt32_t
)0x00004000Ë

	)

4800 
	#FSMC_PATT3_ATTWAIT3_7
 ((
uöt32_t
)0x00008000Ë

	)

4802 
	#FSMC_PATT3_ATTHOLD3
 ((
uöt32_t
)0x00FF0000Ë

	)

4803 
	#FSMC_PATT3_ATTHOLD3_0
 ((
uöt32_t
)0x00010000Ë

	)

4804 
	#FSMC_PATT3_ATTHOLD3_1
 ((
uöt32_t
)0x00020000Ë

	)

4805 
	#FSMC_PATT3_ATTHOLD3_2
 ((
uöt32_t
)0x00040000Ë

	)

4806 
	#FSMC_PATT3_ATTHOLD3_3
 ((
uöt32_t
)0x00080000Ë

	)

4807 
	#FSMC_PATT3_ATTHOLD3_4
 ((
uöt32_t
)0x00100000Ë

	)

4808 
	#FSMC_PATT3_ATTHOLD3_5
 ((
uöt32_t
)0x00200000Ë

	)

4809 
	#FSMC_PATT3_ATTHOLD3_6
 ((
uöt32_t
)0x00400000Ë

	)

4810 
	#FSMC_PATT3_ATTHOLD3_7
 ((
uöt32_t
)0x00800000Ë

	)

4812 
	#FSMC_PATT3_ATTHIZ3
 ((
uöt32_t
)0xFF000000Ë

	)

4813 
	#FSMC_PATT3_ATTHIZ3_0
 ((
uöt32_t
)0x01000000Ë

	)

4814 
	#FSMC_PATT3_ATTHIZ3_1
 ((
uöt32_t
)0x02000000Ë

	)

4815 
	#FSMC_PATT3_ATTHIZ3_2
 ((
uöt32_t
)0x04000000Ë

	)

4816 
	#FSMC_PATT3_ATTHIZ3_3
 ((
uöt32_t
)0x08000000Ë

	)

4817 
	#FSMC_PATT3_ATTHIZ3_4
 ((
uöt32_t
)0x10000000Ë

	)

4818 
	#FSMC_PATT3_ATTHIZ3_5
 ((
uöt32_t
)0x20000000Ë

	)

4819 
	#FSMC_PATT3_ATTHIZ3_6
 ((
uöt32_t
)0x40000000Ë

	)

4820 
	#FSMC_PATT3_ATTHIZ3_7
 ((
uöt32_t
)0x80000000Ë

	)

4823 
	#FSMC_PATT4_ATTSET4
 ((
uöt32_t
)0x000000FFË

	)

4824 
	#FSMC_PATT4_ATTSET4_0
 ((
uöt32_t
)0x00000001Ë

	)

4825 
	#FSMC_PATT4_ATTSET4_1
 ((
uöt32_t
)0x00000002Ë

	)

4826 
	#FSMC_PATT4_ATTSET4_2
 ((
uöt32_t
)0x00000004Ë

	)

4827 
	#FSMC_PATT4_ATTSET4_3
 ((
uöt32_t
)0x00000008Ë

	)

4828 
	#FSMC_PATT4_ATTSET4_4
 ((
uöt32_t
)0x00000010Ë

	)

4829 
	#FSMC_PATT4_ATTSET4_5
 ((
uöt32_t
)0x00000020Ë

	)

4830 
	#FSMC_PATT4_ATTSET4_6
 ((
uöt32_t
)0x00000040Ë

	)

4831 
	#FSMC_PATT4_ATTSET4_7
 ((
uöt32_t
)0x00000080Ë

	)

4833 
	#FSMC_PATT4_ATTWAIT4
 ((
uöt32_t
)0x0000FF00Ë

	)

4834 
	#FSMC_PATT4_ATTWAIT4_0
 ((
uöt32_t
)0x00000100Ë

	)

4835 
	#FSMC_PATT4_ATTWAIT4_1
 ((
uöt32_t
)0x00000200Ë

	)

4836 
	#FSMC_PATT4_ATTWAIT4_2
 ((
uöt32_t
)0x00000400Ë

	)

4837 
	#FSMC_PATT4_ATTWAIT4_3
 ((
uöt32_t
)0x00000800Ë

	)

4838 
	#FSMC_PATT4_ATTWAIT4_4
 ((
uöt32_t
)0x00001000Ë

	)

4839 
	#FSMC_PATT4_ATTWAIT4_5
 ((
uöt32_t
)0x00002000Ë

	)

4840 
	#FSMC_PATT4_ATTWAIT4_6
 ((
uöt32_t
)0x00004000Ë

	)

4841 
	#FSMC_PATT4_ATTWAIT4_7
 ((
uöt32_t
)0x00008000Ë

	)

4843 
	#FSMC_PATT4_ATTHOLD4
 ((
uöt32_t
)0x00FF0000Ë

	)

4844 
	#FSMC_PATT4_ATTHOLD4_0
 ((
uöt32_t
)0x00010000Ë

	)

4845 
	#FSMC_PATT4_ATTHOLD4_1
 ((
uöt32_t
)0x00020000Ë

	)

4846 
	#FSMC_PATT4_ATTHOLD4_2
 ((
uöt32_t
)0x00040000Ë

	)

4847 
	#FSMC_PATT4_ATTHOLD4_3
 ((
uöt32_t
)0x00080000Ë

	)

4848 
	#FSMC_PATT4_ATTHOLD4_4
 ((
uöt32_t
)0x00100000Ë

	)

4849 
	#FSMC_PATT4_ATTHOLD4_5
 ((
uöt32_t
)0x00200000Ë

	)

4850 
	#FSMC_PATT4_ATTHOLD4_6
 ((
uöt32_t
)0x00400000Ë

	)

4851 
	#FSMC_PATT4_ATTHOLD4_7
 ((
uöt32_t
)0x00800000Ë

	)

4853 
	#FSMC_PATT4_ATTHIZ4
 ((
uöt32_t
)0xFF000000Ë

	)

4854 
	#FSMC_PATT4_ATTHIZ4_0
 ((
uöt32_t
)0x01000000Ë

	)

4855 
	#FSMC_PATT4_ATTHIZ4_1
 ((
uöt32_t
)0x02000000Ë

	)

4856 
	#FSMC_PATT4_ATTHIZ4_2
 ((
uöt32_t
)0x04000000Ë

	)

4857 
	#FSMC_PATT4_ATTHIZ4_3
 ((
uöt32_t
)0x08000000Ë

	)

4858 
	#FSMC_PATT4_ATTHIZ4_4
 ((
uöt32_t
)0x10000000Ë

	)

4859 
	#FSMC_PATT4_ATTHIZ4_5
 ((
uöt32_t
)0x20000000Ë

	)

4860 
	#FSMC_PATT4_ATTHIZ4_6
 ((
uöt32_t
)0x40000000Ë

	)

4861 
	#FSMC_PATT4_ATTHIZ4_7
 ((
uöt32_t
)0x80000000Ë

	)

4864 
	#FSMC_PIO4_IOSET4
 ((
uöt32_t
)0x000000FFË

	)

4865 
	#FSMC_PIO4_IOSET4_0
 ((
uöt32_t
)0x00000001Ë

	)

4866 
	#FSMC_PIO4_IOSET4_1
 ((
uöt32_t
)0x00000002Ë

	)

4867 
	#FSMC_PIO4_IOSET4_2
 ((
uöt32_t
)0x00000004Ë

	)

4868 
	#FSMC_PIO4_IOSET4_3
 ((
uöt32_t
)0x00000008Ë

	)

4869 
	#FSMC_PIO4_IOSET4_4
 ((
uöt32_t
)0x00000010Ë

	)

4870 
	#FSMC_PIO4_IOSET4_5
 ((
uöt32_t
)0x00000020Ë

	)

4871 
	#FSMC_PIO4_IOSET4_6
 ((
uöt32_t
)0x00000040Ë

	)

4872 
	#FSMC_PIO4_IOSET4_7
 ((
uöt32_t
)0x00000080Ë

	)

4874 
	#FSMC_PIO4_IOWAIT4
 ((
uöt32_t
)0x0000FF00Ë

	)

4875 
	#FSMC_PIO4_IOWAIT4_0
 ((
uöt32_t
)0x00000100Ë

	)

4876 
	#FSMC_PIO4_IOWAIT4_1
 ((
uöt32_t
)0x00000200Ë

	)

4877 
	#FSMC_PIO4_IOWAIT4_2
 ((
uöt32_t
)0x00000400Ë

	)

4878 
	#FSMC_PIO4_IOWAIT4_3
 ((
uöt32_t
)0x00000800Ë

	)

4879 
	#FSMC_PIO4_IOWAIT4_4
 ((
uöt32_t
)0x00001000Ë

	)

4880 
	#FSMC_PIO4_IOWAIT4_5
 ((
uöt32_t
)0x00002000Ë

	)

4881 
	#FSMC_PIO4_IOWAIT4_6
 ((
uöt32_t
)0x00004000Ë

	)

4882 
	#FSMC_PIO4_IOWAIT4_7
 ((
uöt32_t
)0x00008000Ë

	)

4884 
	#FSMC_PIO4_IOHOLD4
 ((
uöt32_t
)0x00FF0000Ë

	)

4885 
	#FSMC_PIO4_IOHOLD4_0
 ((
uöt32_t
)0x00010000Ë

	)

4886 
	#FSMC_PIO4_IOHOLD4_1
 ((
uöt32_t
)0x00020000Ë

	)

4887 
	#FSMC_PIO4_IOHOLD4_2
 ((
uöt32_t
)0x00040000Ë

	)

4888 
	#FSMC_PIO4_IOHOLD4_3
 ((
uöt32_t
)0x00080000Ë

	)

4889 
	#FSMC_PIO4_IOHOLD4_4
 ((
uöt32_t
)0x00100000Ë

	)

4890 
	#FSMC_PIO4_IOHOLD4_5
 ((
uöt32_t
)0x00200000Ë

	)

4891 
	#FSMC_PIO4_IOHOLD4_6
 ((
uöt32_t
)0x00400000Ë

	)

4892 
	#FSMC_PIO4_IOHOLD4_7
 ((
uöt32_t
)0x00800000Ë

	)

4894 
	#FSMC_PIO4_IOHIZ4
 ((
uöt32_t
)0xFF000000Ë

	)

4895 
	#FSMC_PIO4_IOHIZ4_0
 ((
uöt32_t
)0x01000000Ë

	)

4896 
	#FSMC_PIO4_IOHIZ4_1
 ((
uöt32_t
)0x02000000Ë

	)

4897 
	#FSMC_PIO4_IOHIZ4_2
 ((
uöt32_t
)0x04000000Ë

	)

4898 
	#FSMC_PIO4_IOHIZ4_3
 ((
uöt32_t
)0x08000000Ë

	)

4899 
	#FSMC_PIO4_IOHIZ4_4
 ((
uöt32_t
)0x10000000Ë

	)

4900 
	#FSMC_PIO4_IOHIZ4_5
 ((
uöt32_t
)0x20000000Ë

	)

4901 
	#FSMC_PIO4_IOHIZ4_6
 ((
uöt32_t
)0x40000000Ë

	)

4902 
	#FSMC_PIO4_IOHIZ4_7
 ((
uöt32_t
)0x80000000Ë

	)

4905 
	#FSMC_ECCR2_ECC2
 ((
uöt32_t
)0xFFFFFFFFË

	)

4908 
	#FSMC_ECCR3_ECC3
 ((
uöt32_t
)0xFFFFFFFFË

	)

4917 
	#SDIO_POWER_PWRCTRL
 ((
uöt8_t
)0x03Ë

	)

4918 
	#SDIO_POWER_PWRCTRL_0
 ((
uöt8_t
)0x01Ë

	)

4919 
	#SDIO_POWER_PWRCTRL_1
 ((
uöt8_t
)0x02Ë

	)

4922 
	#SDIO_CLKCR_CLKDIV
 ((
uöt16_t
)0x00FFË

	)

4923 
	#SDIO_CLKCR_CLKEN
 ((
uöt16_t
)0x0100Ë

	)

4924 
	#SDIO_CLKCR_PWRSAV
 ((
uöt16_t
)0x0200Ë

	)

4925 
	#SDIO_CLKCR_BYPASS
 ((
uöt16_t
)0x0400Ë

	)

4927 
	#SDIO_CLKCR_WIDBUS
 ((
uöt16_t
)0x1800Ë

	)

4928 
	#SDIO_CLKCR_WIDBUS_0
 ((
uöt16_t
)0x0800Ë

	)

4929 
	#SDIO_CLKCR_WIDBUS_1
 ((
uöt16_t
)0x1000Ë

	)

4931 
	#SDIO_CLKCR_NEGEDGE
 ((
uöt16_t
)0x2000Ë

	)

4932 
	#SDIO_CLKCR_HWFC_EN
 ((
uöt16_t
)0x4000Ë

	)

4935 
	#SDIO_ARG_CMDARG
 ((
uöt32_t
)0xFFFFFFFFË

	)

4938 
	#SDIO_CMD_CMDINDEX
 ((
uöt16_t
)0x003FË

	)

4940 
	#SDIO_CMD_WAITRESP
 ((
uöt16_t
)0x00C0Ë

	)

4941 
	#SDIO_CMD_WAITRESP_0
 ((
uöt16_t
)0x0040Ë

	)

4942 
	#SDIO_CMD_WAITRESP_1
 ((
uöt16_t
)0x0080Ë

	)

4944 
	#SDIO_CMD_WAITINT
 ((
uöt16_t
)0x0100Ë

	)

4945 
	#SDIO_CMD_WAITPEND
 ((
uöt16_t
)0x0200Ë

	)

4946 
	#SDIO_CMD_CPSMEN
 ((
uöt16_t
)0x0400Ë

	)

4947 
	#SDIO_CMD_SDIOSUSPEND
 ((
uöt16_t
)0x0800Ë

	)

4948 
	#SDIO_CMD_ENCMDCOMPL
 ((
uöt16_t
)0x1000Ë

	)

4949 
	#SDIO_CMD_NIEN
 ((
uöt16_t
)0x2000Ë

	)

4950 
	#SDIO_CMD_CEATACMD
 ((
uöt16_t
)0x4000Ë

	)

4953 
	#SDIO_RESPCMD_RESPCMD
 ((
uöt8_t
)0x3FË

	)

4956 
	#SDIO_RESP0_CARDSTATUS0
 ((
uöt32_t
)0xFFFFFFFFË

	)

4959 
	#SDIO_RESP1_CARDSTATUS1
 ((
uöt32_t
)0xFFFFFFFFË

	)

4962 
	#SDIO_RESP2_CARDSTATUS2
 ((
uöt32_t
)0xFFFFFFFFË

	)

4965 
	#SDIO_RESP3_CARDSTATUS3
 ((
uöt32_t
)0xFFFFFFFFË

	)

4968 
	#SDIO_RESP4_CARDSTATUS4
 ((
uöt32_t
)0xFFFFFFFFË

	)

4971 
	#SDIO_DTIMER_DATATIME
 ((
uöt32_t
)0xFFFFFFFFË

	)

4974 
	#SDIO_DLEN_DATALENGTH
 ((
uöt32_t
)0x01FFFFFFË

	)

4977 
	#SDIO_DCTRL_DTEN
 ((
uöt16_t
)0x0001Ë

	)

4978 
	#SDIO_DCTRL_DTDIR
 ((
uöt16_t
)0x0002Ë

	)

4979 
	#SDIO_DCTRL_DTMODE
 ((
uöt16_t
)0x0004Ë

	)

4980 
	#SDIO_DCTRL_DMAEN
 ((
uöt16_t
)0x0008Ë

	)

4982 
	#SDIO_DCTRL_DBLOCKSIZE
 ((
uöt16_t
)0x00F0Ë

	)

4983 
	#SDIO_DCTRL_DBLOCKSIZE_0
 ((
uöt16_t
)0x0010Ë

	)

4984 
	#SDIO_DCTRL_DBLOCKSIZE_1
 ((
uöt16_t
)0x0020Ë

	)

4985 
	#SDIO_DCTRL_DBLOCKSIZE_2
 ((
uöt16_t
)0x0040Ë

	)

4986 
	#SDIO_DCTRL_DBLOCKSIZE_3
 ((
uöt16_t
)0x0080Ë

	)

4988 
	#SDIO_DCTRL_RWSTART
 ((
uöt16_t
)0x0100Ë

	)

4989 
	#SDIO_DCTRL_RWSTOP
 ((
uöt16_t
)0x0200Ë

	)

4990 
	#SDIO_DCTRL_RWMOD
 ((
uöt16_t
)0x0400Ë

	)

4991 
	#SDIO_DCTRL_SDIOEN
 ((
uöt16_t
)0x0800Ë

	)

4994 
	#SDIO_DCOUNT_DATACOUNT
 ((
uöt32_t
)0x01FFFFFFË

	)

4997 
	#SDIO_STA_CCRCFAIL
 ((
uöt32_t
)0x00000001Ë

	)

4998 
	#SDIO_STA_DCRCFAIL
 ((
uöt32_t
)0x00000002Ë

	)

4999 
	#SDIO_STA_CTIMEOUT
 ((
uöt32_t
)0x00000004Ë

	)

5000 
	#SDIO_STA_DTIMEOUT
 ((
uöt32_t
)0x00000008Ë

	)

5001 
	#SDIO_STA_TXUNDERR
 ((
uöt32_t
)0x00000010Ë

	)

5002 
	#SDIO_STA_RXOVERR
 ((
uöt32_t
)0x00000020Ë

	)

5003 
	#SDIO_STA_CMDREND
 ((
uöt32_t
)0x00000040Ë

	)

5004 
	#SDIO_STA_CMDSENT
 ((
uöt32_t
)0x00000080Ë

	)

5005 
	#SDIO_STA_DATAEND
 ((
uöt32_t
)0x00000100Ë

	)

5006 
	#SDIO_STA_STBITERR
 ((
uöt32_t
)0x00000200Ë

	)

5007 
	#SDIO_STA_DBCKEND
 ((
uöt32_t
)0x00000400Ë

	)

5008 
	#SDIO_STA_CMDACT
 ((
uöt32_t
)0x00000800Ë

	)

5009 
	#SDIO_STA_TXACT
 ((
uöt32_t
)0x00001000Ë

	)

5010 
	#SDIO_STA_RXACT
 ((
uöt32_t
)0x00002000Ë

	)

5011 
	#SDIO_STA_TXFIFOHE
 ((
uöt32_t
)0x00004000Ë

	)

5012 
	#SDIO_STA_RXFIFOHF
 ((
uöt32_t
)0x00008000Ë

	)

5013 
	#SDIO_STA_TXFIFOF
 ((
uöt32_t
)0x00010000Ë

	)

5014 
	#SDIO_STA_RXFIFOF
 ((
uöt32_t
)0x00020000Ë

	)

5015 
	#SDIO_STA_TXFIFOE
 ((
uöt32_t
)0x00040000Ë

	)

5016 
	#SDIO_STA_RXFIFOE
 ((
uöt32_t
)0x00080000Ë

	)

5017 
	#SDIO_STA_TXDAVL
 ((
uöt32_t
)0x00100000Ë

	)

5018 
	#SDIO_STA_RXDAVL
 ((
uöt32_t
)0x00200000Ë

	)

5019 
	#SDIO_STA_SDIOIT
 ((
uöt32_t
)0x00400000Ë

	)

5020 
	#SDIO_STA_CEATAEND
 ((
uöt32_t
)0x00800000Ë

	)

5023 
	#SDIO_ICR_CCRCFAILC
 ((
uöt32_t
)0x00000001Ë

	)

5024 
	#SDIO_ICR_DCRCFAILC
 ((
uöt32_t
)0x00000002Ë

	)

5025 
	#SDIO_ICR_CTIMEOUTC
 ((
uöt32_t
)0x00000004Ë

	)

5026 
	#SDIO_ICR_DTIMEOUTC
 ((
uöt32_t
)0x00000008Ë

	)

5027 
	#SDIO_ICR_TXUNDERRC
 ((
uöt32_t
)0x00000010Ë

	)

5028 
	#SDIO_ICR_RXOVERRC
 ((
uöt32_t
)0x00000020Ë

	)

5029 
	#SDIO_ICR_CMDRENDC
 ((
uöt32_t
)0x00000040Ë

	)

5030 
	#SDIO_ICR_CMDSENTC
 ((
uöt32_t
)0x00000080Ë

	)

5031 
	#SDIO_ICR_DATAENDC
 ((
uöt32_t
)0x00000100Ë

	)

5032 
	#SDIO_ICR_STBITERRC
 ((
uöt32_t
)0x00000200Ë

	)

5033 
	#SDIO_ICR_DBCKENDC
 ((
uöt32_t
)0x00000400Ë

	)

5034 
	#SDIO_ICR_SDIOITC
 ((
uöt32_t
)0x00400000Ë

	)

5035 
	#SDIO_ICR_CEATAENDC
 ((
uöt32_t
)0x00800000Ë

	)

5038 
	#SDIO_MASK_CCRCFAILIE
 ((
uöt32_t
)0x00000001Ë

	)

5039 
	#SDIO_MASK_DCRCFAILIE
 ((
uöt32_t
)0x00000002Ë

	)

5040 
	#SDIO_MASK_CTIMEOUTIE
 ((
uöt32_t
)0x00000004Ë

	)

5041 
	#SDIO_MASK_DTIMEOUTIE
 ((
uöt32_t
)0x00000008Ë

	)

5042 
	#SDIO_MASK_TXUNDERRIE
 ((
uöt32_t
)0x00000010Ë

	)

5043 
	#SDIO_MASK_RXOVERRIE
 ((
uöt32_t
)0x00000020Ë

	)

5044 
	#SDIO_MASK_CMDRENDIE
 ((
uöt32_t
)0x00000040Ë

	)

5045 
	#SDIO_MASK_CMDSENTIE
 ((
uöt32_t
)0x00000080Ë

	)

5046 
	#SDIO_MASK_DATAENDIE
 ((
uöt32_t
)0x00000100Ë

	)

5047 
	#SDIO_MASK_STBITERRIE
 ((
uöt32_t
)0x00000200Ë

	)

5048 
	#SDIO_MASK_DBCKENDIE
 ((
uöt32_t
)0x00000400Ë

	)

5049 
	#SDIO_MASK_CMDACTIE
 ((
uöt32_t
)0x00000800Ë

	)

5050 
	#SDIO_MASK_TXACTIE
 ((
uöt32_t
)0x00001000Ë

	)

5051 
	#SDIO_MASK_RXACTIE
 ((
uöt32_t
)0x00002000Ë

	)

5052 
	#SDIO_MASK_TXFIFOHEIE
 ((
uöt32_t
)0x00004000Ë

	)

5053 
	#SDIO_MASK_RXFIFOHFIE
 ((
uöt32_t
)0x00008000Ë

	)

5054 
	#SDIO_MASK_TXFIFOFIE
 ((
uöt32_t
)0x00010000Ë

	)

5055 
	#SDIO_MASK_RXFIFOFIE
 ((
uöt32_t
)0x00020000Ë

	)

5056 
	#SDIO_MASK_TXFIFOEIE
 ((
uöt32_t
)0x00040000Ë

	)

5057 
	#SDIO_MASK_RXFIFOEIE
 ((
uöt32_t
)0x00080000Ë

	)

5058 
	#SDIO_MASK_TXDAVLIE
 ((
uöt32_t
)0x00100000Ë

	)

5059 
	#SDIO_MASK_RXDAVLIE
 ((
uöt32_t
)0x00200000Ë

	)

5060 
	#SDIO_MASK_SDIOITIE
 ((
uöt32_t
)0x00400000Ë

	)

5061 
	#SDIO_MASK_CEATAENDIE
 ((
uöt32_t
)0x00800000Ë

	)

5064 
	#SDIO_FIFOCNT_FIFOCOUNT
 ((
uöt32_t
)0x00FFFFFFË

	)

5067 
	#SDIO_FIFO_FIFODATA
 ((
uöt32_t
)0xFFFFFFFFË

	)

5077 
	#USB_EP0R_EA
 ((
uöt16_t
)0x000FË

	)

5079 
	#USB_EP0R_STAT_TX
 ((
uöt16_t
)0x0030Ë

	)

5080 
	#USB_EP0R_STAT_TX_0
 ((
uöt16_t
)0x0010Ë

	)

5081 
	#USB_EP0R_STAT_TX_1
 ((
uöt16_t
)0x0020Ë

	)

5083 
	#USB_EP0R_DTOG_TX
 ((
uöt16_t
)0x0040Ë

	)

5084 
	#USB_EP0R_CTR_TX
 ((
uöt16_t
)0x0080Ë

	)

5085 
	#USB_EP0R_EP_KIND
 ((
uöt16_t
)0x0100Ë

	)

5087 
	#USB_EP0R_EP_TYPE
 ((
uöt16_t
)0x0600Ë

	)

5088 
	#USB_EP0R_EP_TYPE_0
 ((
uöt16_t
)0x0200Ë

	)

5089 
	#USB_EP0R_EP_TYPE_1
 ((
uöt16_t
)0x0400Ë

	)

5091 
	#USB_EP0R_SETUP
 ((
uöt16_t
)0x0800Ë

	)

5093 
	#USB_EP0R_STAT_RX
 ((
uöt16_t
)0x3000Ë

	)

5094 
	#USB_EP0R_STAT_RX_0
 ((
uöt16_t
)0x1000Ë

	)

5095 
	#USB_EP0R_STAT_RX_1
 ((
uöt16_t
)0x2000Ë

	)

5097 
	#USB_EP0R_DTOG_RX
 ((
uöt16_t
)0x4000Ë

	)

5098 
	#USB_EP0R_CTR_RX
 ((
uöt16_t
)0x8000Ë

	)

5101 
	#USB_EP1R_EA
 ((
uöt16_t
)0x000FË

	)

5103 
	#USB_EP1R_STAT_TX
 ((
uöt16_t
)0x0030Ë

	)

5104 
	#USB_EP1R_STAT_TX_0
 ((
uöt16_t
)0x0010Ë

	)

5105 
	#USB_EP1R_STAT_TX_1
 ((
uöt16_t
)0x0020Ë

	)

5107 
	#USB_EP1R_DTOG_TX
 ((
uöt16_t
)0x0040Ë

	)

5108 
	#USB_EP1R_CTR_TX
 ((
uöt16_t
)0x0080Ë

	)

5109 
	#USB_EP1R_EP_KIND
 ((
uöt16_t
)0x0100Ë

	)

5111 
	#USB_EP1R_EP_TYPE
 ((
uöt16_t
)0x0600Ë

	)

5112 
	#USB_EP1R_EP_TYPE_0
 ((
uöt16_t
)0x0200Ë

	)

5113 
	#USB_EP1R_EP_TYPE_1
 ((
uöt16_t
)0x0400Ë

	)

5115 
	#USB_EP1R_SETUP
 ((
uöt16_t
)0x0800Ë

	)

5117 
	#USB_EP1R_STAT_RX
 ((
uöt16_t
)0x3000Ë

	)

5118 
	#USB_EP1R_STAT_RX_0
 ((
uöt16_t
)0x1000Ë

	)

5119 
	#USB_EP1R_STAT_RX_1
 ((
uöt16_t
)0x2000Ë

	)

5121 
	#USB_EP1R_DTOG_RX
 ((
uöt16_t
)0x4000Ë

	)

5122 
	#USB_EP1R_CTR_RX
 ((
uöt16_t
)0x8000Ë

	)

5125 
	#USB_EP2R_EA
 ((
uöt16_t
)0x000FË

	)

5127 
	#USB_EP2R_STAT_TX
 ((
uöt16_t
)0x0030Ë

	)

5128 
	#USB_EP2R_STAT_TX_0
 ((
uöt16_t
)0x0010Ë

	)

5129 
	#USB_EP2R_STAT_TX_1
 ((
uöt16_t
)0x0020Ë

	)

5131 
	#USB_EP2R_DTOG_TX
 ((
uöt16_t
)0x0040Ë

	)

5132 
	#USB_EP2R_CTR_TX
 ((
uöt16_t
)0x0080Ë

	)

5133 
	#USB_EP2R_EP_KIND
 ((
uöt16_t
)0x0100Ë

	)

5135 
	#USB_EP2R_EP_TYPE
 ((
uöt16_t
)0x0600Ë

	)

5136 
	#USB_EP2R_EP_TYPE_0
 ((
uöt16_t
)0x0200Ë

	)

5137 
	#USB_EP2R_EP_TYPE_1
 ((
uöt16_t
)0x0400Ë

	)

5139 
	#USB_EP2R_SETUP
 ((
uöt16_t
)0x0800Ë

	)

5141 
	#USB_EP2R_STAT_RX
 ((
uöt16_t
)0x3000Ë

	)

5142 
	#USB_EP2R_STAT_RX_0
 ((
uöt16_t
)0x1000Ë

	)

5143 
	#USB_EP2R_STAT_RX_1
 ((
uöt16_t
)0x2000Ë

	)

5145 
	#USB_EP2R_DTOG_RX
 ((
uöt16_t
)0x4000Ë

	)

5146 
	#USB_EP2R_CTR_RX
 ((
uöt16_t
)0x8000Ë

	)

5149 
	#USB_EP3R_EA
 ((
uöt16_t
)0x000FË

	)

5151 
	#USB_EP3R_STAT_TX
 ((
uöt16_t
)0x0030Ë

	)

5152 
	#USB_EP3R_STAT_TX_0
 ((
uöt16_t
)0x0010Ë

	)

5153 
	#USB_EP3R_STAT_TX_1
 ((
uöt16_t
)0x0020Ë

	)

5155 
	#USB_EP3R_DTOG_TX
 ((
uöt16_t
)0x0040Ë

	)

5156 
	#USB_EP3R_CTR_TX
 ((
uöt16_t
)0x0080Ë

	)

5157 
	#USB_EP3R_EP_KIND
 ((
uöt16_t
)0x0100Ë

	)

5159 
	#USB_EP3R_EP_TYPE
 ((
uöt16_t
)0x0600Ë

	)

5160 
	#USB_EP3R_EP_TYPE_0
 ((
uöt16_t
)0x0200Ë

	)

5161 
	#USB_EP3R_EP_TYPE_1
 ((
uöt16_t
)0x0400Ë

	)

5163 
	#USB_EP3R_SETUP
 ((
uöt16_t
)0x0800Ë

	)

5165 
	#USB_EP3R_STAT_RX
 ((
uöt16_t
)0x3000Ë

	)

5166 
	#USB_EP3R_STAT_RX_0
 ((
uöt16_t
)0x1000Ë

	)

5167 
	#USB_EP3R_STAT_RX_1
 ((
uöt16_t
)0x2000Ë

	)

5169 
	#USB_EP3R_DTOG_RX
 ((
uöt16_t
)0x4000Ë

	)

5170 
	#USB_EP3R_CTR_RX
 ((
uöt16_t
)0x8000Ë

	)

5173 
	#USB_EP4R_EA
 ((
uöt16_t
)0x000FË

	)

5175 
	#USB_EP4R_STAT_TX
 ((
uöt16_t
)0x0030Ë

	)

5176 
	#USB_EP4R_STAT_TX_0
 ((
uöt16_t
)0x0010Ë

	)

5177 
	#USB_EP4R_STAT_TX_1
 ((
uöt16_t
)0x0020Ë

	)

5179 
	#USB_EP4R_DTOG_TX
 ((
uöt16_t
)0x0040Ë

	)

5180 
	#USB_EP4R_CTR_TX
 ((
uöt16_t
)0x0080Ë

	)

5181 
	#USB_EP4R_EP_KIND
 ((
uöt16_t
)0x0100Ë

	)

5183 
	#USB_EP4R_EP_TYPE
 ((
uöt16_t
)0x0600Ë

	)

5184 
	#USB_EP4R_EP_TYPE_0
 ((
uöt16_t
)0x0200Ë

	)

5185 
	#USB_EP4R_EP_TYPE_1
 ((
uöt16_t
)0x0400Ë

	)

5187 
	#USB_EP4R_SETUP
 ((
uöt16_t
)0x0800Ë

	)

5189 
	#USB_EP4R_STAT_RX
 ((
uöt16_t
)0x3000Ë

	)

5190 
	#USB_EP4R_STAT_RX_0
 ((
uöt16_t
)0x1000Ë

	)

5191 
	#USB_EP4R_STAT_RX_1
 ((
uöt16_t
)0x2000Ë

	)

5193 
	#USB_EP4R_DTOG_RX
 ((
uöt16_t
)0x4000Ë

	)

5194 
	#USB_EP4R_CTR_RX
 ((
uöt16_t
)0x8000Ë

	)

5197 
	#USB_EP5R_EA
 ((
uöt16_t
)0x000FË

	)

5199 
	#USB_EP5R_STAT_TX
 ((
uöt16_t
)0x0030Ë

	)

5200 
	#USB_EP5R_STAT_TX_0
 ((
uöt16_t
)0x0010Ë

	)

5201 
	#USB_EP5R_STAT_TX_1
 ((
uöt16_t
)0x0020Ë

	)

5203 
	#USB_EP5R_DTOG_TX
 ((
uöt16_t
)0x0040Ë

	)

5204 
	#USB_EP5R_CTR_TX
 ((
uöt16_t
)0x0080Ë

	)

5205 
	#USB_EP5R_EP_KIND
 ((
uöt16_t
)0x0100Ë

	)

5207 
	#USB_EP5R_EP_TYPE
 ((
uöt16_t
)0x0600Ë

	)

5208 
	#USB_EP5R_EP_TYPE_0
 ((
uöt16_t
)0x0200Ë

	)

5209 
	#USB_EP5R_EP_TYPE_1
 ((
uöt16_t
)0x0400Ë

	)

5211 
	#USB_EP5R_SETUP
 ((
uöt16_t
)0x0800Ë

	)

5213 
	#USB_EP5R_STAT_RX
 ((
uöt16_t
)0x3000Ë

	)

5214 
	#USB_EP5R_STAT_RX_0
 ((
uöt16_t
)0x1000Ë

	)

5215 
	#USB_EP5R_STAT_RX_1
 ((
uöt16_t
)0x2000Ë

	)

5217 
	#USB_EP5R_DTOG_RX
 ((
uöt16_t
)0x4000Ë

	)

5218 
	#USB_EP5R_CTR_RX
 ((
uöt16_t
)0x8000Ë

	)

5221 
	#USB_EP6R_EA
 ((
uöt16_t
)0x000FË

	)

5223 
	#USB_EP6R_STAT_TX
 ((
uöt16_t
)0x0030Ë

	)

5224 
	#USB_EP6R_STAT_TX_0
 ((
uöt16_t
)0x0010Ë

	)

5225 
	#USB_EP6R_STAT_TX_1
 ((
uöt16_t
)0x0020Ë

	)

5227 
	#USB_EP6R_DTOG_TX
 ((
uöt16_t
)0x0040Ë

	)

5228 
	#USB_EP6R_CTR_TX
 ((
uöt16_t
)0x0080Ë

	)

5229 
	#USB_EP6R_EP_KIND
 ((
uöt16_t
)0x0100Ë

	)

5231 
	#USB_EP6R_EP_TYPE
 ((
uöt16_t
)0x0600Ë

	)

5232 
	#USB_EP6R_EP_TYPE_0
 ((
uöt16_t
)0x0200Ë

	)

5233 
	#USB_EP6R_EP_TYPE_1
 ((
uöt16_t
)0x0400Ë

	)

5235 
	#USB_EP6R_SETUP
 ((
uöt16_t
)0x0800Ë

	)

5237 
	#USB_EP6R_STAT_RX
 ((
uöt16_t
)0x3000Ë

	)

5238 
	#USB_EP6R_STAT_RX_0
 ((
uöt16_t
)0x1000Ë

	)

5239 
	#USB_EP6R_STAT_RX_1
 ((
uöt16_t
)0x2000Ë

	)

5241 
	#USB_EP6R_DTOG_RX
 ((
uöt16_t
)0x4000Ë

	)

5242 
	#USB_EP6R_CTR_RX
 ((
uöt16_t
)0x8000Ë

	)

5245 
	#USB_EP7R_EA
 ((
uöt16_t
)0x000FË

	)

5247 
	#USB_EP7R_STAT_TX
 ((
uöt16_t
)0x0030Ë

	)

5248 
	#USB_EP7R_STAT_TX_0
 ((
uöt16_t
)0x0010Ë

	)

5249 
	#USB_EP7R_STAT_TX_1
 ((
uöt16_t
)0x0020Ë

	)

5251 
	#USB_EP7R_DTOG_TX
 ((
uöt16_t
)0x0040Ë

	)

5252 
	#USB_EP7R_CTR_TX
 ((
uöt16_t
)0x0080Ë

	)

5253 
	#USB_EP7R_EP_KIND
 ((
uöt16_t
)0x0100Ë

	)

5255 
	#USB_EP7R_EP_TYPE
 ((
uöt16_t
)0x0600Ë

	)

5256 
	#USB_EP7R_EP_TYPE_0
 ((
uöt16_t
)0x0200Ë

	)

5257 
	#USB_EP7R_EP_TYPE_1
 ((
uöt16_t
)0x0400Ë

	)

5259 
	#USB_EP7R_SETUP
 ((
uöt16_t
)0x0800Ë

	)

5261 
	#USB_EP7R_STAT_RX
 ((
uöt16_t
)0x3000Ë

	)

5262 
	#USB_EP7R_STAT_RX_0
 ((
uöt16_t
)0x1000Ë

	)

5263 
	#USB_EP7R_STAT_RX_1
 ((
uöt16_t
)0x2000Ë

	)

5265 
	#USB_EP7R_DTOG_RX
 ((
uöt16_t
)0x4000Ë

	)

5266 
	#USB_EP7R_CTR_RX
 ((
uöt16_t
)0x8000Ë

	)

5270 
	#USB_CNTR_FRES
 ((
uöt16_t
)0x0001Ë

	)

5271 
	#USB_CNTR_PDWN
 ((
uöt16_t
)0x0002Ë

	)

5272 
	#USB_CNTR_LP_MODE
 ((
uöt16_t
)0x0004Ë

	)

5273 
	#USB_CNTR_FSUSP
 ((
uöt16_t
)0x0008Ë

	)

5274 
	#USB_CNTR_RESUME
 ((
uöt16_t
)0x0010Ë

	)

5275 
	#USB_CNTR_ESOFM
 ((
uöt16_t
)0x0100Ë

	)

5276 
	#USB_CNTR_SOFM
 ((
uöt16_t
)0x0200Ë

	)

5277 
	#USB_CNTR_RESETM
 ((
uöt16_t
)0x0400Ë

	)

5278 
	#USB_CNTR_SUSPM
 ((
uöt16_t
)0x0800Ë

	)

5279 
	#USB_CNTR_WKUPM
 ((
uöt16_t
)0x1000Ë

	)

5280 
	#USB_CNTR_ERRM
 ((
uöt16_t
)0x2000Ë

	)

5281 
	#USB_CNTR_PMAOVRM
 ((
uöt16_t
)0x4000Ë

	)

5282 
	#USB_CNTR_CTRM
 ((
uöt16_t
)0x8000Ë

	)

5285 
	#USB_ISTR_EP_ID
 ((
uöt16_t
)0x000FË

	)

5286 
	#USB_ISTR_DIR
 ((
uöt16_t
)0x0010Ë

	)

5287 
	#USB_ISTR_ESOF
 ((
uöt16_t
)0x0100Ë

	)

5288 
	#USB_ISTR_SOF
 ((
uöt16_t
)0x0200Ë

	)

5289 
	#USB_ISTR_RESET
 ((
uöt16_t
)0x0400Ë

	)

5290 
	#USB_ISTR_SUSP
 ((
uöt16_t
)0x0800Ë

	)

5291 
	#USB_ISTR_WKUP
 ((
uöt16_t
)0x1000Ë

	)

5292 
	#USB_ISTR_ERR
 ((
uöt16_t
)0x2000Ë

	)

5293 
	#USB_ISTR_PMAOVR
 ((
uöt16_t
)0x4000Ë

	)

5294 
	#USB_ISTR_CTR
 ((
uöt16_t
)0x8000Ë

	)

5297 
	#USB_FNR_FN
 ((
uöt16_t
)0x07FFË

	)

5298 
	#USB_FNR_LSOF
 ((
uöt16_t
)0x1800Ë

	)

5299 
	#USB_FNR_LCK
 ((
uöt16_t
)0x2000Ë

	)

5300 
	#USB_FNR_RXDM
 ((
uöt16_t
)0x4000Ë

	)

5301 
	#USB_FNR_RXDP
 ((
uöt16_t
)0x8000Ë

	)

5304 
	#USB_DADDR_ADD
 ((
uöt8_t
)0x7FË

	)

5305 
	#USB_DADDR_ADD0
 ((
uöt8_t
)0x01Ë

	)

5306 
	#USB_DADDR_ADD1
 ((
uöt8_t
)0x02Ë

	)

5307 
	#USB_DADDR_ADD2
 ((
uöt8_t
)0x04Ë

	)

5308 
	#USB_DADDR_ADD3
 ((
uöt8_t
)0x08Ë

	)

5309 
	#USB_DADDR_ADD4
 ((
uöt8_t
)0x10Ë

	)

5310 
	#USB_DADDR_ADD5
 ((
uöt8_t
)0x20Ë

	)

5311 
	#USB_DADDR_ADD6
 ((
uöt8_t
)0x40Ë

	)

5313 
	#USB_DADDR_EF
 ((
uöt8_t
)0x80Ë

	)

5316 
	#USB_BTABLE_BTABLE
 ((
uöt16_t
)0xFFF8Ë

	)

5320 
	#USB_ADDR0_TX_ADDR0_TX
 ((
uöt16_t
)0xFFFEË

	)

5323 
	#USB_ADDR1_TX_ADDR1_TX
 ((
uöt16_t
)0xFFFEË

	)

5326 
	#USB_ADDR2_TX_ADDR2_TX
 ((
uöt16_t
)0xFFFEË

	)

5329 
	#USB_ADDR3_TX_ADDR3_TX
 ((
uöt16_t
)0xFFFEË

	)

5332 
	#USB_ADDR4_TX_ADDR4_TX
 ((
uöt16_t
)0xFFFEË

	)

5335 
	#USB_ADDR5_TX_ADDR5_TX
 ((
uöt16_t
)0xFFFEË

	)

5338 
	#USB_ADDR6_TX_ADDR6_TX
 ((
uöt16_t
)0xFFFEË

	)

5341 
	#USB_ADDR7_TX_ADDR7_TX
 ((
uöt16_t
)0xFFFEË

	)

5346 
	#USB_COUNT0_TX_COUNT0_TX
 ((
uöt16_t
)0x03FFË

	)

5349 
	#USB_COUNT1_TX_COUNT1_TX
 ((
uöt16_t
)0x03FFË

	)

5352 
	#USB_COUNT2_TX_COUNT2_TX
 ((
uöt16_t
)0x03FFË

	)

5355 
	#USB_COUNT3_TX_COUNT3_TX
 ((
uöt16_t
)0x03FFË

	)

5358 
	#USB_COUNT4_TX_COUNT4_TX
 ((
uöt16_t
)0x03FFË

	)

5361 
	#USB_COUNT5_TX_COUNT5_TX
 ((
uöt16_t
)0x03FFË

	)

5364 
	#USB_COUNT6_TX_COUNT6_TX
 ((
uöt16_t
)0x03FFË

	)

5367 
	#USB_COUNT7_TX_COUNT7_TX
 ((
uöt16_t
)0x03FFË

	)

5372 
	#USB_COUNT0_TX_0_COUNT0_TX_0
 ((
uöt32_t
)0x000003FFË

	)

5375 
	#USB_COUNT0_TX_1_COUNT0_TX_1
 ((
uöt32_t
)0x03FF0000Ë

	)

5378 
	#USB_COUNT1_TX_0_COUNT1_TX_0
 ((
uöt32_t
)0x000003FFË

	)

5381 
	#USB_COUNT1_TX_1_COUNT1_TX_1
 ((
uöt32_t
)0x03FF0000Ë

	)

5384 
	#USB_COUNT2_TX_0_COUNT2_TX_0
 ((
uöt32_t
)0x000003FFË

	)

5387 
	#USB_COUNT2_TX_1_COUNT2_TX_1
 ((
uöt32_t
)0x03FF0000Ë

	)

5390 
	#USB_COUNT3_TX_0_COUNT3_TX_0
 ((
uöt16_t
)0x000003FFË

	)

5393 
	#USB_COUNT3_TX_1_COUNT3_TX_1
 ((
uöt16_t
)0x03FF0000Ë

	)

5396 
	#USB_COUNT4_TX_0_COUNT4_TX_0
 ((
uöt32_t
)0x000003FFË

	)

5399 
	#USB_COUNT4_TX_1_COUNT4_TX_1
 ((
uöt32_t
)0x03FF0000Ë

	)

5402 
	#USB_COUNT5_TX_0_COUNT5_TX_0
 ((
uöt32_t
)0x000003FFË

	)

5405 
	#USB_COUNT5_TX_1_COUNT5_TX_1
 ((
uöt32_t
)0x03FF0000Ë

	)

5408 
	#USB_COUNT6_TX_0_COUNT6_TX_0
 ((
uöt32_t
)0x000003FFË

	)

5411 
	#USB_COUNT6_TX_1_COUNT6_TX_1
 ((
uöt32_t
)0x03FF0000Ë

	)

5414 
	#USB_COUNT7_TX_0_COUNT7_TX_0
 ((
uöt32_t
)0x000003FFË

	)

5417 
	#USB_COUNT7_TX_1_COUNT7_TX_1
 ((
uöt32_t
)0x03FF0000Ë

	)

5422 
	#USB_ADDR0_RX_ADDR0_RX
 ((
uöt16_t
)0xFFFEË

	)

5425 
	#USB_ADDR1_RX_ADDR1_RX
 ((
uöt16_t
)0xFFFEË

	)

5428 
	#USB_ADDR2_RX_ADDR2_RX
 ((
uöt16_t
)0xFFFEË

	)

5431 
	#USB_ADDR3_RX_ADDR3_RX
 ((
uöt16_t
)0xFFFEË

	)

5434 
	#USB_ADDR4_RX_ADDR4_RX
 ((
uöt16_t
)0xFFFEË

	)

5437 
	#USB_ADDR5_RX_ADDR5_RX
 ((
uöt16_t
)0xFFFEË

	)

5440 
	#USB_ADDR6_RX_ADDR6_RX
 ((
uöt16_t
)0xFFFEË

	)

5443 
	#USB_ADDR7_RX_ADDR7_RX
 ((
uöt16_t
)0xFFFEË

	)

5448 
	#USB_COUNT0_RX_COUNT0_RX
 ((
uöt16_t
)0x03FFË

	)

5450 
	#USB_COUNT0_RX_NUM_BLOCK
 ((
uöt16_t
)0x7C00Ë

	)

5451 
	#USB_COUNT0_RX_NUM_BLOCK_0
 ((
uöt16_t
)0x0400Ë

	)

5452 
	#USB_COUNT0_RX_NUM_BLOCK_1
 ((
uöt16_t
)0x0800Ë

	)

5453 
	#USB_COUNT0_RX_NUM_BLOCK_2
 ((
uöt16_t
)0x1000Ë

	)

5454 
	#USB_COUNT0_RX_NUM_BLOCK_3
 ((
uöt16_t
)0x2000Ë

	)

5455 
	#USB_COUNT0_RX_NUM_BLOCK_4
 ((
uöt16_t
)0x4000Ë

	)

5457 
	#USB_COUNT0_RX_BLSIZE
 ((
uöt16_t
)0x8000Ë

	)

5460 
	#USB_COUNT1_RX_COUNT1_RX
 ((
uöt16_t
)0x03FFË

	)

5462 
	#USB_COUNT1_RX_NUM_BLOCK
 ((
uöt16_t
)0x7C00Ë

	)

5463 
	#USB_COUNT1_RX_NUM_BLOCK_0
 ((
uöt16_t
)0x0400Ë

	)

5464 
	#USB_COUNT1_RX_NUM_BLOCK_1
 ((
uöt16_t
)0x0800Ë

	)

5465 
	#USB_COUNT1_RX_NUM_BLOCK_2
 ((
uöt16_t
)0x1000Ë

	)

5466 
	#USB_COUNT1_RX_NUM_BLOCK_3
 ((
uöt16_t
)0x2000Ë

	)

5467 
	#USB_COUNT1_RX_NUM_BLOCK_4
 ((
uöt16_t
)0x4000Ë

	)

5469 
	#USB_COUNT1_RX_BLSIZE
 ((
uöt16_t
)0x8000Ë

	)

5472 
	#USB_COUNT2_RX_COUNT2_RX
 ((
uöt16_t
)0x03FFË

	)

5474 
	#USB_COUNT2_RX_NUM_BLOCK
 ((
uöt16_t
)0x7C00Ë

	)

5475 
	#USB_COUNT2_RX_NUM_BLOCK_0
 ((
uöt16_t
)0x0400Ë

	)

5476 
	#USB_COUNT2_RX_NUM_BLOCK_1
 ((
uöt16_t
)0x0800Ë

	)

5477 
	#USB_COUNT2_RX_NUM_BLOCK_2
 ((
uöt16_t
)0x1000Ë

	)

5478 
	#USB_COUNT2_RX_NUM_BLOCK_3
 ((
uöt16_t
)0x2000Ë

	)

5479 
	#USB_COUNT2_RX_NUM_BLOCK_4
 ((
uöt16_t
)0x4000Ë

	)

5481 
	#USB_COUNT2_RX_BLSIZE
 ((
uöt16_t
)0x8000Ë

	)

5484 
	#USB_COUNT3_RX_COUNT3_RX
 ((
uöt16_t
)0x03FFË

	)

5486 
	#USB_COUNT3_RX_NUM_BLOCK
 ((
uöt16_t
)0x7C00Ë

	)

5487 
	#USB_COUNT3_RX_NUM_BLOCK_0
 ((
uöt16_t
)0x0400Ë

	)

5488 
	#USB_COUNT3_RX_NUM_BLOCK_1
 ((
uöt16_t
)0x0800Ë

	)

5489 
	#USB_COUNT3_RX_NUM_BLOCK_2
 ((
uöt16_t
)0x1000Ë

	)

5490 
	#USB_COUNT3_RX_NUM_BLOCK_3
 ((
uöt16_t
)0x2000Ë

	)

5491 
	#USB_COUNT3_RX_NUM_BLOCK_4
 ((
uöt16_t
)0x4000Ë

	)

5493 
	#USB_COUNT3_RX_BLSIZE
 ((
uöt16_t
)0x8000Ë

	)

5496 
	#USB_COUNT4_RX_COUNT4_RX
 ((
uöt16_t
)0x03FFË

	)

5498 
	#USB_COUNT4_RX_NUM_BLOCK
 ((
uöt16_t
)0x7C00Ë

	)

5499 
	#USB_COUNT4_RX_NUM_BLOCK_0
 ((
uöt16_t
)0x0400Ë

	)

5500 
	#USB_COUNT4_RX_NUM_BLOCK_1
 ((
uöt16_t
)0x0800Ë

	)

5501 
	#USB_COUNT4_RX_NUM_BLOCK_2
 ((
uöt16_t
)0x1000Ë

	)

5502 
	#USB_COUNT4_RX_NUM_BLOCK_3
 ((
uöt16_t
)0x2000Ë

	)

5503 
	#USB_COUNT4_RX_NUM_BLOCK_4
 ((
uöt16_t
)0x4000Ë

	)

5505 
	#USB_COUNT4_RX_BLSIZE
 ((
uöt16_t
)0x8000Ë

	)

5508 
	#USB_COUNT5_RX_COUNT5_RX
 ((
uöt16_t
)0x03FFË

	)

5510 
	#USB_COUNT5_RX_NUM_BLOCK
 ((
uöt16_t
)0x7C00Ë

	)

5511 
	#USB_COUNT5_RX_NUM_BLOCK_0
 ((
uöt16_t
)0x0400Ë

	)

5512 
	#USB_COUNT5_RX_NUM_BLOCK_1
 ((
uöt16_t
)0x0800Ë

	)

5513 
	#USB_COUNT5_RX_NUM_BLOCK_2
 ((
uöt16_t
)0x1000Ë

	)

5514 
	#USB_COUNT5_RX_NUM_BLOCK_3
 ((
uöt16_t
)0x2000Ë

	)

5515 
	#USB_COUNT5_RX_NUM_BLOCK_4
 ((
uöt16_t
)0x4000Ë

	)

5517 
	#USB_COUNT5_RX_BLSIZE
 ((
uöt16_t
)0x8000Ë

	)

5520 
	#USB_COUNT6_RX_COUNT6_RX
 ((
uöt16_t
)0x03FFË

	)

5522 
	#USB_COUNT6_RX_NUM_BLOCK
 ((
uöt16_t
)0x7C00Ë

	)

5523 
	#USB_COUNT6_RX_NUM_BLOCK_0
 ((
uöt16_t
)0x0400Ë

	)

5524 
	#USB_COUNT6_RX_NUM_BLOCK_1
 ((
uöt16_t
)0x0800Ë

	)

5525 
	#USB_COUNT6_RX_NUM_BLOCK_2
 ((
uöt16_t
)0x1000Ë

	)

5526 
	#USB_COUNT6_RX_NUM_BLOCK_3
 ((
uöt16_t
)0x2000Ë

	)

5527 
	#USB_COUNT6_RX_NUM_BLOCK_4
 ((
uöt16_t
)0x4000Ë

	)

5529 
	#USB_COUNT6_RX_BLSIZE
 ((
uöt16_t
)0x8000Ë

	)

5532 
	#USB_COUNT7_RX_COUNT7_RX
 ((
uöt16_t
)0x03FFË

	)

5534 
	#USB_COUNT7_RX_NUM_BLOCK
 ((
uöt16_t
)0x7C00Ë

	)

5535 
	#USB_COUNT7_RX_NUM_BLOCK_0
 ((
uöt16_t
)0x0400Ë

	)

5536 
	#USB_COUNT7_RX_NUM_BLOCK_1
 ((
uöt16_t
)0x0800Ë

	)

5537 
	#USB_COUNT7_RX_NUM_BLOCK_2
 ((
uöt16_t
)0x1000Ë

	)

5538 
	#USB_COUNT7_RX_NUM_BLOCK_3
 ((
uöt16_t
)0x2000Ë

	)

5539 
	#USB_COUNT7_RX_NUM_BLOCK_4
 ((
uöt16_t
)0x4000Ë

	)

5541 
	#USB_COUNT7_RX_BLSIZE
 ((
uöt16_t
)0x8000Ë

	)

5546 
	#USB_COUNT0_RX_0_COUNT0_RX_0
 ((
uöt32_t
)0x000003FFË

	)

5548 
	#USB_COUNT0_RX_0_NUM_BLOCK_0
 ((
uöt32_t
)0x00007C00Ë

	)

5549 
	#USB_COUNT0_RX_0_NUM_BLOCK_0_0
 ((
uöt32_t
)0x00000400Ë

	)

5550 
	#USB_COUNT0_RX_0_NUM_BLOCK_0_1
 ((
uöt32_t
)0x00000800Ë

	)

5551 
	#USB_COUNT0_RX_0_NUM_BLOCK_0_2
 ((
uöt32_t
)0x00001000Ë

	)

5552 
	#USB_COUNT0_RX_0_NUM_BLOCK_0_3
 ((
uöt32_t
)0x00002000Ë

	)

5553 
	#USB_COUNT0_RX_0_NUM_BLOCK_0_4
 ((
uöt32_t
)0x00004000Ë

	)

5555 
	#USB_COUNT0_RX_0_BLSIZE_0
 ((
uöt32_t
)0x00008000Ë

	)

5558 
	#USB_COUNT0_RX_1_COUNT0_RX_1
 ((
uöt32_t
)0x03FF0000Ë

	)

5560 
	#USB_COUNT0_RX_1_NUM_BLOCK_1
 ((
uöt32_t
)0x7C000000Ë

	)

5561 
	#USB_COUNT0_RX_1_NUM_BLOCK_1_0
 ((
uöt32_t
)0x04000000Ë

	)

5562 
	#USB_COUNT0_RX_1_NUM_BLOCK_1_1
 ((
uöt32_t
)0x08000000Ë

	)

5563 
	#USB_COUNT0_RX_1_NUM_BLOCK_1_2
 ((
uöt32_t
)0x10000000Ë

	)

5564 
	#USB_COUNT0_RX_1_NUM_BLOCK_1_3
 ((
uöt32_t
)0x20000000Ë

	)

5565 
	#USB_COUNT0_RX_1_NUM_BLOCK_1_4
 ((
uöt32_t
)0x40000000Ë

	)

5567 
	#USB_COUNT0_RX_1_BLSIZE_1
 ((
uöt32_t
)0x80000000Ë

	)

5570 
	#USB_COUNT1_RX_0_COUNT1_RX_0
 ((
uöt32_t
)0x000003FFË

	)

5572 
	#USB_COUNT1_RX_0_NUM_BLOCK_0
 ((
uöt32_t
)0x00007C00Ë

	)

5573 
	#USB_COUNT1_RX_0_NUM_BLOCK_0_0
 ((
uöt32_t
)0x00000400Ë

	)

5574 
	#USB_COUNT1_RX_0_NUM_BLOCK_0_1
 ((
uöt32_t
)0x00000800Ë

	)

5575 
	#USB_COUNT1_RX_0_NUM_BLOCK_0_2
 ((
uöt32_t
)0x00001000Ë

	)

5576 
	#USB_COUNT1_RX_0_NUM_BLOCK_0_3
 ((
uöt32_t
)0x00002000Ë

	)

5577 
	#USB_COUNT1_RX_0_NUM_BLOCK_0_4
 ((
uöt32_t
)0x00004000Ë

	)

5579 
	#USB_COUNT1_RX_0_BLSIZE_0
 ((
uöt32_t
)0x00008000Ë

	)

5582 
	#USB_COUNT1_RX_1_COUNT1_RX_1
 ((
uöt32_t
)0x03FF0000Ë

	)

5584 
	#USB_COUNT1_RX_1_NUM_BLOCK_1
 ((
uöt32_t
)0x7C000000Ë

	)

5585 
	#USB_COUNT1_RX_1_NUM_BLOCK_1_0
 ((
uöt32_t
)0x04000000Ë

	)

5586 
	#USB_COUNT1_RX_1_NUM_BLOCK_1_1
 ((
uöt32_t
)0x08000000Ë

	)

5587 
	#USB_COUNT1_RX_1_NUM_BLOCK_1_2
 ((
uöt32_t
)0x10000000Ë

	)

5588 
	#USB_COUNT1_RX_1_NUM_BLOCK_1_3
 ((
uöt32_t
)0x20000000Ë

	)

5589 
	#USB_COUNT1_RX_1_NUM_BLOCK_1_4
 ((
uöt32_t
)0x40000000Ë

	)

5591 
	#USB_COUNT1_RX_1_BLSIZE_1
 ((
uöt32_t
)0x80000000Ë

	)

5594 
	#USB_COUNT2_RX_0_COUNT2_RX_0
 ((
uöt32_t
)0x000003FFË

	)

5596 
	#USB_COUNT2_RX_0_NUM_BLOCK_0
 ((
uöt32_t
)0x00007C00Ë

	)

5597 
	#USB_COUNT2_RX_0_NUM_BLOCK_0_0
 ((
uöt32_t
)0x00000400Ë

	)

5598 
	#USB_COUNT2_RX_0_NUM_BLOCK_0_1
 ((
uöt32_t
)0x00000800Ë

	)

5599 
	#USB_COUNT2_RX_0_NUM_BLOCK_0_2
 ((
uöt32_t
)0x00001000Ë

	)

5600 
	#USB_COUNT2_RX_0_NUM_BLOCK_0_3
 ((
uöt32_t
)0x00002000Ë

	)

5601 
	#USB_COUNT2_RX_0_NUM_BLOCK_0_4
 ((
uöt32_t
)0x00004000Ë

	)

5603 
	#USB_COUNT2_RX_0_BLSIZE_0
 ((
uöt32_t
)0x00008000Ë

	)

5606 
	#USB_COUNT2_RX_1_COUNT2_RX_1
 ((
uöt32_t
)0x03FF0000Ë

	)

5608 
	#USB_COUNT2_RX_1_NUM_BLOCK_1
 ((
uöt32_t
)0x7C000000Ë

	)

5609 
	#USB_COUNT2_RX_1_NUM_BLOCK_1_0
 ((
uöt32_t
)0x04000000Ë

	)

5610 
	#USB_COUNT2_RX_1_NUM_BLOCK_1_1
 ((
uöt32_t
)0x08000000Ë

	)

5611 
	#USB_COUNT2_RX_1_NUM_BLOCK_1_2
 ((
uöt32_t
)0x10000000Ë

	)

5612 
	#USB_COUNT2_RX_1_NUM_BLOCK_1_3
 ((
uöt32_t
)0x20000000Ë

	)

5613 
	#USB_COUNT2_RX_1_NUM_BLOCK_1_4
 ((
uöt32_t
)0x40000000Ë

	)

5615 
	#USB_COUNT2_RX_1_BLSIZE_1
 ((
uöt32_t
)0x80000000Ë

	)

5618 
	#USB_COUNT3_RX_0_COUNT3_RX_0
 ((
uöt32_t
)0x000003FFË

	)

5620 
	#USB_COUNT3_RX_0_NUM_BLOCK_0
 ((
uöt32_t
)0x00007C00Ë

	)

5621 
	#USB_COUNT3_RX_0_NUM_BLOCK_0_0
 ((
uöt32_t
)0x00000400Ë

	)

5622 
	#USB_COUNT3_RX_0_NUM_BLOCK_0_1
 ((
uöt32_t
)0x00000800Ë

	)

5623 
	#USB_COUNT3_RX_0_NUM_BLOCK_0_2
 ((
uöt32_t
)0x00001000Ë

	)

5624 
	#USB_COUNT3_RX_0_NUM_BLOCK_0_3
 ((
uöt32_t
)0x00002000Ë

	)

5625 
	#USB_COUNT3_RX_0_NUM_BLOCK_0_4
 ((
uöt32_t
)0x00004000Ë

	)

5627 
	#USB_COUNT3_RX_0_BLSIZE_0
 ((
uöt32_t
)0x00008000Ë

	)

5630 
	#USB_COUNT3_RX_1_COUNT3_RX_1
 ((
uöt32_t
)0x03FF0000Ë

	)

5632 
	#USB_COUNT3_RX_1_NUM_BLOCK_1
 ((
uöt32_t
)0x7C000000Ë

	)

5633 
	#USB_COUNT3_RX_1_NUM_BLOCK_1_0
 ((
uöt32_t
)0x04000000Ë

	)

5634 
	#USB_COUNT3_RX_1_NUM_BLOCK_1_1
 ((
uöt32_t
)0x08000000Ë

	)

5635 
	#USB_COUNT3_RX_1_NUM_BLOCK_1_2
 ((
uöt32_t
)0x10000000Ë

	)

5636 
	#USB_COUNT3_RX_1_NUM_BLOCK_1_3
 ((
uöt32_t
)0x20000000Ë

	)

5637 
	#USB_COUNT3_RX_1_NUM_BLOCK_1_4
 ((
uöt32_t
)0x40000000Ë

	)

5639 
	#USB_COUNT3_RX_1_BLSIZE_1
 ((
uöt32_t
)0x80000000Ë

	)

5642 
	#USB_COUNT4_RX_0_COUNT4_RX_0
 ((
uöt32_t
)0x000003FFË

	)

5644 
	#USB_COUNT4_RX_0_NUM_BLOCK_0
 ((
uöt32_t
)0x00007C00Ë

	)

5645 
	#USB_COUNT4_RX_0_NUM_BLOCK_0_0
 ((
uöt32_t
)0x00000400Ë

	)

5646 
	#USB_COUNT4_RX_0_NUM_BLOCK_0_1
 ((
uöt32_t
)0x00000800Ë

	)

5647 
	#USB_COUNT4_RX_0_NUM_BLOCK_0_2
 ((
uöt32_t
)0x00001000Ë

	)

5648 
	#USB_COUNT4_RX_0_NUM_BLOCK_0_3
 ((
uöt32_t
)0x00002000Ë

	)

5649 
	#USB_COUNT4_RX_0_NUM_BLOCK_0_4
 ((
uöt32_t
)0x00004000Ë

	)

5651 
	#USB_COUNT4_RX_0_BLSIZE_0
 ((
uöt32_t
)0x00008000Ë

	)

5654 
	#USB_COUNT4_RX_1_COUNT4_RX_1
 ((
uöt32_t
)0x03FF0000Ë

	)

5656 
	#USB_COUNT4_RX_1_NUM_BLOCK_1
 ((
uöt32_t
)0x7C000000Ë

	)

5657 
	#USB_COUNT4_RX_1_NUM_BLOCK_1_0
 ((
uöt32_t
)0x04000000Ë

	)

5658 
	#USB_COUNT4_RX_1_NUM_BLOCK_1_1
 ((
uöt32_t
)0x08000000Ë

	)

5659 
	#USB_COUNT4_RX_1_NUM_BLOCK_1_2
 ((
uöt32_t
)0x10000000Ë

	)

5660 
	#USB_COUNT4_RX_1_NUM_BLOCK_1_3
 ((
uöt32_t
)0x20000000Ë

	)

5661 
	#USB_COUNT4_RX_1_NUM_BLOCK_1_4
 ((
uöt32_t
)0x40000000Ë

	)

5663 
	#USB_COUNT4_RX_1_BLSIZE_1
 ((
uöt32_t
)0x80000000Ë

	)

5666 
	#USB_COUNT5_RX_0_COUNT5_RX_0
 ((
uöt32_t
)0x000003FFË

	)

5668 
	#USB_COUNT5_RX_0_NUM_BLOCK_0
 ((
uöt32_t
)0x00007C00Ë

	)

5669 
	#USB_COUNT5_RX_0_NUM_BLOCK_0_0
 ((
uöt32_t
)0x00000400Ë

	)

5670 
	#USB_COUNT5_RX_0_NUM_BLOCK_0_1
 ((
uöt32_t
)0x00000800Ë

	)

5671 
	#USB_COUNT5_RX_0_NUM_BLOCK_0_2
 ((
uöt32_t
)0x00001000Ë

	)

5672 
	#USB_COUNT5_RX_0_NUM_BLOCK_0_3
 ((
uöt32_t
)0x00002000Ë

	)

5673 
	#USB_COUNT5_RX_0_NUM_BLOCK_0_4
 ((
uöt32_t
)0x00004000Ë

	)

5675 
	#USB_COUNT5_RX_0_BLSIZE_0
 ((
uöt32_t
)0x00008000Ë

	)

5678 
	#USB_COUNT5_RX_1_COUNT5_RX_1
 ((
uöt32_t
)0x03FF0000Ë

	)

5680 
	#USB_COUNT5_RX_1_NUM_BLOCK_1
 ((
uöt32_t
)0x7C000000Ë

	)

5681 
	#USB_COUNT5_RX_1_NUM_BLOCK_1_0
 ((
uöt32_t
)0x04000000Ë

	)

5682 
	#USB_COUNT5_RX_1_NUM_BLOCK_1_1
 ((
uöt32_t
)0x08000000Ë

	)

5683 
	#USB_COUNT5_RX_1_NUM_BLOCK_1_2
 ((
uöt32_t
)0x10000000Ë

	)

5684 
	#USB_COUNT5_RX_1_NUM_BLOCK_1_3
 ((
uöt32_t
)0x20000000Ë

	)

5685 
	#USB_COUNT5_RX_1_NUM_BLOCK_1_4
 ((
uöt32_t
)0x40000000Ë

	)

5687 
	#USB_COUNT5_RX_1_BLSIZE_1
 ((
uöt32_t
)0x80000000Ë

	)

5690 
	#USB_COUNT6_RX_0_COUNT6_RX_0
 ((
uöt32_t
)0x000003FFË

	)

5692 
	#USB_COUNT6_RX_0_NUM_BLOCK_0
 ((
uöt32_t
)0x00007C00Ë

	)

5693 
	#USB_COUNT6_RX_0_NUM_BLOCK_0_0
 ((
uöt32_t
)0x00000400Ë

	)

5694 
	#USB_COUNT6_RX_0_NUM_BLOCK_0_1
 ((
uöt32_t
)0x00000800Ë

	)

5695 
	#USB_COUNT6_RX_0_NUM_BLOCK_0_2
 ((
uöt32_t
)0x00001000Ë

	)

5696 
	#USB_COUNT6_RX_0_NUM_BLOCK_0_3
 ((
uöt32_t
)0x00002000Ë

	)

5697 
	#USB_COUNT6_RX_0_NUM_BLOCK_0_4
 ((
uöt32_t
)0x00004000Ë

	)

5699 
	#USB_COUNT6_RX_0_BLSIZE_0
 ((
uöt32_t
)0x00008000Ë

	)

5702 
	#USB_COUNT6_RX_1_COUNT6_RX_1
 ((
uöt32_t
)0x03FF0000Ë

	)

5704 
	#USB_COUNT6_RX_1_NUM_BLOCK_1
 ((
uöt32_t
)0x7C000000Ë

	)

5705 
	#USB_COUNT6_RX_1_NUM_BLOCK_1_0
 ((
uöt32_t
)0x04000000Ë

	)

5706 
	#USB_COUNT6_RX_1_NUM_BLOCK_1_1
 ((
uöt32_t
)0x08000000Ë

	)

5707 
	#USB_COUNT6_RX_1_NUM_BLOCK_1_2
 ((
uöt32_t
)0x10000000Ë

	)

5708 
	#USB_COUNT6_RX_1_NUM_BLOCK_1_3
 ((
uöt32_t
)0x20000000Ë

	)

5709 
	#USB_COUNT6_RX_1_NUM_BLOCK_1_4
 ((
uöt32_t
)0x40000000Ë

	)

5711 
	#USB_COUNT6_RX_1_BLSIZE_1
 ((
uöt32_t
)0x80000000Ë

	)

5714 
	#USB_COUNT7_RX_0_COUNT7_RX_0
 ((
uöt32_t
)0x000003FFË

	)

5716 
	#USB_COUNT7_RX_0_NUM_BLOCK_0
 ((
uöt32_t
)0x00007C00Ë

	)

5717 
	#USB_COUNT7_RX_0_NUM_BLOCK_0_0
 ((
uöt32_t
)0x00000400Ë

	)

5718 
	#USB_COUNT7_RX_0_NUM_BLOCK_0_1
 ((
uöt32_t
)0x00000800Ë

	)

5719 
	#USB_COUNT7_RX_0_NUM_BLOCK_0_2
 ((
uöt32_t
)0x00001000Ë

	)

5720 
	#USB_COUNT7_RX_0_NUM_BLOCK_0_3
 ((
uöt32_t
)0x00002000Ë

	)

5721 
	#USB_COUNT7_RX_0_NUM_BLOCK_0_4
 ((
uöt32_t
)0x00004000Ë

	)

5723 
	#USB_COUNT7_RX_0_BLSIZE_0
 ((
uöt32_t
)0x00008000Ë

	)

5726 
	#USB_COUNT7_RX_1_COUNT7_RX_1
 ((
uöt32_t
)0x03FF0000Ë

	)

5728 
	#USB_COUNT7_RX_1_NUM_BLOCK_1
 ((
uöt32_t
)0x7C000000Ë

	)

5729 
	#USB_COUNT7_RX_1_NUM_BLOCK_1_0
 ((
uöt32_t
)0x04000000Ë

	)

5730 
	#USB_COUNT7_RX_1_NUM_BLOCK_1_1
 ((
uöt32_t
)0x08000000Ë

	)

5731 
	#USB_COUNT7_RX_1_NUM_BLOCK_1_2
 ((
uöt32_t
)0x10000000Ë

	)

5732 
	#USB_COUNT7_RX_1_NUM_BLOCK_1_3
 ((
uöt32_t
)0x20000000Ë

	)

5733 
	#USB_COUNT7_RX_1_NUM_BLOCK_1_4
 ((
uöt32_t
)0x40000000Ë

	)

5735 
	#USB_COUNT7_RX_1_BLSIZE_1
 ((
uöt32_t
)0x80000000Ë

	)

5745 
	#CAN_MCR_INRQ
 ((
uöt16_t
)0x0001Ë

	)

5746 
	#CAN_MCR_SLEEP
 ((
uöt16_t
)0x0002Ë

	)

5747 
	#CAN_MCR_TXFP
 ((
uöt16_t
)0x0004Ë

	)

5748 
	#CAN_MCR_RFLM
 ((
uöt16_t
)0x0008Ë

	)

5749 
	#CAN_MCR_NART
 ((
uöt16_t
)0x0010Ë

	)

5750 
	#CAN_MCR_AWUM
 ((
uöt16_t
)0x0020Ë

	)

5751 
	#CAN_MCR_ABOM
 ((
uöt16_t
)0x0040Ë

	)

5752 
	#CAN_MCR_TTCM
 ((
uöt16_t
)0x0080Ë

	)

5753 
	#CAN_MCR_RESET
 ((
uöt16_t
)0x8000Ë

	)

5756 
	#CAN_MSR_INAK
 ((
uöt16_t
)0x0001Ë

	)

5757 
	#CAN_MSR_SLAK
 ((
uöt16_t
)0x0002Ë

	)

5758 
	#CAN_MSR_ERRI
 ((
uöt16_t
)0x0004Ë

	)

5759 
	#CAN_MSR_WKUI
 ((
uöt16_t
)0x0008Ë

	)

5760 
	#CAN_MSR_SLAKI
 ((
uöt16_t
)0x0010Ë

	)

5761 
	#CAN_MSR_TXM
 ((
uöt16_t
)0x0100Ë

	)

5762 
	#CAN_MSR_RXM
 ((
uöt16_t
)0x0200Ë

	)

5763 
	#CAN_MSR_SAMP
 ((
uöt16_t
)0x0400Ë

	)

5764 
	#CAN_MSR_RX
 ((
uöt16_t
)0x0800Ë

	)

5767 
	#CAN_TSR_RQCP0
 ((
uöt32_t
)0x00000001Ë

	)

5768 
	#CAN_TSR_TXOK0
 ((
uöt32_t
)0x00000002Ë

	)

5769 
	#CAN_TSR_ALST0
 ((
uöt32_t
)0x00000004Ë

	)

5770 
	#CAN_TSR_TERR0
 ((
uöt32_t
)0x00000008Ë

	)

5771 
	#CAN_TSR_ABRQ0
 ((
uöt32_t
)0x00000080Ë

	)

5772 
	#CAN_TSR_RQCP1
 ((
uöt32_t
)0x00000100Ë

	)

5773 
	#CAN_TSR_TXOK1
 ((
uöt32_t
)0x00000200Ë

	)

5774 
	#CAN_TSR_ALST1
 ((
uöt32_t
)0x00000400Ë

	)

5775 
	#CAN_TSR_TERR1
 ((
uöt32_t
)0x00000800Ë

	)

5776 
	#CAN_TSR_ABRQ1
 ((
uöt32_t
)0x00008000Ë

	)

5777 
	#CAN_TSR_RQCP2
 ((
uöt32_t
)0x00010000Ë

	)

5778 
	#CAN_TSR_TXOK2
 ((
uöt32_t
)0x00020000Ë

	)

5779 
	#CAN_TSR_ALST2
 ((
uöt32_t
)0x00040000Ë

	)

5780 
	#CAN_TSR_TERR2
 ((
uöt32_t
)0x00080000Ë

	)

5781 
	#CAN_TSR_ABRQ2
 ((
uöt32_t
)0x00800000Ë

	)

5782 
	#CAN_TSR_CODE
 ((
uöt32_t
)0x03000000Ë

	)

5784 
	#CAN_TSR_TME
 ((
uöt32_t
)0x1C000000Ë

	)

5785 
	#CAN_TSR_TME0
 ((
uöt32_t
)0x04000000Ë

	)

5786 
	#CAN_TSR_TME1
 ((
uöt32_t
)0x08000000Ë

	)

5787 
	#CAN_TSR_TME2
 ((
uöt32_t
)0x10000000Ë

	)

5789 
	#CAN_TSR_LOW
 ((
uöt32_t
)0xE0000000Ë

	)

5790 
	#CAN_TSR_LOW0
 ((
uöt32_t
)0x20000000Ë

	)

5791 
	#CAN_TSR_LOW1
 ((
uöt32_t
)0x40000000Ë

	)

5792 
	#CAN_TSR_LOW2
 ((
uöt32_t
)0x80000000Ë

	)

5795 
	#CAN_RF0R_FMP0
 ((
uöt8_t
)0x03Ë

	)

5796 
	#CAN_RF0R_FULL0
 ((
uöt8_t
)0x08Ë

	)

5797 
	#CAN_RF0R_FOVR0
 ((
uöt8_t
)0x10Ë

	)

5798 
	#CAN_RF0R_RFOM0
 ((
uöt8_t
)0x20Ë

	)

5801 
	#CAN_RF1R_FMP1
 ((
uöt8_t
)0x03Ë

	)

5802 
	#CAN_RF1R_FULL1
 ((
uöt8_t
)0x08Ë

	)

5803 
	#CAN_RF1R_FOVR1
 ((
uöt8_t
)0x10Ë

	)

5804 
	#CAN_RF1R_RFOM1
 ((
uöt8_t
)0x20Ë

	)

5807 
	#CAN_IER_TMEIE
 ((
uöt32_t
)0x00000001Ë

	)

5808 
	#CAN_IER_FMPIE0
 ((
uöt32_t
)0x00000002Ë

	)

5809 
	#CAN_IER_FFIE0
 ((
uöt32_t
)0x00000004Ë

	)

5810 
	#CAN_IER_FOVIE0
 ((
uöt32_t
)0x00000008Ë

	)

5811 
	#CAN_IER_FMPIE1
 ((
uöt32_t
)0x00000010Ë

	)

5812 
	#CAN_IER_FFIE1
 ((
uöt32_t
)0x00000020Ë

	)

5813 
	#CAN_IER_FOVIE1
 ((
uöt32_t
)0x00000040Ë

	)

5814 
	#CAN_IER_EWGIE
 ((
uöt32_t
)0x00000100Ë

	)

5815 
	#CAN_IER_EPVIE
 ((
uöt32_t
)0x00000200Ë

	)

5816 
	#CAN_IER_BOFIE
 ((
uöt32_t
)0x00000400Ë

	)

5817 
	#CAN_IER_LECIE
 ((
uöt32_t
)0x00000800Ë

	)

5818 
	#CAN_IER_ERRIE
 ((
uöt32_t
)0x00008000Ë

	)

5819 
	#CAN_IER_WKUIE
 ((
uöt32_t
)0x00010000Ë

	)

5820 
	#CAN_IER_SLKIE
 ((
uöt32_t
)0x00020000Ë

	)

5823 
	#CAN_ESR_EWGF
 ((
uöt32_t
)0x00000001Ë

	)

5824 
	#CAN_ESR_EPVF
 ((
uöt32_t
)0x00000002Ë

	)

5825 
	#CAN_ESR_BOFF
 ((
uöt32_t
)0x00000004Ë

	)

5827 
	#CAN_ESR_LEC
 ((
uöt32_t
)0x00000070Ë

	)

5828 
	#CAN_ESR_LEC_0
 ((
uöt32_t
)0x00000010Ë

	)

5829 
	#CAN_ESR_LEC_1
 ((
uöt32_t
)0x00000020Ë

	)

5830 
	#CAN_ESR_LEC_2
 ((
uöt32_t
)0x00000040Ë

	)

5832 
	#CAN_ESR_TEC
 ((
uöt32_t
)0x00FF0000Ë

	)

5833 
	#CAN_ESR_REC
 ((
uöt32_t
)0xFF000000Ë

	)

5836 
	#CAN_BTR_BRP
 ((
uöt32_t
)0x000003FFË

	)

5837 
	#CAN_BTR_TS1
 ((
uöt32_t
)0x000F0000Ë

	)

5838 
	#CAN_BTR_TS2
 ((
uöt32_t
)0x00700000Ë

	)

5839 
	#CAN_BTR_SJW
 ((
uöt32_t
)0x03000000Ë

	)

5840 
	#CAN_BTR_LBKM
 ((
uöt32_t
)0x40000000Ë

	)

5841 
	#CAN_BTR_SILM
 ((
uöt32_t
)0x80000000Ë

	)

5845 
	#CAN_TI0R_TXRQ
 ((
uöt32_t
)0x00000001Ë

	)

5846 
	#CAN_TI0R_RTR
 ((
uöt32_t
)0x00000002Ë

	)

5847 
	#CAN_TI0R_IDE
 ((
uöt32_t
)0x00000004Ë

	)

5848 
	#CAN_TI0R_EXID
 ((
uöt32_t
)0x001FFFF8Ë

	)

5849 
	#CAN_TI0R_STID
 ((
uöt32_t
)0xFFE00000Ë

	)

5852 
	#CAN_TDT0R_DLC
 ((
uöt32_t
)0x0000000FË

	)

5853 
	#CAN_TDT0R_TGT
 ((
uöt32_t
)0x00000100Ë

	)

5854 
	#CAN_TDT0R_TIME
 ((
uöt32_t
)0xFFFF0000Ë

	)

5857 
	#CAN_TDL0R_DATA0
 ((
uöt32_t
)0x000000FFË

	)

5858 
	#CAN_TDL0R_DATA1
 ((
uöt32_t
)0x0000FF00Ë

	)

5859 
	#CAN_TDL0R_DATA2
 ((
uöt32_t
)0x00FF0000Ë

	)

5860 
	#CAN_TDL0R_DATA3
 ((
uöt32_t
)0xFF000000Ë

	)

5863 
	#CAN_TDH0R_DATA4
 ((
uöt32_t
)0x000000FFË

	)

5864 
	#CAN_TDH0R_DATA5
 ((
uöt32_t
)0x0000FF00Ë

	)

5865 
	#CAN_TDH0R_DATA6
 ((
uöt32_t
)0x00FF0000Ë

	)

5866 
	#CAN_TDH0R_DATA7
 ((
uöt32_t
)0xFF000000Ë

	)

5869 
	#CAN_TI1R_TXRQ
 ((
uöt32_t
)0x00000001Ë

	)

5870 
	#CAN_TI1R_RTR
 ((
uöt32_t
)0x00000002Ë

	)

5871 
	#CAN_TI1R_IDE
 ((
uöt32_t
)0x00000004Ë

	)

5872 
	#CAN_TI1R_EXID
 ((
uöt32_t
)0x001FFFF8Ë

	)

5873 
	#CAN_TI1R_STID
 ((
uöt32_t
)0xFFE00000Ë

	)

5876 
	#CAN_TDT1R_DLC
 ((
uöt32_t
)0x0000000FË

	)

5877 
	#CAN_TDT1R_TGT
 ((
uöt32_t
)0x00000100Ë

	)

5878 
	#CAN_TDT1R_TIME
 ((
uöt32_t
)0xFFFF0000Ë

	)

5881 
	#CAN_TDL1R_DATA0
 ((
uöt32_t
)0x000000FFË

	)

5882 
	#CAN_TDL1R_DATA1
 ((
uöt32_t
)0x0000FF00Ë

	)

5883 
	#CAN_TDL1R_DATA2
 ((
uöt32_t
)0x00FF0000Ë

	)

5884 
	#CAN_TDL1R_DATA3
 ((
uöt32_t
)0xFF000000Ë

	)

5887 
	#CAN_TDH1R_DATA4
 ((
uöt32_t
)0x000000FFË

	)

5888 
	#CAN_TDH1R_DATA5
 ((
uöt32_t
)0x0000FF00Ë

	)

5889 
	#CAN_TDH1R_DATA6
 ((
uöt32_t
)0x00FF0000Ë

	)

5890 
	#CAN_TDH1R_DATA7
 ((
uöt32_t
)0xFF000000Ë

	)

5893 
	#CAN_TI2R_TXRQ
 ((
uöt32_t
)0x00000001Ë

	)

5894 
	#CAN_TI2R_RTR
 ((
uöt32_t
)0x00000002Ë

	)

5895 
	#CAN_TI2R_IDE
 ((
uöt32_t
)0x00000004Ë

	)

5896 
	#CAN_TI2R_EXID
 ((
uöt32_t
)0x001FFFF8Ë

	)

5897 
	#CAN_TI2R_STID
 ((
uöt32_t
)0xFFE00000Ë

	)

5900 
	#CAN_TDT2R_DLC
 ((
uöt32_t
)0x0000000FË

	)

5901 
	#CAN_TDT2R_TGT
 ((
uöt32_t
)0x00000100Ë

	)

5902 
	#CAN_TDT2R_TIME
 ((
uöt32_t
)0xFFFF0000Ë

	)

5905 
	#CAN_TDL2R_DATA0
 ((
uöt32_t
)0x000000FFË

	)

5906 
	#CAN_TDL2R_DATA1
 ((
uöt32_t
)0x0000FF00Ë

	)

5907 
	#CAN_TDL2R_DATA2
 ((
uöt32_t
)0x00FF0000Ë

	)

5908 
	#CAN_TDL2R_DATA3
 ((
uöt32_t
)0xFF000000Ë

	)

5911 
	#CAN_TDH2R_DATA4
 ((
uöt32_t
)0x000000FFË

	)

5912 
	#CAN_TDH2R_DATA5
 ((
uöt32_t
)0x0000FF00Ë

	)

5913 
	#CAN_TDH2R_DATA6
 ((
uöt32_t
)0x00FF0000Ë

	)

5914 
	#CAN_TDH2R_DATA7
 ((
uöt32_t
)0xFF000000Ë

	)

5917 
	#CAN_RI0R_RTR
 ((
uöt32_t
)0x00000002Ë

	)

5918 
	#CAN_RI0R_IDE
 ((
uöt32_t
)0x00000004Ë

	)

5919 
	#CAN_RI0R_EXID
 ((
uöt32_t
)0x001FFFF8Ë

	)

5920 
	#CAN_RI0R_STID
 ((
uöt32_t
)0xFFE00000Ë

	)

5923 
	#CAN_RDT0R_DLC
 ((
uöt32_t
)0x0000000FË

	)

5924 
	#CAN_RDT0R_FMI
 ((
uöt32_t
)0x0000FF00Ë

	)

5925 
	#CAN_RDT0R_TIME
 ((
uöt32_t
)0xFFFF0000Ë

	)

5928 
	#CAN_RDL0R_DATA0
 ((
uöt32_t
)0x000000FFË

	)

5929 
	#CAN_RDL0R_DATA1
 ((
uöt32_t
)0x0000FF00Ë

	)

5930 
	#CAN_RDL0R_DATA2
 ((
uöt32_t
)0x00FF0000Ë

	)

5931 
	#CAN_RDL0R_DATA3
 ((
uöt32_t
)0xFF000000Ë

	)

5934 
	#CAN_RDH0R_DATA4
 ((
uöt32_t
)0x000000FFË

	)

5935 
	#CAN_RDH0R_DATA5
 ((
uöt32_t
)0x0000FF00Ë

	)

5936 
	#CAN_RDH0R_DATA6
 ((
uöt32_t
)0x00FF0000Ë

	)

5937 
	#CAN_RDH0R_DATA7
 ((
uöt32_t
)0xFF000000Ë

	)

5940 
	#CAN_RI1R_RTR
 ((
uöt32_t
)0x00000002Ë

	)

5941 
	#CAN_RI1R_IDE
 ((
uöt32_t
)0x00000004Ë

	)

5942 
	#CAN_RI1R_EXID
 ((
uöt32_t
)0x001FFFF8Ë

	)

5943 
	#CAN_RI1R_STID
 ((
uöt32_t
)0xFFE00000Ë

	)

5946 
	#CAN_RDT1R_DLC
 ((
uöt32_t
)0x0000000FË

	)

5947 
	#CAN_RDT1R_FMI
 ((
uöt32_t
)0x0000FF00Ë

	)

5948 
	#CAN_RDT1R_TIME
 ((
uöt32_t
)0xFFFF0000Ë

	)

5951 
	#CAN_RDL1R_DATA0
 ((
uöt32_t
)0x000000FFË

	)

5952 
	#CAN_RDL1R_DATA1
 ((
uöt32_t
)0x0000FF00Ë

	)

5953 
	#CAN_RDL1R_DATA2
 ((
uöt32_t
)0x00FF0000Ë

	)

5954 
	#CAN_RDL1R_DATA3
 ((
uöt32_t
)0xFF000000Ë

	)

5957 
	#CAN_RDH1R_DATA4
 ((
uöt32_t
)0x000000FFË

	)

5958 
	#CAN_RDH1R_DATA5
 ((
uöt32_t
)0x0000FF00Ë

	)

5959 
	#CAN_RDH1R_DATA6
 ((
uöt32_t
)0x00FF0000Ë

	)

5960 
	#CAN_RDH1R_DATA7
 ((
uöt32_t
)0xFF000000Ë

	)

5964 
	#CAN_FMR_FINIT
 ((
uöt8_t
)0x01Ë

	)

5967 
	#CAN_FM1R_FBM
 ((
uöt16_t
)0x3FFFË

	)

5968 
	#CAN_FM1R_FBM0
 ((
uöt16_t
)0x0001Ë

	)

5969 
	#CAN_FM1R_FBM1
 ((
uöt16_t
)0x0002Ë

	)

5970 
	#CAN_FM1R_FBM2
 ((
uöt16_t
)0x0004Ë

	)

5971 
	#CAN_FM1R_FBM3
 ((
uöt16_t
)0x0008Ë

	)

5972 
	#CAN_FM1R_FBM4
 ((
uöt16_t
)0x0010Ë

	)

5973 
	#CAN_FM1R_FBM5
 ((
uöt16_t
)0x0020Ë

	)

5974 
	#CAN_FM1R_FBM6
 ((
uöt16_t
)0x0040Ë

	)

5975 
	#CAN_FM1R_FBM7
 ((
uöt16_t
)0x0080Ë

	)

5976 
	#CAN_FM1R_FBM8
 ((
uöt16_t
)0x0100Ë

	)

5977 
	#CAN_FM1R_FBM9
 ((
uöt16_t
)0x0200Ë

	)

5978 
	#CAN_FM1R_FBM10
 ((
uöt16_t
)0x0400Ë

	)

5979 
	#CAN_FM1R_FBM11
 ((
uöt16_t
)0x0800Ë

	)

5980 
	#CAN_FM1R_FBM12
 ((
uöt16_t
)0x1000Ë

	)

5981 
	#CAN_FM1R_FBM13
 ((
uöt16_t
)0x2000Ë

	)

5984 
	#CAN_FS1R_FSC
 ((
uöt16_t
)0x3FFFË

	)

5985 
	#CAN_FS1R_FSC0
 ((
uöt16_t
)0x0001Ë

	)

5986 
	#CAN_FS1R_FSC1
 ((
uöt16_t
)0x0002Ë

	)

5987 
	#CAN_FS1R_FSC2
 ((
uöt16_t
)0x0004Ë

	)

5988 
	#CAN_FS1R_FSC3
 ((
uöt16_t
)0x0008Ë

	)

5989 
	#CAN_FS1R_FSC4
 ((
uöt16_t
)0x0010Ë

	)

5990 
	#CAN_FS1R_FSC5
 ((
uöt16_t
)0x0020Ë

	)

5991 
	#CAN_FS1R_FSC6
 ((
uöt16_t
)0x0040Ë

	)

5992 
	#CAN_FS1R_FSC7
 ((
uöt16_t
)0x0080Ë

	)

5993 
	#CAN_FS1R_FSC8
 ((
uöt16_t
)0x0100Ë

	)

5994 
	#CAN_FS1R_FSC9
 ((
uöt16_t
)0x0200Ë

	)

5995 
	#CAN_FS1R_FSC10
 ((
uöt16_t
)0x0400Ë

	)

5996 
	#CAN_FS1R_FSC11
 ((
uöt16_t
)0x0800Ë

	)

5997 
	#CAN_FS1R_FSC12
 ((
uöt16_t
)0x1000Ë

	)

5998 
	#CAN_FS1R_FSC13
 ((
uöt16_t
)0x2000Ë

	)

6001 
	#CAN_FFA1R_FFA
 ((
uöt16_t
)0x3FFFË

	)

6002 
	#CAN_FFA1R_FFA0
 ((
uöt16_t
)0x0001Ë

	)

6003 
	#CAN_FFA1R_FFA1
 ((
uöt16_t
)0x0002Ë

	)

6004 
	#CAN_FFA1R_FFA2
 ((
uöt16_t
)0x0004Ë

	)

6005 
	#CAN_FFA1R_FFA3
 ((
uöt16_t
)0x0008Ë

	)

6006 
	#CAN_FFA1R_FFA4
 ((
uöt16_t
)0x0010Ë

	)

6007 
	#CAN_FFA1R_FFA5
 ((
uöt16_t
)0x0020Ë

	)

6008 
	#CAN_FFA1R_FFA6
 ((
uöt16_t
)0x0040Ë

	)

6009 
	#CAN_FFA1R_FFA7
 ((
uöt16_t
)0x0080Ë

	)

6010 
	#CAN_FFA1R_FFA8
 ((
uöt16_t
)0x0100Ë

	)

6011 
	#CAN_FFA1R_FFA9
 ((
uöt16_t
)0x0200Ë

	)

6012 
	#CAN_FFA1R_FFA10
 ((
uöt16_t
)0x0400Ë

	)

6013 
	#CAN_FFA1R_FFA11
 ((
uöt16_t
)0x0800Ë

	)

6014 
	#CAN_FFA1R_FFA12
 ((
uöt16_t
)0x1000Ë

	)

6015 
	#CAN_FFA1R_FFA13
 ((
uöt16_t
)0x2000Ë

	)

6018 
	#CAN_FA1R_FACT
 ((
uöt16_t
)0x3FFFË

	)

6019 
	#CAN_FA1R_FACT0
 ((
uöt16_t
)0x0001Ë

	)

6020 
	#CAN_FA1R_FACT1
 ((
uöt16_t
)0x0002Ë

	)

6021 
	#CAN_FA1R_FACT2
 ((
uöt16_t
)0x0004Ë

	)

6022 
	#CAN_FA1R_FACT3
 ((
uöt16_t
)0x0008Ë

	)

6023 
	#CAN_FA1R_FACT4
 ((
uöt16_t
)0x0010Ë

	)

6024 
	#CAN_FA1R_FACT5
 ((
uöt16_t
)0x0020Ë

	)

6025 
	#CAN_FA1R_FACT6
 ((
uöt16_t
)0x0040Ë

	)

6026 
	#CAN_FA1R_FACT7
 ((
uöt16_t
)0x0080Ë

	)

6027 
	#CAN_FA1R_FACT8
 ((
uöt16_t
)0x0100Ë

	)

6028 
	#CAN_FA1R_FACT9
 ((
uöt16_t
)0x0200Ë

	)

6029 
	#CAN_FA1R_FACT10
 ((
uöt16_t
)0x0400Ë

	)

6030 
	#CAN_FA1R_FACT11
 ((
uöt16_t
)0x0800Ë

	)

6031 
	#CAN_FA1R_FACT12
 ((
uöt16_t
)0x1000Ë

	)

6032 
	#CAN_FA1R_FACT13
 ((
uöt16_t
)0x2000Ë

	)

6035 
	#CAN_F0R1_FB0
 ((
uöt32_t
)0x00000001Ë

	)

6036 
	#CAN_F0R1_FB1
 ((
uöt32_t
)0x00000002Ë

	)

6037 
	#CAN_F0R1_FB2
 ((
uöt32_t
)0x00000004Ë

	)

6038 
	#CAN_F0R1_FB3
 ((
uöt32_t
)0x00000008Ë

	)

6039 
	#CAN_F0R1_FB4
 ((
uöt32_t
)0x00000010Ë

	)

6040 
	#CAN_F0R1_FB5
 ((
uöt32_t
)0x00000020Ë

	)

6041 
	#CAN_F0R1_FB6
 ((
uöt32_t
)0x00000040Ë

	)

6042 
	#CAN_F0R1_FB7
 ((
uöt32_t
)0x00000080Ë

	)

6043 
	#CAN_F0R1_FB8
 ((
uöt32_t
)0x00000100Ë

	)

6044 
	#CAN_F0R1_FB9
 ((
uöt32_t
)0x00000200Ë

	)

6045 
	#CAN_F0R1_FB10
 ((
uöt32_t
)0x00000400Ë

	)

6046 
	#CAN_F0R1_FB11
 ((
uöt32_t
)0x00000800Ë

	)

6047 
	#CAN_F0R1_FB12
 ((
uöt32_t
)0x00001000Ë

	)

6048 
	#CAN_F0R1_FB13
 ((
uöt32_t
)0x00002000Ë

	)

6049 
	#CAN_F0R1_FB14
 ((
uöt32_t
)0x00004000Ë

	)

6050 
	#CAN_F0R1_FB15
 ((
uöt32_t
)0x00008000Ë

	)

6051 
	#CAN_F0R1_FB16
 ((
uöt32_t
)0x00010000Ë

	)

6052 
	#CAN_F0R1_FB17
 ((
uöt32_t
)0x00020000Ë

	)

6053 
	#CAN_F0R1_FB18
 ((
uöt32_t
)0x00040000Ë

	)

6054 
	#CAN_F0R1_FB19
 ((
uöt32_t
)0x00080000Ë

	)

6055 
	#CAN_F0R1_FB20
 ((
uöt32_t
)0x00100000Ë

	)

6056 
	#CAN_F0R1_FB21
 ((
uöt32_t
)0x00200000Ë

	)

6057 
	#CAN_F0R1_FB22
 ((
uöt32_t
)0x00400000Ë

	)

6058 
	#CAN_F0R1_FB23
 ((
uöt32_t
)0x00800000Ë

	)

6059 
	#CAN_F0R1_FB24
 ((
uöt32_t
)0x01000000Ë

	)

6060 
	#CAN_F0R1_FB25
 ((
uöt32_t
)0x02000000Ë

	)

6061 
	#CAN_F0R1_FB26
 ((
uöt32_t
)0x04000000Ë

	)

6062 
	#CAN_F0R1_FB27
 ((
uöt32_t
)0x08000000Ë

	)

6063 
	#CAN_F0R1_FB28
 ((
uöt32_t
)0x10000000Ë

	)

6064 
	#CAN_F0R1_FB29
 ((
uöt32_t
)0x20000000Ë

	)

6065 
	#CAN_F0R1_FB30
 ((
uöt32_t
)0x40000000Ë

	)

6066 
	#CAN_F0R1_FB31
 ((
uöt32_t
)0x80000000Ë

	)

6069 
	#CAN_F1R1_FB0
 ((
uöt32_t
)0x00000001Ë

	)

6070 
	#CAN_F1R1_FB1
 ((
uöt32_t
)0x00000002Ë

	)

6071 
	#CAN_F1R1_FB2
 ((
uöt32_t
)0x00000004Ë

	)

6072 
	#CAN_F1R1_FB3
 ((
uöt32_t
)0x00000008Ë

	)

6073 
	#CAN_F1R1_FB4
 ((
uöt32_t
)0x00000010Ë

	)

6074 
	#CAN_F1R1_FB5
 ((
uöt32_t
)0x00000020Ë

	)

6075 
	#CAN_F1R1_FB6
 ((
uöt32_t
)0x00000040Ë

	)

6076 
	#CAN_F1R1_FB7
 ((
uöt32_t
)0x00000080Ë

	)

6077 
	#CAN_F1R1_FB8
 ((
uöt32_t
)0x00000100Ë

	)

6078 
	#CAN_F1R1_FB9
 ((
uöt32_t
)0x00000200Ë

	)

6079 
	#CAN_F1R1_FB10
 ((
uöt32_t
)0x00000400Ë

	)

6080 
	#CAN_F1R1_FB11
 ((
uöt32_t
)0x00000800Ë

	)

6081 
	#CAN_F1R1_FB12
 ((
uöt32_t
)0x00001000Ë

	)

6082 
	#CAN_F1R1_FB13
 ((
uöt32_t
)0x00002000Ë

	)

6083 
	#CAN_F1R1_FB14
 ((
uöt32_t
)0x00004000Ë

	)

6084 
	#CAN_F1R1_FB15
 ((
uöt32_t
)0x00008000Ë

	)

6085 
	#CAN_F1R1_FB16
 ((
uöt32_t
)0x00010000Ë

	)

6086 
	#CAN_F1R1_FB17
 ((
uöt32_t
)0x00020000Ë

	)

6087 
	#CAN_F1R1_FB18
 ((
uöt32_t
)0x00040000Ë

	)

6088 
	#CAN_F1R1_FB19
 ((
uöt32_t
)0x00080000Ë

	)

6089 
	#CAN_F1R1_FB20
 ((
uöt32_t
)0x00100000Ë

	)

6090 
	#CAN_F1R1_FB21
 ((
uöt32_t
)0x00200000Ë

	)

6091 
	#CAN_F1R1_FB22
 ((
uöt32_t
)0x00400000Ë

	)

6092 
	#CAN_F1R1_FB23
 ((
uöt32_t
)0x00800000Ë

	)

6093 
	#CAN_F1R1_FB24
 ((
uöt32_t
)0x01000000Ë

	)

6094 
	#CAN_F1R1_FB25
 ((
uöt32_t
)0x02000000Ë

	)

6095 
	#CAN_F1R1_FB26
 ((
uöt32_t
)0x04000000Ë

	)

6096 
	#CAN_F1R1_FB27
 ((
uöt32_t
)0x08000000Ë

	)

6097 
	#CAN_F1R1_FB28
 ((
uöt32_t
)0x10000000Ë

	)

6098 
	#CAN_F1R1_FB29
 ((
uöt32_t
)0x20000000Ë

	)

6099 
	#CAN_F1R1_FB30
 ((
uöt32_t
)0x40000000Ë

	)

6100 
	#CAN_F1R1_FB31
 ((
uöt32_t
)0x80000000Ë

	)

6103 
	#CAN_F2R1_FB0
 ((
uöt32_t
)0x00000001Ë

	)

6104 
	#CAN_F2R1_FB1
 ((
uöt32_t
)0x00000002Ë

	)

6105 
	#CAN_F2R1_FB2
 ((
uöt32_t
)0x00000004Ë

	)

6106 
	#CAN_F2R1_FB3
 ((
uöt32_t
)0x00000008Ë

	)

6107 
	#CAN_F2R1_FB4
 ((
uöt32_t
)0x00000010Ë

	)

6108 
	#CAN_F2R1_FB5
 ((
uöt32_t
)0x00000020Ë

	)

6109 
	#CAN_F2R1_FB6
 ((
uöt32_t
)0x00000040Ë

	)

6110 
	#CAN_F2R1_FB7
 ((
uöt32_t
)0x00000080Ë

	)

6111 
	#CAN_F2R1_FB8
 ((
uöt32_t
)0x00000100Ë

	)

6112 
	#CAN_F2R1_FB9
 ((
uöt32_t
)0x00000200Ë

	)

6113 
	#CAN_F2R1_FB10
 ((
uöt32_t
)0x00000400Ë

	)

6114 
	#CAN_F2R1_FB11
 ((
uöt32_t
)0x00000800Ë

	)

6115 
	#CAN_F2R1_FB12
 ((
uöt32_t
)0x00001000Ë

	)

6116 
	#CAN_F2R1_FB13
 ((
uöt32_t
)0x00002000Ë

	)

6117 
	#CAN_F2R1_FB14
 ((
uöt32_t
)0x00004000Ë

	)

6118 
	#CAN_F2R1_FB15
 ((
uöt32_t
)0x00008000Ë

	)

6119 
	#CAN_F2R1_FB16
 ((
uöt32_t
)0x00010000Ë

	)

6120 
	#CAN_F2R1_FB17
 ((
uöt32_t
)0x00020000Ë

	)

6121 
	#CAN_F2R1_FB18
 ((
uöt32_t
)0x00040000Ë

	)

6122 
	#CAN_F2R1_FB19
 ((
uöt32_t
)0x00080000Ë

	)

6123 
	#CAN_F2R1_FB20
 ((
uöt32_t
)0x00100000Ë

	)

6124 
	#CAN_F2R1_FB21
 ((
uöt32_t
)0x00200000Ë

	)

6125 
	#CAN_F2R1_FB22
 ((
uöt32_t
)0x00400000Ë

	)

6126 
	#CAN_F2R1_FB23
 ((
uöt32_t
)0x00800000Ë

	)

6127 
	#CAN_F2R1_FB24
 ((
uöt32_t
)0x01000000Ë

	)

6128 
	#CAN_F2R1_FB25
 ((
uöt32_t
)0x02000000Ë

	)

6129 
	#CAN_F2R1_FB26
 ((
uöt32_t
)0x04000000Ë

	)

6130 
	#CAN_F2R1_FB27
 ((
uöt32_t
)0x08000000Ë

	)

6131 
	#CAN_F2R1_FB28
 ((
uöt32_t
)0x10000000Ë

	)

6132 
	#CAN_F2R1_FB29
 ((
uöt32_t
)0x20000000Ë

	)

6133 
	#CAN_F2R1_FB30
 ((
uöt32_t
)0x40000000Ë

	)

6134 
	#CAN_F2R1_FB31
 ((
uöt32_t
)0x80000000Ë

	)

6137 
	#CAN_F3R1_FB0
 ((
uöt32_t
)0x00000001Ë

	)

6138 
	#CAN_F3R1_FB1
 ((
uöt32_t
)0x00000002Ë

	)

6139 
	#CAN_F3R1_FB2
 ((
uöt32_t
)0x00000004Ë

	)

6140 
	#CAN_F3R1_FB3
 ((
uöt32_t
)0x00000008Ë

	)

6141 
	#CAN_F3R1_FB4
 ((
uöt32_t
)0x00000010Ë

	)

6142 
	#CAN_F3R1_FB5
 ((
uöt32_t
)0x00000020Ë

	)

6143 
	#CAN_F3R1_FB6
 ((
uöt32_t
)0x00000040Ë

	)

6144 
	#CAN_F3R1_FB7
 ((
uöt32_t
)0x00000080Ë

	)

6145 
	#CAN_F3R1_FB8
 ((
uöt32_t
)0x00000100Ë

	)

6146 
	#CAN_F3R1_FB9
 ((
uöt32_t
)0x00000200Ë

	)

6147 
	#CAN_F3R1_FB10
 ((
uöt32_t
)0x00000400Ë

	)

6148 
	#CAN_F3R1_FB11
 ((
uöt32_t
)0x00000800Ë

	)

6149 
	#CAN_F3R1_FB12
 ((
uöt32_t
)0x00001000Ë

	)

6150 
	#CAN_F3R1_FB13
 ((
uöt32_t
)0x00002000Ë

	)

6151 
	#CAN_F3R1_FB14
 ((
uöt32_t
)0x00004000Ë

	)

6152 
	#CAN_F3R1_FB15
 ((
uöt32_t
)0x00008000Ë

	)

6153 
	#CAN_F3R1_FB16
 ((
uöt32_t
)0x00010000Ë

	)

6154 
	#CAN_F3R1_FB17
 ((
uöt32_t
)0x00020000Ë

	)

6155 
	#CAN_F3R1_FB18
 ((
uöt32_t
)0x00040000Ë

	)

6156 
	#CAN_F3R1_FB19
 ((
uöt32_t
)0x00080000Ë

	)

6157 
	#CAN_F3R1_FB20
 ((
uöt32_t
)0x00100000Ë

	)

6158 
	#CAN_F3R1_FB21
 ((
uöt32_t
)0x00200000Ë

	)

6159 
	#CAN_F3R1_FB22
 ((
uöt32_t
)0x00400000Ë

	)

6160 
	#CAN_F3R1_FB23
 ((
uöt32_t
)0x00800000Ë

	)

6161 
	#CAN_F3R1_FB24
 ((
uöt32_t
)0x01000000Ë

	)

6162 
	#CAN_F3R1_FB25
 ((
uöt32_t
)0x02000000Ë

	)

6163 
	#CAN_F3R1_FB26
 ((
uöt32_t
)0x04000000Ë

	)

6164 
	#CAN_F3R1_FB27
 ((
uöt32_t
)0x08000000Ë

	)

6165 
	#CAN_F3R1_FB28
 ((
uöt32_t
)0x10000000Ë

	)

6166 
	#CAN_F3R1_FB29
 ((
uöt32_t
)0x20000000Ë

	)

6167 
	#CAN_F3R1_FB30
 ((
uöt32_t
)0x40000000Ë

	)

6168 
	#CAN_F3R1_FB31
 ((
uöt32_t
)0x80000000Ë

	)

6171 
	#CAN_F4R1_FB0
 ((
uöt32_t
)0x00000001Ë

	)

6172 
	#CAN_F4R1_FB1
 ((
uöt32_t
)0x00000002Ë

	)

6173 
	#CAN_F4R1_FB2
 ((
uöt32_t
)0x00000004Ë

	)

6174 
	#CAN_F4R1_FB3
 ((
uöt32_t
)0x00000008Ë

	)

6175 
	#CAN_F4R1_FB4
 ((
uöt32_t
)0x00000010Ë

	)

6176 
	#CAN_F4R1_FB5
 ((
uöt32_t
)0x00000020Ë

	)

6177 
	#CAN_F4R1_FB6
 ((
uöt32_t
)0x00000040Ë

	)

6178 
	#CAN_F4R1_FB7
 ((
uöt32_t
)0x00000080Ë

	)

6179 
	#CAN_F4R1_FB8
 ((
uöt32_t
)0x00000100Ë

	)

6180 
	#CAN_F4R1_FB9
 ((
uöt32_t
)0x00000200Ë

	)

6181 
	#CAN_F4R1_FB10
 ((
uöt32_t
)0x00000400Ë

	)

6182 
	#CAN_F4R1_FB11
 ((
uöt32_t
)0x00000800Ë

	)

6183 
	#CAN_F4R1_FB12
 ((
uöt32_t
)0x00001000Ë

	)

6184 
	#CAN_F4R1_FB13
 ((
uöt32_t
)0x00002000Ë

	)

6185 
	#CAN_F4R1_FB14
 ((
uöt32_t
)0x00004000Ë

	)

6186 
	#CAN_F4R1_FB15
 ((
uöt32_t
)0x00008000Ë

	)

6187 
	#CAN_F4R1_FB16
 ((
uöt32_t
)0x00010000Ë

	)

6188 
	#CAN_F4R1_FB17
 ((
uöt32_t
)0x00020000Ë

	)

6189 
	#CAN_F4R1_FB18
 ((
uöt32_t
)0x00040000Ë

	)

6190 
	#CAN_F4R1_FB19
 ((
uöt32_t
)0x00080000Ë

	)

6191 
	#CAN_F4R1_FB20
 ((
uöt32_t
)0x00100000Ë

	)

6192 
	#CAN_F4R1_FB21
 ((
uöt32_t
)0x00200000Ë

	)

6193 
	#CAN_F4R1_FB22
 ((
uöt32_t
)0x00400000Ë

	)

6194 
	#CAN_F4R1_FB23
 ((
uöt32_t
)0x00800000Ë

	)

6195 
	#CAN_F4R1_FB24
 ((
uöt32_t
)0x01000000Ë

	)

6196 
	#CAN_F4R1_FB25
 ((
uöt32_t
)0x02000000Ë

	)

6197 
	#CAN_F4R1_FB26
 ((
uöt32_t
)0x04000000Ë

	)

6198 
	#CAN_F4R1_FB27
 ((
uöt32_t
)0x08000000Ë

	)

6199 
	#CAN_F4R1_FB28
 ((
uöt32_t
)0x10000000Ë

	)

6200 
	#CAN_F4R1_FB29
 ((
uöt32_t
)0x20000000Ë

	)

6201 
	#CAN_F4R1_FB30
 ((
uöt32_t
)0x40000000Ë

	)

6202 
	#CAN_F4R1_FB31
 ((
uöt32_t
)0x80000000Ë

	)

6205 
	#CAN_F5R1_FB0
 ((
uöt32_t
)0x00000001Ë

	)

6206 
	#CAN_F5R1_FB1
 ((
uöt32_t
)0x00000002Ë

	)

6207 
	#CAN_F5R1_FB2
 ((
uöt32_t
)0x00000004Ë

	)

6208 
	#CAN_F5R1_FB3
 ((
uöt32_t
)0x00000008Ë

	)

6209 
	#CAN_F5R1_FB4
 ((
uöt32_t
)0x00000010Ë

	)

6210 
	#CAN_F5R1_FB5
 ((
uöt32_t
)0x00000020Ë

	)

6211 
	#CAN_F5R1_FB6
 ((
uöt32_t
)0x00000040Ë

	)

6212 
	#CAN_F5R1_FB7
 ((
uöt32_t
)0x00000080Ë

	)

6213 
	#CAN_F5R1_FB8
 ((
uöt32_t
)0x00000100Ë

	)

6214 
	#CAN_F5R1_FB9
 ((
uöt32_t
)0x00000200Ë

	)

6215 
	#CAN_F5R1_FB10
 ((
uöt32_t
)0x00000400Ë

	)

6216 
	#CAN_F5R1_FB11
 ((
uöt32_t
)0x00000800Ë

	)

6217 
	#CAN_F5R1_FB12
 ((
uöt32_t
)0x00001000Ë

	)

6218 
	#CAN_F5R1_FB13
 ((
uöt32_t
)0x00002000Ë

	)

6219 
	#CAN_F5R1_FB14
 ((
uöt32_t
)0x00004000Ë

	)

6220 
	#CAN_F5R1_FB15
 ((
uöt32_t
)0x00008000Ë

	)

6221 
	#CAN_F5R1_FB16
 ((
uöt32_t
)0x00010000Ë

	)

6222 
	#CAN_F5R1_FB17
 ((
uöt32_t
)0x00020000Ë

	)

6223 
	#CAN_F5R1_FB18
 ((
uöt32_t
)0x00040000Ë

	)

6224 
	#CAN_F5R1_FB19
 ((
uöt32_t
)0x00080000Ë

	)

6225 
	#CAN_F5R1_FB20
 ((
uöt32_t
)0x00100000Ë

	)

6226 
	#CAN_F5R1_FB21
 ((
uöt32_t
)0x00200000Ë

	)

6227 
	#CAN_F5R1_FB22
 ((
uöt32_t
)0x00400000Ë

	)

6228 
	#CAN_F5R1_FB23
 ((
uöt32_t
)0x00800000Ë

	)

6229 
	#CAN_F5R1_FB24
 ((
uöt32_t
)0x01000000Ë

	)

6230 
	#CAN_F5R1_FB25
 ((
uöt32_t
)0x02000000Ë

	)

6231 
	#CAN_F5R1_FB26
 ((
uöt32_t
)0x04000000Ë

	)

6232 
	#CAN_F5R1_FB27
 ((
uöt32_t
)0x08000000Ë

	)

6233 
	#CAN_F5R1_FB28
 ((
uöt32_t
)0x10000000Ë

	)

6234 
	#CAN_F5R1_FB29
 ((
uöt32_t
)0x20000000Ë

	)

6235 
	#CAN_F5R1_FB30
 ((
uöt32_t
)0x40000000Ë

	)

6236 
	#CAN_F5R1_FB31
 ((
uöt32_t
)0x80000000Ë

	)

6239 
	#CAN_F6R1_FB0
 ((
uöt32_t
)0x00000001Ë

	)

6240 
	#CAN_F6R1_FB1
 ((
uöt32_t
)0x00000002Ë

	)

6241 
	#CAN_F6R1_FB2
 ((
uöt32_t
)0x00000004Ë

	)

6242 
	#CAN_F6R1_FB3
 ((
uöt32_t
)0x00000008Ë

	)

6243 
	#CAN_F6R1_FB4
 ((
uöt32_t
)0x00000010Ë

	)

6244 
	#CAN_F6R1_FB5
 ((
uöt32_t
)0x00000020Ë

	)

6245 
	#CAN_F6R1_FB6
 ((
uöt32_t
)0x00000040Ë

	)

6246 
	#CAN_F6R1_FB7
 ((
uöt32_t
)0x00000080Ë

	)

6247 
	#CAN_F6R1_FB8
 ((
uöt32_t
)0x00000100Ë

	)

6248 
	#CAN_F6R1_FB9
 ((
uöt32_t
)0x00000200Ë

	)

6249 
	#CAN_F6R1_FB10
 ((
uöt32_t
)0x00000400Ë

	)

6250 
	#CAN_F6R1_FB11
 ((
uöt32_t
)0x00000800Ë

	)

6251 
	#CAN_F6R1_FB12
 ((
uöt32_t
)0x00001000Ë

	)

6252 
	#CAN_F6R1_FB13
 ((
uöt32_t
)0x00002000Ë

	)

6253 
	#CAN_F6R1_FB14
 ((
uöt32_t
)0x00004000Ë

	)

6254 
	#CAN_F6R1_FB15
 ((
uöt32_t
)0x00008000Ë

	)

6255 
	#CAN_F6R1_FB16
 ((
uöt32_t
)0x00010000Ë

	)

6256 
	#CAN_F6R1_FB17
 ((
uöt32_t
)0x00020000Ë

	)

6257 
	#CAN_F6R1_FB18
 ((
uöt32_t
)0x00040000Ë

	)

6258 
	#CAN_F6R1_FB19
 ((
uöt32_t
)0x00080000Ë

	)

6259 
	#CAN_F6R1_FB20
 ((
uöt32_t
)0x00100000Ë

	)

6260 
	#CAN_F6R1_FB21
 ((
uöt32_t
)0x00200000Ë

	)

6261 
	#CAN_F6R1_FB22
 ((
uöt32_t
)0x00400000Ë

	)

6262 
	#CAN_F6R1_FB23
 ((
uöt32_t
)0x00800000Ë

	)

6263 
	#CAN_F6R1_FB24
 ((
uöt32_t
)0x01000000Ë

	)

6264 
	#CAN_F6R1_FB25
 ((
uöt32_t
)0x02000000Ë

	)

6265 
	#CAN_F6R1_FB26
 ((
uöt32_t
)0x04000000Ë

	)

6266 
	#CAN_F6R1_FB27
 ((
uöt32_t
)0x08000000Ë

	)

6267 
	#CAN_F6R1_FB28
 ((
uöt32_t
)0x10000000Ë

	)

6268 
	#CAN_F6R1_FB29
 ((
uöt32_t
)0x20000000Ë

	)

6269 
	#CAN_F6R1_FB30
 ((
uöt32_t
)0x40000000Ë

	)

6270 
	#CAN_F6R1_FB31
 ((
uöt32_t
)0x80000000Ë

	)

6273 
	#CAN_F7R1_FB0
 ((
uöt32_t
)0x00000001Ë

	)

6274 
	#CAN_F7R1_FB1
 ((
uöt32_t
)0x00000002Ë

	)

6275 
	#CAN_F7R1_FB2
 ((
uöt32_t
)0x00000004Ë

	)

6276 
	#CAN_F7R1_FB3
 ((
uöt32_t
)0x00000008Ë

	)

6277 
	#CAN_F7R1_FB4
 ((
uöt32_t
)0x00000010Ë

	)

6278 
	#CAN_F7R1_FB5
 ((
uöt32_t
)0x00000020Ë

	)

6279 
	#CAN_F7R1_FB6
 ((
uöt32_t
)0x00000040Ë

	)

6280 
	#CAN_F7R1_FB7
 ((
uöt32_t
)0x00000080Ë

	)

6281 
	#CAN_F7R1_FB8
 ((
uöt32_t
)0x00000100Ë

	)

6282 
	#CAN_F7R1_FB9
 ((
uöt32_t
)0x00000200Ë

	)

6283 
	#CAN_F7R1_FB10
 ((
uöt32_t
)0x00000400Ë

	)

6284 
	#CAN_F7R1_FB11
 ((
uöt32_t
)0x00000800Ë

	)

6285 
	#CAN_F7R1_FB12
 ((
uöt32_t
)0x00001000Ë

	)

6286 
	#CAN_F7R1_FB13
 ((
uöt32_t
)0x00002000Ë

	)

6287 
	#CAN_F7R1_FB14
 ((
uöt32_t
)0x00004000Ë

	)

6288 
	#CAN_F7R1_FB15
 ((
uöt32_t
)0x00008000Ë

	)

6289 
	#CAN_F7R1_FB16
 ((
uöt32_t
)0x00010000Ë

	)

6290 
	#CAN_F7R1_FB17
 ((
uöt32_t
)0x00020000Ë

	)

6291 
	#CAN_F7R1_FB18
 ((
uöt32_t
)0x00040000Ë

	)

6292 
	#CAN_F7R1_FB19
 ((
uöt32_t
)0x00080000Ë

	)

6293 
	#CAN_F7R1_FB20
 ((
uöt32_t
)0x00100000Ë

	)

6294 
	#CAN_F7R1_FB21
 ((
uöt32_t
)0x00200000Ë

	)

6295 
	#CAN_F7R1_FB22
 ((
uöt32_t
)0x00400000Ë

	)

6296 
	#CAN_F7R1_FB23
 ((
uöt32_t
)0x00800000Ë

	)

6297 
	#CAN_F7R1_FB24
 ((
uöt32_t
)0x01000000Ë

	)

6298 
	#CAN_F7R1_FB25
 ((
uöt32_t
)0x02000000Ë

	)

6299 
	#CAN_F7R1_FB26
 ((
uöt32_t
)0x04000000Ë

	)

6300 
	#CAN_F7R1_FB27
 ((
uöt32_t
)0x08000000Ë

	)

6301 
	#CAN_F7R1_FB28
 ((
uöt32_t
)0x10000000Ë

	)

6302 
	#CAN_F7R1_FB29
 ((
uöt32_t
)0x20000000Ë

	)

6303 
	#CAN_F7R1_FB30
 ((
uöt32_t
)0x40000000Ë

	)

6304 
	#CAN_F7R1_FB31
 ((
uöt32_t
)0x80000000Ë

	)

6307 
	#CAN_F8R1_FB0
 ((
uöt32_t
)0x00000001Ë

	)

6308 
	#CAN_F8R1_FB1
 ((
uöt32_t
)0x00000002Ë

	)

6309 
	#CAN_F8R1_FB2
 ((
uöt32_t
)0x00000004Ë

	)

6310 
	#CAN_F8R1_FB3
 ((
uöt32_t
)0x00000008Ë

	)

6311 
	#CAN_F8R1_FB4
 ((
uöt32_t
)0x00000010Ë

	)

6312 
	#CAN_F8R1_FB5
 ((
uöt32_t
)0x00000020Ë

	)

6313 
	#CAN_F8R1_FB6
 ((
uöt32_t
)0x00000040Ë

	)

6314 
	#CAN_F8R1_FB7
 ((
uöt32_t
)0x00000080Ë

	)

6315 
	#CAN_F8R1_FB8
 ((
uöt32_t
)0x00000100Ë

	)

6316 
	#CAN_F8R1_FB9
 ((
uöt32_t
)0x00000200Ë

	)

6317 
	#CAN_F8R1_FB10
 ((
uöt32_t
)0x00000400Ë

	)

6318 
	#CAN_F8R1_FB11
 ((
uöt32_t
)0x00000800Ë

	)

6319 
	#CAN_F8R1_FB12
 ((
uöt32_t
)0x00001000Ë

	)

6320 
	#CAN_F8R1_FB13
 ((
uöt32_t
)0x00002000Ë

	)

6321 
	#CAN_F8R1_FB14
 ((
uöt32_t
)0x00004000Ë

	)

6322 
	#CAN_F8R1_FB15
 ((
uöt32_t
)0x00008000Ë

	)

6323 
	#CAN_F8R1_FB16
 ((
uöt32_t
)0x00010000Ë

	)

6324 
	#CAN_F8R1_FB17
 ((
uöt32_t
)0x00020000Ë

	)

6325 
	#CAN_F8R1_FB18
 ((
uöt32_t
)0x00040000Ë

	)

6326 
	#CAN_F8R1_FB19
 ((
uöt32_t
)0x00080000Ë

	)

6327 
	#CAN_F8R1_FB20
 ((
uöt32_t
)0x00100000Ë

	)

6328 
	#CAN_F8R1_FB21
 ((
uöt32_t
)0x00200000Ë

	)

6329 
	#CAN_F8R1_FB22
 ((
uöt32_t
)0x00400000Ë

	)

6330 
	#CAN_F8R1_FB23
 ((
uöt32_t
)0x00800000Ë

	)

6331 
	#CAN_F8R1_FB24
 ((
uöt32_t
)0x01000000Ë

	)

6332 
	#CAN_F8R1_FB25
 ((
uöt32_t
)0x02000000Ë

	)

6333 
	#CAN_F8R1_FB26
 ((
uöt32_t
)0x04000000Ë

	)

6334 
	#CAN_F8R1_FB27
 ((
uöt32_t
)0x08000000Ë

	)

6335 
	#CAN_F8R1_FB28
 ((
uöt32_t
)0x10000000Ë

	)

6336 
	#CAN_F8R1_FB29
 ((
uöt32_t
)0x20000000Ë

	)

6337 
	#CAN_F8R1_FB30
 ((
uöt32_t
)0x40000000Ë

	)

6338 
	#CAN_F8R1_FB31
 ((
uöt32_t
)0x80000000Ë

	)

6341 
	#CAN_F9R1_FB0
 ((
uöt32_t
)0x00000001Ë

	)

6342 
	#CAN_F9R1_FB1
 ((
uöt32_t
)0x00000002Ë

	)

6343 
	#CAN_F9R1_FB2
 ((
uöt32_t
)0x00000004Ë

	)

6344 
	#CAN_F9R1_FB3
 ((
uöt32_t
)0x00000008Ë

	)

6345 
	#CAN_F9R1_FB4
 ((
uöt32_t
)0x00000010Ë

	)

6346 
	#CAN_F9R1_FB5
 ((
uöt32_t
)0x00000020Ë

	)

6347 
	#CAN_F9R1_FB6
 ((
uöt32_t
)0x00000040Ë

	)

6348 
	#CAN_F9R1_FB7
 ((
uöt32_t
)0x00000080Ë

	)

6349 
	#CAN_F9R1_FB8
 ((
uöt32_t
)0x00000100Ë

	)

6350 
	#CAN_F9R1_FB9
 ((
uöt32_t
)0x00000200Ë

	)

6351 
	#CAN_F9R1_FB10
 ((
uöt32_t
)0x00000400Ë

	)

6352 
	#CAN_F9R1_FB11
 ((
uöt32_t
)0x00000800Ë

	)

6353 
	#CAN_F9R1_FB12
 ((
uöt32_t
)0x00001000Ë

	)

6354 
	#CAN_F9R1_FB13
 ((
uöt32_t
)0x00002000Ë

	)

6355 
	#CAN_F9R1_FB14
 ((
uöt32_t
)0x00004000Ë

	)

6356 
	#CAN_F9R1_FB15
 ((
uöt32_t
)0x00008000Ë

	)

6357 
	#CAN_F9R1_FB16
 ((
uöt32_t
)0x00010000Ë

	)

6358 
	#CAN_F9R1_FB17
 ((
uöt32_t
)0x00020000Ë

	)

6359 
	#CAN_F9R1_FB18
 ((
uöt32_t
)0x00040000Ë

	)

6360 
	#CAN_F9R1_FB19
 ((
uöt32_t
)0x00080000Ë

	)

6361 
	#CAN_F9R1_FB20
 ((
uöt32_t
)0x00100000Ë

	)

6362 
	#CAN_F9R1_FB21
 ((
uöt32_t
)0x00200000Ë

	)

6363 
	#CAN_F9R1_FB22
 ((
uöt32_t
)0x00400000Ë

	)

6364 
	#CAN_F9R1_FB23
 ((
uöt32_t
)0x00800000Ë

	)

6365 
	#CAN_F9R1_FB24
 ((
uöt32_t
)0x01000000Ë

	)

6366 
	#CAN_F9R1_FB25
 ((
uöt32_t
)0x02000000Ë

	)

6367 
	#CAN_F9R1_FB26
 ((
uöt32_t
)0x04000000Ë

	)

6368 
	#CAN_F9R1_FB27
 ((
uöt32_t
)0x08000000Ë

	)

6369 
	#CAN_F9R1_FB28
 ((
uöt32_t
)0x10000000Ë

	)

6370 
	#CAN_F9R1_FB29
 ((
uöt32_t
)0x20000000Ë

	)

6371 
	#CAN_F9R1_FB30
 ((
uöt32_t
)0x40000000Ë

	)

6372 
	#CAN_F9R1_FB31
 ((
uöt32_t
)0x80000000Ë

	)

6375 
	#CAN_F10R1_FB0
 ((
uöt32_t
)0x00000001Ë

	)

6376 
	#CAN_F10R1_FB1
 ((
uöt32_t
)0x00000002Ë

	)

6377 
	#CAN_F10R1_FB2
 ((
uöt32_t
)0x00000004Ë

	)

6378 
	#CAN_F10R1_FB3
 ((
uöt32_t
)0x00000008Ë

	)

6379 
	#CAN_F10R1_FB4
 ((
uöt32_t
)0x00000010Ë

	)

6380 
	#CAN_F10R1_FB5
 ((
uöt32_t
)0x00000020Ë

	)

6381 
	#CAN_F10R1_FB6
 ((
uöt32_t
)0x00000040Ë

	)

6382 
	#CAN_F10R1_FB7
 ((
uöt32_t
)0x00000080Ë

	)

6383 
	#CAN_F10R1_FB8
 ((
uöt32_t
)0x00000100Ë

	)

6384 
	#CAN_F10R1_FB9
 ((
uöt32_t
)0x00000200Ë

	)

6385 
	#CAN_F10R1_FB10
 ((
uöt32_t
)0x00000400Ë

	)

6386 
	#CAN_F10R1_FB11
 ((
uöt32_t
)0x00000800Ë

	)

6387 
	#CAN_F10R1_FB12
 ((
uöt32_t
)0x00001000Ë

	)

6388 
	#CAN_F10R1_FB13
 ((
uöt32_t
)0x00002000Ë

	)

6389 
	#CAN_F10R1_FB14
 ((
uöt32_t
)0x00004000Ë

	)

6390 
	#CAN_F10R1_FB15
 ((
uöt32_t
)0x00008000Ë

	)

6391 
	#CAN_F10R1_FB16
 ((
uöt32_t
)0x00010000Ë

	)

6392 
	#CAN_F10R1_FB17
 ((
uöt32_t
)0x00020000Ë

	)

6393 
	#CAN_F10R1_FB18
 ((
uöt32_t
)0x00040000Ë

	)

6394 
	#CAN_F10R1_FB19
 ((
uöt32_t
)0x00080000Ë

	)

6395 
	#CAN_F10R1_FB20
 ((
uöt32_t
)0x00100000Ë

	)

6396 
	#CAN_F10R1_FB21
 ((
uöt32_t
)0x00200000Ë

	)

6397 
	#CAN_F10R1_FB22
 ((
uöt32_t
)0x00400000Ë

	)

6398 
	#CAN_F10R1_FB23
 ((
uöt32_t
)0x00800000Ë

	)

6399 
	#CAN_F10R1_FB24
 ((
uöt32_t
)0x01000000Ë

	)

6400 
	#CAN_F10R1_FB25
 ((
uöt32_t
)0x02000000Ë

	)

6401 
	#CAN_F10R1_FB26
 ((
uöt32_t
)0x04000000Ë

	)

6402 
	#CAN_F10R1_FB27
 ((
uöt32_t
)0x08000000Ë

	)

6403 
	#CAN_F10R1_FB28
 ((
uöt32_t
)0x10000000Ë

	)

6404 
	#CAN_F10R1_FB29
 ((
uöt32_t
)0x20000000Ë

	)

6405 
	#CAN_F10R1_FB30
 ((
uöt32_t
)0x40000000Ë

	)

6406 
	#CAN_F10R1_FB31
 ((
uöt32_t
)0x80000000Ë

	)

6409 
	#CAN_F11R1_FB0
 ((
uöt32_t
)0x00000001Ë

	)

6410 
	#CAN_F11R1_FB1
 ((
uöt32_t
)0x00000002Ë

	)

6411 
	#CAN_F11R1_FB2
 ((
uöt32_t
)0x00000004Ë

	)

6412 
	#CAN_F11R1_FB3
 ((
uöt32_t
)0x00000008Ë

	)

6413 
	#CAN_F11R1_FB4
 ((
uöt32_t
)0x00000010Ë

	)

6414 
	#CAN_F11R1_FB5
 ((
uöt32_t
)0x00000020Ë

	)

6415 
	#CAN_F11R1_FB6
 ((
uöt32_t
)0x00000040Ë

	)

6416 
	#CAN_F11R1_FB7
 ((
uöt32_t
)0x00000080Ë

	)

6417 
	#CAN_F11R1_FB8
 ((
uöt32_t
)0x00000100Ë

	)

6418 
	#CAN_F11R1_FB9
 ((
uöt32_t
)0x00000200Ë

	)

6419 
	#CAN_F11R1_FB10
 ((
uöt32_t
)0x00000400Ë

	)

6420 
	#CAN_F11R1_FB11
 ((
uöt32_t
)0x00000800Ë

	)

6421 
	#CAN_F11R1_FB12
 ((
uöt32_t
)0x00001000Ë

	)

6422 
	#CAN_F11R1_FB13
 ((
uöt32_t
)0x00002000Ë

	)

6423 
	#CAN_F11R1_FB14
 ((
uöt32_t
)0x00004000Ë

	)

6424 
	#CAN_F11R1_FB15
 ((
uöt32_t
)0x00008000Ë

	)

6425 
	#CAN_F11R1_FB16
 ((
uöt32_t
)0x00010000Ë

	)

6426 
	#CAN_F11R1_FB17
 ((
uöt32_t
)0x00020000Ë

	)

6427 
	#CAN_F11R1_FB18
 ((
uöt32_t
)0x00040000Ë

	)

6428 
	#CAN_F11R1_FB19
 ((
uöt32_t
)0x00080000Ë

	)

6429 
	#CAN_F11R1_FB20
 ((
uöt32_t
)0x00100000Ë

	)

6430 
	#CAN_F11R1_FB21
 ((
uöt32_t
)0x00200000Ë

	)

6431 
	#CAN_F11R1_FB22
 ((
uöt32_t
)0x00400000Ë

	)

6432 
	#CAN_F11R1_FB23
 ((
uöt32_t
)0x00800000Ë

	)

6433 
	#CAN_F11R1_FB24
 ((
uöt32_t
)0x01000000Ë

	)

6434 
	#CAN_F11R1_FB25
 ((
uöt32_t
)0x02000000Ë

	)

6435 
	#CAN_F11R1_FB26
 ((
uöt32_t
)0x04000000Ë

	)

6436 
	#CAN_F11R1_FB27
 ((
uöt32_t
)0x08000000Ë

	)

6437 
	#CAN_F11R1_FB28
 ((
uöt32_t
)0x10000000Ë

	)

6438 
	#CAN_F11R1_FB29
 ((
uöt32_t
)0x20000000Ë

	)

6439 
	#CAN_F11R1_FB30
 ((
uöt32_t
)0x40000000Ë

	)

6440 
	#CAN_F11R1_FB31
 ((
uöt32_t
)0x80000000Ë

	)

6443 
	#CAN_F12R1_FB0
 ((
uöt32_t
)0x00000001Ë

	)

6444 
	#CAN_F12R1_FB1
 ((
uöt32_t
)0x00000002Ë

	)

6445 
	#CAN_F12R1_FB2
 ((
uöt32_t
)0x00000004Ë

	)

6446 
	#CAN_F12R1_FB3
 ((
uöt32_t
)0x00000008Ë

	)

6447 
	#CAN_F12R1_FB4
 ((
uöt32_t
)0x00000010Ë

	)

6448 
	#CAN_F12R1_FB5
 ((
uöt32_t
)0x00000020Ë

	)

6449 
	#CAN_F12R1_FB6
 ((
uöt32_t
)0x00000040Ë

	)

6450 
	#CAN_F12R1_FB7
 ((
uöt32_t
)0x00000080Ë

	)

6451 
	#CAN_F12R1_FB8
 ((
uöt32_t
)0x00000100Ë

	)

6452 
	#CAN_F12R1_FB9
 ((
uöt32_t
)0x00000200Ë

	)

6453 
	#CAN_F12R1_FB10
 ((
uöt32_t
)0x00000400Ë

	)

6454 
	#CAN_F12R1_FB11
 ((
uöt32_t
)0x00000800Ë

	)

6455 
	#CAN_F12R1_FB12
 ((
uöt32_t
)0x00001000Ë

	)

6456 
	#CAN_F12R1_FB13
 ((
uöt32_t
)0x00002000Ë

	)

6457 
	#CAN_F12R1_FB14
 ((
uöt32_t
)0x00004000Ë

	)

6458 
	#CAN_F12R1_FB15
 ((
uöt32_t
)0x00008000Ë

	)

6459 
	#CAN_F12R1_FB16
 ((
uöt32_t
)0x00010000Ë

	)

6460 
	#CAN_F12R1_FB17
 ((
uöt32_t
)0x00020000Ë

	)

6461 
	#CAN_F12R1_FB18
 ((
uöt32_t
)0x00040000Ë

	)

6462 
	#CAN_F12R1_FB19
 ((
uöt32_t
)0x00080000Ë

	)

6463 
	#CAN_F12R1_FB20
 ((
uöt32_t
)0x00100000Ë

	)

6464 
	#CAN_F12R1_FB21
 ((
uöt32_t
)0x00200000Ë

	)

6465 
	#CAN_F12R1_FB22
 ((
uöt32_t
)0x00400000Ë

	)

6466 
	#CAN_F12R1_FB23
 ((
uöt32_t
)0x00800000Ë

	)

6467 
	#CAN_F12R1_FB24
 ((
uöt32_t
)0x01000000Ë

	)

6468 
	#CAN_F12R1_FB25
 ((
uöt32_t
)0x02000000Ë

	)

6469 
	#CAN_F12R1_FB26
 ((
uöt32_t
)0x04000000Ë

	)

6470 
	#CAN_F12R1_FB27
 ((
uöt32_t
)0x08000000Ë

	)

6471 
	#CAN_F12R1_FB28
 ((
uöt32_t
)0x10000000Ë

	)

6472 
	#CAN_F12R1_FB29
 ((
uöt32_t
)0x20000000Ë

	)

6473 
	#CAN_F12R1_FB30
 ((
uöt32_t
)0x40000000Ë

	)

6474 
	#CAN_F12R1_FB31
 ((
uöt32_t
)0x80000000Ë

	)

6477 
	#CAN_F13R1_FB0
 ((
uöt32_t
)0x00000001Ë

	)

6478 
	#CAN_F13R1_FB1
 ((
uöt32_t
)0x00000002Ë

	)

6479 
	#CAN_F13R1_FB2
 ((
uöt32_t
)0x00000004Ë

	)

6480 
	#CAN_F13R1_FB3
 ((
uöt32_t
)0x00000008Ë

	)

6481 
	#CAN_F13R1_FB4
 ((
uöt32_t
)0x00000010Ë

	)

6482 
	#CAN_F13R1_FB5
 ((
uöt32_t
)0x00000020Ë

	)

6483 
	#CAN_F13R1_FB6
 ((
uöt32_t
)0x00000040Ë

	)

6484 
	#CAN_F13R1_FB7
 ((
uöt32_t
)0x00000080Ë

	)

6485 
	#CAN_F13R1_FB8
 ((
uöt32_t
)0x00000100Ë

	)

6486 
	#CAN_F13R1_FB9
 ((
uöt32_t
)0x00000200Ë

	)

6487 
	#CAN_F13R1_FB10
 ((
uöt32_t
)0x00000400Ë

	)

6488 
	#CAN_F13R1_FB11
 ((
uöt32_t
)0x00000800Ë

	)

6489 
	#CAN_F13R1_FB12
 ((
uöt32_t
)0x00001000Ë

	)

6490 
	#CAN_F13R1_FB13
 ((
uöt32_t
)0x00002000Ë

	)

6491 
	#CAN_F13R1_FB14
 ((
uöt32_t
)0x00004000Ë

	)

6492 
	#CAN_F13R1_FB15
 ((
uöt32_t
)0x00008000Ë

	)

6493 
	#CAN_F13R1_FB16
 ((
uöt32_t
)0x00010000Ë

	)

6494 
	#CAN_F13R1_FB17
 ((
uöt32_t
)0x00020000Ë

	)

6495 
	#CAN_F13R1_FB18
 ((
uöt32_t
)0x00040000Ë

	)

6496 
	#CAN_F13R1_FB19
 ((
uöt32_t
)0x00080000Ë

	)

6497 
	#CAN_F13R1_FB20
 ((
uöt32_t
)0x00100000Ë

	)

6498 
	#CAN_F13R1_FB21
 ((
uöt32_t
)0x00200000Ë

	)

6499 
	#CAN_F13R1_FB22
 ((
uöt32_t
)0x00400000Ë

	)

6500 
	#CAN_F13R1_FB23
 ((
uöt32_t
)0x00800000Ë

	)

6501 
	#CAN_F13R1_FB24
 ((
uöt32_t
)0x01000000Ë

	)

6502 
	#CAN_F13R1_FB25
 ((
uöt32_t
)0x02000000Ë

	)

6503 
	#CAN_F13R1_FB26
 ((
uöt32_t
)0x04000000Ë

	)

6504 
	#CAN_F13R1_FB27
 ((
uöt32_t
)0x08000000Ë

	)

6505 
	#CAN_F13R1_FB28
 ((
uöt32_t
)0x10000000Ë

	)

6506 
	#CAN_F13R1_FB29
 ((
uöt32_t
)0x20000000Ë

	)

6507 
	#CAN_F13R1_FB30
 ((
uöt32_t
)0x40000000Ë

	)

6508 
	#CAN_F13R1_FB31
 ((
uöt32_t
)0x80000000Ë

	)

6511 
	#CAN_F0R2_FB0
 ((
uöt32_t
)0x00000001Ë

	)

6512 
	#CAN_F0R2_FB1
 ((
uöt32_t
)0x00000002Ë

	)

6513 
	#CAN_F0R2_FB2
 ((
uöt32_t
)0x00000004Ë

	)

6514 
	#CAN_F0R2_FB3
 ((
uöt32_t
)0x00000008Ë

	)

6515 
	#CAN_F0R2_FB4
 ((
uöt32_t
)0x00000010Ë

	)

6516 
	#CAN_F0R2_FB5
 ((
uöt32_t
)0x00000020Ë

	)

6517 
	#CAN_F0R2_FB6
 ((
uöt32_t
)0x00000040Ë

	)

6518 
	#CAN_F0R2_FB7
 ((
uöt32_t
)0x00000080Ë

	)

6519 
	#CAN_F0R2_FB8
 ((
uöt32_t
)0x00000100Ë

	)

6520 
	#CAN_F0R2_FB9
 ((
uöt32_t
)0x00000200Ë

	)

6521 
	#CAN_F0R2_FB10
 ((
uöt32_t
)0x00000400Ë

	)

6522 
	#CAN_F0R2_FB11
 ((
uöt32_t
)0x00000800Ë

	)

6523 
	#CAN_F0R2_FB12
 ((
uöt32_t
)0x00001000Ë

	)

6524 
	#CAN_F0R2_FB13
 ((
uöt32_t
)0x00002000Ë

	)

6525 
	#CAN_F0R2_FB14
 ((
uöt32_t
)0x00004000Ë

	)

6526 
	#CAN_F0R2_FB15
 ((
uöt32_t
)0x00008000Ë

	)

6527 
	#CAN_F0R2_FB16
 ((
uöt32_t
)0x00010000Ë

	)

6528 
	#CAN_F0R2_FB17
 ((
uöt32_t
)0x00020000Ë

	)

6529 
	#CAN_F0R2_FB18
 ((
uöt32_t
)0x00040000Ë

	)

6530 
	#CAN_F0R2_FB19
 ((
uöt32_t
)0x00080000Ë

	)

6531 
	#CAN_F0R2_FB20
 ((
uöt32_t
)0x00100000Ë

	)

6532 
	#CAN_F0R2_FB21
 ((
uöt32_t
)0x00200000Ë

	)

6533 
	#CAN_F0R2_FB22
 ((
uöt32_t
)0x00400000Ë

	)

6534 
	#CAN_F0R2_FB23
 ((
uöt32_t
)0x00800000Ë

	)

6535 
	#CAN_F0R2_FB24
 ((
uöt32_t
)0x01000000Ë

	)

6536 
	#CAN_F0R2_FB25
 ((
uöt32_t
)0x02000000Ë

	)

6537 
	#CAN_F0R2_FB26
 ((
uöt32_t
)0x04000000Ë

	)

6538 
	#CAN_F0R2_FB27
 ((
uöt32_t
)0x08000000Ë

	)

6539 
	#CAN_F0R2_FB28
 ((
uöt32_t
)0x10000000Ë

	)

6540 
	#CAN_F0R2_FB29
 ((
uöt32_t
)0x20000000Ë

	)

6541 
	#CAN_F0R2_FB30
 ((
uöt32_t
)0x40000000Ë

	)

6542 
	#CAN_F0R2_FB31
 ((
uöt32_t
)0x80000000Ë

	)

6545 
	#CAN_F1R2_FB0
 ((
uöt32_t
)0x00000001Ë

	)

6546 
	#CAN_F1R2_FB1
 ((
uöt32_t
)0x00000002Ë

	)

6547 
	#CAN_F1R2_FB2
 ((
uöt32_t
)0x00000004Ë

	)

6548 
	#CAN_F1R2_FB3
 ((
uöt32_t
)0x00000008Ë

	)

6549 
	#CAN_F1R2_FB4
 ((
uöt32_t
)0x00000010Ë

	)

6550 
	#CAN_F1R2_FB5
 ((
uöt32_t
)0x00000020Ë

	)

6551 
	#CAN_F1R2_FB6
 ((
uöt32_t
)0x00000040Ë

	)

6552 
	#CAN_F1R2_FB7
 ((
uöt32_t
)0x00000080Ë

	)

6553 
	#CAN_F1R2_FB8
 ((
uöt32_t
)0x00000100Ë

	)

6554 
	#CAN_F1R2_FB9
 ((
uöt32_t
)0x00000200Ë

	)

6555 
	#CAN_F1R2_FB10
 ((
uöt32_t
)0x00000400Ë

	)

6556 
	#CAN_F1R2_FB11
 ((
uöt32_t
)0x00000800Ë

	)

6557 
	#CAN_F1R2_FB12
 ((
uöt32_t
)0x00001000Ë

	)

6558 
	#CAN_F1R2_FB13
 ((
uöt32_t
)0x00002000Ë

	)

6559 
	#CAN_F1R2_FB14
 ((
uöt32_t
)0x00004000Ë

	)

6560 
	#CAN_F1R2_FB15
 ((
uöt32_t
)0x00008000Ë

	)

6561 
	#CAN_F1R2_FB16
 ((
uöt32_t
)0x00010000Ë

	)

6562 
	#CAN_F1R2_FB17
 ((
uöt32_t
)0x00020000Ë

	)

6563 
	#CAN_F1R2_FB18
 ((
uöt32_t
)0x00040000Ë

	)

6564 
	#CAN_F1R2_FB19
 ((
uöt32_t
)0x00080000Ë

	)

6565 
	#CAN_F1R2_FB20
 ((
uöt32_t
)0x00100000Ë

	)

6566 
	#CAN_F1R2_FB21
 ((
uöt32_t
)0x00200000Ë

	)

6567 
	#CAN_F1R2_FB22
 ((
uöt32_t
)0x00400000Ë

	)

6568 
	#CAN_F1R2_FB23
 ((
uöt32_t
)0x00800000Ë

	)

6569 
	#CAN_F1R2_FB24
 ((
uöt32_t
)0x01000000Ë

	)

6570 
	#CAN_F1R2_FB25
 ((
uöt32_t
)0x02000000Ë

	)

6571 
	#CAN_F1R2_FB26
 ((
uöt32_t
)0x04000000Ë

	)

6572 
	#CAN_F1R2_FB27
 ((
uöt32_t
)0x08000000Ë

	)

6573 
	#CAN_F1R2_FB28
 ((
uöt32_t
)0x10000000Ë

	)

6574 
	#CAN_F1R2_FB29
 ((
uöt32_t
)0x20000000Ë

	)

6575 
	#CAN_F1R2_FB30
 ((
uöt32_t
)0x40000000Ë

	)

6576 
	#CAN_F1R2_FB31
 ((
uöt32_t
)0x80000000Ë

	)

6579 
	#CAN_F2R2_FB0
 ((
uöt32_t
)0x00000001Ë

	)

6580 
	#CAN_F2R2_FB1
 ((
uöt32_t
)0x00000002Ë

	)

6581 
	#CAN_F2R2_FB2
 ((
uöt32_t
)0x00000004Ë

	)

6582 
	#CAN_F2R2_FB3
 ((
uöt32_t
)0x00000008Ë

	)

6583 
	#CAN_F2R2_FB4
 ((
uöt32_t
)0x00000010Ë

	)

6584 
	#CAN_F2R2_FB5
 ((
uöt32_t
)0x00000020Ë

	)

6585 
	#CAN_F2R2_FB6
 ((
uöt32_t
)0x00000040Ë

	)

6586 
	#CAN_F2R2_FB7
 ((
uöt32_t
)0x00000080Ë

	)

6587 
	#CAN_F2R2_FB8
 ((
uöt32_t
)0x00000100Ë

	)

6588 
	#CAN_F2R2_FB9
 ((
uöt32_t
)0x00000200Ë

	)

6589 
	#CAN_F2R2_FB10
 ((
uöt32_t
)0x00000400Ë

	)

6590 
	#CAN_F2R2_FB11
 ((
uöt32_t
)0x00000800Ë

	)

6591 
	#CAN_F2R2_FB12
 ((
uöt32_t
)0x00001000Ë

	)

6592 
	#CAN_F2R2_FB13
 ((
uöt32_t
)0x00002000Ë

	)

6593 
	#CAN_F2R2_FB14
 ((
uöt32_t
)0x00004000Ë

	)

6594 
	#CAN_F2R2_FB15
 ((
uöt32_t
)0x00008000Ë

	)

6595 
	#CAN_F2R2_FB16
 ((
uöt32_t
)0x00010000Ë

	)

6596 
	#CAN_F2R2_FB17
 ((
uöt32_t
)0x00020000Ë

	)

6597 
	#CAN_F2R2_FB18
 ((
uöt32_t
)0x00040000Ë

	)

6598 
	#CAN_F2R2_FB19
 ((
uöt32_t
)0x00080000Ë

	)

6599 
	#CAN_F2R2_FB20
 ((
uöt32_t
)0x00100000Ë

	)

6600 
	#CAN_F2R2_FB21
 ((
uöt32_t
)0x00200000Ë

	)

6601 
	#CAN_F2R2_FB22
 ((
uöt32_t
)0x00400000Ë

	)

6602 
	#CAN_F2R2_FB23
 ((
uöt32_t
)0x00800000Ë

	)

6603 
	#CAN_F2R2_FB24
 ((
uöt32_t
)0x01000000Ë

	)

6604 
	#CAN_F2R2_FB25
 ((
uöt32_t
)0x02000000Ë

	)

6605 
	#CAN_F2R2_FB26
 ((
uöt32_t
)0x04000000Ë

	)

6606 
	#CAN_F2R2_FB27
 ((
uöt32_t
)0x08000000Ë

	)

6607 
	#CAN_F2R2_FB28
 ((
uöt32_t
)0x10000000Ë

	)

6608 
	#CAN_F2R2_FB29
 ((
uöt32_t
)0x20000000Ë

	)

6609 
	#CAN_F2R2_FB30
 ((
uöt32_t
)0x40000000Ë

	)

6610 
	#CAN_F2R2_FB31
 ((
uöt32_t
)0x80000000Ë

	)

6613 
	#CAN_F3R2_FB0
 ((
uöt32_t
)0x00000001Ë

	)

6614 
	#CAN_F3R2_FB1
 ((
uöt32_t
)0x00000002Ë

	)

6615 
	#CAN_F3R2_FB2
 ((
uöt32_t
)0x00000004Ë

	)

6616 
	#CAN_F3R2_FB3
 ((
uöt32_t
)0x00000008Ë

	)

6617 
	#CAN_F3R2_FB4
 ((
uöt32_t
)0x00000010Ë

	)

6618 
	#CAN_F3R2_FB5
 ((
uöt32_t
)0x00000020Ë

	)

6619 
	#CAN_F3R2_FB6
 ((
uöt32_t
)0x00000040Ë

	)

6620 
	#CAN_F3R2_FB7
 ((
uöt32_t
)0x00000080Ë

	)

6621 
	#CAN_F3R2_FB8
 ((
uöt32_t
)0x00000100Ë

	)

6622 
	#CAN_F3R2_FB9
 ((
uöt32_t
)0x00000200Ë

	)

6623 
	#CAN_F3R2_FB10
 ((
uöt32_t
)0x00000400Ë

	)

6624 
	#CAN_F3R2_FB11
 ((
uöt32_t
)0x00000800Ë

	)

6625 
	#CAN_F3R2_FB12
 ((
uöt32_t
)0x00001000Ë

	)

6626 
	#CAN_F3R2_FB13
 ((
uöt32_t
)0x00002000Ë

	)

6627 
	#CAN_F3R2_FB14
 ((
uöt32_t
)0x00004000Ë

	)

6628 
	#CAN_F3R2_FB15
 ((
uöt32_t
)0x00008000Ë

	)

6629 
	#CAN_F3R2_FB16
 ((
uöt32_t
)0x00010000Ë

	)

6630 
	#CAN_F3R2_FB17
 ((
uöt32_t
)0x00020000Ë

	)

6631 
	#CAN_F3R2_FB18
 ((
uöt32_t
)0x00040000Ë

	)

6632 
	#CAN_F3R2_FB19
 ((
uöt32_t
)0x00080000Ë

	)

6633 
	#CAN_F3R2_FB20
 ((
uöt32_t
)0x00100000Ë

	)

6634 
	#CAN_F3R2_FB21
 ((
uöt32_t
)0x00200000Ë

	)

6635 
	#CAN_F3R2_FB22
 ((
uöt32_t
)0x00400000Ë

	)

6636 
	#CAN_F3R2_FB23
 ((
uöt32_t
)0x00800000Ë

	)

6637 
	#CAN_F3R2_FB24
 ((
uöt32_t
)0x01000000Ë

	)

6638 
	#CAN_F3R2_FB25
 ((
uöt32_t
)0x02000000Ë

	)

6639 
	#CAN_F3R2_FB26
 ((
uöt32_t
)0x04000000Ë

	)

6640 
	#CAN_F3R2_FB27
 ((
uöt32_t
)0x08000000Ë

	)

6641 
	#CAN_F3R2_FB28
 ((
uöt32_t
)0x10000000Ë

	)

6642 
	#CAN_F3R2_FB29
 ((
uöt32_t
)0x20000000Ë

	)

6643 
	#CAN_F3R2_FB30
 ((
uöt32_t
)0x40000000Ë

	)

6644 
	#CAN_F3R2_FB31
 ((
uöt32_t
)0x80000000Ë

	)

6647 
	#CAN_F4R2_FB0
 ((
uöt32_t
)0x00000001Ë

	)

6648 
	#CAN_F4R2_FB1
 ((
uöt32_t
)0x00000002Ë

	)

6649 
	#CAN_F4R2_FB2
 ((
uöt32_t
)0x00000004Ë

	)

6650 
	#CAN_F4R2_FB3
 ((
uöt32_t
)0x00000008Ë

	)

6651 
	#CAN_F4R2_FB4
 ((
uöt32_t
)0x00000010Ë

	)

6652 
	#CAN_F4R2_FB5
 ((
uöt32_t
)0x00000020Ë

	)

6653 
	#CAN_F4R2_FB6
 ((
uöt32_t
)0x00000040Ë

	)

6654 
	#CAN_F4R2_FB7
 ((
uöt32_t
)0x00000080Ë

	)

6655 
	#CAN_F4R2_FB8
 ((
uöt32_t
)0x00000100Ë

	)

6656 
	#CAN_F4R2_FB9
 ((
uöt32_t
)0x00000200Ë

	)

6657 
	#CAN_F4R2_FB10
 ((
uöt32_t
)0x00000400Ë

	)

6658 
	#CAN_F4R2_FB11
 ((
uöt32_t
)0x00000800Ë

	)

6659 
	#CAN_F4R2_FB12
 ((
uöt32_t
)0x00001000Ë

	)

6660 
	#CAN_F4R2_FB13
 ((
uöt32_t
)0x00002000Ë

	)

6661 
	#CAN_F4R2_FB14
 ((
uöt32_t
)0x00004000Ë

	)

6662 
	#CAN_F4R2_FB15
 ((
uöt32_t
)0x00008000Ë

	)

6663 
	#CAN_F4R2_FB16
 ((
uöt32_t
)0x00010000Ë

	)

6664 
	#CAN_F4R2_FB17
 ((
uöt32_t
)0x00020000Ë

	)

6665 
	#CAN_F4R2_FB18
 ((
uöt32_t
)0x00040000Ë

	)

6666 
	#CAN_F4R2_FB19
 ((
uöt32_t
)0x00080000Ë

	)

6667 
	#CAN_F4R2_FB20
 ((
uöt32_t
)0x00100000Ë

	)

6668 
	#CAN_F4R2_FB21
 ((
uöt32_t
)0x00200000Ë

	)

6669 
	#CAN_F4R2_FB22
 ((
uöt32_t
)0x00400000Ë

	)

6670 
	#CAN_F4R2_FB23
 ((
uöt32_t
)0x00800000Ë

	)

6671 
	#CAN_F4R2_FB24
 ((
uöt32_t
)0x01000000Ë

	)

6672 
	#CAN_F4R2_FB25
 ((
uöt32_t
)0x02000000Ë

	)

6673 
	#CAN_F4R2_FB26
 ((
uöt32_t
)0x04000000Ë

	)

6674 
	#CAN_F4R2_FB27
 ((
uöt32_t
)0x08000000Ë

	)

6675 
	#CAN_F4R2_FB28
 ((
uöt32_t
)0x10000000Ë

	)

6676 
	#CAN_F4R2_FB29
 ((
uöt32_t
)0x20000000Ë

	)

6677 
	#CAN_F4R2_FB30
 ((
uöt32_t
)0x40000000Ë

	)

6678 
	#CAN_F4R2_FB31
 ((
uöt32_t
)0x80000000Ë

	)

6681 
	#CAN_F5R2_FB0
 ((
uöt32_t
)0x00000001Ë

	)

6682 
	#CAN_F5R2_FB1
 ((
uöt32_t
)0x00000002Ë

	)

6683 
	#CAN_F5R2_FB2
 ((
uöt32_t
)0x00000004Ë

	)

6684 
	#CAN_F5R2_FB3
 ((
uöt32_t
)0x00000008Ë

	)

6685 
	#CAN_F5R2_FB4
 ((
uöt32_t
)0x00000010Ë

	)

6686 
	#CAN_F5R2_FB5
 ((
uöt32_t
)0x00000020Ë

	)

6687 
	#CAN_F5R2_FB6
 ((
uöt32_t
)0x00000040Ë

	)

6688 
	#CAN_F5R2_FB7
 ((
uöt32_t
)0x00000080Ë

	)

6689 
	#CAN_F5R2_FB8
 ((
uöt32_t
)0x00000100Ë

	)

6690 
	#CAN_F5R2_FB9
 ((
uöt32_t
)0x00000200Ë

	)

6691 
	#CAN_F5R2_FB10
 ((
uöt32_t
)0x00000400Ë

	)

6692 
	#CAN_F5R2_FB11
 ((
uöt32_t
)0x00000800Ë

	)

6693 
	#CAN_F5R2_FB12
 ((
uöt32_t
)0x00001000Ë

	)

6694 
	#CAN_F5R2_FB13
 ((
uöt32_t
)0x00002000Ë

	)

6695 
	#CAN_F5R2_FB14
 ((
uöt32_t
)0x00004000Ë

	)

6696 
	#CAN_F5R2_FB15
 ((
uöt32_t
)0x00008000Ë

	)

6697 
	#CAN_F5R2_FB16
 ((
uöt32_t
)0x00010000Ë

	)

6698 
	#CAN_F5R2_FB17
 ((
uöt32_t
)0x00020000Ë

	)

6699 
	#CAN_F5R2_FB18
 ((
uöt32_t
)0x00040000Ë

	)

6700 
	#CAN_F5R2_FB19
 ((
uöt32_t
)0x00080000Ë

	)

6701 
	#CAN_F5R2_FB20
 ((
uöt32_t
)0x00100000Ë

	)

6702 
	#CAN_F5R2_FB21
 ((
uöt32_t
)0x00200000Ë

	)

6703 
	#CAN_F5R2_FB22
 ((
uöt32_t
)0x00400000Ë

	)

6704 
	#CAN_F5R2_FB23
 ((
uöt32_t
)0x00800000Ë

	)

6705 
	#CAN_F5R2_FB24
 ((
uöt32_t
)0x01000000Ë

	)

6706 
	#CAN_F5R2_FB25
 ((
uöt32_t
)0x02000000Ë

	)

6707 
	#CAN_F5R2_FB26
 ((
uöt32_t
)0x04000000Ë

	)

6708 
	#CAN_F5R2_FB27
 ((
uöt32_t
)0x08000000Ë

	)

6709 
	#CAN_F5R2_FB28
 ((
uöt32_t
)0x10000000Ë

	)

6710 
	#CAN_F5R2_FB29
 ((
uöt32_t
)0x20000000Ë

	)

6711 
	#CAN_F5R2_FB30
 ((
uöt32_t
)0x40000000Ë

	)

6712 
	#CAN_F5R2_FB31
 ((
uöt32_t
)0x80000000Ë

	)

6715 
	#CAN_F6R2_FB0
 ((
uöt32_t
)0x00000001Ë

	)

6716 
	#CAN_F6R2_FB1
 ((
uöt32_t
)0x00000002Ë

	)

6717 
	#CAN_F6R2_FB2
 ((
uöt32_t
)0x00000004Ë

	)

6718 
	#CAN_F6R2_FB3
 ((
uöt32_t
)0x00000008Ë

	)

6719 
	#CAN_F6R2_FB4
 ((
uöt32_t
)0x00000010Ë

	)

6720 
	#CAN_F6R2_FB5
 ((
uöt32_t
)0x00000020Ë

	)

6721 
	#CAN_F6R2_FB6
 ((
uöt32_t
)0x00000040Ë

	)

6722 
	#CAN_F6R2_FB7
 ((
uöt32_t
)0x00000080Ë

	)

6723 
	#CAN_F6R2_FB8
 ((
uöt32_t
)0x00000100Ë

	)

6724 
	#CAN_F6R2_FB9
 ((
uöt32_t
)0x00000200Ë

	)

6725 
	#CAN_F6R2_FB10
 ((
uöt32_t
)0x00000400Ë

	)

6726 
	#CAN_F6R2_FB11
 ((
uöt32_t
)0x00000800Ë

	)

6727 
	#CAN_F6R2_FB12
 ((
uöt32_t
)0x00001000Ë

	)

6728 
	#CAN_F6R2_FB13
 ((
uöt32_t
)0x00002000Ë

	)

6729 
	#CAN_F6R2_FB14
 ((
uöt32_t
)0x00004000Ë

	)

6730 
	#CAN_F6R2_FB15
 ((
uöt32_t
)0x00008000Ë

	)

6731 
	#CAN_F6R2_FB16
 ((
uöt32_t
)0x00010000Ë

	)

6732 
	#CAN_F6R2_FB17
 ((
uöt32_t
)0x00020000Ë

	)

6733 
	#CAN_F6R2_FB18
 ((
uöt32_t
)0x00040000Ë

	)

6734 
	#CAN_F6R2_FB19
 ((
uöt32_t
)0x00080000Ë

	)

6735 
	#CAN_F6R2_FB20
 ((
uöt32_t
)0x00100000Ë

	)

6736 
	#CAN_F6R2_FB21
 ((
uöt32_t
)0x00200000Ë

	)

6737 
	#CAN_F6R2_FB22
 ((
uöt32_t
)0x00400000Ë

	)

6738 
	#CAN_F6R2_FB23
 ((
uöt32_t
)0x00800000Ë

	)

6739 
	#CAN_F6R2_FB24
 ((
uöt32_t
)0x01000000Ë

	)

6740 
	#CAN_F6R2_FB25
 ((
uöt32_t
)0x02000000Ë

	)

6741 
	#CAN_F6R2_FB26
 ((
uöt32_t
)0x04000000Ë

	)

6742 
	#CAN_F6R2_FB27
 ((
uöt32_t
)0x08000000Ë

	)

6743 
	#CAN_F6R2_FB28
 ((
uöt32_t
)0x10000000Ë

	)

6744 
	#CAN_F6R2_FB29
 ((
uöt32_t
)0x20000000Ë

	)

6745 
	#CAN_F6R2_FB30
 ((
uöt32_t
)0x40000000Ë

	)

6746 
	#CAN_F6R2_FB31
 ((
uöt32_t
)0x80000000Ë

	)

6749 
	#CAN_F7R2_FB0
 ((
uöt32_t
)0x00000001Ë

	)

6750 
	#CAN_F7R2_FB1
 ((
uöt32_t
)0x00000002Ë

	)

6751 
	#CAN_F7R2_FB2
 ((
uöt32_t
)0x00000004Ë

	)

6752 
	#CAN_F7R2_FB3
 ((
uöt32_t
)0x00000008Ë

	)

6753 
	#CAN_F7R2_FB4
 ((
uöt32_t
)0x00000010Ë

	)

6754 
	#CAN_F7R2_FB5
 ((
uöt32_t
)0x00000020Ë

	)

6755 
	#CAN_F7R2_FB6
 ((
uöt32_t
)0x00000040Ë

	)

6756 
	#CAN_F7R2_FB7
 ((
uöt32_t
)0x00000080Ë

	)

6757 
	#CAN_F7R2_FB8
 ((
uöt32_t
)0x00000100Ë

	)

6758 
	#CAN_F7R2_FB9
 ((
uöt32_t
)0x00000200Ë

	)

6759 
	#CAN_F7R2_FB10
 ((
uöt32_t
)0x00000400Ë

	)

6760 
	#CAN_F7R2_FB11
 ((
uöt32_t
)0x00000800Ë

	)

6761 
	#CAN_F7R2_FB12
 ((
uöt32_t
)0x00001000Ë

	)

6762 
	#CAN_F7R2_FB13
 ((
uöt32_t
)0x00002000Ë

	)

6763 
	#CAN_F7R2_FB14
 ((
uöt32_t
)0x00004000Ë

	)

6764 
	#CAN_F7R2_FB15
 ((
uöt32_t
)0x00008000Ë

	)

6765 
	#CAN_F7R2_FB16
 ((
uöt32_t
)0x00010000Ë

	)

6766 
	#CAN_F7R2_FB17
 ((
uöt32_t
)0x00020000Ë

	)

6767 
	#CAN_F7R2_FB18
 ((
uöt32_t
)0x00040000Ë

	)

6768 
	#CAN_F7R2_FB19
 ((
uöt32_t
)0x00080000Ë

	)

6769 
	#CAN_F7R2_FB20
 ((
uöt32_t
)0x00100000Ë

	)

6770 
	#CAN_F7R2_FB21
 ((
uöt32_t
)0x00200000Ë

	)

6771 
	#CAN_F7R2_FB22
 ((
uöt32_t
)0x00400000Ë

	)

6772 
	#CAN_F7R2_FB23
 ((
uöt32_t
)0x00800000Ë

	)

6773 
	#CAN_F7R2_FB24
 ((
uöt32_t
)0x01000000Ë

	)

6774 
	#CAN_F7R2_FB25
 ((
uöt32_t
)0x02000000Ë

	)

6775 
	#CAN_F7R2_FB26
 ((
uöt32_t
)0x04000000Ë

	)

6776 
	#CAN_F7R2_FB27
 ((
uöt32_t
)0x08000000Ë

	)

6777 
	#CAN_F7R2_FB28
 ((
uöt32_t
)0x10000000Ë

	)

6778 
	#CAN_F7R2_FB29
 ((
uöt32_t
)0x20000000Ë

	)

6779 
	#CAN_F7R2_FB30
 ((
uöt32_t
)0x40000000Ë

	)

6780 
	#CAN_F7R2_FB31
 ((
uöt32_t
)0x80000000Ë

	)

6783 
	#CAN_F8R2_FB0
 ((
uöt32_t
)0x00000001Ë

	)

6784 
	#CAN_F8R2_FB1
 ((
uöt32_t
)0x00000002Ë

	)

6785 
	#CAN_F8R2_FB2
 ((
uöt32_t
)0x00000004Ë

	)

6786 
	#CAN_F8R2_FB3
 ((
uöt32_t
)0x00000008Ë

	)

6787 
	#CAN_F8R2_FB4
 ((
uöt32_t
)0x00000010Ë

	)

6788 
	#CAN_F8R2_FB5
 ((
uöt32_t
)0x00000020Ë

	)

6789 
	#CAN_F8R2_FB6
 ((
uöt32_t
)0x00000040Ë

	)

6790 
	#CAN_F8R2_FB7
 ((
uöt32_t
)0x00000080Ë

	)

6791 
	#CAN_F8R2_FB8
 ((
uöt32_t
)0x00000100Ë

	)

6792 
	#CAN_F8R2_FB9
 ((
uöt32_t
)0x00000200Ë

	)

6793 
	#CAN_F8R2_FB10
 ((
uöt32_t
)0x00000400Ë

	)

6794 
	#CAN_F8R2_FB11
 ((
uöt32_t
)0x00000800Ë

	)

6795 
	#CAN_F8R2_FB12
 ((
uöt32_t
)0x00001000Ë

	)

6796 
	#CAN_F8R2_FB13
 ((
uöt32_t
)0x00002000Ë

	)

6797 
	#CAN_F8R2_FB14
 ((
uöt32_t
)0x00004000Ë

	)

6798 
	#CAN_F8R2_FB15
 ((
uöt32_t
)0x00008000Ë

	)

6799 
	#CAN_F8R2_FB16
 ((
uöt32_t
)0x00010000Ë

	)

6800 
	#CAN_F8R2_FB17
 ((
uöt32_t
)0x00020000Ë

	)

6801 
	#CAN_F8R2_FB18
 ((
uöt32_t
)0x00040000Ë

	)

6802 
	#CAN_F8R2_FB19
 ((
uöt32_t
)0x00080000Ë

	)

6803 
	#CAN_F8R2_FB20
 ((
uöt32_t
)0x00100000Ë

	)

6804 
	#CAN_F8R2_FB21
 ((
uöt32_t
)0x00200000Ë

	)

6805 
	#CAN_F8R2_FB22
 ((
uöt32_t
)0x00400000Ë

	)

6806 
	#CAN_F8R2_FB23
 ((
uöt32_t
)0x00800000Ë

	)

6807 
	#CAN_F8R2_FB24
 ((
uöt32_t
)0x01000000Ë

	)

6808 
	#CAN_F8R2_FB25
 ((
uöt32_t
)0x02000000Ë

	)

6809 
	#CAN_F8R2_FB26
 ((
uöt32_t
)0x04000000Ë

	)

6810 
	#CAN_F8R2_FB27
 ((
uöt32_t
)0x08000000Ë

	)

6811 
	#CAN_F8R2_FB28
 ((
uöt32_t
)0x10000000Ë

	)

6812 
	#CAN_F8R2_FB29
 ((
uöt32_t
)0x20000000Ë

	)

6813 
	#CAN_F8R2_FB30
 ((
uöt32_t
)0x40000000Ë

	)

6814 
	#CAN_F8R2_FB31
 ((
uöt32_t
)0x80000000Ë

	)

6817 
	#CAN_F9R2_FB0
 ((
uöt32_t
)0x00000001Ë

	)

6818 
	#CAN_F9R2_FB1
 ((
uöt32_t
)0x00000002Ë

	)

6819 
	#CAN_F9R2_FB2
 ((
uöt32_t
)0x00000004Ë

	)

6820 
	#CAN_F9R2_FB3
 ((
uöt32_t
)0x00000008Ë

	)

6821 
	#CAN_F9R2_FB4
 ((
uöt32_t
)0x00000010Ë

	)

6822 
	#CAN_F9R2_FB5
 ((
uöt32_t
)0x00000020Ë

	)

6823 
	#CAN_F9R2_FB6
 ((
uöt32_t
)0x00000040Ë

	)

6824 
	#CAN_F9R2_FB7
 ((
uöt32_t
)0x00000080Ë

	)

6825 
	#CAN_F9R2_FB8
 ((
uöt32_t
)0x00000100Ë

	)

6826 
	#CAN_F9R2_FB9
 ((
uöt32_t
)0x00000200Ë

	)

6827 
	#CAN_F9R2_FB10
 ((
uöt32_t
)0x00000400Ë

	)

6828 
	#CAN_F9R2_FB11
 ((
uöt32_t
)0x00000800Ë

	)

6829 
	#CAN_F9R2_FB12
 ((
uöt32_t
)0x00001000Ë

	)

6830 
	#CAN_F9R2_FB13
 ((
uöt32_t
)0x00002000Ë

	)

6831 
	#CAN_F9R2_FB14
 ((
uöt32_t
)0x00004000Ë

	)

6832 
	#CAN_F9R2_FB15
 ((
uöt32_t
)0x00008000Ë

	)

6833 
	#CAN_F9R2_FB16
 ((
uöt32_t
)0x00010000Ë

	)

6834 
	#CAN_F9R2_FB17
 ((
uöt32_t
)0x00020000Ë

	)

6835 
	#CAN_F9R2_FB18
 ((
uöt32_t
)0x00040000Ë

	)

6836 
	#CAN_F9R2_FB19
 ((
uöt32_t
)0x00080000Ë

	)

6837 
	#CAN_F9R2_FB20
 ((
uöt32_t
)0x00100000Ë

	)

6838 
	#CAN_F9R2_FB21
 ((
uöt32_t
)0x00200000Ë

	)

6839 
	#CAN_F9R2_FB22
 ((
uöt32_t
)0x00400000Ë

	)

6840 
	#CAN_F9R2_FB23
 ((
uöt32_t
)0x00800000Ë

	)

6841 
	#CAN_F9R2_FB24
 ((
uöt32_t
)0x01000000Ë

	)

6842 
	#CAN_F9R2_FB25
 ((
uöt32_t
)0x02000000Ë

	)

6843 
	#CAN_F9R2_FB26
 ((
uöt32_t
)0x04000000Ë

	)

6844 
	#CAN_F9R2_FB27
 ((
uöt32_t
)0x08000000Ë

	)

6845 
	#CAN_F9R2_FB28
 ((
uöt32_t
)0x10000000Ë

	)

6846 
	#CAN_F9R2_FB29
 ((
uöt32_t
)0x20000000Ë

	)

6847 
	#CAN_F9R2_FB30
 ((
uöt32_t
)0x40000000Ë

	)

6848 
	#CAN_F9R2_FB31
 ((
uöt32_t
)0x80000000Ë

	)

6851 
	#CAN_F10R2_FB0
 ((
uöt32_t
)0x00000001Ë

	)

6852 
	#CAN_F10R2_FB1
 ((
uöt32_t
)0x00000002Ë

	)

6853 
	#CAN_F10R2_FB2
 ((
uöt32_t
)0x00000004Ë

	)

6854 
	#CAN_F10R2_FB3
 ((
uöt32_t
)0x00000008Ë

	)

6855 
	#CAN_F10R2_FB4
 ((
uöt32_t
)0x00000010Ë

	)

6856 
	#CAN_F10R2_FB5
 ((
uöt32_t
)0x00000020Ë

	)

6857 
	#CAN_F10R2_FB6
 ((
uöt32_t
)0x00000040Ë

	)

6858 
	#CAN_F10R2_FB7
 ((
uöt32_t
)0x00000080Ë

	)

6859 
	#CAN_F10R2_FB8
 ((
uöt32_t
)0x00000100Ë

	)

6860 
	#CAN_F10R2_FB9
 ((
uöt32_t
)0x00000200Ë

	)

6861 
	#CAN_F10R2_FB10
 ((
uöt32_t
)0x00000400Ë

	)

6862 
	#CAN_F10R2_FB11
 ((
uöt32_t
)0x00000800Ë

	)

6863 
	#CAN_F10R2_FB12
 ((
uöt32_t
)0x00001000Ë

	)

6864 
	#CAN_F10R2_FB13
 ((
uöt32_t
)0x00002000Ë

	)

6865 
	#CAN_F10R2_FB14
 ((
uöt32_t
)0x00004000Ë

	)

6866 
	#CAN_F10R2_FB15
 ((
uöt32_t
)0x00008000Ë

	)

6867 
	#CAN_F10R2_FB16
 ((
uöt32_t
)0x00010000Ë

	)

6868 
	#CAN_F10R2_FB17
 ((
uöt32_t
)0x00020000Ë

	)

6869 
	#CAN_F10R2_FB18
 ((
uöt32_t
)0x00040000Ë

	)

6870 
	#CAN_F10R2_FB19
 ((
uöt32_t
)0x00080000Ë

	)

6871 
	#CAN_F10R2_FB20
 ((
uöt32_t
)0x00100000Ë

	)

6872 
	#CAN_F10R2_FB21
 ((
uöt32_t
)0x00200000Ë

	)

6873 
	#CAN_F10R2_FB22
 ((
uöt32_t
)0x00400000Ë

	)

6874 
	#CAN_F10R2_FB23
 ((
uöt32_t
)0x00800000Ë

	)

6875 
	#CAN_F10R2_FB24
 ((
uöt32_t
)0x01000000Ë

	)

6876 
	#CAN_F10R2_FB25
 ((
uöt32_t
)0x02000000Ë

	)

6877 
	#CAN_F10R2_FB26
 ((
uöt32_t
)0x04000000Ë

	)

6878 
	#CAN_F10R2_FB27
 ((
uöt32_t
)0x08000000Ë

	)

6879 
	#CAN_F10R2_FB28
 ((
uöt32_t
)0x10000000Ë

	)

6880 
	#CAN_F10R2_FB29
 ((
uöt32_t
)0x20000000Ë

	)

6881 
	#CAN_F10R2_FB30
 ((
uöt32_t
)0x40000000Ë

	)

6882 
	#CAN_F10R2_FB31
 ((
uöt32_t
)0x80000000Ë

	)

6885 
	#CAN_F11R2_FB0
 ((
uöt32_t
)0x00000001Ë

	)

6886 
	#CAN_F11R2_FB1
 ((
uöt32_t
)0x00000002Ë

	)

6887 
	#CAN_F11R2_FB2
 ((
uöt32_t
)0x00000004Ë

	)

6888 
	#CAN_F11R2_FB3
 ((
uöt32_t
)0x00000008Ë

	)

6889 
	#CAN_F11R2_FB4
 ((
uöt32_t
)0x00000010Ë

	)

6890 
	#CAN_F11R2_FB5
 ((
uöt32_t
)0x00000020Ë

	)

6891 
	#CAN_F11R2_FB6
 ((
uöt32_t
)0x00000040Ë

	)

6892 
	#CAN_F11R2_FB7
 ((
uöt32_t
)0x00000080Ë

	)

6893 
	#CAN_F11R2_FB8
 ((
uöt32_t
)0x00000100Ë

	)

6894 
	#CAN_F11R2_FB9
 ((
uöt32_t
)0x00000200Ë

	)

6895 
	#CAN_F11R2_FB10
 ((
uöt32_t
)0x00000400Ë

	)

6896 
	#CAN_F11R2_FB11
 ((
uöt32_t
)0x00000800Ë

	)

6897 
	#CAN_F11R2_FB12
 ((
uöt32_t
)0x00001000Ë

	)

6898 
	#CAN_F11R2_FB13
 ((
uöt32_t
)0x00002000Ë

	)

6899 
	#CAN_F11R2_FB14
 ((
uöt32_t
)0x00004000Ë

	)

6900 
	#CAN_F11R2_FB15
 ((
uöt32_t
)0x00008000Ë

	)

6901 
	#CAN_F11R2_FB16
 ((
uöt32_t
)0x00010000Ë

	)

6902 
	#CAN_F11R2_FB17
 ((
uöt32_t
)0x00020000Ë

	)

6903 
	#CAN_F11R2_FB18
 ((
uöt32_t
)0x00040000Ë

	)

6904 
	#CAN_F11R2_FB19
 ((
uöt32_t
)0x00080000Ë

	)

6905 
	#CAN_F11R2_FB20
 ((
uöt32_t
)0x00100000Ë

	)

6906 
	#CAN_F11R2_FB21
 ((
uöt32_t
)0x00200000Ë

	)

6907 
	#CAN_F11R2_FB22
 ((
uöt32_t
)0x00400000Ë

	)

6908 
	#CAN_F11R2_FB23
 ((
uöt32_t
)0x00800000Ë

	)

6909 
	#CAN_F11R2_FB24
 ((
uöt32_t
)0x01000000Ë

	)

6910 
	#CAN_F11R2_FB25
 ((
uöt32_t
)0x02000000Ë

	)

6911 
	#CAN_F11R2_FB26
 ((
uöt32_t
)0x04000000Ë

	)

6912 
	#CAN_F11R2_FB27
 ((
uöt32_t
)0x08000000Ë

	)

6913 
	#CAN_F11R2_FB28
 ((
uöt32_t
)0x10000000Ë

	)

6914 
	#CAN_F11R2_FB29
 ((
uöt32_t
)0x20000000Ë

	)

6915 
	#CAN_F11R2_FB30
 ((
uöt32_t
)0x40000000Ë

	)

6916 
	#CAN_F11R2_FB31
 ((
uöt32_t
)0x80000000Ë

	)

6919 
	#CAN_F12R2_FB0
 ((
uöt32_t
)0x00000001Ë

	)

6920 
	#CAN_F12R2_FB1
 ((
uöt32_t
)0x00000002Ë

	)

6921 
	#CAN_F12R2_FB2
 ((
uöt32_t
)0x00000004Ë

	)

6922 
	#CAN_F12R2_FB3
 ((
uöt32_t
)0x00000008Ë

	)

6923 
	#CAN_F12R2_FB4
 ((
uöt32_t
)0x00000010Ë

	)

6924 
	#CAN_F12R2_FB5
 ((
uöt32_t
)0x00000020Ë

	)

6925 
	#CAN_F12R2_FB6
 ((
uöt32_t
)0x00000040Ë

	)

6926 
	#CAN_F12R2_FB7
 ((
uöt32_t
)0x00000080Ë

	)

6927 
	#CAN_F12R2_FB8
 ((
uöt32_t
)0x00000100Ë

	)

6928 
	#CAN_F12R2_FB9
 ((
uöt32_t
)0x00000200Ë

	)

6929 
	#CAN_F12R2_FB10
 ((
uöt32_t
)0x00000400Ë

	)

6930 
	#CAN_F12R2_FB11
 ((
uöt32_t
)0x00000800Ë

	)

6931 
	#CAN_F12R2_FB12
 ((
uöt32_t
)0x00001000Ë

	)

6932 
	#CAN_F12R2_FB13
 ((
uöt32_t
)0x00002000Ë

	)

6933 
	#CAN_F12R2_FB14
 ((
uöt32_t
)0x00004000Ë

	)

6934 
	#CAN_F12R2_FB15
 ((
uöt32_t
)0x00008000Ë

	)

6935 
	#CAN_F12R2_FB16
 ((
uöt32_t
)0x00010000Ë

	)

6936 
	#CAN_F12R2_FB17
 ((
uöt32_t
)0x00020000Ë

	)

6937 
	#CAN_F12R2_FB18
 ((
uöt32_t
)0x00040000Ë

	)

6938 
	#CAN_F12R2_FB19
 ((
uöt32_t
)0x00080000Ë

	)

6939 
	#CAN_F12R2_FB20
 ((
uöt32_t
)0x00100000Ë

	)

6940 
	#CAN_F12R2_FB21
 ((
uöt32_t
)0x00200000Ë

	)

6941 
	#CAN_F12R2_FB22
 ((
uöt32_t
)0x00400000Ë

	)

6942 
	#CAN_F12R2_FB23
 ((
uöt32_t
)0x00800000Ë

	)

6943 
	#CAN_F12R2_FB24
 ((
uöt32_t
)0x01000000Ë

	)

6944 
	#CAN_F12R2_FB25
 ((
uöt32_t
)0x02000000Ë

	)

6945 
	#CAN_F12R2_FB26
 ((
uöt32_t
)0x04000000Ë

	)

6946 
	#CAN_F12R2_FB27
 ((
uöt32_t
)0x08000000Ë

	)

6947 
	#CAN_F12R2_FB28
 ((
uöt32_t
)0x10000000Ë

	)

6948 
	#CAN_F12R2_FB29
 ((
uöt32_t
)0x20000000Ë

	)

6949 
	#CAN_F12R2_FB30
 ((
uöt32_t
)0x40000000Ë

	)

6950 
	#CAN_F12R2_FB31
 ((
uöt32_t
)0x80000000Ë

	)

6953 
	#CAN_F13R2_FB0
 ((
uöt32_t
)0x00000001Ë

	)

6954 
	#CAN_F13R2_FB1
 ((
uöt32_t
)0x00000002Ë

	)

6955 
	#CAN_F13R2_FB2
 ((
uöt32_t
)0x00000004Ë

	)

6956 
	#CAN_F13R2_FB3
 ((
uöt32_t
)0x00000008Ë

	)

6957 
	#CAN_F13R2_FB4
 ((
uöt32_t
)0x00000010Ë

	)

6958 
	#CAN_F13R2_FB5
 ((
uöt32_t
)0x00000020Ë

	)

6959 
	#CAN_F13R2_FB6
 ((
uöt32_t
)0x00000040Ë

	)

6960 
	#CAN_F13R2_FB7
 ((
uöt32_t
)0x00000080Ë

	)

6961 
	#CAN_F13R2_FB8
 ((
uöt32_t
)0x00000100Ë

	)

6962 
	#CAN_F13R2_FB9
 ((
uöt32_t
)0x00000200Ë

	)

6963 
	#CAN_F13R2_FB10
 ((
uöt32_t
)0x00000400Ë

	)

6964 
	#CAN_F13R2_FB11
 ((
uöt32_t
)0x00000800Ë

	)

6965 
	#CAN_F13R2_FB12
 ((
uöt32_t
)0x00001000Ë

	)

6966 
	#CAN_F13R2_FB13
 ((
uöt32_t
)0x00002000Ë

	)

6967 
	#CAN_F13R2_FB14
 ((
uöt32_t
)0x00004000Ë

	)

6968 
	#CAN_F13R2_FB15
 ((
uöt32_t
)0x00008000Ë

	)

6969 
	#CAN_F13R2_FB16
 ((
uöt32_t
)0x00010000Ë

	)

6970 
	#CAN_F13R2_FB17
 ((
uöt32_t
)0x00020000Ë

	)

6971 
	#CAN_F13R2_FB18
 ((
uöt32_t
)0x00040000Ë

	)

6972 
	#CAN_F13R2_FB19
 ((
uöt32_t
)0x00080000Ë

	)

6973 
	#CAN_F13R2_FB20
 ((
uöt32_t
)0x00100000Ë

	)

6974 
	#CAN_F13R2_FB21
 ((
uöt32_t
)0x00200000Ë

	)

6975 
	#CAN_F13R2_FB22
 ((
uöt32_t
)0x00400000Ë

	)

6976 
	#CAN_F13R2_FB23
 ((
uöt32_t
)0x00800000Ë

	)

6977 
	#CAN_F13R2_FB24
 ((
uöt32_t
)0x01000000Ë

	)

6978 
	#CAN_F13R2_FB25
 ((
uöt32_t
)0x02000000Ë

	)

6979 
	#CAN_F13R2_FB26
 ((
uöt32_t
)0x04000000Ë

	)

6980 
	#CAN_F13R2_FB27
 ((
uöt32_t
)0x08000000Ë

	)

6981 
	#CAN_F13R2_FB28
 ((
uöt32_t
)0x10000000Ë

	)

6982 
	#CAN_F13R2_FB29
 ((
uöt32_t
)0x20000000Ë

	)

6983 
	#CAN_F13R2_FB30
 ((
uöt32_t
)0x40000000Ë

	)

6984 
	#CAN_F13R2_FB31
 ((
uöt32_t
)0x80000000Ë

	)

6993 
	#SPI_CR1_CPHA
 ((
uöt16_t
)0x0001Ë

	)

6994 
	#SPI_CR1_CPOL
 ((
uöt16_t
)0x0002Ë

	)

6995 
	#SPI_CR1_MSTR
 ((
uöt16_t
)0x0004Ë

	)

6997 
	#SPI_CR1_BR
 ((
uöt16_t
)0x0038Ë

	)

6998 
	#SPI_CR1_BR_0
 ((
uöt16_t
)0x0008Ë

	)

6999 
	#SPI_CR1_BR_1
 ((
uöt16_t
)0x0010Ë

	)

7000 
	#SPI_CR1_BR_2
 ((
uöt16_t
)0x0020Ë

	)

7002 
	#SPI_CR1_SPE
 ((
uöt16_t
)0x0040Ë

	)

7003 
	#SPI_CR1_LSBFIRST
 ((
uöt16_t
)0x0080Ë

	)

7004 
	#SPI_CR1_SSI
 ((
uöt16_t
)0x0100Ë

	)

7005 
	#SPI_CR1_SSM
 ((
uöt16_t
)0x0200Ë

	)

7006 
	#SPI_CR1_RXONLY
 ((
uöt16_t
)0x0400Ë

	)

7007 
	#SPI_CR1_DFF
 ((
uöt16_t
)0x0800Ë

	)

7008 
	#SPI_CR1_CRCNEXT
 ((
uöt16_t
)0x1000Ë

	)

7009 
	#SPI_CR1_CRCEN
 ((
uöt16_t
)0x2000Ë

	)

7010 
	#SPI_CR1_BIDIOE
 ((
uöt16_t
)0x4000Ë

	)

7011 
	#SPI_CR1_BIDIMODE
 ((
uöt16_t
)0x8000Ë

	)

7014 
	#SPI_CR2_RXDMAEN
 ((
uöt8_t
)0x01Ë

	)

7015 
	#SPI_CR2_TXDMAEN
 ((
uöt8_t
)0x02Ë

	)

7016 
	#SPI_CR2_SSOE
 ((
uöt8_t
)0x04Ë

	)

7017 
	#SPI_CR2_ERRIE
 ((
uöt8_t
)0x20Ë

	)

7018 
	#SPI_CR2_RXNEIE
 ((
uöt8_t
)0x40Ë

	)

7019 
	#SPI_CR2_TXEIE
 ((
uöt8_t
)0x80Ë

	)

7022 
	#SPI_SR_RXNE
 ((
uöt8_t
)0x01Ë

	)

7023 
	#SPI_SR_TXE
 ((
uöt8_t
)0x02Ë

	)

7024 
	#SPI_SR_CHSIDE
 ((
uöt8_t
)0x04Ë

	)

7025 
	#SPI_SR_UDR
 ((
uöt8_t
)0x08Ë

	)

7026 
	#SPI_SR_CRCERR
 ((
uöt8_t
)0x10Ë

	)

7027 
	#SPI_SR_MODF
 ((
uöt8_t
)0x20Ë

	)

7028 
	#SPI_SR_OVR
 ((
uöt8_t
)0x40Ë

	)

7029 
	#SPI_SR_BSY
 ((
uöt8_t
)0x80Ë

	)

7032 
	#SPI_DR_DR
 ((
uöt16_t
)0xFFFFË

	)

7035 
	#SPI_CRCPR_CRCPOLY
 ((
uöt16_t
)0xFFFFË

	)

7038 
	#SPI_RXCRCR_RXCRC
 ((
uöt16_t
)0xFFFFË

	)

7041 
	#SPI_TXCRCR_TXCRC
 ((
uöt16_t
)0xFFFFË

	)

7044 
	#SPI_I2SCFGR_CHLEN
 ((
uöt16_t
)0x0001Ë

	)

7046 
	#SPI_I2SCFGR_DATLEN
 ((
uöt16_t
)0x0006Ë

	)

7047 
	#SPI_I2SCFGR_DATLEN_0
 ((
uöt16_t
)0x0002Ë

	)

7048 
	#SPI_I2SCFGR_DATLEN_1
 ((
uöt16_t
)0x0004Ë

	)

7050 
	#SPI_I2SCFGR_CKPOL
 ((
uöt16_t
)0x0008Ë

	)

7052 
	#SPI_I2SCFGR_I2SSTD
 ((
uöt16_t
)0x0030Ë

	)

7053 
	#SPI_I2SCFGR_I2SSTD_0
 ((
uöt16_t
)0x0010Ë

	)

7054 
	#SPI_I2SCFGR_I2SSTD_1
 ((
uöt16_t
)0x0020Ë

	)

7056 
	#SPI_I2SCFGR_PCMSYNC
 ((
uöt16_t
)0x0080Ë

	)

7058 
	#SPI_I2SCFGR_I2SCFG
 ((
uöt16_t
)0x0300Ë

	)

7059 
	#SPI_I2SCFGR_I2SCFG_0
 ((
uöt16_t
)0x0100Ë

	)

7060 
	#SPI_I2SCFGR_I2SCFG_1
 ((
uöt16_t
)0x0200Ë

	)

7062 
	#SPI_I2SCFGR_I2SE
 ((
uöt16_t
)0x0400Ë

	)

7063 
	#SPI_I2SCFGR_I2SMOD
 ((
uöt16_t
)0x0800Ë

	)

7066 
	#SPI_I2SPR_I2SDIV
 ((
uöt16_t
)0x00FFË

	)

7067 
	#SPI_I2SPR_ODD
 ((
uöt16_t
)0x0100Ë

	)

7068 
	#SPI_I2SPR_MCKOE
 ((
uöt16_t
)0x0200Ë

	)

7077 
	#I2C_CR1_PE
 ((
uöt16_t
)0x0001Ë

	)

7078 
	#I2C_CR1_SMBUS
 ((
uöt16_t
)0x0002Ë

	)

7079 
	#I2C_CR1_SMBTYPE
 ((
uöt16_t
)0x0008Ë

	)

7080 
	#I2C_CR1_ENARP
 ((
uöt16_t
)0x0010Ë

	)

7081 
	#I2C_CR1_ENPEC
 ((
uöt16_t
)0x0020Ë

	)

7082 
	#I2C_CR1_ENGC
 ((
uöt16_t
)0x0040Ë

	)

7083 
	#I2C_CR1_NOSTRETCH
 ((
uöt16_t
)0x0080Ë

	)

7084 
	#I2C_CR1_START
 ((
uöt16_t
)0x0100Ë

	)

7085 
	#I2C_CR1_STOP
 ((
uöt16_t
)0x0200Ë

	)

7086 
	#I2C_CR1_ACK
 ((
uöt16_t
)0x0400Ë

	)

7087 
	#I2C_CR1_POS
 ((
uöt16_t
)0x0800Ë

	)

7088 
	#I2C_CR1_PEC
 ((
uöt16_t
)0x1000Ë

	)

7089 
	#I2C_CR1_ALERT
 ((
uöt16_t
)0x2000Ë

	)

7090 
	#I2C_CR1_SWRST
 ((
uöt16_t
)0x8000Ë

	)

7093 
	#I2C_CR2_FREQ
 ((
uöt16_t
)0x003FË

	)

7094 
	#I2C_CR2_FREQ_0
 ((
uöt16_t
)0x0001Ë

	)

7095 
	#I2C_CR2_FREQ_1
 ((
uöt16_t
)0x0002Ë

	)

7096 
	#I2C_CR2_FREQ_2
 ((
uöt16_t
)0x0004Ë

	)

7097 
	#I2C_CR2_FREQ_3
 ((
uöt16_t
)0x0008Ë

	)

7098 
	#I2C_CR2_FREQ_4
 ((
uöt16_t
)0x0010Ë

	)

7099 
	#I2C_CR2_FREQ_5
 ((
uöt16_t
)0x0020Ë

	)

7101 
	#I2C_CR2_ITERREN
 ((
uöt16_t
)0x0100Ë

	)

7102 
	#I2C_CR2_ITEVTEN
 ((
uöt16_t
)0x0200Ë

	)

7103 
	#I2C_CR2_ITBUFEN
 ((
uöt16_t
)0x0400Ë

	)

7104 
	#I2C_CR2_DMAEN
 ((
uöt16_t
)0x0800Ë

	)

7105 
	#I2C_CR2_LAST
 ((
uöt16_t
)0x1000Ë

	)

7108 
	#I2C_OAR1_ADD1_7
 ((
uöt16_t
)0x00FEË

	)

7109 
	#I2C_OAR1_ADD8_9
 ((
uöt16_t
)0x0300Ë

	)

7111 
	#I2C_OAR1_ADD0
 ((
uöt16_t
)0x0001Ë

	)

7112 
	#I2C_OAR1_ADD1
 ((
uöt16_t
)0x0002Ë

	)

7113 
	#I2C_OAR1_ADD2
 ((
uöt16_t
)0x0004Ë

	)

7114 
	#I2C_OAR1_ADD3
 ((
uöt16_t
)0x0008Ë

	)

7115 
	#I2C_OAR1_ADD4
 ((
uöt16_t
)0x0010Ë

	)

7116 
	#I2C_OAR1_ADD5
 ((
uöt16_t
)0x0020Ë

	)

7117 
	#I2C_OAR1_ADD6
 ((
uöt16_t
)0x0040Ë

	)

7118 
	#I2C_OAR1_ADD7
 ((
uöt16_t
)0x0080Ë

	)

7119 
	#I2C_OAR1_ADD8
 ((
uöt16_t
)0x0100Ë

	)

7120 
	#I2C_OAR1_ADD9
 ((
uöt16_t
)0x0200Ë

	)

7122 
	#I2C_OAR1_ADDMODE
 ((
uöt16_t
)0x8000Ë

	)

7125 
	#I2C_OAR2_ENDUAL
 ((
uöt8_t
)0x01Ë

	)

7126 
	#I2C_OAR2_ADD2
 ((
uöt8_t
)0xFEË

	)

7129 
	#I2C_DR_DR
 ((
uöt8_t
)0xFFË

	)

7132 
	#I2C_SR1_SB
 ((
uöt16_t
)0x0001Ë

	)

7133 
	#I2C_SR1_ADDR
 ((
uöt16_t
)0x0002Ë

	)

7134 
	#I2C_SR1_BTF
 ((
uöt16_t
)0x0004Ë

	)

7135 
	#I2C_SR1_ADD10
 ((
uöt16_t
)0x0008Ë

	)

7136 
	#I2C_SR1_STOPF
 ((
uöt16_t
)0x0010Ë

	)

7137 
	#I2C_SR1_RXNE
 ((
uöt16_t
)0x0040Ë

	)

7138 
	#I2C_SR1_TXE
 ((
uöt16_t
)0x0080Ë

	)

7139 
	#I2C_SR1_BERR
 ((
uöt16_t
)0x0100Ë

	)

7140 
	#I2C_SR1_ARLO
 ((
uöt16_t
)0x0200Ë

	)

7141 
	#I2C_SR1_AF
 ((
uöt16_t
)0x0400Ë

	)

7142 
	#I2C_SR1_OVR
 ((
uöt16_t
)0x0800Ë

	)

7143 
	#I2C_SR1_PECERR
 ((
uöt16_t
)0x1000Ë

	)

7144 
	#I2C_SR1_TIMEOUT
 ((
uöt16_t
)0x4000Ë

	)

7145 
	#I2C_SR1_SMBALERT
 ((
uöt16_t
)0x8000Ë

	)

7148 
	#I2C_SR2_MSL
 ((
uöt16_t
)0x0001Ë

	)

7149 
	#I2C_SR2_BUSY
 ((
uöt16_t
)0x0002Ë

	)

7150 
	#I2C_SR2_TRA
 ((
uöt16_t
)0x0004Ë

	)

7151 
	#I2C_SR2_GENCALL
 ((
uöt16_t
)0x0010Ë

	)

7152 
	#I2C_SR2_SMBDEFAULT
 ((
uöt16_t
)0x0020Ë

	)

7153 
	#I2C_SR2_SMBHOST
 ((
uöt16_t
)0x0040Ë

	)

7154 
	#I2C_SR2_DUALF
 ((
uöt16_t
)0x0080Ë

	)

7155 
	#I2C_SR2_PEC
 ((
uöt16_t
)0xFF00Ë

	)

7158 
	#I2C_CCR_CCR
 ((
uöt16_t
)0x0FFFË

	)

7159 
	#I2C_CCR_DUTY
 ((
uöt16_t
)0x4000Ë

	)

7160 
	#I2C_CCR_FS
 ((
uöt16_t
)0x8000Ë

	)

7163 
	#I2C_TRISE_TRISE
 ((
uöt8_t
)0x3FË

	)

7172 
	#USART_SR_PE
 ((
uöt16_t
)0x0001Ë

	)

7173 
	#USART_SR_FE
 ((
uöt16_t
)0x0002Ë

	)

7174 
	#USART_SR_NE
 ((
uöt16_t
)0x0004Ë

	)

7175 
	#USART_SR_ORE
 ((
uöt16_t
)0x0008Ë

	)

7176 
	#USART_SR_IDLE
 ((
uöt16_t
)0x0010Ë

	)

7177 
	#USART_SR_RXNE
 ((
uöt16_t
)0x0020Ë

	)

7178 
	#USART_SR_TC
 ((
uöt16_t
)0x0040Ë

	)

7179 
	#USART_SR_TXE
 ((
uöt16_t
)0x0080Ë

	)

7180 
	#USART_SR_LBD
 ((
uöt16_t
)0x0100Ë

	)

7181 
	#USART_SR_CTS
 ((
uöt16_t
)0x0200Ë

	)

7184 
	#USART_DR_DR
 ((
uöt16_t
)0x01FFË

	)

7187 
	#USART_BRR_DIV_Fø˘i⁄
 ((
uöt16_t
)0x000FË

	)

7188 
	#USART_BRR_DIV_M™tisß
 ((
uöt16_t
)0xFFF0Ë

	)

7191 
	#USART_CR1_SBK
 ((
uöt16_t
)0x0001Ë

	)

7192 
	#USART_CR1_RWU
 ((
uöt16_t
)0x0002Ë

	)

7193 
	#USART_CR1_RE
 ((
uöt16_t
)0x0004Ë

	)

7194 
	#USART_CR1_TE
 ((
uöt16_t
)0x0008Ë

	)

7195 
	#USART_CR1_IDLEIE
 ((
uöt16_t
)0x0010Ë

	)

7196 
	#USART_CR1_RXNEIE
 ((
uöt16_t
)0x0020Ë

	)

7197 
	#USART_CR1_TCIE
 ((
uöt16_t
)0x0040Ë

	)

7198 
	#USART_CR1_TXEIE
 ((
uöt16_t
)0x0080Ë

	)

7199 
	#USART_CR1_PEIE
 ((
uöt16_t
)0x0100Ë

	)

7200 
	#USART_CR1_PS
 ((
uöt16_t
)0x0200Ë

	)

7201 
	#USART_CR1_PCE
 ((
uöt16_t
)0x0400Ë

	)

7202 
	#USART_CR1_WAKE
 ((
uöt16_t
)0x0800Ë

	)

7203 
	#USART_CR1_M
 ((
uöt16_t
)0x1000Ë

	)

7204 
	#USART_CR1_UE
 ((
uöt16_t
)0x2000Ë

	)

7207 
	#USART_CR2_ADD
 ((
uöt16_t
)0x000FË

	)

7208 
	#USART_CR2_LBDL
 ((
uöt16_t
)0x0020Ë

	)

7209 
	#USART_CR2_LBDIE
 ((
uöt16_t
)0x0040Ë

	)

7210 
	#USART_CR2_LBCL
 ((
uöt16_t
)0x0100Ë

	)

7211 
	#USART_CR2_CPHA
 ((
uöt16_t
)0x0200Ë

	)

7212 
	#USART_CR2_CPOL
 ((
uöt16_t
)0x0400Ë

	)

7213 
	#USART_CR2_CLKEN
 ((
uöt16_t
)0x0800Ë

	)

7215 
	#USART_CR2_STOP
 ((
uöt16_t
)0x3000Ë

	)

7216 
	#USART_CR2_STOP_0
 ((
uöt16_t
)0x1000Ë

	)

7217 
	#USART_CR2_STOP_1
 ((
uöt16_t
)0x2000Ë

	)

7219 
	#USART_CR2_LINEN
 ((
uöt16_t
)0x4000Ë

	)

7222 
	#USART_CR3_EIE
 ((
uöt16_t
)0x0001Ë

	)

7223 
	#USART_CR3_IREN
 ((
uöt16_t
)0x0002Ë

	)

7224 
	#USART_CR3_IRLP
 ((
uöt16_t
)0x0004Ë

	)

7225 
	#USART_CR3_HDSEL
 ((
uöt16_t
)0x0008Ë

	)

7226 
	#USART_CR3_NACK
 ((
uöt16_t
)0x0010Ë

	)

7227 
	#USART_CR3_SCEN
 ((
uöt16_t
)0x0020Ë

	)

7228 
	#USART_CR3_DMAR
 ((
uöt16_t
)0x0040Ë

	)

7229 
	#USART_CR3_DMAT
 ((
uöt16_t
)0x0080Ë

	)

7230 
	#USART_CR3_RTSE
 ((
uöt16_t
)0x0100Ë

	)

7231 
	#USART_CR3_CTSE
 ((
uöt16_t
)0x0200Ë

	)

7232 
	#USART_CR3_CTSIE
 ((
uöt16_t
)0x0400Ë

	)

7235 
	#USART_GTPR_PSC
 ((
uöt16_t
)0x00FFË

	)

7236 
	#USART_GTPR_PSC_0
 ((
uöt16_t
)0x0001Ë

	)

7237 
	#USART_GTPR_PSC_1
 ((
uöt16_t
)0x0002Ë

	)

7238 
	#USART_GTPR_PSC_2
 ((
uöt16_t
)0x0004Ë

	)

7239 
	#USART_GTPR_PSC_3
 ((
uöt16_t
)0x0008Ë

	)

7240 
	#USART_GTPR_PSC_4
 ((
uöt16_t
)0x0010Ë

	)

7241 
	#USART_GTPR_PSC_5
 ((
uöt16_t
)0x0020Ë

	)

7242 
	#USART_GTPR_PSC_6
 ((
uöt16_t
)0x0040Ë

	)

7243 
	#USART_GTPR_PSC_7
 ((
uöt16_t
)0x0080Ë

	)

7245 
	#USART_GTPR_GT
 ((
uöt16_t
)0xFF00Ë

	)

7254 
	#DBGMCU_IDCODE_DEV_ID
 ((
uöt32_t
)0x00000FFFË

	)

7256 
	#DBGMCU_IDCODE_REV_ID
 ((
uöt32_t
)0xFFFF0000Ë

	)

7257 
	#DBGMCU_IDCODE_REV_ID_0
 ((
uöt32_t
)0x00010000Ë

	)

7258 
	#DBGMCU_IDCODE_REV_ID_1
 ((
uöt32_t
)0x00020000Ë

	)

7259 
	#DBGMCU_IDCODE_REV_ID_2
 ((
uöt32_t
)0x00040000Ë

	)

7260 
	#DBGMCU_IDCODE_REV_ID_3
 ((
uöt32_t
)0x00080000Ë

	)

7261 
	#DBGMCU_IDCODE_REV_ID_4
 ((
uöt32_t
)0x00100000Ë

	)

7262 
	#DBGMCU_IDCODE_REV_ID_5
 ((
uöt32_t
)0x00200000Ë

	)

7263 
	#DBGMCU_IDCODE_REV_ID_6
 ((
uöt32_t
)0x00400000Ë

	)

7264 
	#DBGMCU_IDCODE_REV_ID_7
 ((
uöt32_t
)0x00800000Ë

	)

7265 
	#DBGMCU_IDCODE_REV_ID_8
 ((
uöt32_t
)0x01000000Ë

	)

7266 
	#DBGMCU_IDCODE_REV_ID_9
 ((
uöt32_t
)0x02000000Ë

	)

7267 
	#DBGMCU_IDCODE_REV_ID_10
 ((
uöt32_t
)0x04000000Ë

	)

7268 
	#DBGMCU_IDCODE_REV_ID_11
 ((
uöt32_t
)0x08000000Ë

	)

7269 
	#DBGMCU_IDCODE_REV_ID_12
 ((
uöt32_t
)0x10000000Ë

	)

7270 
	#DBGMCU_IDCODE_REV_ID_13
 ((
uöt32_t
)0x20000000Ë

	)

7271 
	#DBGMCU_IDCODE_REV_ID_14
 ((
uöt32_t
)0x40000000Ë

	)

7272 
	#DBGMCU_IDCODE_REV_ID_15
 ((
uöt32_t
)0x80000000Ë

	)

7275 
	#DBGMCU_CR_DBG_SLEEP
 ((
uöt32_t
)0x00000001Ë

	)

7276 
	#DBGMCU_CR_DBG_STOP
 ((
uöt32_t
)0x00000002Ë

	)

7277 
	#DBGMCU_CR_DBG_STANDBY
 ((
uöt32_t
)0x00000004Ë

	)

7278 
	#DBGMCU_CR_TRACE_IOEN
 ((
uöt32_t
)0x00000020Ë

	)

7280 
	#DBGMCU_CR_TRACE_MODE
 ((
uöt32_t
)0x000000C0Ë

	)

7281 
	#DBGMCU_CR_TRACE_MODE_0
 ((
uöt32_t
)0x00000040Ë

	)

7282 
	#DBGMCU_CR_TRACE_MODE_1
 ((
uöt32_t
)0x00000080Ë

	)

7284 
	#DBGMCU_CR_DBG_IWDG_STOP
 ((
uöt32_t
)0x00000100Ë

	)

7285 
	#DBGMCU_CR_DBG_WWDG_STOP
 ((
uöt32_t
)0x00000200Ë

	)

7286 
	#DBGMCU_CR_DBG_TIM1_STOP
 ((
uöt32_t
)0x00000400Ë

	)

7287 
	#DBGMCU_CR_DBG_TIM2_STOP
 ((
uöt32_t
)0x00000800Ë

	)

7288 
	#DBGMCU_CR_DBG_TIM3_STOP
 ((
uöt32_t
)0x00001000Ë

	)

7289 
	#DBGMCU_CR_DBG_TIM4_STOP
 ((
uöt32_t
)0x00002000Ë

	)

7290 
	#DBGMCU_CR_DBG_CAN1_STOP
 ((
uöt32_t
)0x00004000Ë

	)

7291 
	#DBGMCU_CR_DBG_I2C1_SMBUS_TIMEOUT
 ((
uöt32_t
)0x00008000Ë

	)

7292 
	#DBGMCU_CR_DBG_I2C2_SMBUS_TIMEOUT
 ((
uöt32_t
)0x00010000Ë

	)

7293 
	#DBGMCU_CR_DBG_TIM8_STOP
 ((
uöt32_t
)0x00020000Ë

	)

7294 
	#DBGMCU_CR_DBG_TIM5_STOP
 ((
uöt32_t
)0x00040000Ë

	)

7295 
	#DBGMCU_CR_DBG_TIM6_STOP
 ((
uöt32_t
)0x00080000Ë

	)

7296 
	#DBGMCU_CR_DBG_TIM7_STOP
 ((
uöt32_t
)0x00100000Ë

	)

7297 
	#DBGMCU_CR_DBG_CAN2_STOP
 ((
uöt32_t
)0x00200000Ë

	)

7306 
	#FLASH_ACR_LATENCY
 ((
uöt8_t
)0x03Ë

	)

7307 
	#FLASH_ACR_LATENCY_0
 ((
uöt8_t
)0x00Ë

	)

7308 
	#FLASH_ACR_LATENCY_1
 ((
uöt8_t
)0x01Ë

	)

7309 
	#FLASH_ACR_LATENCY_2
 ((
uöt8_t
)0x02Ë

	)

7311 
	#FLASH_ACR_HLFCYA
 ((
uöt8_t
)0x08Ë

	)

7312 
	#FLASH_ACR_PRFTBE
 ((
uöt8_t
)0x10Ë

	)

7313 
	#FLASH_ACR_PRFTBS
 ((
uöt8_t
)0x20Ë

	)

7316 
	#FLASH_KEYR_FKEYR
 ((
uöt32_t
)0xFFFFFFFFË

	)

7319 
	#FLASH_OPTKEYR_OPTKEYR
 ((
uöt32_t
)0xFFFFFFFFË

	)

7322 
	#FLASH_SR_BSY
 ((
uöt8_t
)0x01Ë

	)

7323 
	#FLASH_SR_PGERR
 ((
uöt8_t
)0x04Ë

	)

7324 
	#FLASH_SR_WRPRTERR
 ((
uöt8_t
)0x10Ë

	)

7325 
	#FLASH_SR_EOP
 ((
uöt8_t
)0x20Ë

	)

7328 
	#FLASH_CR_PG
 ((
uöt16_t
)0x0001Ë

	)

7329 
	#FLASH_CR_PER
 ((
uöt16_t
)0x0002Ë

	)

7330 
	#FLASH_CR_MER
 ((
uöt16_t
)0x0004Ë

	)

7331 
	#FLASH_CR_OPTPG
 ((
uöt16_t
)0x0010Ë

	)

7332 
	#FLASH_CR_OPTER
 ((
uöt16_t
)0x0020Ë

	)

7333 
	#FLASH_CR_STRT
 ((
uöt16_t
)0x0040Ë

	)

7334 
	#FLASH_CR_LOCK
 ((
uöt16_t
)0x0080Ë

	)

7335 
	#FLASH_CR_OPTWRE
 ((
uöt16_t
)0x0200Ë

	)

7336 
	#FLASH_CR_ERRIE
 ((
uöt16_t
)0x0400Ë

	)

7337 
	#FLASH_CR_EOPIE
 ((
uöt16_t
)0x1000Ë

	)

7340 
	#FLASH_AR_FAR
 ((
uöt32_t
)0xFFFFFFFFË

	)

7343 
	#FLASH_OBR_OPTERR
 ((
uöt16_t
)0x0001Ë

	)

7344 
	#FLASH_OBR_RDPRT
 ((
uöt16_t
)0x0002Ë

	)

7346 
	#FLASH_OBR_USER
 ((
uöt16_t
)0x03FCË

	)

7347 
	#FLASH_OBR_WDG_SW
 ((
uöt16_t
)0x0004Ë

	)

7348 
	#FLASH_OBR_nRST_STOP
 ((
uöt16_t
)0x0008Ë

	)

7349 
	#FLASH_OBR_nRST_STDBY
 ((
uöt16_t
)0x0010Ë

	)

7350 
	#FLASH_OBR_NŸu£d
 ((
uöt16_t
)0x03E0Ë

	)

7353 
	#FLASH_WRPR_WRP
 ((
uöt32_t
)0xFFFFFFFFË

	)

7358 
	#FLASH_RDP_RDP
 ((
uöt32_t
)0x000000FFË

	)

7359 
	#FLASH_RDP_nRDP
 ((
uöt32_t
)0x0000FF00Ë

	)

7362 
	#FLASH_USER_USER
 ((
uöt32_t
)0x00FF0000Ë

	)

7363 
	#FLASH_USER_nUSER
 ((
uöt32_t
)0xFF000000Ë

	)

7366 
	#FLASH_D©a0_D©a0
 ((
uöt32_t
)0x000000FFË

	)

7367 
	#FLASH_D©a0_nD©a0
 ((
uöt32_t
)0x0000FF00Ë

	)

7370 
	#FLASH_D©a1_D©a1
 ((
uöt32_t
)0x00FF0000Ë

	)

7371 
	#FLASH_D©a1_nD©a1
 ((
uöt32_t
)0xFF000000Ë

	)

7374 
	#FLASH_WRP0_WRP0
 ((
uöt32_t
)0x000000FFË

	)

7375 
	#FLASH_WRP0_nWRP0
 ((
uöt32_t
)0x0000FF00Ë

	)

7378 
	#FLASH_WRP1_WRP1
 ((
uöt32_t
)0x00FF0000Ë

	)

7379 
	#FLASH_WRP1_nWRP1
 ((
uöt32_t
)0xFF000000Ë

	)

7382 
	#FLASH_WRP2_WRP2
 ((
uöt32_t
)0x000000FFË

	)

7383 
	#FLASH_WRP2_nWRP2
 ((
uöt32_t
)0x0000FF00Ë

	)

7386 
	#FLASH_WRP3_WRP3
 ((
uöt32_t
)0x00FF0000Ë

	)

7387 
	#FLASH_WRP3_nWRP3
 ((
uöt32_t
)0xFF000000Ë

	)

7389 #ifde‡
STM32F10X_CL


7394 
	#ETH_MACCR_WD
 ((
uöt32_t
)0x00800000Ë

	)

7395 
	#ETH_MACCR_JD
 ((
uöt32_t
)0x00400000Ë

	)

7396 
	#ETH_MACCR_IFG
 ((
uöt32_t
)0x000E0000Ë

	)

7397 
	#ETH_MACCR_IFG_96Bô
 ((
uöt32_t
)0x00000000Ë

	)

7398 
	#ETH_MACCR_IFG_88Bô
 ((
uöt32_t
)0x00020000Ë

	)

7399 
	#ETH_MACCR_IFG_80Bô
 ((
uöt32_t
)0x00040000Ë

	)

7400 
	#ETH_MACCR_IFG_72Bô
 ((
uöt32_t
)0x00060000Ë

	)

7401 
	#ETH_MACCR_IFG_64Bô
 ((
uöt32_t
)0x00080000Ë

	)

7402 
	#ETH_MACCR_IFG_56Bô
 ((
uöt32_t
)0x000A0000Ë

	)

7403 
	#ETH_MACCR_IFG_48Bô
 ((
uöt32_t
)0x000C0000Ë

	)

7404 
	#ETH_MACCR_IFG_40Bô
 ((
uöt32_t
)0x000E0000Ë

	)

7405 
	#ETH_MACCR_CSD
 ((
uöt32_t
)0x00010000Ë

	)

7406 
	#ETH_MACCR_FES
 ((
uöt32_t
)0x00004000Ë

	)

7407 
	#ETH_MACCR_ROD
 ((
uöt32_t
)0x00002000Ë

	)

7408 
	#ETH_MACCR_LM
 ((
uöt32_t
)0x00001000Ë

	)

7409 
	#ETH_MACCR_DM
 ((
uöt32_t
)0x00000800Ë

	)

7410 
	#ETH_MACCR_IPCO
 ((
uöt32_t
)0x00000400Ë

	)

7411 
	#ETH_MACCR_RD
 ((
uöt32_t
)0x00000200Ë

	)

7412 
	#ETH_MACCR_APCS
 ((
uöt32_t
)0x00000080Ë

	)

7413 
	#ETH_MACCR_BL
 ((
uöt32_t
)0x00000060Ë

	)

7415 
	#ETH_MACCR_BL_10
 ((
uöt32_t
)0x00000000Ë

	)

7416 
	#ETH_MACCR_BL_8
 ((
uöt32_t
)0x00000020Ë

	)

7417 
	#ETH_MACCR_BL_4
 ((
uöt32_t
)0x00000040Ë

	)

7418 
	#ETH_MACCR_BL_1
 ((
uöt32_t
)0x00000060Ë

	)

7419 
	#ETH_MACCR_DC
 ((
uöt32_t
)0x00000010Ë

	)

7420 
	#ETH_MACCR_TE
 ((
uöt32_t
)0x00000008Ë

	)

7421 
	#ETH_MACCR_RE
 ((
uöt32_t
)0x00000004Ë

	)

7424 
	#ETH_MACFFR_RA
 ((
uöt32_t
)0x80000000Ë

	)

7425 
	#ETH_MACFFR_HPF
 ((
uöt32_t
)0x00000400Ë

	)

7426 
	#ETH_MACFFR_SAF
 ((
uöt32_t
)0x00000200Ë

	)

7427 
	#ETH_MACFFR_SAIF
 ((
uöt32_t
)0x00000100Ë

	)

7428 
	#ETH_MACFFR_PCF
 ((
uöt32_t
)0x000000C0Ë

	)

7429 
	#ETH_MACFFR_PCF_BlockAŒ
 ((
uöt32_t
)0x00000040Ë

	)

7430 
	#ETH_MACFFR_PCF_F‹w¨dAŒ
 ((
uöt32_t
)0x00000080Ë

	)

7431 
	#ETH_MACFFR_PCF_F‹w¨dPas£dAddrFûãr
 ((
uöt32_t
)0x000000C0Ë

	)

7432 
	#ETH_MACFFR_BFD
 ((
uöt32_t
)0x00000020Ë

	)

7433 
	#ETH_MACFFR_PAM
 ((
uöt32_t
)0x00000010Ë

	)

7434 
	#ETH_MACFFR_DAIF
 ((
uöt32_t
)0x00000008Ë

	)

7435 
	#ETH_MACFFR_HM
 ((
uöt32_t
)0x00000004Ë

	)

7436 
	#ETH_MACFFR_HU
 ((
uöt32_t
)0x00000002Ë

	)

7437 
	#ETH_MACFFR_PM
 ((
uöt32_t
)0x00000001Ë

	)

7440 
	#ETH_MACHTHR_HTH
 ((
uöt32_t
)0xFFFFFFFFË

	)

7443 
	#ETH_MACHTLR_HTL
 ((
uöt32_t
)0xFFFFFFFFË

	)

7446 
	#ETH_MACMIIAR_PA
 ((
uöt32_t
)0x0000F800Ë

	)

7447 
	#ETH_MACMIIAR_MR
 ((
uöt32_t
)0x000007C0Ë

	)

7448 
	#ETH_MACMIIAR_CR
 ((
uöt32_t
)0x0000001CË

	)

7449 
	#ETH_MACMIIAR_CR_Div42
 ((
uöt32_t
)0x00000000Ë

	)

7450 
	#ETH_MACMIIAR_CR_Div16
 ((
uöt32_t
)0x00000008Ë

	)

7451 
	#ETH_MACMIIAR_CR_Div26
 ((
uöt32_t
)0x0000000CË

	)

7452 
	#ETH_MACMIIAR_MW
 ((
uöt32_t
)0x00000002Ë

	)

7453 
	#ETH_MACMIIAR_MB
 ((
uöt32_t
)0x00000001Ë

	)

7456 
	#ETH_MACMIIDR_MD
 ((
uöt32_t
)0x0000FFFFË

	)

7459 
	#ETH_MACFCR_PT
 ((
uöt32_t
)0xFFFF0000Ë

	)

7460 
	#ETH_MACFCR_ZQPD
 ((
uöt32_t
)0x00000080Ë

	)

7461 
	#ETH_MACFCR_PLT
 ((
uöt32_t
)0x00000030Ë

	)

7462 
	#ETH_MACFCR_PLT_Möus4
 ((
uöt32_t
)0x00000000Ë

	)

7463 
	#ETH_MACFCR_PLT_Möus28
 ((
uöt32_t
)0x00000010Ë

	)

7464 
	#ETH_MACFCR_PLT_Möus144
 ((
uöt32_t
)0x00000020Ë

	)

7465 
	#ETH_MACFCR_PLT_Möus256
 ((
uöt32_t
)0x00000030Ë

	)

7466 
	#ETH_MACFCR_UPFD
 ((
uöt32_t
)0x00000008Ë

	)

7467 
	#ETH_MACFCR_RFCE
 ((
uöt32_t
)0x00000004Ë

	)

7468 
	#ETH_MACFCR_TFCE
 ((
uöt32_t
)0x00000002Ë

	)

7469 
	#ETH_MACFCR_FCBBPA
 ((
uöt32_t
)0x00000001Ë

	)

7472 
	#ETH_MACVLANTR_VLANTC
 ((
uöt32_t
)0x00010000Ë

	)

7473 
	#ETH_MACVLANTR_VLANTI
 ((
uöt32_t
)0x0000FFFFË

	)

7476 
	#ETH_MACRWUFFR_D
 ((
uöt32_t
)0xFFFFFFFFË

	)

7490 
	#ETH_MACPMTCSR_WFFRPR
 ((
uöt32_t
)0x80000000Ë

	)

7491 
	#ETH_MACPMTCSR_GU
 ((
uöt32_t
)0x00000200Ë

	)

7492 
	#ETH_MACPMTCSR_WFR
 ((
uöt32_t
)0x00000040Ë

	)

7493 
	#ETH_MACPMTCSR_MPR
 ((
uöt32_t
)0x00000020Ë

	)

7494 
	#ETH_MACPMTCSR_WFE
 ((
uöt32_t
)0x00000004Ë

	)

7495 
	#ETH_MACPMTCSR_MPE
 ((
uöt32_t
)0x00000002Ë

	)

7496 
	#ETH_MACPMTCSR_PD
 ((
uöt32_t
)0x00000001Ë

	)

7499 
	#ETH_MACSR_TSTS
 ((
uöt32_t
)0x00000200Ë

	)

7500 
	#ETH_MACSR_MMCTS
 ((
uöt32_t
)0x00000040Ë

	)

7501 
	#ETH_MACSR_MMMCRS
 ((
uöt32_t
)0x00000020Ë

	)

7502 
	#ETH_MACSR_MMCS
 ((
uöt32_t
)0x00000010Ë

	)

7503 
	#ETH_MACSR_PMTS
 ((
uöt32_t
)0x00000008Ë

	)

7506 
	#ETH_MACIMR_TSTIM
 ((
uöt32_t
)0x00000200Ë

	)

7507 
	#ETH_MACIMR_PMTIM
 ((
uöt32_t
)0x00000008Ë

	)

7510 
	#ETH_MACA0HR_MACA0H
 ((
uöt32_t
)0x0000FFFFË

	)

7513 
	#ETH_MACA0LR_MACA0L
 ((
uöt32_t
)0xFFFFFFFFË

	)

7516 
	#ETH_MACA1HR_AE
 ((
uöt32_t
)0x80000000Ë

	)

7517 
	#ETH_MACA1HR_SA
 ((
uöt32_t
)0x40000000Ë

	)

7518 
	#ETH_MACA1HR_MBC
 ((
uöt32_t
)0x3F000000Ë

	)

7519 
	#ETH_MACA1HR_MBC_HBôs15_8
 ((
uöt32_t
)0x20000000Ë

	)

7520 
	#ETH_MACA1HR_MBC_HBôs7_0
 ((
uöt32_t
)0x10000000Ë

	)

7521 
	#ETH_MACA1HR_MBC_LBôs31_24
 ((
uöt32_t
)0x08000000Ë

	)

7522 
	#ETH_MACA1HR_MBC_LBôs23_16
 ((
uöt32_t
)0x04000000Ë

	)

7523 
	#ETH_MACA1HR_MBC_LBôs15_8
 ((
uöt32_t
)0x02000000Ë

	)

7524 
	#ETH_MACA1HR_MBC_LBôs7_0
 ((
uöt32_t
)0x01000000Ë

	)

7525 
	#ETH_MACA1HR_MACA1H
 ((
uöt32_t
)0x0000FFFFË

	)

7528 
	#ETH_MACA1LR_MACA1L
 ((
uöt32_t
)0xFFFFFFFFË

	)

7531 
	#ETH_MACA2HR_AE
 ((
uöt32_t
)0x80000000Ë

	)

7532 
	#ETH_MACA2HR_SA
 ((
uöt32_t
)0x40000000Ë

	)

7533 
	#ETH_MACA2HR_MBC
 ((
uöt32_t
)0x3F000000Ë

	)

7534 
	#ETH_MACA2HR_MBC_HBôs15_8
 ((
uöt32_t
)0x20000000Ë

	)

7535 
	#ETH_MACA2HR_MBC_HBôs7_0
 ((
uöt32_t
)0x10000000Ë

	)

7536 
	#ETH_MACA2HR_MBC_LBôs31_24
 ((
uöt32_t
)0x08000000Ë

	)

7537 
	#ETH_MACA2HR_MBC_LBôs23_16
 ((
uöt32_t
)0x04000000Ë

	)

7538 
	#ETH_MACA2HR_MBC_LBôs15_8
 ((
uöt32_t
)0x02000000Ë

	)

7539 
	#ETH_MACA2HR_MBC_LBôs7_0
 ((
uöt32_t
)0x01000000Ë

	)

7540 
	#ETH_MACA2HR_MACA2H
 ((
uöt32_t
)0x0000FFFFË

	)

7543 
	#ETH_MACA2LR_MACA2L
 ((
uöt32_t
)0xFFFFFFFFË

	)

7546 
	#ETH_MACA3HR_AE
 ((
uöt32_t
)0x80000000Ë

	)

7547 
	#ETH_MACA3HR_SA
 ((
uöt32_t
)0x40000000Ë

	)

7548 
	#ETH_MACA3HR_MBC
 ((
uöt32_t
)0x3F000000Ë

	)

7549 
	#ETH_MACA3HR_MBC_HBôs15_8
 ((
uöt32_t
)0x20000000Ë

	)

7550 
	#ETH_MACA3HR_MBC_HBôs7_0
 ((
uöt32_t
)0x10000000Ë

	)

7551 
	#ETH_MACA3HR_MBC_LBôs31_24
 ((
uöt32_t
)0x08000000Ë

	)

7552 
	#ETH_MACA3HR_MBC_LBôs23_16
 ((
uöt32_t
)0x04000000Ë

	)

7553 
	#ETH_MACA3HR_MBC_LBôs15_8
 ((
uöt32_t
)0x02000000Ë

	)

7554 
	#ETH_MACA3HR_MBC_LBôs7_0
 ((
uöt32_t
)0x01000000Ë

	)

7555 
	#ETH_MACA3HR_MACA3H
 ((
uöt32_t
)0x0000FFFFË

	)

7558 
	#ETH_MACA3LR_MACA3L
 ((
uöt32_t
)0xFFFFFFFFË

	)

7565 
	#ETH_MMCCR_MCF
 ((
uöt32_t
)0x00000008Ë

	)

7566 
	#ETH_MMCCR_ROR
 ((
uöt32_t
)0x00000004Ë

	)

7567 
	#ETH_MMCCR_CSR
 ((
uöt32_t
)0x00000002Ë

	)

7568 
	#ETH_MMCCR_CR
 ((
uöt32_t
)0x00000001Ë

	)

7571 
	#ETH_MMCRIR_RGUFS
 ((
uöt32_t
)0x00020000Ë

	)

7572 
	#ETH_MMCRIR_RFAES
 ((
uöt32_t
)0x00000040Ë

	)

7573 
	#ETH_MMCRIR_RFCES
 ((
uöt32_t
)0x00000020Ë

	)

7576 
	#ETH_MMCTIR_TGFS
 ((
uöt32_t
)0x00200000Ë

	)

7577 
	#ETH_MMCTIR_TGFMSCS
 ((
uöt32_t
)0x00008000Ë

	)

7578 
	#ETH_MMCTIR_TGFSCS
 ((
uöt32_t
)0x00004000Ë

	)

7581 
	#ETH_MMCRIMR_RGUFM
 ((
uöt32_t
)0x00020000Ë

	)

7582 
	#ETH_MMCRIMR_RFAEM
 ((
uöt32_t
)0x00000040Ë

	)

7583 
	#ETH_MMCRIMR_RFCEM
 ((
uöt32_t
)0x00000020Ë

	)

7586 
	#ETH_MMCTIMR_TGFM
 ((
uöt32_t
)0x00200000Ë

	)

7587 
	#ETH_MMCTIMR_TGFMSCM
 ((
uöt32_t
)0x00008000Ë

	)

7588 
	#ETH_MMCTIMR_TGFSCM
 ((
uöt32_t
)0x00004000Ë

	)

7591 
	#ETH_MMCTGFSCCR_TGFSCC
 ((
uöt32_t
)0xFFFFFFFFË

	)

7594 
	#ETH_MMCTGFMSCCR_TGFMSCC
 ((
uöt32_t
)0xFFFFFFFFË

	)

7597 
	#ETH_MMCTGFCR_TGFC
 ((
uöt32_t
)0xFFFFFFFFË

	)

7600 
	#ETH_MMCRFCECR_RFCEC
 ((
uöt32_t
)0xFFFFFFFFË

	)

7603 
	#ETH_MMCRFAECR_RFAEC
 ((
uöt32_t
)0xFFFFFFFFË

	)

7606 
	#ETH_MMCRGUFCR_RGUFC
 ((
uöt32_t
)0xFFFFFFFFË

	)

7613 
	#ETH_PTPTSCR_TSARU
 ((
uöt32_t
)0x00000020Ë

	)

7614 
	#ETH_PTPTSCR_TSITE
 ((
uöt32_t
)0x00000010Ë

	)

7615 
	#ETH_PTPTSCR_TSSTU
 ((
uöt32_t
)0x00000008Ë

	)

7616 
	#ETH_PTPTSCR_TSSTI
 ((
uöt32_t
)0x00000004Ë

	)

7617 
	#ETH_PTPTSCR_TSFCU
 ((
uöt32_t
)0x00000002Ë

	)

7618 
	#ETH_PTPTSCR_TSE
 ((
uöt32_t
)0x00000001Ë

	)

7621 
	#ETH_PTPSSIR_STSSI
 ((
uöt32_t
)0x000000FFË

	)

7624 
	#ETH_PTPTSHR_STS
 ((
uöt32_t
)0xFFFFFFFFË

	)

7627 
	#ETH_PTPTSLR_STPNS
 ((
uöt32_t
)0x80000000Ë

	)

7628 
	#ETH_PTPTSLR_STSS
 ((
uöt32_t
)0x7FFFFFFFË

	)

7631 
	#ETH_PTPTSHUR_TSUS
 ((
uöt32_t
)0xFFFFFFFFË

	)

7634 
	#ETH_PTPTSLUR_TSUPNS
 ((
uöt32_t
)0x80000000Ë

	)

7635 
	#ETH_PTPTSLUR_TSUSS
 ((
uöt32_t
)0x7FFFFFFFË

	)

7638 
	#ETH_PTPTSAR_TSA
 ((
uöt32_t
)0xFFFFFFFFË

	)

7641 
	#ETH_PTPTTHR_TTSH
 ((
uöt32_t
)0xFFFFFFFFË

	)

7644 
	#ETH_PTPTTLR_TTSL
 ((
uöt32_t
)0xFFFFFFFFË

	)

7651 
	#ETH_DMABMR_AAB
 ((
uöt32_t
)0x02000000Ë

	)

7652 
	#ETH_DMABMR_FPM
 ((
uöt32_t
)0x01000000Ë

	)

7653 
	#ETH_DMABMR_USP
 ((
uöt32_t
)0x00800000Ë

	)

7654 
	#ETH_DMABMR_RDP
 ((
uöt32_t
)0x007E0000Ë

	)

7655 
	#ETH_DMABMR_RDP_1Bót
 ((
uöt32_t
)0x00020000Ë

	)

7656 
	#ETH_DMABMR_RDP_2Bót
 ((
uöt32_t
)0x00040000Ë

	)

7657 
	#ETH_DMABMR_RDP_4Bót
 ((
uöt32_t
)0x00080000Ë

	)

7658 
	#ETH_DMABMR_RDP_8Bót
 ((
uöt32_t
)0x00100000Ë

	)

7659 
	#ETH_DMABMR_RDP_16Bót
 ((
uöt32_t
)0x00200000Ë

	)

7660 
	#ETH_DMABMR_RDP_32Bót
 ((
uöt32_t
)0x00400000Ë

	)

7661 
	#ETH_DMABMR_RDP_4xPBL_4Bót
 ((
uöt32_t
)0x01020000Ë

	)

7662 
	#ETH_DMABMR_RDP_4xPBL_8Bót
 ((
uöt32_t
)0x01040000Ë

	)

7663 
	#ETH_DMABMR_RDP_4xPBL_16Bót
 ((
uöt32_t
)0x01080000Ë

	)

7664 
	#ETH_DMABMR_RDP_4xPBL_32Bót
 ((
uöt32_t
)0x01100000Ë

	)

7665 
	#ETH_DMABMR_RDP_4xPBL_64Bót
 ((
uöt32_t
)0x01200000Ë

	)

7666 
	#ETH_DMABMR_RDP_4xPBL_128Bót
 ((
uöt32_t
)0x01400000Ë

	)

7667 
	#ETH_DMABMR_FB
 ((
uöt32_t
)0x00010000Ë

	)

7668 
	#ETH_DMABMR_RTPR
 ((
uöt32_t
)0x0000C000Ë

	)

7669 
	#ETH_DMABMR_RTPR_1_1
 ((
uöt32_t
)0x00000000Ë

	)

7670 
	#ETH_DMABMR_RTPR_2_1
 ((
uöt32_t
)0x00004000Ë

	)

7671 
	#ETH_DMABMR_RTPR_3_1
 ((
uöt32_t
)0x00008000Ë

	)

7672 
	#ETH_DMABMR_RTPR_4_1
 ((
uöt32_t
)0x0000C000Ë

	)

7673 
	#ETH_DMABMR_PBL
 ((
uöt32_t
)0x00003F00Ë

	)

7674 
	#ETH_DMABMR_PBL_1Bót
 ((
uöt32_t
)0x00000100Ë

	)

7675 
	#ETH_DMABMR_PBL_2Bót
 ((
uöt32_t
)0x00000200Ë

	)

7676 
	#ETH_DMABMR_PBL_4Bót
 ((
uöt32_t
)0x00000400Ë

	)

7677 
	#ETH_DMABMR_PBL_8Bót
 ((
uöt32_t
)0x00000800Ë

	)

7678 
	#ETH_DMABMR_PBL_16Bót
 ((
uöt32_t
)0x00001000Ë

	)

7679 
	#ETH_DMABMR_PBL_32Bót
 ((
uöt32_t
)0x00002000Ë

	)

7680 
	#ETH_DMABMR_PBL_4xPBL_4Bót
 ((
uöt32_t
)0x01000100Ë

	)

7681 
	#ETH_DMABMR_PBL_4xPBL_8Bót
 ((
uöt32_t
)0x01000200Ë

	)

7682 
	#ETH_DMABMR_PBL_4xPBL_16Bót
 ((
uöt32_t
)0x01000400Ë

	)

7683 
	#ETH_DMABMR_PBL_4xPBL_32Bót
 ((
uöt32_t
)0x01000800Ë

	)

7684 
	#ETH_DMABMR_PBL_4xPBL_64Bót
 ((
uöt32_t
)0x01001000Ë

	)

7685 
	#ETH_DMABMR_PBL_4xPBL_128Bót
 ((
uöt32_t
)0x01002000Ë

	)

7686 
	#ETH_DMABMR_DSL
 ((
uöt32_t
)0x0000007CË

	)

7687 
	#ETH_DMABMR_DA
 ((
uöt32_t
)0x00000002Ë

	)

7688 
	#ETH_DMABMR_SR
 ((
uöt32_t
)0x00000001Ë

	)

7691 
	#ETH_DMATPDR_TPD
 ((
uöt32_t
)0xFFFFFFFFË

	)

7694 
	#ETH_DMARPDR_RPD
 ((
uöt32_t
)0xFFFFFFFFË

	)

7697 
	#ETH_DMARDLAR_SRL
 ((
uöt32_t
)0xFFFFFFFFË

	)

7700 
	#ETH_DMATDLAR_STL
 ((
uöt32_t
)0xFFFFFFFFË

	)

7703 
	#ETH_DMASR_TSTS
 ((
uöt32_t
)0x20000000Ë

	)

7704 
	#ETH_DMASR_PMTS
 ((
uöt32_t
)0x10000000Ë

	)

7705 
	#ETH_DMASR_MMCS
 ((
uöt32_t
)0x08000000Ë

	)

7706 
	#ETH_DMASR_EBS
 ((
uöt32_t
)0x03800000Ë

	)

7708 
	#ETH_DMASR_EBS_DescAc˚ss
 ((
uöt32_t
)0x02000000Ë

	)

7709 
	#ETH_DMASR_EBS_RódTønsf
 ((
uöt32_t
)0x01000000Ë

	)

7710 
	#ETH_DMASR_EBS_D©aTønsfTx
 ((
uöt32_t
)0x00800000Ë

	)

7711 
	#ETH_DMASR_TPS
 ((
uöt32_t
)0x00700000Ë

	)

7712 
	#ETH_DMASR_TPS_St›≥d
 ((
uöt32_t
)0x00000000Ë

	)

7713 
	#ETH_DMASR_TPS_Fëchög
 ((
uöt32_t
)0x00100000Ë

	)

7714 
	#ETH_DMASR_TPS_Waôög
 ((
uöt32_t
)0x00200000Ë

	)

7715 
	#ETH_DMASR_TPS_Ródög
 ((
uöt32_t
)0x00300000Ë

	)

7716 
	#ETH_DMASR_TPS_Su•íded
 ((
uöt32_t
)0x00600000Ë

	)

7717 
	#ETH_DMASR_TPS_Closög
 ((
uöt32_t
)0x00700000Ë

	)

7718 
	#ETH_DMASR_RPS
 ((
uöt32_t
)0x000E0000Ë

	)

7719 
	#ETH_DMASR_RPS_St›≥d
 ((
uöt32_t
)0x00000000Ë

	)

7720 
	#ETH_DMASR_RPS_Fëchög
 ((
uöt32_t
)0x00020000Ë

	)

7721 
	#ETH_DMASR_RPS_Waôög
 ((
uöt32_t
)0x00060000Ë

	)

7722 
	#ETH_DMASR_RPS_Su•íded
 ((
uöt32_t
)0x00080000Ë

	)

7723 
	#ETH_DMASR_RPS_Closög
 ((
uöt32_t
)0x000A0000Ë

	)

7724 
	#ETH_DMASR_RPS_Queuög
 ((
uöt32_t
)0x000E0000Ë

	)

7725 
	#ETH_DMASR_NIS
 ((
uöt32_t
)0x00010000Ë

	)

7726 
	#ETH_DMASR_AIS
 ((
uöt32_t
)0x00008000Ë

	)

7727 
	#ETH_DMASR_ERS
 ((
uöt32_t
)0x00004000Ë

	)

7728 
	#ETH_DMASR_FBES
 ((
uöt32_t
)0x00002000Ë

	)

7729 
	#ETH_DMASR_ETS
 ((
uöt32_t
)0x00000400Ë

	)

7730 
	#ETH_DMASR_RWTS
 ((
uöt32_t
)0x00000200Ë

	)

7731 
	#ETH_DMASR_RPSS
 ((
uöt32_t
)0x00000100Ë

	)

7732 
	#ETH_DMASR_RBUS
 ((
uöt32_t
)0x00000080Ë

	)

7733 
	#ETH_DMASR_RS
 ((
uöt32_t
)0x00000040Ë

	)

7734 
	#ETH_DMASR_TUS
 ((
uöt32_t
)0x00000020Ë

	)

7735 
	#ETH_DMASR_ROS
 ((
uöt32_t
)0x00000010Ë

	)

7736 
	#ETH_DMASR_TJTS
 ((
uöt32_t
)0x00000008Ë

	)

7737 
	#ETH_DMASR_TBUS
 ((
uöt32_t
)0x00000004Ë

	)

7738 
	#ETH_DMASR_TPSS
 ((
uöt32_t
)0x00000002Ë

	)

7739 
	#ETH_DMASR_TS
 ((
uöt32_t
)0x00000001Ë

	)

7742 
	#ETH_DMAOMR_DTCEFD
 ((
uöt32_t
)0x04000000Ë

	)

7743 
	#ETH_DMAOMR_RSF
 ((
uöt32_t
)0x02000000Ë

	)

7744 
	#ETH_DMAOMR_DFRF
 ((
uöt32_t
)0x01000000Ë

	)

7745 
	#ETH_DMAOMR_TSF
 ((
uöt32_t
)0x00200000Ë

	)

7746 
	#ETH_DMAOMR_FTF
 ((
uöt32_t
)0x00100000Ë

	)

7747 
	#ETH_DMAOMR_TTC
 ((
uöt32_t
)0x0001C000Ë

	)

7748 
	#ETH_DMAOMR_TTC_64Byãs
 ((
uöt32_t
)0x00000000Ë

	)

7749 
	#ETH_DMAOMR_TTC_128Byãs
 ((
uöt32_t
)0x00004000Ë

	)

7750 
	#ETH_DMAOMR_TTC_192Byãs
 ((
uöt32_t
)0x00008000Ë

	)

7751 
	#ETH_DMAOMR_TTC_256Byãs
 ((
uöt32_t
)0x0000C000Ë

	)

7752 
	#ETH_DMAOMR_TTC_40Byãs
 ((
uöt32_t
)0x00010000Ë

	)

7753 
	#ETH_DMAOMR_TTC_32Byãs
 ((
uöt32_t
)0x00014000Ë

	)

7754 
	#ETH_DMAOMR_TTC_24Byãs
 ((
uöt32_t
)0x00018000Ë

	)

7755 
	#ETH_DMAOMR_TTC_16Byãs
 ((
uöt32_t
)0x0001C000Ë

	)

7756 
	#ETH_DMAOMR_ST
 ((
uöt32_t
)0x00002000Ë

	)

7757 
	#ETH_DMAOMR_FEF
 ((
uöt32_t
)0x00000080Ë

	)

7758 
	#ETH_DMAOMR_FUGF
 ((
uöt32_t
)0x00000040Ë

	)

7759 
	#ETH_DMAOMR_RTC
 ((
uöt32_t
)0x00000018Ë

	)

7760 
	#ETH_DMAOMR_RTC_64Byãs
 ((
uöt32_t
)0x00000000Ë

	)

7761 
	#ETH_DMAOMR_RTC_32Byãs
 ((
uöt32_t
)0x00000008Ë

	)

7762 
	#ETH_DMAOMR_RTC_96Byãs
 ((
uöt32_t
)0x00000010Ë

	)

7763 
	#ETH_DMAOMR_RTC_128Byãs
 ((
uöt32_t
)0x00000018Ë

	)

7764 
	#ETH_DMAOMR_OSF
 ((
uöt32_t
)0x00000004Ë

	)

7765 
	#ETH_DMAOMR_SR
 ((
uöt32_t
)0x00000002Ë

	)

7768 
	#ETH_DMAIER_NISE
 ((
uöt32_t
)0x00010000Ë

	)

7769 
	#ETH_DMAIER_AISE
 ((
uöt32_t
)0x00008000Ë

	)

7770 
	#ETH_DMAIER_ERIE
 ((
uöt32_t
)0x00004000Ë

	)

7771 
	#ETH_DMAIER_FBEIE
 ((
uöt32_t
)0x00002000Ë

	)

7772 
	#ETH_DMAIER_ETIE
 ((
uöt32_t
)0x00000400Ë

	)

7773 
	#ETH_DMAIER_RWTIE
 ((
uöt32_t
)0x00000200Ë

	)

7774 
	#ETH_DMAIER_RPSIE
 ((
uöt32_t
)0x00000100Ë

	)

7775 
	#ETH_DMAIER_RBUIE
 ((
uöt32_t
)0x00000080Ë

	)

7776 
	#ETH_DMAIER_RIE
 ((
uöt32_t
)0x00000040Ë

	)

7777 
	#ETH_DMAIER_TUIE
 ((
uöt32_t
)0x00000020Ë

	)

7778 
	#ETH_DMAIER_ROIE
 ((
uöt32_t
)0x00000010Ë

	)

7779 
	#ETH_DMAIER_TJTIE
 ((
uöt32_t
)0x00000008Ë

	)

7780 
	#ETH_DMAIER_TBUIE
 ((
uöt32_t
)0x00000004Ë

	)

7781 
	#ETH_DMAIER_TPSIE
 ((
uöt32_t
)0x00000002Ë

	)

7782 
	#ETH_DMAIER_TIE
 ((
uöt32_t
)0x00000001Ë

	)

7785 
	#ETH_DMAMFBOCR_OFOC
 ((
uöt32_t
)0x10000000Ë

	)

7786 
	#ETH_DMAMFBOCR_MFA
 ((
uöt32_t
)0x0FFE0000Ë

	)

7787 
	#ETH_DMAMFBOCR_OMFC
 ((
uöt32_t
)0x00010000Ë

	)

7788 
	#ETH_DMAMFBOCR_MFC
 ((
uöt32_t
)0x0000FFFFË

	)

7791 
	#ETH_DMACHTDR_HTDAP
 ((
uöt32_t
)0xFFFFFFFFË

	)

7794 
	#ETH_DMACHRDR_HRDAP
 ((
uöt32_t
)0xFFFFFFFFË

	)

7797 
	#ETH_DMACHTBAR_HTBAP
 ((
uöt32_t
)0xFFFFFFFFË

	)

7800 
	#ETH_DMACHRBAR_HRBAP
 ((
uöt32_t
)0xFFFFFFFFË

	)

7811 #ifde‡
USE_STDPERIPH_DRIVER


7812 
	~"°m32f10x_c⁄f.h
"

7819 
	#SET_BIT
(
REG
, 
BIT
Ë((REGË|(BIT))

	)

7821 
	#CLEAR_BIT
(
REG
, 
BIT
Ë((REGË&~(BIT))

	)

7823 
	#READ_BIT
(
REG
, 
BIT
Ë((REGË& (BIT))

	)

7825 
	#CLEAR_REG
(
REG
Ë((REGË(0x0))

	)

7827 
	#WRITE_REG
(
REG
, 
VAL
Ë((REGË(VAL))

	)

7829 
	#READ_REG
(
REG
Ë((REG))

	)

7831 
	#MODIFY_REG
(
REG
, 
CLEARMASK
, 
SETMASK
Ë
	`WRITE_REG
((REG), (((
	`READ_REG
(REG)Ë& (~(CLEARMASK))Ë| (SETMASK)))

	)

7837 #ifde‡
__˝lu•lus


	@Source/CMSIS/Core/CM3/system_stm32f10x.c

33 
	~"°m32f10x.h
"

77 
	#SYSCLK_FREQ_72MHz
 72000000

	)

81 #ifde‡
STM32F10X_HD


104 #ifde‡
SYSCLK_FREQ_HSE


105 c⁄° 
uöt32_t
 
	gSy°emFªquícy
 = 
SYSCLK_FREQ_HSE
;

106 c⁄° 
uöt32_t
 
	gSy°emFªquícy_SysClk
 = 
SYSCLK_FREQ_HSE
;

107 c⁄° 
uöt32_t
 
	gSy°emFªquícy_AHBClk
 = 
SYSCLK_FREQ_HSE
;

108 c⁄° 
uöt32_t
 
	gSy°emFªquícy_APB1Clk
 = 
SYSCLK_FREQ_HSE
;

109 c⁄° 
uöt32_t
 
	gSy°emFªquícy_APB2Clk
 = 
SYSCLK_FREQ_HSE
;

110 #ñi‡
deföed
 
SYSCLK_FREQ_24MHz


111 c⁄° 
uöt32_t
 
	gSy°emFªquícy
 = 
SYSCLK_FREQ_24MHz
;

112 c⁄° 
uöt32_t
 
	gSy°emFªquícy_SysClk
 = 
SYSCLK_FREQ_24MHz
;

113 c⁄° 
uöt32_t
 
	gSy°emFªquícy_AHBClk
 = 
SYSCLK_FREQ_24MHz
;

114 c⁄° 
uöt32_t
 
	gSy°emFªquícy_APB1Clk
 = 
SYSCLK_FREQ_24MHz
;

115 c⁄° 
uöt32_t
 
	gSy°emFªquícy_APB2Clk
 = 
SYSCLK_FREQ_24MHz
;

116 #ñi‡
deföed
 
SYSCLK_FREQ_36MHz


117 c⁄° 
uöt32_t
 
	gSy°emFªquícy
 = 
SYSCLK_FREQ_36MHz
;

118 c⁄° 
uöt32_t
 
	gSy°emFªquícy_SysClk
 = 
SYSCLK_FREQ_36MHz
;

119 c⁄° 
uöt32_t
 
	gSy°emFªquícy_AHBClk
 = 
SYSCLK_FREQ_36MHz
;

120 c⁄° 
uöt32_t
 
	gSy°emFªquícy_APB1Clk
 = 
SYSCLK_FREQ_36MHz
;

121 c⁄° 
uöt32_t
 
	gSy°emFªquícy_APB2Clk
 = 
SYSCLK_FREQ_36MHz
;

122 #ñi‡
deföed
 
SYSCLK_FREQ_48MHz


123 c⁄° 
uöt32_t
 
	gSy°emFªquícy
 = 
SYSCLK_FREQ_48MHz
;

124 c⁄° 
uöt32_t
 
	gSy°emFªquícy_SysClk
 = 
SYSCLK_FREQ_48MHz
;

125 c⁄° 
uöt32_t
 
	gSy°emFªquícy_AHBClk
 = 
SYSCLK_FREQ_48MHz
;

126 c⁄° 
uöt32_t
 
	gSy°emFªquícy_APB1Clk
 = (
SYSCLK_FREQ_48MHz
/2);

127 c⁄° 
uöt32_t
 
	gSy°emFªquícy_APB2Clk
 = 
SYSCLK_FREQ_48MHz
;

128 #ñi‡
deföed
 
SYSCLK_FREQ_56MHz


129 c⁄° 
uöt32_t
 
	gSy°emFªquícy
 = 
SYSCLK_FREQ_56MHz
;

130 c⁄° 
uöt32_t
 
	gSy°emFªquícy_SysClk
 = 
SYSCLK_FREQ_56MHz
;

131 c⁄° 
uöt32_t
 
	gSy°emFªquícy_AHBClk
 = 
SYSCLK_FREQ_56MHz
;

132 c⁄° 
uöt32_t
 
	gSy°emFªquícy_APB1Clk
 = (
SYSCLK_FREQ_56MHz
/2);

133 c⁄° 
uöt32_t
 
	gSy°emFªquícy_APB2Clk
 = 
SYSCLK_FREQ_56MHz
;

134 #ñi‡
deföed
 
SYSCLK_FREQ_72MHz


135 c⁄° 
uöt32_t
 
	gSy°emFªquícy
 = 
SYSCLK_FREQ_72MHz
;

136 c⁄° 
uöt32_t
 
	gSy°emFªquícy_SysClk
 = 
SYSCLK_FREQ_72MHz
;

137 c⁄° 
uöt32_t
 
	gSy°emFªquícy_AHBClk
 = 
SYSCLK_FREQ_72MHz
;

138 c⁄° 
uöt32_t
 
	gSy°emFªquícy_APB1Clk
 = (
SYSCLK_FREQ_72MHz
/2);

139 c⁄° 
uöt32_t
 
	gSy°emFªquícy_APB2Clk
 = 
SYSCLK_FREQ_72MHz
;

141 c⁄° 
uöt32_t
 
	gSy°emFªquícy
 = 
HSI_VÆue
;

142 c⁄° 
uöt32_t
 
	gSy°emFªquícy_SysClk
 = 
HSI_VÆue
;

143 c⁄° 
uöt32_t
 
	gSy°emFªquícy_AHBClk
 = 
HSI_VÆue
;

144 c⁄° 
uöt32_t
 
	gSy°emFªquícy_APB1Clk
 = 
HSI_VÆue
;

145 c⁄° 
uöt32_t
 
	gSy°emFªquícy_APB2Clk
 = 
HSI_VÆue
;

156 
SëSysClock
();

158 #ifde‡
SYSCLK_FREQ_HSE


159 
SëSysClockToHSE
();

160 #ñi‡
deföed
 
SYSCLK_FREQ_24MHz


161 
SëSysClockTo24
();

162 #ñi‡
deföed
 
SYSCLK_FREQ_36MHz


163 
SëSysClockTo36
();

164 #ñi‡
deföed
 
SYSCLK_FREQ_48MHz


165 
SëSysClockTo48
();

166 #ñi‡
deföed
 
SYSCLK_FREQ_56MHz


167 
SëSysClockTo56
();

168 #ñi‡
deföed
 
SYSCLK_FREQ_72MHz


169 
SëSysClockTo72
();

187 
	$Sy°emInô
 ()

191 
RCC
->
CR
 |(
uöt32_t
)0x00000001;

194 #i‚de‡
STM32F10X_CL


195 
RCC
->
CFGR
 &(
uöt32_t
)0xF8FF0000;

197 
RCC
->
CFGR
 &(
uöt32_t
)0xF0FF0000;

201 
RCC
->
CR
 &(
uöt32_t
)0xFEF6FFFF;

204 
RCC
->
CR
 &(
uöt32_t
)0xFFFBFFFF;

207 
RCC
->
CFGR
 &(
uöt32_t
)0xFF80FFFF;

209 #i‚de‡
STM32F10X_CL


211 
RCC
->
CIR
 = 0x009F0000;

214 
RCC
->
CR
 &(
uöt32_t
)0xEBFFFFFF;

217 
RCC
->
CIR
 = 0x00FF0000;

220 
RCC
->
CFGR2
 = 0x00000000;

225 
	`SëSysClock
();

227 
	}
}

234 
	$SëSysClock
()

236 #ifde‡
SYSCLK_FREQ_HSE


237 
	`SëSysClockToHSE
();

238 #ñi‡
deföed
 
SYSCLK_FREQ_24MHz


239 
	`SëSysClockTo24
();

240 #ñi‡
deföed
 
SYSCLK_FREQ_36MHz


241 
	`SëSysClockTo36
();

242 #ñi‡
deföed
 
SYSCLK_FREQ_48MHz


243 
	`SëSysClockTo48
();

244 #ñi‡
deföed
 
SYSCLK_FREQ_56MHz


245 
	`SëSysClockTo56
();

246 #ñi‡
deföed
 
SYSCLK_FREQ_72MHz


247 
	`SëSysClockTo72
();

252 
	}
}

260 #ifde‡
DATA_IN_ExtSRAM


270 
	$Sy°emInô_ExtMemCé
()

276 
RCC
->
AHBENR
 = 0x00000114;

279 
RCC
->
APB2ENR
 = 0x000001E0;

287 
GPIOD
->
CRL
 = 0x44BB44BB;

288 
GPIOD
->
CRH
 = 0xBBBBBBBB;

290 
GPIOE
->
CRL
 = 0xB44444BB;

291 
GPIOE
->
CRH
 = 0xBBBBBBBB;

293 
GPIOF
->
CRL
 = 0x44BBBBBB;

294 
GPIOF
->
CRH
 = 0xBBBB4444;

296 
GPIOG
->
CRL
 = 0x44BBBBBB;

297 
GPIOG
->
CRH
 = 0x44444B44;

302 
FSMC_B™k1
->
BTCR
[4] = 0x00001011;

303 
FSMC_B™k1
->
BTCR
[5] = 0x00000200;

304 
	}
}

307 #ifde‡
SYSCLK_FREQ_HSE


315 
	$SëSysClockToHSE
()

317 
__IO
 
uöt32_t
 
SèπUpCou¡î
 = 0, 
HSESètus
 = 0;

321 
RCC
->
CR
 |((
uöt32_t
)
RCC_CR_HSEON
);

326 
HSESètus
 = 
RCC
->
CR
 & 
RCC_CR_HSERDY
;

327 
SèπUpCou¡î
++;

328 } (
HSESètus
 =0Ë&& (
SèπUpCou¡î
 !
HSESèπUp_TimeOut
));

330 i‡((
RCC
->
CR
 & 
RCC_CR_HSERDY
Ë!
RESET
)

332 
HSESètus
 = (
uöt32_t
)0x01;

336 
HSESètus
 = (
uöt32_t
)0x00;

339 i‡(
HSESètus
 =(
uöt32_t
)0x01)

342 
FLASH
->
ACR
 |
FLASH_ACR_PRFTBE
;

345 
FLASH
->
ACR
 &(
uöt32_t
)((uöt32_t)~
FLASH_ACR_LATENCY
);

347 #i‚de‡
STM32F10X_CL


348 
FLASH
->
ACR
 |(
uöt32_t
)
FLASH_ACR_LATENCY_0
;

350 i‡(
HSE_VÆue
 <= 24000000)

352 
FLASH
->
ACR
 |(
uöt32_t
)
FLASH_ACR_LATENCY_0
;

356 
FLASH
->
ACR
 |(
uöt32_t
)
FLASH_ACR_LATENCY_1
;

361 
RCC
->
CFGR
 |(
uöt32_t
)
RCC_CFGR_HPRE_DIV1
;

364 
RCC
->
CFGR
 |(
uöt32_t
)
RCC_CFGR_PPRE2_DIV1
;

367 
RCC
->
CFGR
 |(
uöt32_t
)
RCC_CFGR_PPRE1_DIV1
;

370 
RCC
->
CFGR
 &(
uöt32_t
)((uöt32_t)~(
RCC_CFGR_SW
));

371 
RCC
->
CFGR
 |(
uöt32_t
)
RCC_CFGR_SW_HSE
;

374 (
RCC
->
CFGR
 & (
uöt32_t
)
RCC_CFGR_SWS
) != (uint32_t)0x04)

387 
	}
}

388 #ñi‡
deföed
 
SYSCLK_FREQ_24MHz


396 
	$SëSysClockTo24
()

398 
__IO
 
uöt32_t
 
SèπUpCou¡î
 = 0, 
HSESètus
 = 0;

402 
RCC
->
CR
 |((
uöt32_t
)
RCC_CR_HSEON
);

407 
HSESètus
 = 
RCC
->
CR
 & 
RCC_CR_HSERDY
;

408 
SèπUpCou¡î
++;

409 } (
HSESètus
 =0Ë&& (
SèπUpCou¡î
 !
HSESèπUp_TimeOut
));

411 i‡((
RCC
->
CR
 & 
RCC_CR_HSERDY
Ë!
RESET
)

413 
HSESètus
 = (
uöt32_t
)0x01;

417 
HSESètus
 = (
uöt32_t
)0x00;

420 i‡(
HSESètus
 =(
uöt32_t
)0x01)

423 
FLASH
->
ACR
 |
FLASH_ACR_PRFTBE
;

426 
FLASH
->
ACR
 &(
uöt32_t
)((uöt32_t)~
FLASH_ACR_LATENCY
);

427 
FLASH
->
ACR
 |(
uöt32_t
)
FLASH_ACR_LATENCY_0
;

430 
RCC
->
CFGR
 |(
uöt32_t
)
RCC_CFGR_HPRE_DIV1
;

433 
RCC
->
CFGR
 |(
uöt32_t
)
RCC_CFGR_PPRE2_DIV1
;

436 
RCC
->
CFGR
 |(
uöt32_t
)
RCC_CFGR_PPRE1_DIV1
;

438 #ifde‡
STM32F10X_CL


441 
RCC
->
CFGR
 &(
uöt32_t
)~(
RCC_CFGR_PLLXTPRE
 | 
RCC_CFGR_PLLSRC
 | 
RCC_CFGR_PLLMULL
);

442 
RCC
->
CFGR
 |(
uöt32_t
)(
RCC_CFGR_PLLXTPRE_PREDIV1
 | 
RCC_CFGR_PLLSRC_PREDIV1
 |

443 
RCC_CFGR_PLLMULL6
);

447 
RCC
->
CFGR2
 &(
uöt32_t
)~(
RCC_CFGR2_PREDIV2
 | 
RCC_CFGR2_PLL2MUL
 |

448 
RCC_CFGR2_PREDIV1
 | 
RCC_CFGR2_PREDIV1SRC
);

449 
RCC
->
CFGR2
 |(
uöt32_t
)(
RCC_CFGR2_PREDIV2_DIV5
 | 
RCC_CFGR2_PLL2MUL8
 |

450 
RCC_CFGR2_PREDIV1SRC_PLL2
 | 
RCC_CFGR2_PREDIV1_DIV10
);

453 
RCC
->
CR
 |
RCC_CR_PLL2ON
;

455 (
RCC
->
CR
 & 
RCC_CR_PLL2RDY
) == 0)

460 
RCC
->
CFGR
 &(
uöt32_t
)((uöt32_t)~(
RCC_CFGR_PLLSRC
 | 
RCC_CFGR_PLLXTPRE
 | 
RCC_CFGR_PLLMULL
));

461 
RCC
->
CFGR
 |(
uöt32_t
)(
RCC_CFGR_PLLSRC_HSE
 | 
RCC_CFGR_PLLXTPRE_HSE_Div2
 | 
RCC_CFGR_PLLMULL6
);

465 
RCC
->
CR
 |
RCC_CR_PLLON
;

468 (
RCC
->
CR
 & 
RCC_CR_PLLRDY
) == 0)

473 
RCC
->
CFGR
 &(
uöt32_t
)((uöt32_t)~(
RCC_CFGR_SW
));

474 
RCC
->
CFGR
 |(
uöt32_t
)
RCC_CFGR_SW_PLL
;

477 (
RCC
->
CFGR
 & (
uöt32_t
)
RCC_CFGR_SWS
) != (uint32_t)0x08)

490 
	}
}

491 #ñi‡
deföed
 
SYSCLK_FREQ_36MHz


499 
	$SëSysClockTo36
()

501 
__IO
 
uöt32_t
 
SèπUpCou¡î
 = 0, 
HSESètus
 = 0;

505 
RCC
->
CR
 |((
uöt32_t
)
RCC_CR_HSEON
);

510 
HSESètus
 = 
RCC
->
CR
 & 
RCC_CR_HSERDY
;

511 
SèπUpCou¡î
++;

512 } (
HSESètus
 =0Ë&& (
SèπUpCou¡î
 !
HSESèπUp_TimeOut
));

514 i‡((
RCC
->
CR
 & 
RCC_CR_HSERDY
Ë!
RESET
)

516 
HSESètus
 = (
uöt32_t
)0x01;

520 
HSESètus
 = (
uöt32_t
)0x00;

523 i‡(
HSESètus
 =(
uöt32_t
)0x01)

526 
FLASH
->
ACR
 |
FLASH_ACR_PRFTBE
;

529 
FLASH
->
ACR
 &(
uöt32_t
)((uöt32_t)~
FLASH_ACR_LATENCY
);

530 
FLASH
->
ACR
 |(
uöt32_t
)
FLASH_ACR_LATENCY_1
;

533 
RCC
->
CFGR
 |(
uöt32_t
)
RCC_CFGR_HPRE_DIV1
;

536 
RCC
->
CFGR
 |(
uöt32_t
)
RCC_CFGR_PPRE2_DIV1
;

539 
RCC
->
CFGR
 |(
uöt32_t
)
RCC_CFGR_PPRE1_DIV1
;

541 #ifde‡
STM32F10X_CL


545 
RCC
->
CFGR
 &(
uöt32_t
)~(
RCC_CFGR_PLLXTPRE
 | 
RCC_CFGR_PLLSRC
 | 
RCC_CFGR_PLLMULL
);

546 
RCC
->
CFGR
 |(
uöt32_t
)(
RCC_CFGR_PLLXTPRE_PREDIV1
 | 
RCC_CFGR_PLLSRC_PREDIV1
 |

547 
RCC_CFGR_PLLMULL9
);

552 
RCC
->
CFGR2
 &(
uöt32_t
)~(
RCC_CFGR2_PREDIV2
 | 
RCC_CFGR2_PLL2MUL
 |

553 
RCC_CFGR2_PREDIV1
 | 
RCC_CFGR2_PREDIV1SRC
);

554 
RCC
->
CFGR2
 |(
uöt32_t
)(
RCC_CFGR2_PREDIV2_DIV5
 | 
RCC_CFGR2_PLL2MUL8
 |

555 
RCC_CFGR2_PREDIV1SRC_PLL2
 | 
RCC_CFGR2_PREDIV1_DIV10
);

558 
RCC
->
CR
 |
RCC_CR_PLL2ON
;

560 (
RCC
->
CR
 & 
RCC_CR_PLL2RDY
) == 0)

566 
RCC
->
CFGR
 &(
uöt32_t
)((uöt32_t)~(
RCC_CFGR_PLLSRC
 | 
RCC_CFGR_PLLXTPRE
 | 
RCC_CFGR_PLLMULL
));

567 
RCC
->
CFGR
 |(
uöt32_t
)(
RCC_CFGR_PLLSRC_HSE
 | 
RCC_CFGR_PLLXTPRE_HSE_Div2
 | 
RCC_CFGR_PLLMULL9
);

571 
RCC
->
CR
 |
RCC_CR_PLLON
;

574 (
RCC
->
CR
 & 
RCC_CR_PLLRDY
) == 0)

579 
RCC
->
CFGR
 &(
uöt32_t
)((uöt32_t)~(
RCC_CFGR_SW
));

580 
RCC
->
CFGR
 |(
uöt32_t
)
RCC_CFGR_SW_PLL
;

583 (
RCC
->
CFGR
 & (
uöt32_t
)
RCC_CFGR_SWS
) != (uint32_t)0x08)

596 
	}
}

597 #ñi‡
deföed
 
SYSCLK_FREQ_48MHz


605 
	$SëSysClockTo48
()

607 
__IO
 
uöt32_t
 
SèπUpCou¡î
 = 0, 
HSESètus
 = 0;

611 
RCC
->
CR
 |((
uöt32_t
)
RCC_CR_HSEON
);

616 
HSESètus
 = 
RCC
->
CR
 & 
RCC_CR_HSERDY
;

617 
SèπUpCou¡î
++;

618 } (
HSESètus
 =0Ë&& (
SèπUpCou¡î
 !
HSESèπUp_TimeOut
));

620 i‡((
RCC
->
CR
 & 
RCC_CR_HSERDY
Ë!
RESET
)

622 
HSESètus
 = (
uöt32_t
)0x01;

626 
HSESètus
 = (
uöt32_t
)0x00;

629 i‡(
HSESètus
 =(
uöt32_t
)0x01)

632 
FLASH
->
ACR
 |
FLASH_ACR_PRFTBE
;

635 
FLASH
->
ACR
 &(
uöt32_t
)((uöt32_t)~
FLASH_ACR_LATENCY
);

636 
FLASH
->
ACR
 |(
uöt32_t
)
FLASH_ACR_LATENCY_1
;

639 
RCC
->
CFGR
 |(
uöt32_t
)
RCC_CFGR_HPRE_DIV1
;

642 
RCC
->
CFGR
 |(
uöt32_t
)
RCC_CFGR_PPRE2_DIV1
;

645 
RCC
->
CFGR
 |(
uöt32_t
)
RCC_CFGR_PPRE1_DIV2
;

647 #ifde‡
STM32F10X_CL


652 
RCC
->
CFGR2
 &(
uöt32_t
)~(
RCC_CFGR2_PREDIV2
 | 
RCC_CFGR2_PLL2MUL
 |

653 
RCC_CFGR2_PREDIV1
 | 
RCC_CFGR2_PREDIV1SRC
);

654 
RCC
->
CFGR2
 |(
uöt32_t
)(
RCC_CFGR2_PREDIV2_DIV5
 | 
RCC_CFGR2_PLL2MUL8
 |

655 
RCC_CFGR2_PREDIV1SRC_PLL2
 | 
RCC_CFGR2_PREDIV1_DIV5
);

658 
RCC
->
CR
 |
RCC_CR_PLL2ON
;

660 (
RCC
->
CR
 & 
RCC_CR_PLL2RDY
) == 0)

666 
RCC
->
CFGR
 &(
uöt32_t
)~(
RCC_CFGR_PLLXTPRE
 | 
RCC_CFGR_PLLSRC
 | 
RCC_CFGR_PLLMULL
);

667 
RCC
->
CFGR
 |(
uöt32_t
)(
RCC_CFGR_PLLXTPRE_PREDIV1
 | 
RCC_CFGR_PLLSRC_PREDIV1
 |

668 
RCC_CFGR_PLLMULL6
);

671 
RCC
->
CFGR
 &(
uöt32_t
)((uöt32_t)~(
RCC_CFGR_PLLSRC
 | 
RCC_CFGR_PLLXTPRE
 | 
RCC_CFGR_PLLMULL
));

672 
RCC
->
CFGR
 |(
uöt32_t
)(
RCC_CFGR_PLLSRC_HSE
 | 
RCC_CFGR_PLLMULL6
);

676 
RCC
->
CR
 |
RCC_CR_PLLON
;

679 (
RCC
->
CR
 & 
RCC_CR_PLLRDY
) == 0)

684 
RCC
->
CFGR
 &(
uöt32_t
)((uöt32_t)~(
RCC_CFGR_SW
));

685 
RCC
->
CFGR
 |(
uöt32_t
)
RCC_CFGR_SW_PLL
;

688 (
RCC
->
CFGR
 & (
uöt32_t
)
RCC_CFGR_SWS
) != (uint32_t)0x08)

701 
	}
}

703 #ñi‡
deföed
 
SYSCLK_FREQ_56MHz


711 
	$SëSysClockTo56
()

713 
__IO
 
uöt32_t
 
SèπUpCou¡î
 = 0, 
HSESètus
 = 0;

717 
RCC
->
CR
 |((
uöt32_t
)
RCC_CR_HSEON
);

722 
HSESètus
 = 
RCC
->
CR
 & 
RCC_CR_HSERDY
;

723 
SèπUpCou¡î
++;

724 } (
HSESètus
 =0Ë&& (
SèπUpCou¡î
 !
HSESèπUp_TimeOut
));

726 i‡((
RCC
->
CR
 & 
RCC_CR_HSERDY
Ë!
RESET
)

728 
HSESètus
 = (
uöt32_t
)0x01;

732 
HSESètus
 = (
uöt32_t
)0x00;

735 i‡(
HSESètus
 =(
uöt32_t
)0x01)

738 
FLASH
->
ACR
 |
FLASH_ACR_PRFTBE
;

741 
FLASH
->
ACR
 &(
uöt32_t
)((uöt32_t)~
FLASH_ACR_LATENCY
);

742 
FLASH
->
ACR
 |(
uöt32_t
)
FLASH_ACR_LATENCY_1
;

745 
RCC
->
CFGR
 |(
uöt32_t
)
RCC_CFGR_HPRE_DIV1
;

748 
RCC
->
CFGR
 |(
uöt32_t
)
RCC_CFGR_PPRE2_DIV1
;

751 
RCC
->
CFGR
 |(
uöt32_t
)
RCC_CFGR_PPRE1_DIV2
;

753 #ifde‡
STM32F10X_CL


758 
RCC
->
CFGR2
 &(
uöt32_t
)~(
RCC_CFGR2_PREDIV2
 | 
RCC_CFGR2_PLL2MUL
 |

759 
RCC_CFGR2_PREDIV1
 | 
RCC_CFGR2_PREDIV1SRC
);

760 
RCC
->
CFGR2
 |(
uöt32_t
)(
RCC_CFGR2_PREDIV2_DIV5
 | 
RCC_CFGR2_PLL2MUL8
 |

761 
RCC_CFGR2_PREDIV1SRC_PLL2
 | 
RCC_CFGR2_PREDIV1_DIV5
);

764 
RCC
->
CR
 |
RCC_CR_PLL2ON
;

766 (
RCC
->
CR
 & 
RCC_CR_PLL2RDY
) == 0)

772 
RCC
->
CFGR
 &(
uöt32_t
)~(
RCC_CFGR_PLLXTPRE
 | 
RCC_CFGR_PLLSRC
 | 
RCC_CFGR_PLLMULL
);

773 
RCC
->
CFGR
 |(
uöt32_t
)(
RCC_CFGR_PLLXTPRE_PREDIV1
 | 
RCC_CFGR_PLLSRC_PREDIV1
 |

774 
RCC_CFGR_PLLMULL7
);

777 
RCC
->
CFGR
 &(
uöt32_t
)((uöt32_t)~(
RCC_CFGR_PLLSRC
 | 
RCC_CFGR_PLLXTPRE
 | 
RCC_CFGR_PLLMULL
));

778 
RCC
->
CFGR
 |(
uöt32_t
)(
RCC_CFGR_PLLSRC_HSE
 | 
RCC_CFGR_PLLMULL7
);

783 
RCC
->
CR
 |
RCC_CR_PLLON
;

786 (
RCC
->
CR
 & 
RCC_CR_PLLRDY
) == 0)

791 
RCC
->
CFGR
 &(
uöt32_t
)((uöt32_t)~(
RCC_CFGR_SW
));

792 
RCC
->
CFGR
 |(
uöt32_t
)
RCC_CFGR_SW_PLL
;

795 (
RCC
->
CFGR
 & (
uöt32_t
)
RCC_CFGR_SWS
) != (uint32_t)0x08)

808 
	}
}

810 #ñi‡
deföed
 
SYSCLK_FREQ_72MHz


818 
	$SëSysClockTo72
()

820 
__IO
 
uöt32_t
 
SèπUpCou¡î
 = 0, 
HSESètus
 = 0;

824 
RCC
->
CR
 |((
uöt32_t
)
RCC_CR_HSEON
);

829 
HSESètus
 = 
RCC
->
CR
 & 
RCC_CR_HSERDY
;

830 
SèπUpCou¡î
++;

831 } (
HSESètus
 =0Ë&& (
SèπUpCou¡î
 !
HSESèπUp_TimeOut
));

833 i‡((
RCC
->
CR
 & 
RCC_CR_HSERDY
Ë!
RESET
)

835 
HSESètus
 = (
uöt32_t
)0x01;

839 
HSESètus
 = (
uöt32_t
)0x00;

842 i‡(
HSESètus
 =(
uöt32_t
)0x01)

845 
FLASH
->
ACR
 |
FLASH_ACR_PRFTBE
;

848 
FLASH
->
ACR
 &(
uöt32_t
)((uöt32_t)~
FLASH_ACR_LATENCY
);

849 
FLASH
->
ACR
 |(
uöt32_t
)
FLASH_ACR_LATENCY_2
;

853 
RCC
->
CFGR
 |(
uöt32_t
)
RCC_CFGR_HPRE_DIV1
;

856 
RCC
->
CFGR
 |(
uöt32_t
)
RCC_CFGR_PPRE2_DIV1
;

859 
RCC
->
CFGR
 |(
uöt32_t
)
RCC_CFGR_PPRE1_DIV2
;

861 #ifde‡
STM32F10X_CL


866 
RCC
->
CFGR2
 &(
uöt32_t
)~(
RCC_CFGR2_PREDIV2
 | 
RCC_CFGR2_PLL2MUL
 |

867 
RCC_CFGR2_PREDIV1
 | 
RCC_CFGR2_PREDIV1SRC
);

868 
RCC
->
CFGR2
 |(
uöt32_t
)(
RCC_CFGR2_PREDIV2_DIV5
 | 
RCC_CFGR2_PLL2MUL8
 |

869 
RCC_CFGR2_PREDIV1SRC_PLL2
 | 
RCC_CFGR2_PREDIV1_DIV3
);

872 
RCC
->
CR
 |
RCC_CR_PLL2ON
;

874 (
RCC
->
CR
 & 
RCC_CR_PLL2RDY
) == 0)

880 
RCC
->
CFGR
 &(
uöt32_t
)~(
RCC_CFGR_PLLXTPRE
 | 
RCC_CFGR_PLLSRC
 | 
RCC_CFGR_PLLMULL
);

881 
RCC
->
CFGR
 |(
uöt32_t
)(
RCC_CFGR_PLLXTPRE_PREDIV1
 | 
RCC_CFGR_PLLSRC_PREDIV1
 |

882 
RCC_CFGR_PLLMULL9
);

885 
RCC
->
CFGR
 &(
uöt32_t
)((uöt32_t)~(
RCC_CFGR_PLLSRC
 | 
RCC_CFGR_PLLXTPRE
 |

886 
RCC_CFGR_PLLMULL
));

887 
RCC
->
CFGR
 |(
uöt32_t
)(
RCC_CFGR_PLLSRC_HSE
 | 
RCC_CFGR_PLLMULL9
);

891 
RCC
->
CR
 |
RCC_CR_PLLON
;

894 (
RCC
->
CR
 & 
RCC_CR_PLLRDY
) == 0)

899 
RCC
->
CFGR
 &(
uöt32_t
)((uöt32_t)~(
RCC_CFGR_SW
));

900 
RCC
->
CFGR
 |(
uöt32_t
)
RCC_CFGR_SW_PLL
;

903 (
RCC
->
CFGR
 & (
uöt32_t
)
RCC_CFGR_SWS
) != (uint32_t)0x08)

916 
	}
}

	@Source/CMSIS/Core/CM3/system_stm32f10x.h

32 #i‚de‡
__SYSTEM_STM32F10X_H


33 
	#__SYSTEM_STM32F10X_H


	)

35 #ifde‡
__˝lu•lus


52 c⁄° 
uöt32_t
 
Sy°emFªquícy
;

53 c⁄° 
uöt32_t
 
Sy°emFªquícy_SysClk
;

54 c⁄° 
uöt32_t
 
Sy°emFªquícy_AHBClk
;

55 c⁄° 
uöt32_t
 
Sy°emFªquícy_APB1Clk
;

56 c⁄° 
uöt32_t
 
Sy°emFªquícy_APB2Clk
;

82 
Sy°emInô
();

87 #ifde‡
__˝lu•lus


	@Source/STM32F10x_StdPeriph_Driver/inc/misc.h

23 #i‚de‡
__MISC_H


24 
	#__MISC_H


	)

26 #ifde‡
__˝lu•lus


31 
	~"°m32f10x.h
"

51 
uöt8_t
 
NVIC_IRQCh™√l
;

56 
uöt8_t
 
NVIC_IRQCh™√lPªem±i⁄Pri‹ôy
;

60 
uöt8_t
 
NVIC_IRQCh™√lSubPri‹ôy
;

64 
Fun˘i⁄ÆSèã
 
NVIC_IRQCh™√lCmd
;

67 } 
	tNVIC_InôTy≥Def
;

114 
	#NVIC_Ve˘Tab_RAM
 ((
uöt32_t
)0x20000000)

	)

115 
	#NVIC_Ve˘Tab_FLASH
 ((
uöt32_t
)0x08000000)

	)

116 
	#IS_NVIC_VECTTAB
(
VECTTAB
Ë(((VECTTABË=
NVIC_Ve˘Tab_RAM
Ë|| \

	)

117 ((
VECTTAB
Ë=
NVIC_Ve˘Tab_FLASH
))

126 
	#NVIC_LP_SEVONPEND
 ((
uöt8_t
)0x10)

	)

127 
	#NVIC_LP_SLEEPDEEP
 ((
uöt8_t
)0x04)

	)

128 
	#NVIC_LP_SLEEPONEXIT
 ((
uöt8_t
)0x02)

	)

129 
	#IS_NVIC_LP
(
LP
Ë(((LPË=
NVIC_LP_SEVONPEND
Ë|| \

	)

130 ((
LP
Ë=
NVIC_LP_SLEEPDEEP
) || \

131 ((
LP
Ë=
NVIC_LP_SLEEPONEXIT
))

140 
	#NVIC_Pri‹ôyGroup_0
 ((
uöt32_t
)0x700Ë

	)

142 
	#NVIC_Pri‹ôyGroup_1
 ((
uöt32_t
)0x600Ë

	)

144 
	#NVIC_Pri‹ôyGroup_2
 ((
uöt32_t
)0x500Ë

	)

146 
	#NVIC_Pri‹ôyGroup_3
 ((
uöt32_t
)0x400Ë

	)

148 
	#NVIC_Pri‹ôyGroup_4
 ((
uöt32_t
)0x300Ë

	)

151 
	#IS_NVIC_PRIORITY_GROUP
(
GROUP
Ë(((GROUPË=
NVIC_Pri‹ôyGroup_0
Ë|| \

	)

152 ((
GROUP
Ë=
NVIC_Pri‹ôyGroup_1
) || \

153 ((
GROUP
Ë=
NVIC_Pri‹ôyGroup_2
) || \

154 ((
GROUP
Ë=
NVIC_Pri‹ôyGroup_3
) || \

155 ((
GROUP
Ë=
NVIC_Pri‹ôyGroup_4
))

157 
	#IS_NVIC_PREEMPTION_PRIORITY
(
PRIORITY
Ë((PRIORITYË< 0x10)

	)

159 
	#IS_NVIC_SUB_PRIORITY
(
PRIORITY
Ë((PRIORITYË< 0x10)

	)

161 
	#IS_NVIC_OFFSET
(
OFFSET
Ë((OFFSETË< 0x0007FFFF)

	)

171 
	#SysTick_CLKSour˚_HCLK_Div8
 ((
uöt32_t
)0xFFFFFFFB)

	)

172 
	#SysTick_CLKSour˚_HCLK
 ((
uöt32_t
)0x00000004)

	)

173 
	#IS_SYSTICK_CLK_SOURCE
(
SOURCE
Ë(((SOURCEË=
SysTick_CLKSour˚_HCLK
Ë|| \

	)

174 ((
SOURCE
Ë=
SysTick_CLKSour˚_HCLK_Div8
))

195 
NVIC_Pri‹ôyGroupC⁄fig
(
uöt32_t
 
NVIC_Pri‹ôyGroup
);

196 
NVIC_Inô
(
NVIC_InôTy≥Def
* 
NVIC_InôSåu˘
);

197 
NVIC_SëVe˘‹TabÀ
(
uöt32_t
 
NVIC_Ve˘Tab
, uöt32_à
Off£t
);

198 
NVIC_Sy°emLPC⁄fig
(
uöt8_t
 
LowPowîMode
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

199 
SysTick_CLKSour˚C⁄fig
(
uöt32_t
 
SysTick_CLKSour˚
);

201 #ifde‡
__˝lu•lus


	@Source/STM32F10x_StdPeriph_Driver/inc/stm32f10x_adc.h

23 #i‚de‡
__STM32F10x_ADC_H


24 
	#__STM32F10x_ADC_H


	)

26 #ifde‡
__˝lu•lus


31 
	~"°m32f10x.h
"

51 
uöt32_t
 
ADC_Mode
;

55 
Fun˘i⁄ÆSèã
 
ADC_SˇnC⁄vMode
;

59 
Fun˘i⁄ÆSèã
 
ADC_C⁄töuousC⁄vMode
;

63 
uöt32_t
 
ADC_Exã∫ÆTrigC⁄v
;

67 
uöt32_t
 
ADC_D©aAlign
;

70 
uöt8_t
 
ADC_NbrOfCh™√l
;

73 }
	tADC_InôTy≥Def
;

82 
	#IS_ADC_ALL_PERIPH
(
PERIPH
Ë(((PERIPHË=
ADC1
Ë|| \

	)

83 ((
PERIPH
Ë=
ADC2
) || \

84 ((
PERIPH
Ë=
ADC3
))

86 
	#IS_ADC_DMA_PERIPH
(
PERIPH
Ë(((PERIPHË=
ADC1
Ë|| \

	)

87 ((
PERIPH
Ë=
ADC3
))

93 
	#ADC_Mode_Indïídít
 ((
uöt32_t
)0x00000000)

	)

94 
	#ADC_Mode_RegInjecSimu…
 ((
uöt32_t
)0x00010000)

	)

95 
	#ADC_Mode_RegSimu…_A…îTrig
 ((
uöt32_t
)0x00020000)

	)

96 
	#ADC_Mode_InjecSimu…_Fa°I¡îl
 ((
uöt32_t
)0x00030000)

	)

97 
	#ADC_Mode_InjecSimu…_SlowI¡îl
 ((
uöt32_t
)0x00040000)

	)

98 
	#ADC_Mode_InjecSimu…
 ((
uöt32_t
)0x00050000)

	)

99 
	#ADC_Mode_RegSimu…
 ((
uöt32_t
)0x00060000)

	)

100 
	#ADC_Mode_Fa°I¡îl
 ((
uöt32_t
)0x00070000)

	)

101 
	#ADC_Mode_SlowI¡îl
 ((
uöt32_t
)0x00080000)

	)

102 
	#ADC_Mode_A…îTrig
 ((
uöt32_t
)0x00090000)

	)

104 
	#IS_ADC_MODE
(
MODE
Ë(((MODEË=
ADC_Mode_Indïídít
Ë|| \

	)

105 ((
MODE
Ë=
ADC_Mode_RegInjecSimu…
) || \

106 ((
MODE
Ë=
ADC_Mode_RegSimu…_A…îTrig
) || \

107 ((
MODE
Ë=
ADC_Mode_InjecSimu…_Fa°I¡îl
) || \

108 ((
MODE
Ë=
ADC_Mode_InjecSimu…_SlowI¡îl
) || \

109 ((
MODE
Ë=
ADC_Mode_InjecSimu…
) || \

110 ((
MODE
Ë=
ADC_Mode_RegSimu…
) || \

111 ((
MODE
Ë=
ADC_Mode_Fa°I¡îl
) || \

112 ((
MODE
Ë=
ADC_Mode_SlowI¡îl
) || \

113 ((
MODE
Ë=
ADC_Mode_A…îTrig
))

122 
	#ADC_Exã∫ÆTrigC⁄v_T1_CC1
 ((
uöt32_t
)0x00000000Ë

	)

123 
	#ADC_Exã∫ÆTrigC⁄v_T1_CC2
 ((
uöt32_t
)0x00020000Ë

	)

124 
	#ADC_Exã∫ÆTrigC⁄v_T2_CC2
 ((
uöt32_t
)0x00060000Ë

	)

125 
	#ADC_Exã∫ÆTrigC⁄v_T3_TRGO
 ((
uöt32_t
)0x00080000Ë

	)

126 
	#ADC_Exã∫ÆTrigC⁄v_T4_CC4
 ((
uöt32_t
)0x000A0000Ë

	)

127 
	#ADC_Exã∫ÆTrigC⁄v_Ext_IT11_TIM8_TRGO
 ((
uöt32_t
)0x000C0000Ë

	)

129 
	#ADC_Exã∫ÆTrigC⁄v_T1_CC3
 ((
uöt32_t
)0x00040000Ë

	)

130 
	#ADC_Exã∫ÆTrigC⁄v_N⁄e
 ((
uöt32_t
)0x000E0000Ë

	)

132 
	#ADC_Exã∫ÆTrigC⁄v_T3_CC1
 ((
uöt32_t
)0x00000000Ë

	)

133 
	#ADC_Exã∫ÆTrigC⁄v_T2_CC3
 ((
uöt32_t
)0x00020000Ë

	)

134 
	#ADC_Exã∫ÆTrigC⁄v_T8_CC1
 ((
uöt32_t
)0x00060000Ë

	)

135 
	#ADC_Exã∫ÆTrigC⁄v_T8_TRGO
 ((
uöt32_t
)0x00080000Ë

	)

136 
	#ADC_Exã∫ÆTrigC⁄v_T5_CC1
 ((
uöt32_t
)0x000A0000Ë

	)

137 
	#ADC_Exã∫ÆTrigC⁄v_T5_CC3
 ((
uöt32_t
)0x000C0000Ë

	)

139 
	#IS_ADC_EXT_TRIG
(
REGTRIG
Ë(((REGTRIGË=
ADC_Exã∫ÆTrigC⁄v_T1_CC1
Ë|| \

	)

140 ((
REGTRIG
Ë=
ADC_Exã∫ÆTrigC⁄v_T1_CC2
) || \

141 ((
REGTRIG
Ë=
ADC_Exã∫ÆTrigC⁄v_T1_CC3
) || \

142 ((
REGTRIG
Ë=
ADC_Exã∫ÆTrigC⁄v_T2_CC2
) || \

143 ((
REGTRIG
Ë=
ADC_Exã∫ÆTrigC⁄v_T3_TRGO
) || \

144 ((
REGTRIG
Ë=
ADC_Exã∫ÆTrigC⁄v_T4_CC4
) || \

145 ((
REGTRIG
Ë=
ADC_Exã∫ÆTrigC⁄v_Ext_IT11_TIM8_TRGO
) || \

146 ((
REGTRIG
Ë=
ADC_Exã∫ÆTrigC⁄v_N⁄e
) || \

147 ((
REGTRIG
Ë=
ADC_Exã∫ÆTrigC⁄v_T3_CC1
) || \

148 ((
REGTRIG
Ë=
ADC_Exã∫ÆTrigC⁄v_T2_CC3
) || \

149 ((
REGTRIG
Ë=
ADC_Exã∫ÆTrigC⁄v_T8_CC1
) || \

150 ((
REGTRIG
Ë=
ADC_Exã∫ÆTrigC⁄v_T8_TRGO
) || \

151 ((
REGTRIG
Ë=
ADC_Exã∫ÆTrigC⁄v_T5_CC1
) || \

152 ((
REGTRIG
Ë=
ADC_Exã∫ÆTrigC⁄v_T5_CC3
))

161 
	#ADC_D©aAlign_Right
 ((
uöt32_t
)0x00000000)

	)

162 
	#ADC_D©aAlign_Le·
 ((
uöt32_t
)0x00000800)

	)

163 
	#IS_ADC_DATA_ALIGN
(
ALIGN
Ë(((ALIGNË=
ADC_D©aAlign_Right
Ë|| \

	)

164 ((
ALIGN
Ë=
ADC_D©aAlign_Le·
))

173 
	#ADC_Ch™√l_0
 ((
uöt8_t
)0x00)

	)

174 
	#ADC_Ch™√l_1
 ((
uöt8_t
)0x01)

	)

175 
	#ADC_Ch™√l_2
 ((
uöt8_t
)0x02)

	)

176 
	#ADC_Ch™√l_3
 ((
uöt8_t
)0x03)

	)

177 
	#ADC_Ch™√l_4
 ((
uöt8_t
)0x04)

	)

178 
	#ADC_Ch™√l_5
 ((
uöt8_t
)0x05)

	)

179 
	#ADC_Ch™√l_6
 ((
uöt8_t
)0x06)

	)

180 
	#ADC_Ch™√l_7
 ((
uöt8_t
)0x07)

	)

181 
	#ADC_Ch™√l_8
 ((
uöt8_t
)0x08)

	)

182 
	#ADC_Ch™√l_9
 ((
uöt8_t
)0x09)

	)

183 
	#ADC_Ch™√l_10
 ((
uöt8_t
)0x0A)

	)

184 
	#ADC_Ch™√l_11
 ((
uöt8_t
)0x0B)

	)

185 
	#ADC_Ch™√l_12
 ((
uöt8_t
)0x0C)

	)

186 
	#ADC_Ch™√l_13
 ((
uöt8_t
)0x0D)

	)

187 
	#ADC_Ch™√l_14
 ((
uöt8_t
)0x0E)

	)

188 
	#ADC_Ch™√l_15
 ((
uöt8_t
)0x0F)

	)

189 
	#ADC_Ch™√l_16
 ((
uöt8_t
)0x10)

	)

190 
	#ADC_Ch™√l_17
 ((
uöt8_t
)0x11)

	)

192 
	#IS_ADC_CHANNEL
(
CHANNEL
Ë(((CHANNELË=
ADC_Ch™√l_0
Ë|| ((CHANNELË=
ADC_Ch™√l_1
Ë|| \

	)

193 ((
CHANNEL
Ë=
ADC_Ch™√l_2
Ë|| ((CHANNELË=
ADC_Ch™√l_3
) || \

194 ((
CHANNEL
Ë=
ADC_Ch™√l_4
Ë|| ((CHANNELË=
ADC_Ch™√l_5
) || \

195 ((
CHANNEL
Ë=
ADC_Ch™√l_6
Ë|| ((CHANNELË=
ADC_Ch™√l_7
) || \

196 ((
CHANNEL
Ë=
ADC_Ch™√l_8
Ë|| ((CHANNELË=
ADC_Ch™√l_9
) || \

197 ((
CHANNEL
Ë=
ADC_Ch™√l_10
Ë|| ((CHANNELË=
ADC_Ch™√l_11
) || \

198 ((
CHANNEL
Ë=
ADC_Ch™√l_12
Ë|| ((CHANNELË=
ADC_Ch™√l_13
) || \

199 ((
CHANNEL
Ë=
ADC_Ch™√l_14
Ë|| ((CHANNELË=
ADC_Ch™√l_15
) || \

200 ((
CHANNEL
Ë=
ADC_Ch™√l_16
Ë|| ((CHANNELË=
ADC_Ch™√l_17
))

209 
	#ADC_Sam∂eTime_1Cy˛es5
 ((
uöt8_t
)0x00)

	)

210 
	#ADC_Sam∂eTime_7Cy˛es5
 ((
uöt8_t
)0x01)

	)

211 
	#ADC_Sam∂eTime_13Cy˛es5
 ((
uöt8_t
)0x02)

	)

212 
	#ADC_Sam∂eTime_28Cy˛es5
 ((
uöt8_t
)0x03)

	)

213 
	#ADC_Sam∂eTime_41Cy˛es5
 ((
uöt8_t
)0x04)

	)

214 
	#ADC_Sam∂eTime_55Cy˛es5
 ((
uöt8_t
)0x05)

	)

215 
	#ADC_Sam∂eTime_71Cy˛es5
 ((
uöt8_t
)0x06)

	)

216 
	#ADC_Sam∂eTime_239Cy˛es5
 ((
uöt8_t
)0x07)

	)

217 
	#IS_ADC_SAMPLE_TIME
(
TIME
Ë(((TIMEË=
ADC_Sam∂eTime_1Cy˛es5
Ë|| \

	)

218 ((
TIME
Ë=
ADC_Sam∂eTime_7Cy˛es5
) || \

219 ((
TIME
Ë=
ADC_Sam∂eTime_13Cy˛es5
) || \

220 ((
TIME
Ë=
ADC_Sam∂eTime_28Cy˛es5
) || \

221 ((
TIME
Ë=
ADC_Sam∂eTime_41Cy˛es5
) || \

222 ((
TIME
Ë=
ADC_Sam∂eTime_55Cy˛es5
) || \

223 ((
TIME
Ë=
ADC_Sam∂eTime_71Cy˛es5
) || \

224 ((
TIME
Ë=
ADC_Sam∂eTime_239Cy˛es5
))

233 
	#ADC_Exã∫ÆTrigInjecC⁄v_T2_TRGO
 ((
uöt32_t
)0x00002000Ë

	)

234 
	#ADC_Exã∫ÆTrigInjecC⁄v_T2_CC1
 ((
uöt32_t
)0x00003000Ë

	)

235 
	#ADC_Exã∫ÆTrigInjecC⁄v_T3_CC4
 ((
uöt32_t
)0x00004000Ë

	)

236 
	#ADC_Exã∫ÆTrigInjecC⁄v_T4_TRGO
 ((
uöt32_t
)0x00005000Ë

	)

237 
	#ADC_Exã∫ÆTrigInjecC⁄v_Ext_IT15_TIM8_CC4
 ((
uöt32_t
)0x00006000Ë

	)

239 
	#ADC_Exã∫ÆTrigInjecC⁄v_T1_TRGO
 ((
uöt32_t
)0x00000000Ë

	)

240 
	#ADC_Exã∫ÆTrigInjecC⁄v_T1_CC4
 ((
uöt32_t
)0x00001000Ë

	)

241 
	#ADC_Exã∫ÆTrigInjecC⁄v_N⁄e
 ((
uöt32_t
)0x00007000Ë

	)

243 
	#ADC_Exã∫ÆTrigInjecC⁄v_T4_CC3
 ((
uöt32_t
)0x00002000Ë

	)

244 
	#ADC_Exã∫ÆTrigInjecC⁄v_T8_CC2
 ((
uöt32_t
)0x00003000Ë

	)

245 
	#ADC_Exã∫ÆTrigInjecC⁄v_T8_CC4
 ((
uöt32_t
)0x00004000Ë

	)

246 
	#ADC_Exã∫ÆTrigInjecC⁄v_T5_TRGO
 ((
uöt32_t
)0x00005000Ë

	)

247 
	#ADC_Exã∫ÆTrigInjecC⁄v_T5_CC4
 ((
uöt32_t
)0x00006000Ë

	)

249 
	#IS_ADC_EXT_INJEC_TRIG
(
INJTRIG
Ë(((INJTRIGË=
ADC_Exã∫ÆTrigInjecC⁄v_T1_TRGO
Ë|| \

	)

250 ((
INJTRIG
Ë=
ADC_Exã∫ÆTrigInjecC⁄v_T1_CC4
) || \

251 ((
INJTRIG
Ë=
ADC_Exã∫ÆTrigInjecC⁄v_T2_TRGO
) || \

252 ((
INJTRIG
Ë=
ADC_Exã∫ÆTrigInjecC⁄v_T2_CC1
) || \

253 ((
INJTRIG
Ë=
ADC_Exã∫ÆTrigInjecC⁄v_T3_CC4
) || \

254 ((
INJTRIG
Ë=
ADC_Exã∫ÆTrigInjecC⁄v_T4_TRGO
) || \

255 ((
INJTRIG
Ë=
ADC_Exã∫ÆTrigInjecC⁄v_Ext_IT15_TIM8_CC4
) || \

256 ((
INJTRIG
Ë=
ADC_Exã∫ÆTrigInjecC⁄v_N⁄e
) || \

257 ((
INJTRIG
Ë=
ADC_Exã∫ÆTrigInjecC⁄v_T4_CC3
) || \

258 ((
INJTRIG
Ë=
ADC_Exã∫ÆTrigInjecC⁄v_T8_CC2
) || \

259 ((
INJTRIG
Ë=
ADC_Exã∫ÆTrigInjecC⁄v_T8_CC4
) || \

260 ((
INJTRIG
Ë=
ADC_Exã∫ÆTrigInjecC⁄v_T5_TRGO
) || \

261 ((
INJTRIG
Ë=
ADC_Exã∫ÆTrigInjecC⁄v_T5_CC4
))

270 
	#ADC_Inje˘edCh™√l_1
 ((
uöt8_t
)0x14)

	)

271 
	#ADC_Inje˘edCh™√l_2
 ((
uöt8_t
)0x18)

	)

272 
	#ADC_Inje˘edCh™√l_3
 ((
uöt8_t
)0x1C)

	)

273 
	#ADC_Inje˘edCh™√l_4
 ((
uöt8_t
)0x20)

	)

274 
	#IS_ADC_INJECTED_CHANNEL
(
CHANNEL
Ë(((CHANNELË=
ADC_Inje˘edCh™√l_1
Ë|| \

	)

275 ((
CHANNEL
Ë=
ADC_Inje˘edCh™√l_2
) || \

276 ((
CHANNEL
Ë=
ADC_Inje˘edCh™√l_3
) || \

277 ((
CHANNEL
Ë=
ADC_Inje˘edCh™√l_4
))

286 
	#ADC_A«logW©chdog_SögÀRegE«bÀ
 ((
uöt32_t
)0x00800200)

	)

287 
	#ADC_A«logW©chdog_SögÀInjecE«bÀ
 ((
uöt32_t
)0x00400200)

	)

288 
	#ADC_A«logW©chdog_SögÀRegOrInjecE«bÀ
 ((
uöt32_t
)0x00C00200)

	)

289 
	#ADC_A«logW©chdog_AŒRegE«bÀ
 ((
uöt32_t
)0x00800000)

	)

290 
	#ADC_A«logW©chdog_AŒInjecE«bÀ
 ((
uöt32_t
)0x00400000)

	)

291 
	#ADC_A«logW©chdog_AŒRegAŒInjecE«bÀ
 ((
uöt32_t
)0x00C00000)

	)

292 
	#ADC_A«logW©chdog_N⁄e
 ((
uöt32_t
)0x00000000)

	)

294 
	#IS_ADC_ANALOG_WATCHDOG
(
WATCHDOG
Ë(((WATCHDOGË=
ADC_A«logW©chdog_SögÀRegE«bÀ
Ë|| \

	)

295 ((
WATCHDOG
Ë=
ADC_A«logW©chdog_SögÀInjecE«bÀ
) || \

296 ((
WATCHDOG
Ë=
ADC_A«logW©chdog_SögÀRegOrInjecE«bÀ
) || \

297 ((
WATCHDOG
Ë=
ADC_A«logW©chdog_AŒRegE«bÀ
) || \

298 ((
WATCHDOG
Ë=
ADC_A«logW©chdog_AŒInjecE«bÀ
) || \

299 ((
WATCHDOG
Ë=
ADC_A«logW©chdog_AŒRegAŒInjecE«bÀ
) || \

300 ((
WATCHDOG
Ë=
ADC_A«logW©chdog_N⁄e
))

309 
	#ADC_IT_EOC
 ((
uöt16_t
)0x0220)

	)

310 
	#ADC_IT_AWD
 ((
uöt16_t
)0x0140)

	)

311 
	#ADC_IT_JEOC
 ((
uöt16_t
)0x0480)

	)

313 
	#IS_ADC_IT
(
IT
Ë((((ITË& (
uöt16_t
)0xF81FË=0x00Ë&& ((ITË!0x00))

	)

315 
	#IS_ADC_GET_IT
(
IT
Ë(((ITË=
ADC_IT_EOC
Ë|| ((ITË=
ADC_IT_AWD
Ë|| \

	)

316 ((
IT
Ë=
ADC_IT_JEOC
))

325 
	#ADC_FLAG_AWD
 ((
uöt8_t
)0x01)

	)

326 
	#ADC_FLAG_EOC
 ((
uöt8_t
)0x02)

	)

327 
	#ADC_FLAG_JEOC
 ((
uöt8_t
)0x04)

	)

328 
	#ADC_FLAG_JSTRT
 ((
uöt8_t
)0x08)

	)

329 
	#ADC_FLAG_STRT
 ((
uöt8_t
)0x10)

	)

330 
	#IS_ADC_CLEAR_FLAG
(
FLAG
Ë((((FLAGË& (
uöt8_t
)0xE0Ë=0x00Ë&& ((FLAGË!0x00))

	)

331 
	#IS_ADC_GET_FLAG
(
FLAG
Ë(((FLAGË=
ADC_FLAG_AWD
Ë|| ((FLAGË=
ADC_FLAG_EOC
Ë|| \

	)

332 ((
FLAG
Ë=
ADC_FLAG_JEOC
Ë|| ((FLAG)=
ADC_FLAG_JSTRT
) || \

333 ((
FLAG
Ë=
ADC_FLAG_STRT
))

342 
	#IS_ADC_THRESHOLD
(
THRESHOLD
Ë((THRESHOLDË<0xFFF)

	)

352 
	#IS_ADC_OFFSET
(
OFFSET
Ë((OFFSETË<0xFFF)

	)

362 
	#IS_ADC_INJECTED_LENGTH
(
LENGTH
Ë(((LENGTHË>0x1Ë&& ((LENGTHË<0x4))

	)

372 
	#IS_ADC_INJECTED_RANK
(
RANK
Ë(((RANKË>0x1Ë&& ((RANKË<0x4))

	)

383 
	#IS_ADC_REGULAR_LENGTH
(
LENGTH
Ë(((LENGTHË>0x1Ë&& ((LENGTHË<0x10))

	)

392 
	#IS_ADC_REGULAR_RANK
(
RANK
Ë(((RANKË>0x1Ë&& ((RANKË<0x10))

	)

402 
	#IS_ADC_REGULAR_DISC_NUMBER
(
NUMBER
Ë(((NUMBERË>0x1Ë&& ((NUMBERË<0x8))

	)

424 
ADC_DeInô
(
ADC_Ty≥Def
* 
ADCx
);

425 
ADC_Inô
(
ADC_Ty≥Def
* 
ADCx
, 
ADC_InôTy≥Def
* 
ADC_InôSåu˘
);

426 
ADC_Såu˘Inô
(
ADC_InôTy≥Def
* 
ADC_InôSåu˘
);

427 
ADC_Cmd
(
ADC_Ty≥Def
* 
ADCx
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

428 
ADC_DMACmd
(
ADC_Ty≥Def
* 
ADCx
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

429 
ADC_ITC⁄fig
(
ADC_Ty≥Def
* 
ADCx
, 
uöt16_t
 
ADC_IT
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

430 
ADC_Re£tCÆibøti⁄
(
ADC_Ty≥Def
* 
ADCx
);

431 
FœgSètus
 
ADC_GëRe£tCÆibøti⁄Sètus
(
ADC_Ty≥Def
* 
ADCx
);

432 
ADC_SèπCÆibøti⁄
(
ADC_Ty≥Def
* 
ADCx
);

433 
FœgSètus
 
ADC_GëCÆibøti⁄Sètus
(
ADC_Ty≥Def
* 
ADCx
);

434 
ADC_So·w¨eSèπC⁄vCmd
(
ADC_Ty≥Def
* 
ADCx
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

435 
FœgSètus
 
ADC_GëSo·w¨eSèπC⁄vSètus
(
ADC_Ty≥Def
* 
ADCx
);

436 
ADC_DiscModeCh™√lCou¡C⁄fig
(
ADC_Ty≥Def
* 
ADCx
, 
uöt8_t
 
Numbî
);

437 
ADC_DiscModeCmd
(
ADC_Ty≥Def
* 
ADCx
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

438 
ADC_ReguœrCh™√lC⁄fig
(
ADC_Ty≥Def
* 
ADCx
, 
uöt8_t
 
ADC_Ch™√l
, uöt8_à
R™k
, uöt8_à
ADC_Sam∂eTime
);

439 
ADC_Exã∫ÆTrigC⁄vCmd
(
ADC_Ty≥Def
* 
ADCx
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

440 
uöt16_t
 
ADC_GëC⁄vîsi⁄VÆue
(
ADC_Ty≥Def
* 
ADCx
);

441 
uöt32_t
 
ADC_GëDuÆModeC⁄vîsi⁄VÆue
();

442 
ADC_AutoInje˘edC⁄vCmd
(
ADC_Ty≥Def
* 
ADCx
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

443 
ADC_Inje˘edDiscModeCmd
(
ADC_Ty≥Def
* 
ADCx
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

444 
ADC_Exã∫ÆTrigInje˘edC⁄vC⁄fig
(
ADC_Ty≥Def
* 
ADCx
, 
uöt32_t
 
ADC_Exã∫ÆTrigInjecC⁄v
);

445 
ADC_Exã∫ÆTrigInje˘edC⁄vCmd
(
ADC_Ty≥Def
* 
ADCx
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

446 
ADC_So·w¨eSèπInje˘edC⁄vCmd
(
ADC_Ty≥Def
* 
ADCx
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

447 
FœgSètus
 
ADC_GëSo·w¨eSèπInje˘edC⁄vCmdSètus
(
ADC_Ty≥Def
* 
ADCx
);

448 
ADC_Inje˘edCh™√lC⁄fig
(
ADC_Ty≥Def
* 
ADCx
, 
uöt8_t
 
ADC_Ch™√l
, uöt8_à
R™k
, uöt8_à
ADC_Sam∂eTime
);

449 
ADC_Inje˘edSequí˚rLígthC⁄fig
(
ADC_Ty≥Def
* 
ADCx
, 
uöt8_t
 
Lígth
);

450 
ADC_SëInje˘edOff£t
(
ADC_Ty≥Def
* 
ADCx
, 
uöt8_t
 
ADC_Inje˘edCh™√l
, 
uöt16_t
 
Off£t
);

451 
uöt16_t
 
ADC_GëInje˘edC⁄vîsi⁄VÆue
(
ADC_Ty≥Def
* 
ADCx
, 
uöt8_t
 
ADC_Inje˘edCh™√l
);

452 
ADC_A«logW©chdogCmd
(
ADC_Ty≥Def
* 
ADCx
, 
uöt32_t
 
ADC_A«logW©chdog
);

453 
ADC_A«logW©chdogThªshﬁdsC⁄fig
(
ADC_Ty≥Def
* 
ADCx
, 
uöt16_t
 
HighThªshﬁd
, uöt16_à
LowThªshﬁd
);

454 
ADC_A«logW©chdogSögÀCh™√lC⁄fig
(
ADC_Ty≥Def
* 
ADCx
, 
uöt8_t
 
ADC_Ch™√l
);

455 
ADC_TempSís‹VªfötCmd
(
Fun˘i⁄ÆSèã
 
NewSèã
);

456 
FœgSètus
 
ADC_GëFœgSètus
(
ADC_Ty≥Def
* 
ADCx
, 
uöt8_t
 
ADC_FLAG
);

457 
ADC_CÀ¨Fœg
(
ADC_Ty≥Def
* 
ADCx
, 
uöt8_t
 
ADC_FLAG
);

458 
ITSètus
 
ADC_GëITSètus
(
ADC_Ty≥Def
* 
ADCx
, 
uöt16_t
 
ADC_IT
);

459 
ADC_CÀ¨ITPídögBô
(
ADC_Ty≥Def
* 
ADCx
, 
uöt16_t
 
ADC_IT
);

461 #ifde‡
__˝lu•lus


	@Source/STM32F10x_StdPeriph_Driver/inc/stm32f10x_bkp.h

23 #i‚de‡
__STM32F10x_BKP_H


24 
	#__STM32F10x_BKP_H


	)

26 #ifde‡
__˝lu•lus


31 
	~"°m32f10x.h
"

57 
	#BKP_Tam≥rPöLevñ_High
 ((
uöt16_t
)0x0000)

	)

58 
	#BKP_Tam≥rPöLevñ_Low
 ((
uöt16_t
)0x0001)

	)

59 
	#IS_BKP_TAMPER_PIN_LEVEL
(
LEVEL
Ë(((LEVELË=
BKP_Tam≥rPöLevñ_High
Ë|| \

	)

60 ((
LEVEL
Ë=
BKP_Tam≥rPöLevñ_Low
))

69 
	#BKP_RTCOuçutSour˚_N⁄e
 ((
uöt16_t
)0x0000)

	)

70 
	#BKP_RTCOuçutSour˚_CÆibClock
 ((
uöt16_t
)0x0080)

	)

71 
	#BKP_RTCOuçutSour˚_Aœrm
 ((
uöt16_t
)0x0100)

	)

72 
	#BKP_RTCOuçutSour˚_Sec⁄d
 ((
uöt16_t
)0x0300)

	)

73 
	#IS_BKP_RTC_OUTPUT_SOURCE
(
SOURCE
Ë(((SOURCEË=
BKP_RTCOuçutSour˚_N⁄e
Ë|| \

	)

74 ((
SOURCE
Ë=
BKP_RTCOuçutSour˚_CÆibClock
) || \

75 ((
SOURCE
Ë=
BKP_RTCOuçutSour˚_Aœrm
) || \

76 ((
SOURCE
Ë=
BKP_RTCOuçutSour˚_Sec⁄d
))

85 
	#BKP_DR1
 ((
uöt16_t
)0x0004)

	)

86 
	#BKP_DR2
 ((
uöt16_t
)0x0008)

	)

87 
	#BKP_DR3
 ((
uöt16_t
)0x000C)

	)

88 
	#BKP_DR4
 ((
uöt16_t
)0x0010)

	)

89 
	#BKP_DR5
 ((
uöt16_t
)0x0014)

	)

90 
	#BKP_DR6
 ((
uöt16_t
)0x0018)

	)

91 
	#BKP_DR7
 ((
uöt16_t
)0x001C)

	)

92 
	#BKP_DR8
 ((
uöt16_t
)0x0020)

	)

93 
	#BKP_DR9
 ((
uöt16_t
)0x0024)

	)

94 
	#BKP_DR10
 ((
uöt16_t
)0x0028)

	)

95 
	#BKP_DR11
 ((
uöt16_t
)0x0040)

	)

96 
	#BKP_DR12
 ((
uöt16_t
)0x0044)

	)

97 
	#BKP_DR13
 ((
uöt16_t
)0x0048)

	)

98 
	#BKP_DR14
 ((
uöt16_t
)0x004C)

	)

99 
	#BKP_DR15
 ((
uöt16_t
)0x0050)

	)

100 
	#BKP_DR16
 ((
uöt16_t
)0x0054)

	)

101 
	#BKP_DR17
 ((
uöt16_t
)0x0058)

	)

102 
	#BKP_DR18
 ((
uöt16_t
)0x005C)

	)

103 
	#BKP_DR19
 ((
uöt16_t
)0x0060)

	)

104 
	#BKP_DR20
 ((
uöt16_t
)0x0064)

	)

105 
	#BKP_DR21
 ((
uöt16_t
)0x0068)

	)

106 
	#BKP_DR22
 ((
uöt16_t
)0x006C)

	)

107 
	#BKP_DR23
 ((
uöt16_t
)0x0070)

	)

108 
	#BKP_DR24
 ((
uöt16_t
)0x0074)

	)

109 
	#BKP_DR25
 ((
uöt16_t
)0x0078)

	)

110 
	#BKP_DR26
 ((
uöt16_t
)0x007C)

	)

111 
	#BKP_DR27
 ((
uöt16_t
)0x0080)

	)

112 
	#BKP_DR28
 ((
uöt16_t
)0x0084)

	)

113 
	#BKP_DR29
 ((
uöt16_t
)0x0088)

	)

114 
	#BKP_DR30
 ((
uöt16_t
)0x008C)

	)

115 
	#BKP_DR31
 ((
uöt16_t
)0x0090)

	)

116 
	#BKP_DR32
 ((
uöt16_t
)0x0094)

	)

117 
	#BKP_DR33
 ((
uöt16_t
)0x0098)

	)

118 
	#BKP_DR34
 ((
uöt16_t
)0x009C)

	)

119 
	#BKP_DR35
 ((
uöt16_t
)0x00A0)

	)

120 
	#BKP_DR36
 ((
uöt16_t
)0x00A4)

	)

121 
	#BKP_DR37
 ((
uöt16_t
)0x00A8)

	)

122 
	#BKP_DR38
 ((
uöt16_t
)0x00AC)

	)

123 
	#BKP_DR39
 ((
uöt16_t
)0x00B0)

	)

124 
	#BKP_DR40
 ((
uöt16_t
)0x00B4)

	)

125 
	#BKP_DR41
 ((
uöt16_t
)0x00B8)

	)

126 
	#BKP_DR42
 ((
uöt16_t
)0x00BC)

	)

128 
	#IS_BKP_DR
(
DR
Ë(((DRË=
BKP_DR1
Ë|| ((DRË=
BKP_DR2
Ë|| ((DRË=
BKP_DR3
Ë|| \

	)

129 ((
DR
Ë=
BKP_DR4
Ë|| ((DRË=
BKP_DR5
Ë|| ((DRË=
BKP_DR6
) || \

130 ((
DR
Ë=
BKP_DR7
Ë|| ((DRË=
BKP_DR8
Ë|| ((DRË=
BKP_DR9
) || \

131 ((
DR
Ë=
BKP_DR10
Ë|| ((DRË=
BKP_DR11
Ë|| ((DRË=
BKP_DR12
) || \

132 ((
DR
Ë=
BKP_DR13
Ë|| ((DRË=
BKP_DR14
Ë|| ((DRË=
BKP_DR15
) || \

133 ((
DR
Ë=
BKP_DR16
Ë|| ((DRË=
BKP_DR17
Ë|| ((DRË=
BKP_DR18
) || \

134 ((
DR
Ë=
BKP_DR19
Ë|| ((DRË=
BKP_DR20
Ë|| ((DRË=
BKP_DR21
) || \

135 ((
DR
Ë=
BKP_DR22
Ë|| ((DRË=
BKP_DR23
Ë|| ((DRË=
BKP_DR24
) || \

136 ((
DR
Ë=
BKP_DR25
Ë|| ((DRË=
BKP_DR26
Ë|| ((DRË=
BKP_DR27
) || \

137 ((
DR
Ë=
BKP_DR28
Ë|| ((DRË=
BKP_DR29
Ë|| ((DRË=
BKP_DR30
) || \

138 ((
DR
Ë=
BKP_DR31
Ë|| ((DRË=
BKP_DR32
Ë|| ((DRË=
BKP_DR33
) || \

139 ((
DR
Ë=
BKP_DR34
Ë|| ((DRË=
BKP_DR35
Ë|| ((DRË=
BKP_DR36
) || \

140 ((
DR
Ë=
BKP_DR37
Ë|| ((DRË=
BKP_DR38
Ë|| ((DRË=
BKP_DR39
) || \

141 ((
DR
Ë=
BKP_DR40
Ë|| ((DRË=
BKP_DR41
Ë|| ((DRË=
BKP_DR42
))

143 
	#IS_BKP_CALIBRATION_VALUE
(
VALUE
Ë((VALUEË<0x7F)

	)

164 
BKP_DeInô
();

165 
BKP_Tam≥rPöLevñC⁄fig
(
uöt16_t
 
BKP_Tam≥rPöLevñ
);

166 
BKP_Tam≥rPöCmd
(
Fun˘i⁄ÆSèã
 
NewSèã
);

167 
BKP_ITC⁄fig
(
Fun˘i⁄ÆSèã
 
NewSèã
);

168 
BKP_RTCOuçutC⁄fig
(
uöt16_t
 
BKP_RTCOuçutSour˚
);

169 
BKP_SëRTCCÆibøti⁄VÆue
(
uöt8_t
 
CÆibøti⁄VÆue
);

170 
BKP_WrôeBackupRegi°î
(
uöt16_t
 
BKP_DR
, uöt16_à
D©a
);

171 
uöt16_t
 
BKP_RódBackupRegi°î
(uöt16_à
BKP_DR
);

172 
FœgSètus
 
BKP_GëFœgSètus
();

173 
BKP_CÀ¨Fœg
();

174 
ITSètus
 
BKP_GëITSètus
();

175 
BKP_CÀ¨ITPídögBô
();

177 #ifde‡
__˝lu•lus


	@Source/STM32F10x_StdPeriph_Driver/inc/stm32f10x_can.h

23 #i‚de‡
__STM32F10x_CAN_H


24 
	#__STM32F10x_CAN_H


	)

26 #ifde‡
__˝lu•lus


31 
	~"°m32f10x.h
"

45 
	#IS_CAN_ALL_PERIPH
(
PERIPH
Ë(((PERIPHË=
CAN1
Ë|| \

	)

46 ((
PERIPH
Ë=
CAN2
))

54 
uöt16_t
 
CAN_PªsˇÀr
;

56 
uöt8_t
 
CAN_Mode
;

59 
uöt8_t
 
CAN_SJW
;

63 
uöt8_t
 
CAN_BS1
;

66 
uöt8_t
 
CAN_BS2
;

69 
Fun˘i⁄ÆSèã
 
CAN_TTCM
;

72 
Fun˘i⁄ÆSèã
 
CAN_ABOM
;

75 
Fun˘i⁄ÆSèã
 
CAN_AWUM
;

78 
Fun˘i⁄ÆSèã
 
CAN_NART
;

81 
Fun˘i⁄ÆSèã
 
CAN_RFLM
;

84 
Fun˘i⁄ÆSèã
 
CAN_TXFP
;

86 } 
	tCAN_InôTy≥Def
;

94 
uöt16_t
 
CAN_FûãrIdHigh
;

98 
uöt16_t
 
CAN_FûãrIdLow
;

102 
uöt16_t
 
CAN_FûãrMaskIdHigh
;

107 
uöt16_t
 
CAN_FûãrMaskIdLow
;

112 
uöt16_t
 
CAN_FûãrFIFOAssignmít
;

115 
uöt8_t
 
CAN_FûãrNumbî
;

117 
uöt8_t
 
CAN_FûãrMode
;

120 
uöt8_t
 
CAN_FûãrSˇÀ
;

123 
Fun˘i⁄ÆSèã
 
CAN_FûãrA˘iv©i⁄
;

125 } 
	tCAN_FûãrInôTy≥Def
;

133 
uöt32_t
 
StdId
;

136 
uöt32_t
 
ExtId
;

139 
uöt8_t
 
IDE
;

142 
uöt8_t
 
RTR
;

145 
uöt8_t
 
DLC
;

148 
uöt8_t
 
D©a
[8];

149 } 
	tC™TxMsg
;

157 
uöt32_t
 
StdId
;

160 
uöt32_t
 
ExtId
;

163 
uöt8_t
 
IDE
;

166 
uöt8_t
 
RTR
;

169 
uöt8_t
 
DLC
;

172 
uöt8_t
 
D©a
[8];

174 
uöt8_t
 
FMI
;

176 } 
	tC™RxMsg
;

190 
	#CANINITFAILED
 ((
uöt8_t
)0x00Ë

	)

191 
	#CANINITOK
 ((
uöt8_t
)0x01Ë

	)

201 
	#CAN_Mode_N‹mÆ
 ((
uöt8_t
)0x00Ë

	)

202 
	#CAN_Mode_Lo›Back
 ((
uöt8_t
)0x01Ë

	)

203 
	#CAN_Mode_Sûít
 ((
uöt8_t
)0x02Ë

	)

204 
	#CAN_Mode_Sûít_Lo›Back
 ((
uöt8_t
)0x03Ë

	)

206 
	#IS_CAN_MODE
(
MODE
Ë(((MODEË=
CAN_Mode_N‹mÆ
Ë|| ((MODEË=
CAN_Mode_Lo›Back
)|| \

	)

207 ((
MODE
Ë=
CAN_Mode_Sûít
Ë|| ((MODEË=
CAN_Mode_Sûít_Lo›Back
))

216 
	#CAN_SJW_1tq
 ((
uöt8_t
)0x00Ë

	)

217 
	#CAN_SJW_2tq
 ((
uöt8_t
)0x01Ë

	)

218 
	#CAN_SJW_3tq
 ((
uöt8_t
)0x02Ë

	)

219 
	#CAN_SJW_4tq
 ((
uöt8_t
)0x03Ë

	)

221 
	#IS_CAN_SJW
(
SJW
Ë(((SJWË=
CAN_SJW_1tq
Ë|| ((SJWË=
CAN_SJW_2tq
)|| \

	)

222 ((
SJW
Ë=
CAN_SJW_3tq
Ë|| ((SJWË=
CAN_SJW_4tq
))

231 
	#CAN_BS1_1tq
 ((
uöt8_t
)0x00Ë

	)

232 
	#CAN_BS1_2tq
 ((
uöt8_t
)0x01Ë

	)

233 
	#CAN_BS1_3tq
 ((
uöt8_t
)0x02Ë

	)

234 
	#CAN_BS1_4tq
 ((
uöt8_t
)0x03Ë

	)

235 
	#CAN_BS1_5tq
 ((
uöt8_t
)0x04Ë

	)

236 
	#CAN_BS1_6tq
 ((
uöt8_t
)0x05Ë

	)

237 
	#CAN_BS1_7tq
 ((
uöt8_t
)0x06Ë

	)

238 
	#CAN_BS1_8tq
 ((
uöt8_t
)0x07Ë

	)

239 
	#CAN_BS1_9tq
 ((
uöt8_t
)0x08Ë

	)

240 
	#CAN_BS1_10tq
 ((
uöt8_t
)0x09Ë

	)

241 
	#CAN_BS1_11tq
 ((
uöt8_t
)0x0AË

	)

242 
	#CAN_BS1_12tq
 ((
uöt8_t
)0x0BË

	)

243 
	#CAN_BS1_13tq
 ((
uöt8_t
)0x0CË

	)

244 
	#CAN_BS1_14tq
 ((
uöt8_t
)0x0DË

	)

245 
	#CAN_BS1_15tq
 ((
uöt8_t
)0x0EË

	)

246 
	#CAN_BS1_16tq
 ((
uöt8_t
)0x0FË

	)

248 
	#IS_CAN_BS1
(
BS1
Ë((BS1Ë<
CAN_BS1_16tq
)

	)

257 
	#CAN_BS2_1tq
 ((
uöt8_t
)0x00Ë

	)

258 
	#CAN_BS2_2tq
 ((
uöt8_t
)0x01Ë

	)

259 
	#CAN_BS2_3tq
 ((
uöt8_t
)0x02Ë

	)

260 
	#CAN_BS2_4tq
 ((
uöt8_t
)0x03Ë

	)

261 
	#CAN_BS2_5tq
 ((
uöt8_t
)0x04Ë

	)

262 
	#CAN_BS2_6tq
 ((
uöt8_t
)0x05Ë

	)

263 
	#CAN_BS2_7tq
 ((
uöt8_t
)0x06Ë

	)

264 
	#CAN_BS2_8tq
 ((
uöt8_t
)0x07Ë

	)

266 
	#IS_CAN_BS2
(
BS2
Ë((BS2Ë<
CAN_BS2_8tq
)

	)

276 
	#IS_CAN_PRESCALER
(
PRESCALER
Ë(((PRESCALERË>1Ë&& ((PRESCALERË<1024))

	)

285 #i‚de‡
STM32F10X_CL


286 
	#IS_CAN_FILTER_NUMBER
(
NUMBER
Ë((NUMBERË<13)

	)

288 
	#IS_CAN_FILTER_NUMBER
(
NUMBER
Ë((NUMBERË<27)

	)

298 
	#CAN_FûãrMode_IdMask
 ((
uöt8_t
)0x00Ë

	)

299 
	#CAN_FûãrMode_IdLi°
 ((
uöt8_t
)0x01Ë

	)

301 
	#IS_CAN_FILTER_MODE
(
MODE
Ë(((MODEË=
CAN_FûãrMode_IdMask
Ë|| \

	)

302 ((
MODE
Ë=
CAN_FûãrMode_IdLi°
))

311 
	#CAN_FûãrSˇÀ_16bô
 ((
uöt8_t
)0x00Ë

	)

312 
	#CAN_FûãrSˇÀ_32bô
 ((
uöt8_t
)0x01Ë

	)

314 
	#IS_CAN_FILTER_SCALE
(
SCALE
Ë(((SCALEË=
CAN_FûãrSˇÀ_16bô
Ë|| \

	)

315 ((
SCALE
Ë=
CAN_FûãrSˇÀ_32bô
))

325 
	#CAN_FûãrFIFO0
 ((
uöt8_t
)0x00Ë

	)

326 
	#CAN_FûãrFIFO1
 ((
uöt8_t
)0x01Ë

	)

327 
	#IS_CAN_FILTER_FIFO
(
FIFO
Ë(((FIFOË=
CAN_FûãrFIFO0
Ë|| \

	)

328 ((
FIFO
Ë=
CAN_FûãrFIFO1
))

337 
	#IS_CAN_BANKNUMBER
(
BANKNUMBER
Ë(((BANKNUMBERË>1Ë&& ((BANKNUMBERË<27))

	)

346 
	#IS_CAN_TRANSMITMAILBOX
(
TRANSMITMAILBOX
Ë((TRANSMITMAILBOXË<((
uöt8_t
)0x02))

	)

347 
	#IS_CAN_STDID
(
STDID
Ë((STDIDË<((
uöt32_t
)0x7FF))

	)

348 
	#IS_CAN_EXTID
(
EXTID
Ë((EXTIDË<((
uöt32_t
)0x1FFFFFFF))

	)

349 
	#IS_CAN_DLC
(
DLC
Ë((DLCË<((
uöt8_t
)0x08))

	)

359 
	#CAN_ID_STD
 ((
uöt32_t
)0x00000000Ë

	)

360 
	#CAN_ID_EXT
 ((
uöt32_t
)0x00000004Ë

	)

361 
	#IS_CAN_IDTYPE
(
IDTYPE
Ë(((IDTYPEË=
CAN_ID_STD
Ë|| ((IDTYPEË=
CAN_ID_EXT
))

	)

371 
	#CAN_RTR_DATA
 ((
uöt32_t
)0x00000000Ë

	)

372 
	#CAN_RTR_REMOTE
 ((
uöt32_t
)0x00000002Ë

	)

373 
	#IS_CAN_RTR
(
RTR
Ë(((RTRË=
CAN_RTR_DATA
Ë|| ((RTRË=
CAN_RTR_REMOTE
))

	)

383 
	#CANTXFAILED
 ((
uöt8_t
)0x00Ë

	)

384 
	#CANTXOK
 ((
uöt8_t
)0x01Ë

	)

385 
	#CANTXPENDING
 ((
uöt8_t
)0x02Ë

	)

386 
	#CAN_NO_MB
 ((
uöt8_t
)0x04Ë

	)

396 
	#CAN_FIFO0
 ((
uöt8_t
)0x00Ë

	)

397 
	#CAN_FIFO1
 ((
uöt8_t
)0x01Ë

	)

399 
	#IS_CAN_FIFO
(
FIFO
Ë(((FIFOË=
CAN_FIFO0
Ë|| ((FIFOË=
CAN_FIFO1
))

	)

409 
	#CANSLEEPFAILED
 ((
uöt8_t
)0x00Ë

	)

410 
	#CANSLEEPOK
 ((
uöt8_t
)0x01Ë

	)

420 
	#CANWAKEUPFAILED
 ((
uöt8_t
)0x00Ë

	)

421 
	#CANWAKEUPOK
 ((
uöt8_t
)0x01Ë

	)

431 
	#CAN_FLAG_EWG
 ((
uöt32_t
)0x00000001Ë

	)

432 
	#CAN_FLAG_EPV
 ((
uöt32_t
)0x00000002Ë

	)

433 
	#CAN_FLAG_BOF
 ((
uöt32_t
)0x00000004Ë

	)

435 
	#IS_CAN_FLAG
(
FLAG
Ë(((FLAGË=
CAN_FLAG_EWG
Ë|| ((FLAGË=
CAN_FLAG_EPV
Ë||\

	)

436 ((
FLAG
Ë=
CAN_FLAG_BOF
))

446 
	#CAN_IT_RQCP0
 ((
uöt32_t
)0x00000005Ë

	)

447 
	#CAN_IT_RQCP1
 ((
uöt32_t
)0x00000006Ë

	)

448 
	#CAN_IT_RQCP2
 ((
uöt32_t
)0x00000007Ë

	)

449 
	#CAN_IT_TME
 ((
uöt32_t
)0x00000001Ë

	)

450 
	#CAN_IT_FMP0
 ((
uöt32_t
)0x00000002Ë

	)

451 
	#CAN_IT_FF0
 ((
uöt32_t
)0x00000004Ë

	)

452 
	#CAN_IT_FOV0
 ((
uöt32_t
)0x00000008Ë

	)

453 
	#CAN_IT_FMP1
 ((
uöt32_t
)0x00000010Ë

	)

454 
	#CAN_IT_FF1
 ((
uöt32_t
)0x00000020Ë

	)

455 
	#CAN_IT_FOV1
 ((
uöt32_t
)0x00000040Ë

	)

456 
	#CAN_IT_EWG
 ((
uöt32_t
)0x00000100Ë

	)

457 
	#CAN_IT_EPV
 ((
uöt32_t
)0x00000200Ë

	)

458 
	#CAN_IT_BOF
 ((
uöt32_t
)0x00000400Ë

	)

459 
	#CAN_IT_LEC
 ((
uöt32_t
)0x00000800Ë

	)

460 
	#CAN_IT_ERR
 ((
uöt32_t
)0x00008000Ë

	)

461 
	#CAN_IT_WKU
 ((
uöt32_t
)0x00010000Ë

	)

462 
	#CAN_IT_SLK
 ((
uöt32_t
)0x00020000Ë

	)

464 
	#IS_CAN_ITC⁄fig
(
IT
Ë(((ITË=
CAN_IT_TME
Ë|| ((ITË=
CAN_IT_FMP0
Ë||\

	)

465 ((
IT
Ë=
CAN_IT_FF0
Ë|| ((ITË=
CAN_IT_FOV0
) ||\

466 ((
IT
Ë=
CAN_IT_FMP1
Ë|| ((ITË=
CAN_IT_FF1
) ||\

467 ((
IT
Ë=
CAN_IT_FOV1
Ë|| ((ITË=
CAN_IT_EWG
) ||\

468 ((
IT
Ë=
CAN_IT_EPV
Ë|| ((ITË=
CAN_IT_BOF
) ||\

469 ((
IT
Ë=
CAN_IT_LEC
Ë|| ((ITË=
CAN_IT_ERR
) ||\

470 ((
IT
Ë=
CAN_IT_WKU
Ë|| ((ITË=
CAN_IT_SLK
))

472 
	#IS_CAN_ITSètus
(
IT
Ë(((ITË=
CAN_IT_RQCP0
Ë|| ((ITË=
CAN_IT_RQCP1
Ë||\

	)

473 ((
IT
Ë=
CAN_IT_RQCP2
Ë|| ((ITË=
CAN_IT_FF0
) ||\

474 ((
IT
Ë=
CAN_IT_FOV0
Ë|| ((ITË=
CAN_IT_FF1
) ||\

475 ((
IT
Ë=
CAN_IT_FOV1
Ë|| ((ITË=
CAN_IT_EWG
) ||\

476 ((
IT
Ë=
CAN_IT_EPV
Ë|| ((ITË=
CAN_IT_BOF
) ||\

477 ((
IT
Ë=
CAN_IT_WKU
Ë|| ((ITË=
CAN_IT_SLK
))

498 
CAN_DeInô
(
CAN_Ty≥Def
* 
CANx
);

499 
uöt8_t
 
CAN_Inô
(
CAN_Ty≥Def
* 
CANx
, 
CAN_InôTy≥Def
* 
CAN_InôSåu˘
);

500 
CAN_FûãrInô
(
CAN_FûãrInôTy≥Def
* 
CAN_FûãrInôSåu˘
);

501 
CAN_Såu˘Inô
(
CAN_InôTy≥Def
* 
CAN_InôSåu˘
);

502 
CAN_SœveSèπB™k
(
uöt8_t
 
CAN_B™kNumbî
);

503 
CAN_ITC⁄fig
(
CAN_Ty≥Def
* 
CANx
, 
uöt32_t
 
CAN_IT
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

504 
uöt8_t
 
CAN_Tønsmô
(
CAN_Ty≥Def
* 
CANx
, 
C™TxMsg
* 
TxMesßge
);

505 
uöt8_t
 
CAN_TønsmôSètus
(
CAN_Ty≥Def
* 
CANx
, uöt8_à
TønsmôMaûbox
);

506 
CAN_C™˚lTønsmô
(
CAN_Ty≥Def
* 
CANx
, 
uöt8_t
 
Maûbox
);

507 
CAN_FIFORñó£
(
CAN_Ty≥Def
* 
CANx
, 
uöt8_t
 
FIFONumbî
);

508 
uöt8_t
 
CAN_MesßgePídög
(
CAN_Ty≥Def
* 
CANx
, uöt8_à
FIFONumbî
);

509 
CAN_Re˚ive
(
CAN_Ty≥Def
* 
CANx
, 
uöt8_t
 
FIFONumbî
, 
C™RxMsg
* 
RxMesßge
);

510 
CAN_DBGFªeze
(
CAN_Ty≥Def
* 
CANx
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

511 
uöt8_t
 
CAN_SÀï
(
CAN_Ty≥Def
* 
CANx
);

512 
uöt8_t
 
CAN_WakeUp
(
CAN_Ty≥Def
* 
CANx
);

513 
FœgSètus
 
CAN_GëFœgSètus
(
CAN_Ty≥Def
* 
CANx
, 
uöt32_t
 
CAN_FLAG
);

514 
CAN_CÀ¨Fœg
(
CAN_Ty≥Def
* 
CANx
, 
uöt32_t
 
CAN_FLAG
);

515 
ITSètus
 
CAN_GëITSètus
(
CAN_Ty≥Def
* 
CANx
, 
uöt32_t
 
CAN_IT
);

516 
CAN_CÀ¨ITPídögBô
(
CAN_Ty≥Def
* 
CANx
, 
uöt32_t
 
CAN_IT
);

518 #ifde‡
__˝lu•lus


	@Source/STM32F10x_StdPeriph_Driver/inc/stm32f10x_crc.h

23 #i‚de‡
__STM32F10x_CRC_H


24 
	#__STM32F10x_CRC_H


	)

26 #ifde‡
__˝lu•lus


31 
	~"°m32f10x.h
"

69 
CRC_Re£tDR
();

70 
uöt32_t
 
CRC_CÆcCRC
(uöt32_à
D©a
);

71 
uöt32_t
 
CRC_CÆcBlockCRC
(uöt32_à
pBuf„r
[], uöt32_à
Buf„rLígth
);

72 
uöt32_t
 
CRC_GëCRC
();

73 
CRC_SëIDRegi°î
(
uöt8_t
 
IDVÆue
);

74 
uöt8_t
 
CRC_GëIDRegi°î
();

76 #ifde‡
__˝lu•lus


	@Source/STM32F10x_StdPeriph_Driver/inc/stm32f10x_dac.h

23 #i‚de‡
__STM32F10x_DAC_H


24 
	#__STM32F10x_DAC_H


	)

26 #ifde‡
__˝lu•lus


31 
	~"°m32f10x.h
"

51 
uöt32_t
 
DAC_Triggî
;

54 
uöt32_t
 
DAC_WaveGíî©i⁄
;

58 
uöt32_t
 
DAC_LFSRUnmask_TrüngÀAm∂ôude
;

62 
uöt32_t
 
DAC_OuçutBuf„r
;

64 }
	tDAC_InôTy≥Def
;

78 
	#DAC_Triggî_N⁄e
 ((
uöt32_t
)0x00000000Ë

	)

80 
	#DAC_Triggî_T6_TRGO
 ((
uöt32_t
)0x00000004Ë

	)

81 
	#DAC_Triggî_T8_TRGO
 ((
uöt32_t
)0x0000000CË

	)

83 
	#DAC_Triggî_T3_TRGO
 ((
uöt32_t
)0x0000000CË

	)

85 
	#DAC_Triggî_T7_TRGO
 ((
uöt32_t
)0x00000014Ë

	)

86 
	#DAC_Triggî_T5_TRGO
 ((
uöt32_t
)0x0000001CË

	)

87 
	#DAC_Triggî_T2_TRGO
 ((
uöt32_t
)0x00000024Ë

	)

88 
	#DAC_Triggî_T4_TRGO
 ((
uöt32_t
)0x0000002CË

	)

89 
	#DAC_Triggî_Ext_IT9
 ((
uöt32_t
)0x00000034Ë

	)

90 
	#DAC_Triggî_So·w¨e
 ((
uöt32_t
)0x0000003CË

	)

92 
	#IS_DAC_TRIGGER
(
TRIGGER
Ë(((TRIGGERË=
DAC_Triggî_N⁄e
Ë|| \

	)

93 ((
TRIGGER
Ë=
DAC_Triggî_T6_TRGO
) || \

94 ((
TRIGGER
Ë=
DAC_Triggî_T8_TRGO
) || \

95 ((
TRIGGER
Ë=
DAC_Triggî_T7_TRGO
) || \

96 ((
TRIGGER
Ë=
DAC_Triggî_T5_TRGO
) || \

97 ((
TRIGGER
Ë=
DAC_Triggî_T2_TRGO
) || \

98 ((
TRIGGER
Ë=
DAC_Triggî_T4_TRGO
) || \

99 ((
TRIGGER
Ë=
DAC_Triggî_Ext_IT9
) || \

100 ((
TRIGGER
Ë=
DAC_Triggî_So·w¨e
))

110 
	#DAC_WaveGíî©i⁄_N⁄e
 ((
uöt32_t
)0x00000000)

	)

111 
	#DAC_WaveGíî©i⁄_Noi£
 ((
uöt32_t
)0x00000040)

	)

112 
	#DAC_WaveGíî©i⁄_TrüngÀ
 ((
uöt32_t
)0x00000080)

	)

113 
	#IS_DAC_GENERATE_WAVE
(
WAVE
Ë(((WAVEË=
DAC_WaveGíî©i⁄_N⁄e
Ë|| \

	)

114 ((
WAVE
Ë=
DAC_WaveGíî©i⁄_Noi£
) || \

115 ((
WAVE
Ë=
DAC_WaveGíî©i⁄_TrüngÀ
))

124 
	#DAC_LFSRUnmask_Bô0
 ((
uöt32_t
)0x00000000Ë

	)

125 
	#DAC_LFSRUnmask_Bôs1_0
 ((
uöt32_t
)0x00000100Ë

	)

126 
	#DAC_LFSRUnmask_Bôs2_0
 ((
uöt32_t
)0x00000200Ë

	)

127 
	#DAC_LFSRUnmask_Bôs3_0
 ((
uöt32_t
)0x00000300Ë

	)

128 
	#DAC_LFSRUnmask_Bôs4_0
 ((
uöt32_t
)0x00000400Ë

	)

129 
	#DAC_LFSRUnmask_Bôs5_0
 ((
uöt32_t
)0x00000500Ë

	)

130 
	#DAC_LFSRUnmask_Bôs6_0
 ((
uöt32_t
)0x00000600Ë

	)

131 
	#DAC_LFSRUnmask_Bôs7_0
 ((
uöt32_t
)0x00000700Ë

	)

132 
	#DAC_LFSRUnmask_Bôs8_0
 ((
uöt32_t
)0x00000800Ë

	)

133 
	#DAC_LFSRUnmask_Bôs9_0
 ((
uöt32_t
)0x00000900Ë

	)

134 
	#DAC_LFSRUnmask_Bôs10_0
 ((
uöt32_t
)0x00000A00Ë

	)

135 
	#DAC_LFSRUnmask_Bôs11_0
 ((
uöt32_t
)0x00000B00Ë

	)

136 
	#DAC_TrüngÀAm∂ôude_1
 ((
uöt32_t
)0x00000000Ë

	)

137 
	#DAC_TrüngÀAm∂ôude_3
 ((
uöt32_t
)0x00000100Ë

	)

138 
	#DAC_TrüngÀAm∂ôude_7
 ((
uöt32_t
)0x00000200Ë

	)

139 
	#DAC_TrüngÀAm∂ôude_15
 ((
uöt32_t
)0x00000300Ë

	)

140 
	#DAC_TrüngÀAm∂ôude_31
 ((
uöt32_t
)0x00000400Ë

	)

141 
	#DAC_TrüngÀAm∂ôude_63
 ((
uöt32_t
)0x00000500Ë

	)

142 
	#DAC_TrüngÀAm∂ôude_127
 ((
uöt32_t
)0x00000600Ë

	)

143 
	#DAC_TrüngÀAm∂ôude_255
 ((
uöt32_t
)0x00000700Ë

	)

144 
	#DAC_TrüngÀAm∂ôude_511
 ((
uöt32_t
)0x00000800Ë

	)

145 
	#DAC_TrüngÀAm∂ôude_1023
 ((
uöt32_t
)0x00000900Ë

	)

146 
	#DAC_TrüngÀAm∂ôude_2047
 ((
uöt32_t
)0x00000A00Ë

	)

147 
	#DAC_TrüngÀAm∂ôude_4095
 ((
uöt32_t
)0x00000B00Ë

	)

149 
	#IS_DAC_LFSR_UNMASK_TRIANGLE_AMPLITUDE
(
VALUE
Ë(((VALUEË=
DAC_LFSRUnmask_Bô0
Ë|| \

	)

150 ((
VALUE
Ë=
DAC_LFSRUnmask_Bôs1_0
) || \

151 ((
VALUE
Ë=
DAC_LFSRUnmask_Bôs2_0
) || \

152 ((
VALUE
Ë=
DAC_LFSRUnmask_Bôs3_0
) || \

153 ((
VALUE
Ë=
DAC_LFSRUnmask_Bôs4_0
) || \

154 ((
VALUE
Ë=
DAC_LFSRUnmask_Bôs5_0
) || \

155 ((
VALUE
Ë=
DAC_LFSRUnmask_Bôs6_0
) || \

156 ((
VALUE
Ë=
DAC_LFSRUnmask_Bôs7_0
) || \

157 ((
VALUE
Ë=
DAC_LFSRUnmask_Bôs8_0
) || \

158 ((
VALUE
Ë=
DAC_LFSRUnmask_Bôs9_0
) || \

159 ((
VALUE
Ë=
DAC_LFSRUnmask_Bôs10_0
) || \

160 ((
VALUE
Ë=
DAC_LFSRUnmask_Bôs11_0
) || \

161 ((
VALUE
Ë=
DAC_TrüngÀAm∂ôude_1
) || \

162 ((
VALUE
Ë=
DAC_TrüngÀAm∂ôude_3
) || \

163 ((
VALUE
Ë=
DAC_TrüngÀAm∂ôude_7
) || \

164 ((
VALUE
Ë=
DAC_TrüngÀAm∂ôude_15
) || \

165 ((
VALUE
Ë=
DAC_TrüngÀAm∂ôude_31
) || \

166 ((
VALUE
Ë=
DAC_TrüngÀAm∂ôude_63
) || \

167 ((
VALUE
Ë=
DAC_TrüngÀAm∂ôude_127
) || \

168 ((
VALUE
Ë=
DAC_TrüngÀAm∂ôude_255
) || \

169 ((
VALUE
Ë=
DAC_TrüngÀAm∂ôude_511
) || \

170 ((
VALUE
Ë=
DAC_TrüngÀAm∂ôude_1023
) || \

171 ((
VALUE
Ë=
DAC_TrüngÀAm∂ôude_2047
) || \

172 ((
VALUE
Ë=
DAC_TrüngÀAm∂ôude_4095
))

181 
	#DAC_OuçutBuf„r_E«bÀ
 ((
uöt32_t
)0x00000000)

	)

182 
	#DAC_OuçutBuf„r_DißbÀ
 ((
uöt32_t
)0x00000002)

	)

183 
	#IS_DAC_OUTPUT_BUFFER_STATE
(
STATE
Ë(((STATEË=
DAC_OuçutBuf„r_E«bÀ
Ë|| \

	)

184 ((
STATE
Ë=
DAC_OuçutBuf„r_DißbÀ
))

193 
	#DAC_Ch™√l_1
 ((
uöt32_t
)0x00000000)

	)

194 
	#DAC_Ch™√l_2
 ((
uöt32_t
)0x00000010)

	)

195 
	#IS_DAC_CHANNEL
(
CHANNEL
Ë(((CHANNELË=
DAC_Ch™√l_1
Ë|| \

	)

196 ((
CHANNEL
Ë=
DAC_Ch™√l_2
))

205 
	#DAC_Align_12b_R
 ((
uöt32_t
)0x00000000)

	)

206 
	#DAC_Align_12b_L
 ((
uöt32_t
)0x00000004)

	)

207 
	#DAC_Align_8b_R
 ((
uöt32_t
)0x00000008)

	)

208 
	#IS_DAC_ALIGN
(
ALIGN
Ë(((ALIGNË=
DAC_Align_12b_R
Ë|| \

	)

209 ((
ALIGN
Ë=
DAC_Align_12b_L
) || \

210 ((
ALIGN
Ë=
DAC_Align_8b_R
))

219 
	#DAC_Wave_Noi£
 ((
uöt32_t
)0x00000040)

	)

220 
	#DAC_Wave_TrüngÀ
 ((
uöt32_t
)0x00000080)

	)

221 
	#IS_DAC_WAVE
(
WAVE
Ë(((WAVEË=
DAC_Wave_Noi£
Ë|| \

	)

222 ((
WAVE
Ë=
DAC_Wave_TrüngÀ
))

231 
	#IS_DAC_DATA
(
DATA
Ë((DATAË<0xFFF0)

	)

252 
DAC_DeInô
();

253 
DAC_Inô
(
uöt32_t
 
DAC_Ch™√l
, 
DAC_InôTy≥Def
* 
DAC_InôSåu˘
);

254 
DAC_Såu˘Inô
(
DAC_InôTy≥Def
* 
DAC_InôSåu˘
);

255 
DAC_Cmd
(
uöt32_t
 
DAC_Ch™√l
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

256 
DAC_DMACmd
(
uöt32_t
 
DAC_Ch™√l
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

257 
DAC_So·w¨eTriggîCmd
(
uöt32_t
 
DAC_Ch™√l
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

258 
DAC_DuÆSo·w¨eTriggîCmd
(
Fun˘i⁄ÆSèã
 
NewSèã
);

259 
DAC_WaveGíî©i⁄Cmd
(
uöt32_t
 
DAC_Ch™√l
, uöt32_à
DAC_Wave
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

260 
DAC_SëCh™√l1D©a
(
uöt32_t
 
DAC_Align
, 
uöt16_t
 
D©a
);

261 
DAC_SëCh™√l2D©a
(
uöt32_t
 
DAC_Align
, 
uöt16_t
 
D©a
);

262 
DAC_SëDuÆCh™√lD©a
(
uöt32_t
 
DAC_Align
, 
uöt16_t
 
D©a2
, uöt16_à
D©a1
);

263 
uöt16_t
 
DAC_GëD©aOuçutVÆue
(
uöt32_t
 
DAC_Ch™√l
);

265 #ifde‡
__˝lu•lus


	@Source/STM32F10x_StdPeriph_Driver/inc/stm32f10x_dbgmcu.h

23 #i‚de‡
__STM32F10x_DBGMCU_H


24 
	#__STM32F10x_DBGMCU_H


	)

26 #ifde‡
__˝lu•lus


31 
	~"°m32f10x.h
"

53 
	#DBGMCU_SLEEP
 ((
uöt32_t
)0x00000001)

	)

54 
	#DBGMCU_STOP
 ((
uöt32_t
)0x00000002)

	)

55 
	#DBGMCU_STANDBY
 ((
uöt32_t
)0x00000004)

	)

56 
	#DBGMCU_IWDG_STOP
 ((
uöt32_t
)0x00000100)

	)

57 
	#DBGMCU_WWDG_STOP
 ((
uöt32_t
)0x00000200)

	)

58 
	#DBGMCU_TIM1_STOP
 ((
uöt32_t
)0x00000400)

	)

59 
	#DBGMCU_TIM2_STOP
 ((
uöt32_t
)0x00000800)

	)

60 
	#DBGMCU_TIM3_STOP
 ((
uöt32_t
)0x00001000)

	)

61 
	#DBGMCU_TIM4_STOP
 ((
uöt32_t
)0x00002000)

	)

62 
	#DBGMCU_CAN1_STOP
 ((
uöt32_t
)0x00004000)

	)

63 
	#DBGMCU_I2C1_SMBUS_TIMEOUT
 ((
uöt32_t
)0x00008000)

	)

64 
	#DBGMCU_I2C2_SMBUS_TIMEOUT
 ((
uöt32_t
)0x00010000)

	)

65 
	#DBGMCU_TIM8_STOP
 ((
uöt32_t
)0x00020000)

	)

66 
	#DBGMCU_TIM5_STOP
 ((
uöt32_t
)0x00040000)

	)

67 
	#DBGMCU_TIM6_STOP
 ((
uöt32_t
)0x00080000)

	)

68 
	#DBGMCU_TIM7_STOP
 ((
uöt32_t
)0x00100000)

	)

69 
	#DBGMCU_CAN2_STOP
 ((
uöt32_t
)0x00200000)

	)

71 
	#IS_DBGMCU_PERIPH
(
PERIPH
Ë((((PERIPHË& 0xFFC000F8Ë=0x00Ë&& ((PERIPHË!0x00))

	)

88 
uöt32_t
 
DBGMCU_GëREVID
();

89 
uöt32_t
 
DBGMCU_GëDEVID
();

90 
DBGMCU_C⁄fig
(
uöt32_t
 
DBGMCU_Pîùh
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

92 #ifde‡
__˝lu•lus


	@Source/STM32F10x_StdPeriph_Driver/inc/stm32f10x_dma.h

23 #i‚de‡
__STM32F10x_DMA_H


24 
	#__STM32F10x_DMA_H


	)

26 #ifde‡
__˝lu•lus


31 
	~"°m32f10x.h
"

51 
uöt32_t
 
DMA_PîùhîÆBa£Addr
;

53 
uöt32_t
 
DMA_Mem‹yBa£Addr
;

55 
uöt32_t
 
DMA_DIR
;

58 
uöt32_t
 
DMA_Buf„rSize
;

62 
uöt32_t
 
DMA_PîùhîÆInc
;

65 
uöt32_t
 
DMA_Mem‹yInc
;

68 
uöt32_t
 
DMA_PîùhîÆD©aSize
;

71 
uöt32_t
 
DMA_Mem‹yD©aSize
;

74 
uöt32_t
 
DMA_Mode
;

79 
uöt32_t
 
DMA_Pri‹ôy
;

82 
uöt32_t
 
DMA_M2M
;

84 }
	tDMA_InôTy≥Def
;

94 
	#IS_DMA_ALL_PERIPH
(
PERIPH
Ë(((PERIPHË=
DMA1_Ch™√l1
Ë|| \

	)

95 ((
PERIPH
Ë=
DMA1_Ch™√l2
) || \

96 ((
PERIPH
Ë=
DMA1_Ch™√l3
) || \

97 ((
PERIPH
Ë=
DMA1_Ch™√l4
) || \

98 ((
PERIPH
Ë=
DMA1_Ch™√l5
) || \

99 ((
PERIPH
Ë=
DMA1_Ch™√l6
) || \

100 ((
PERIPH
Ë=
DMA1_Ch™√l7
) || \

101 ((
PERIPH
Ë=
DMA2_Ch™√l1
) || \

102 ((
PERIPH
Ë=
DMA2_Ch™√l2
) || \

103 ((
PERIPH
Ë=
DMA2_Ch™√l3
) || \

104 ((
PERIPH
Ë=
DMA2_Ch™√l4
) || \

105 ((
PERIPH
Ë=
DMA2_Ch™√l5
))

111 
	#DMA_DIR_PîùhîÆDST
 ((
uöt32_t
)0x00000010)

	)

112 
	#DMA_DIR_PîùhîÆSRC
 ((
uöt32_t
)0x00000000)

	)

113 
	#IS_DMA_DIR
(
DIR
Ë(((DIRË=
DMA_DIR_PîùhîÆDST
Ë|| \

	)

114 ((
DIR
Ë=
DMA_DIR_PîùhîÆSRC
))

123 
	#DMA_PîùhîÆInc_E«bÀ
 ((
uöt32_t
)0x00000040)

	)

124 
	#DMA_PîùhîÆInc_DißbÀ
 ((
uöt32_t
)0x00000000)

	)

125 
	#IS_DMA_PERIPHERAL_INC_STATE
(
STATE
Ë(((STATEË=
DMA_PîùhîÆInc_E«bÀ
Ë|| \

	)

126 ((
STATE
Ë=
DMA_PîùhîÆInc_DißbÀ
))

135 
	#DMA_Mem‹yInc_E«bÀ
 ((
uöt32_t
)0x00000080)

	)

136 
	#DMA_Mem‹yInc_DißbÀ
 ((
uöt32_t
)0x00000000)

	)

137 
	#IS_DMA_MEMORY_INC_STATE
(
STATE
Ë(((STATEË=
DMA_Mem‹yInc_E«bÀ
Ë|| \

	)

138 ((
STATE
Ë=
DMA_Mem‹yInc_DißbÀ
))

147 
	#DMA_PîùhîÆD©aSize_Byã
 ((
uöt32_t
)0x00000000)

	)

148 
	#DMA_PîùhîÆD©aSize_HÆfW‹d
 ((
uöt32_t
)0x00000100)

	)

149 
	#DMA_PîùhîÆD©aSize_W‹d
 ((
uöt32_t
)0x00000200)

	)

150 
	#IS_DMA_PERIPHERAL_DATA_SIZE
(
SIZE
Ë(((SIZEË=
DMA_PîùhîÆD©aSize_Byã
Ë|| \

	)

151 ((
SIZE
Ë=
DMA_PîùhîÆD©aSize_HÆfW‹d
) || \

152 ((
SIZE
Ë=
DMA_PîùhîÆD©aSize_W‹d
))

161 
	#DMA_Mem‹yD©aSize_Byã
 ((
uöt32_t
)0x00000000)

	)

162 
	#DMA_Mem‹yD©aSize_HÆfW‹d
 ((
uöt32_t
)0x00000400)

	)

163 
	#DMA_Mem‹yD©aSize_W‹d
 ((
uöt32_t
)0x00000800)

	)

164 
	#IS_DMA_MEMORY_DATA_SIZE
(
SIZE
Ë(((SIZEË=
DMA_Mem‹yD©aSize_Byã
Ë|| \

	)

165 ((
SIZE
Ë=
DMA_Mem‹yD©aSize_HÆfW‹d
) || \

166 ((
SIZE
Ë=
DMA_Mem‹yD©aSize_W‹d
))

175 
	#DMA_Mode_Cúcuœr
 ((
uöt32_t
)0x00000020)

	)

176 
	#DMA_Mode_N‹mÆ
 ((
uöt32_t
)0x00000000)

	)

177 
	#IS_DMA_MODE
(
MODE
Ë(((MODEË=
DMA_Mode_Cúcuœr
Ë|| ((MODEË=
DMA_Mode_N‹mÆ
))

	)

186 
	#DMA_Pri‹ôy_VîyHigh
 ((
uöt32_t
)0x00003000)

	)

187 
	#DMA_Pri‹ôy_High
 ((
uöt32_t
)0x00002000)

	)

188 
	#DMA_Pri‹ôy_Medium
 ((
uöt32_t
)0x00001000)

	)

189 
	#DMA_Pri‹ôy_Low
 ((
uöt32_t
)0x00000000)

	)

190 
	#IS_DMA_PRIORITY
(
PRIORITY
Ë(((PRIORITYË=
DMA_Pri‹ôy_VîyHigh
Ë|| \

	)

191 ((
PRIORITY
Ë=
DMA_Pri‹ôy_High
) || \

192 ((
PRIORITY
Ë=
DMA_Pri‹ôy_Medium
) || \

193 ((
PRIORITY
Ë=
DMA_Pri‹ôy_Low
))

202 
	#DMA_M2M_E«bÀ
 ((
uöt32_t
)0x00004000)

	)

203 
	#DMA_M2M_DißbÀ
 ((
uöt32_t
)0x00000000)

	)

204 
	#IS_DMA_M2M_STATE
(
STATE
Ë(((STATEË=
DMA_M2M_E«bÀ
Ë|| ((STATEË=
DMA_M2M_DißbÀ
))

	)

214 
	#DMA_IT_TC
 ((
uöt32_t
)0x00000002)

	)

215 
	#DMA_IT_HT
 ((
uöt32_t
)0x00000004)

	)

216 
	#DMA_IT_TE
 ((
uöt32_t
)0x00000008)

	)

217 
	#IS_DMA_CONFIG_IT
(
IT
Ë((((ITË& 0xFFFFFFF1Ë=0x00Ë&& ((ITË!0x00))

	)

219 
	#DMA1_IT_GL1
 ((
uöt32_t
)0x00000001)

	)

220 
	#DMA1_IT_TC1
 ((
uöt32_t
)0x00000002)

	)

221 
	#DMA1_IT_HT1
 ((
uöt32_t
)0x00000004)

	)

222 
	#DMA1_IT_TE1
 ((
uöt32_t
)0x00000008)

	)

223 
	#DMA1_IT_GL2
 ((
uöt32_t
)0x00000010)

	)

224 
	#DMA1_IT_TC2
 ((
uöt32_t
)0x00000020)

	)

225 
	#DMA1_IT_HT2
 ((
uöt32_t
)0x00000040)

	)

226 
	#DMA1_IT_TE2
 ((
uöt32_t
)0x00000080)

	)

227 
	#DMA1_IT_GL3
 ((
uöt32_t
)0x00000100)

	)

228 
	#DMA1_IT_TC3
 ((
uöt32_t
)0x00000200)

	)

229 
	#DMA1_IT_HT3
 ((
uöt32_t
)0x00000400)

	)

230 
	#DMA1_IT_TE3
 ((
uöt32_t
)0x00000800)

	)

231 
	#DMA1_IT_GL4
 ((
uöt32_t
)0x00001000)

	)

232 
	#DMA1_IT_TC4
 ((
uöt32_t
)0x00002000)

	)

233 
	#DMA1_IT_HT4
 ((
uöt32_t
)0x00004000)

	)

234 
	#DMA1_IT_TE4
 ((
uöt32_t
)0x00008000)

	)

235 
	#DMA1_IT_GL5
 ((
uöt32_t
)0x00010000)

	)

236 
	#DMA1_IT_TC5
 ((
uöt32_t
)0x00020000)

	)

237 
	#DMA1_IT_HT5
 ((
uöt32_t
)0x00040000)

	)

238 
	#DMA1_IT_TE5
 ((
uöt32_t
)0x00080000)

	)

239 
	#DMA1_IT_GL6
 ((
uöt32_t
)0x00100000)

	)

240 
	#DMA1_IT_TC6
 ((
uöt32_t
)0x00200000)

	)

241 
	#DMA1_IT_HT6
 ((
uöt32_t
)0x00400000)

	)

242 
	#DMA1_IT_TE6
 ((
uöt32_t
)0x00800000)

	)

243 
	#DMA1_IT_GL7
 ((
uöt32_t
)0x01000000)

	)

244 
	#DMA1_IT_TC7
 ((
uöt32_t
)0x02000000)

	)

245 
	#DMA1_IT_HT7
 ((
uöt32_t
)0x04000000)

	)

246 
	#DMA1_IT_TE7
 ((
uöt32_t
)0x08000000)

	)

248 
	#DMA2_IT_GL1
 ((
uöt32_t
)0x10000001)

	)

249 
	#DMA2_IT_TC1
 ((
uöt32_t
)0x10000002)

	)

250 
	#DMA2_IT_HT1
 ((
uöt32_t
)0x10000004)

	)

251 
	#DMA2_IT_TE1
 ((
uöt32_t
)0x10000008)

	)

252 
	#DMA2_IT_GL2
 ((
uöt32_t
)0x10000010)

	)

253 
	#DMA2_IT_TC2
 ((
uöt32_t
)0x10000020)

	)

254 
	#DMA2_IT_HT2
 ((
uöt32_t
)0x10000040)

	)

255 
	#DMA2_IT_TE2
 ((
uöt32_t
)0x10000080)

	)

256 
	#DMA2_IT_GL3
 ((
uöt32_t
)0x10000100)

	)

257 
	#DMA2_IT_TC3
 ((
uöt32_t
)0x10000200)

	)

258 
	#DMA2_IT_HT3
 ((
uöt32_t
)0x10000400)

	)

259 
	#DMA2_IT_TE3
 ((
uöt32_t
)0x10000800)

	)

260 
	#DMA2_IT_GL4
 ((
uöt32_t
)0x10001000)

	)

261 
	#DMA2_IT_TC4
 ((
uöt32_t
)0x10002000)

	)

262 
	#DMA2_IT_HT4
 ((
uöt32_t
)0x10004000)

	)

263 
	#DMA2_IT_TE4
 ((
uöt32_t
)0x10008000)

	)

264 
	#DMA2_IT_GL5
 ((
uöt32_t
)0x10010000)

	)

265 
	#DMA2_IT_TC5
 ((
uöt32_t
)0x10020000)

	)

266 
	#DMA2_IT_HT5
 ((
uöt32_t
)0x10040000)

	)

267 
	#DMA2_IT_TE5
 ((
uöt32_t
)0x10080000)

	)

269 
	#IS_DMA_CLEAR_IT
(
IT
Ë(((((ITË& 0xF0000000Ë=0x00Ë|| (((ITË& 0xEFF00000Ë=0x00)Ë&& ((ITË!0x00))

	)

271 
	#IS_DMA_GET_IT
(
IT
Ë(((ITË=
DMA1_IT_GL1
Ë|| ((ITË=
DMA1_IT_TC1
Ë|| \

	)

272 ((
IT
Ë=
DMA1_IT_HT1
Ë|| ((ITË=
DMA1_IT_TE1
) || \

273 ((
IT
Ë=
DMA1_IT_GL2
Ë|| ((ITË=
DMA1_IT_TC2
) || \

274 ((
IT
Ë=
DMA1_IT_HT2
Ë|| ((ITË=
DMA1_IT_TE2
) || \

275 ((
IT
Ë=
DMA1_IT_GL3
Ë|| ((ITË=
DMA1_IT_TC3
) || \

276 ((
IT
Ë=
DMA1_IT_HT3
Ë|| ((ITË=
DMA1_IT_TE3
) || \

277 ((
IT
Ë=
DMA1_IT_GL4
Ë|| ((ITË=
DMA1_IT_TC4
) || \

278 ((
IT
Ë=
DMA1_IT_HT4
Ë|| ((ITË=
DMA1_IT_TE4
) || \

279 ((
IT
Ë=
DMA1_IT_GL5
Ë|| ((ITË=
DMA1_IT_TC5
) || \

280 ((
IT
Ë=
DMA1_IT_HT5
Ë|| ((ITË=
DMA1_IT_TE5
) || \

281 ((
IT
Ë=
DMA1_IT_GL6
Ë|| ((ITË=
DMA1_IT_TC6
) || \

282 ((
IT
Ë=
DMA1_IT_HT6
Ë|| ((ITË=
DMA1_IT_TE6
) || \

283 ((
IT
Ë=
DMA1_IT_GL7
Ë|| ((ITË=
DMA1_IT_TC7
) || \

284 ((
IT
Ë=
DMA1_IT_HT7
Ë|| ((ITË=
DMA1_IT_TE7
) || \

285 ((
IT
Ë=
DMA2_IT_GL1
Ë|| ((ITË=
DMA2_IT_TC1
) || \

286 ((
IT
Ë=
DMA2_IT_HT1
Ë|| ((ITË=
DMA2_IT_TE1
) || \

287 ((
IT
Ë=
DMA2_IT_GL2
Ë|| ((ITË=
DMA2_IT_TC2
) || \

288 ((
IT
Ë=
DMA2_IT_HT2
Ë|| ((ITË=
DMA2_IT_TE2
) || \

289 ((
IT
Ë=
DMA2_IT_GL3
Ë|| ((ITË=
DMA2_IT_TC3
) || \

290 ((
IT
Ë=
DMA2_IT_HT3
Ë|| ((ITË=
DMA2_IT_TE3
) || \

291 ((
IT
Ë=
DMA2_IT_GL4
Ë|| ((ITË=
DMA2_IT_TC4
) || \

292 ((
IT
Ë=
DMA2_IT_HT4
Ë|| ((ITË=
DMA2_IT_TE4
) || \

293 ((
IT
Ë=
DMA2_IT_GL5
Ë|| ((ITË=
DMA2_IT_TC5
) || \

294 ((
IT
Ë=
DMA2_IT_HT5
Ë|| ((ITË=
DMA2_IT_TE5
))

303 
	#DMA1_FLAG_GL1
 ((
uöt32_t
)0x00000001)

	)

304 
	#DMA1_FLAG_TC1
 ((
uöt32_t
)0x00000002)

	)

305 
	#DMA1_FLAG_HT1
 ((
uöt32_t
)0x00000004)

	)

306 
	#DMA1_FLAG_TE1
 ((
uöt32_t
)0x00000008)

	)

307 
	#DMA1_FLAG_GL2
 ((
uöt32_t
)0x00000010)

	)

308 
	#DMA1_FLAG_TC2
 ((
uöt32_t
)0x00000020)

	)

309 
	#DMA1_FLAG_HT2
 ((
uöt32_t
)0x00000040)

	)

310 
	#DMA1_FLAG_TE2
 ((
uöt32_t
)0x00000080)

	)

311 
	#DMA1_FLAG_GL3
 ((
uöt32_t
)0x00000100)

	)

312 
	#DMA1_FLAG_TC3
 ((
uöt32_t
)0x00000200)

	)

313 
	#DMA1_FLAG_HT3
 ((
uöt32_t
)0x00000400)

	)

314 
	#DMA1_FLAG_TE3
 ((
uöt32_t
)0x00000800)

	)

315 
	#DMA1_FLAG_GL4
 ((
uöt32_t
)0x00001000)

	)

316 
	#DMA1_FLAG_TC4
 ((
uöt32_t
)0x00002000)

	)

317 
	#DMA1_FLAG_HT4
 ((
uöt32_t
)0x00004000)

	)

318 
	#DMA1_FLAG_TE4
 ((
uöt32_t
)0x00008000)

	)

319 
	#DMA1_FLAG_GL5
 ((
uöt32_t
)0x00010000)

	)

320 
	#DMA1_FLAG_TC5
 ((
uöt32_t
)0x00020000)

	)

321 
	#DMA1_FLAG_HT5
 ((
uöt32_t
)0x00040000)

	)

322 
	#DMA1_FLAG_TE5
 ((
uöt32_t
)0x00080000)

	)

323 
	#DMA1_FLAG_GL6
 ((
uöt32_t
)0x00100000)

	)

324 
	#DMA1_FLAG_TC6
 ((
uöt32_t
)0x00200000)

	)

325 
	#DMA1_FLAG_HT6
 ((
uöt32_t
)0x00400000)

	)

326 
	#DMA1_FLAG_TE6
 ((
uöt32_t
)0x00800000)

	)

327 
	#DMA1_FLAG_GL7
 ((
uöt32_t
)0x01000000)

	)

328 
	#DMA1_FLAG_TC7
 ((
uöt32_t
)0x02000000)

	)

329 
	#DMA1_FLAG_HT7
 ((
uöt32_t
)0x04000000)

	)

330 
	#DMA1_FLAG_TE7
 ((
uöt32_t
)0x08000000)

	)

332 
	#DMA2_FLAG_GL1
 ((
uöt32_t
)0x10000001)

	)

333 
	#DMA2_FLAG_TC1
 ((
uöt32_t
)0x10000002)

	)

334 
	#DMA2_FLAG_HT1
 ((
uöt32_t
)0x10000004)

	)

335 
	#DMA2_FLAG_TE1
 ((
uöt32_t
)0x10000008)

	)

336 
	#DMA2_FLAG_GL2
 ((
uöt32_t
)0x10000010)

	)

337 
	#DMA2_FLAG_TC2
 ((
uöt32_t
)0x10000020)

	)

338 
	#DMA2_FLAG_HT2
 ((
uöt32_t
)0x10000040)

	)

339 
	#DMA2_FLAG_TE2
 ((
uöt32_t
)0x10000080)

	)

340 
	#DMA2_FLAG_GL3
 ((
uöt32_t
)0x10000100)

	)

341 
	#DMA2_FLAG_TC3
 ((
uöt32_t
)0x10000200)

	)

342 
	#DMA2_FLAG_HT3
 ((
uöt32_t
)0x10000400)

	)

343 
	#DMA2_FLAG_TE3
 ((
uöt32_t
)0x10000800)

	)

344 
	#DMA2_FLAG_GL4
 ((
uöt32_t
)0x10001000)

	)

345 
	#DMA2_FLAG_TC4
 ((
uöt32_t
)0x10002000)

	)

346 
	#DMA2_FLAG_HT4
 ((
uöt32_t
)0x10004000)

	)

347 
	#DMA2_FLAG_TE4
 ((
uöt32_t
)0x10008000)

	)

348 
	#DMA2_FLAG_GL5
 ((
uöt32_t
)0x10010000)

	)

349 
	#DMA2_FLAG_TC5
 ((
uöt32_t
)0x10020000)

	)

350 
	#DMA2_FLAG_HT5
 ((
uöt32_t
)0x10040000)

	)

351 
	#DMA2_FLAG_TE5
 ((
uöt32_t
)0x10080000)

	)

353 
	#IS_DMA_CLEAR_FLAG
(
FLAG
Ë(((((FLAGË& 0xF0000000Ë=0x00Ë|| (((FLAGË& 0xEFF00000Ë=0x00)Ë&& ((FLAGË!0x00))

	)

355 
	#IS_DMA_GET_FLAG
(
FLAG
Ë(((FLAGË=
DMA1_FLAG_GL1
Ë|| ((FLAGË=
DMA1_FLAG_TC1
Ë|| \

	)

356 ((
FLAG
Ë=
DMA1_FLAG_HT1
Ë|| ((FLAGË=
DMA1_FLAG_TE1
) || \

357 ((
FLAG
Ë=
DMA1_FLAG_GL2
Ë|| ((FLAGË=
DMA1_FLAG_TC2
) || \

358 ((
FLAG
Ë=
DMA1_FLAG_HT2
Ë|| ((FLAGË=
DMA1_FLAG_TE2
) || \

359 ((
FLAG
Ë=
DMA1_FLAG_GL3
Ë|| ((FLAGË=
DMA1_FLAG_TC3
) || \

360 ((
FLAG
Ë=
DMA1_FLAG_HT3
Ë|| ((FLAGË=
DMA1_FLAG_TE3
) || \

361 ((
FLAG
Ë=
DMA1_FLAG_GL4
Ë|| ((FLAGË=
DMA1_FLAG_TC4
) || \

362 ((
FLAG
Ë=
DMA1_FLAG_HT4
Ë|| ((FLAGË=
DMA1_FLAG_TE4
) || \

363 ((
FLAG
Ë=
DMA1_FLAG_GL5
Ë|| ((FLAGË=
DMA1_FLAG_TC5
) || \

364 ((
FLAG
Ë=
DMA1_FLAG_HT5
Ë|| ((FLAGË=
DMA1_FLAG_TE5
) || \

365 ((
FLAG
Ë=
DMA1_FLAG_GL6
Ë|| ((FLAGË=
DMA1_FLAG_TC6
) || \

366 ((
FLAG
Ë=
DMA1_FLAG_HT6
Ë|| ((FLAGË=
DMA1_FLAG_TE6
) || \

367 ((
FLAG
Ë=
DMA1_FLAG_GL7
Ë|| ((FLAGË=
DMA1_FLAG_TC7
) || \

368 ((
FLAG
Ë=
DMA1_FLAG_HT7
Ë|| ((FLAGË=
DMA1_FLAG_TE7
) || \

369 ((
FLAG
Ë=
DMA2_FLAG_GL1
Ë|| ((FLAGË=
DMA2_FLAG_TC1
) || \

370 ((
FLAG
Ë=
DMA2_FLAG_HT1
Ë|| ((FLAGË=
DMA2_FLAG_TE1
) || \

371 ((
FLAG
Ë=
DMA2_FLAG_GL2
Ë|| ((FLAGË=
DMA2_FLAG_TC2
) || \

372 ((
FLAG
Ë=
DMA2_FLAG_HT2
Ë|| ((FLAGË=
DMA2_FLAG_TE2
) || \

373 ((
FLAG
Ë=
DMA2_FLAG_GL3
Ë|| ((FLAGË=
DMA2_FLAG_TC3
) || \

374 ((
FLAG
Ë=
DMA2_FLAG_HT3
Ë|| ((FLAGË=
DMA2_FLAG_TE3
) || \

375 ((
FLAG
Ë=
DMA2_FLAG_GL4
Ë|| ((FLAGË=
DMA2_FLAG_TC4
) || \

376 ((
FLAG
Ë=
DMA2_FLAG_HT4
Ë|| ((FLAGË=
DMA2_FLAG_TE4
) || \

377 ((
FLAG
Ë=
DMA2_FLAG_GL5
Ë|| ((FLAGË=
DMA2_FLAG_TC5
) || \

378 ((
FLAG
Ë=
DMA2_FLAG_HT5
Ë|| ((FLAGË=
DMA2_FLAG_TE5
))

387 
	#IS_DMA_BUFFER_SIZE
(
SIZE
Ë(((SIZEË>0x1Ë&& ((SIZEË< 0x10000))

	)

409 
DMA_DeInô
(
DMA_Ch™√l_Ty≥Def
* 
DMAy_Ch™√lx
);

410 
DMA_Inô
(
DMA_Ch™√l_Ty≥Def
* 
DMAy_Ch™√lx
, 
DMA_InôTy≥Def
* 
DMA_InôSåu˘
);

411 
DMA_Såu˘Inô
(
DMA_InôTy≥Def
* 
DMA_InôSåu˘
);

412 
DMA_Cmd
(
DMA_Ch™√l_Ty≥Def
* 
DMAy_Ch™√lx
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

413 
DMA_ITC⁄fig
(
DMA_Ch™√l_Ty≥Def
* 
DMAy_Ch™√lx
, 
uöt32_t
 
DMA_IT
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

414 
uöt16_t
 
DMA_GëCuºD©aCou¡î
(
DMA_Ch™√l_Ty≥Def
* 
DMAy_Ch™√lx
);

415 
FœgSètus
 
DMA_GëFœgSètus
(
uöt32_t
 
DMA_FLAG
);

416 
DMA_CÀ¨Fœg
(
uöt32_t
 
DMA_FLAG
);

417 
ITSètus
 
DMA_GëITSètus
(
uöt32_t
 
DMA_IT
);

418 
DMA_CÀ¨ITPídögBô
(
uöt32_t
 
DMA_IT
);

420 #ifde‡
__˝lu•lus


	@Source/STM32F10x_StdPeriph_Driver/inc/stm32f10x_exti.h

23 #i‚de‡
__STM32F10x_EXTI_H


24 
	#__STM32F10x_EXTI_H


	)

26 #ifde‡
__˝lu•lus


31 
	~"°m32f10x.h
"

51 
EXTI_Mode_I¡îru±
 = 0x00,

52 
EXTI_Mode_Evít
 = 0x04

53 }
	tEXTIMode_Ty≥Def
;

55 
	#IS_EXTI_MODE
(
MODE
Ë(((MODEË=
EXTI_Mode_I¡îru±
Ë|| ((MODEË=
EXTI_Mode_Evít
))

	)

63 
EXTI_Triggî_Risög
 = 0x08,

64 
EXTI_Triggî_FÆlög
 = 0x0C,

65 
EXTI_Triggî_Risög_FÆlög
 = 0x10

66 }
	tEXTITriggî_Ty≥Def
;

68 
	#IS_EXTI_TRIGGER
(
TRIGGER
Ë(((TRIGGERË=
EXTI_Triggî_Risög
Ë|| \

	)

69 ((
TRIGGER
Ë=
EXTI_Triggî_FÆlög
) || \

70 ((
TRIGGER
Ë=
EXTI_Triggî_Risög_FÆlög
))

77 
uöt32_t
 
EXTI_Löe
;

80 
EXTIMode_Ty≥Def
 
EXTI_Mode
;

83 
EXTITriggî_Ty≥Def
 
EXTI_Triggî
;

86 
Fun˘i⁄ÆSèã
 
EXTI_LöeCmd
;

88 }
	tEXTI_InôTy≥Def
;

102 
	#EXTI_Löe0
 ((
uöt32_t
)0x00001Ë

	)

103 
	#EXTI_Löe1
 ((
uöt32_t
)0x00002Ë

	)

104 
	#EXTI_Löe2
 ((
uöt32_t
)0x00004Ë

	)

105 
	#EXTI_Löe3
 ((
uöt32_t
)0x00008Ë

	)

106 
	#EXTI_Löe4
 ((
uöt32_t
)0x00010Ë

	)

107 
	#EXTI_Löe5
 ((
uöt32_t
)0x00020Ë

	)

108 
	#EXTI_Löe6
 ((
uöt32_t
)0x00040Ë

	)

109 
	#EXTI_Löe7
 ((
uöt32_t
)0x00080Ë

	)

110 
	#EXTI_Löe8
 ((
uöt32_t
)0x00100Ë

	)

111 
	#EXTI_Löe9
 ((
uöt32_t
)0x00200Ë

	)

112 
	#EXTI_Löe10
 ((
uöt32_t
)0x00400Ë

	)

113 
	#EXTI_Löe11
 ((
uöt32_t
)0x00800Ë

	)

114 
	#EXTI_Löe12
 ((
uöt32_t
)0x01000Ë

	)

115 
	#EXTI_Löe13
 ((
uöt32_t
)0x02000Ë

	)

116 
	#EXTI_Löe14
 ((
uöt32_t
)0x04000Ë

	)

117 
	#EXTI_Löe15
 ((
uöt32_t
)0x08000Ë

	)

118 
	#EXTI_Löe16
 ((
uöt32_t
)0x10000Ë

	)

119 
	#EXTI_Löe17
 ((
uöt32_t
)0x20000Ë

	)

120 
	#EXTI_Löe18
 ((
uöt32_t
)0x40000Ë

	)

122 
	#EXTI_Löe19
 ((
uöt32_t
)0x80000Ë

	)

124 
	#IS_EXTI_LINE
(
LINE
Ë((((LINEË& (
uöt32_t
)0xFFF00000Ë=0x00Ë&& ((LINEË!(
uöt16_t
)0x00))

	)

126 
	#IS_GET_EXTI_LINE
(
LINE
Ë(((LINEË=
EXTI_Löe0
Ë|| ((LINEË=
EXTI_Löe1
Ë|| \

	)

127 ((
LINE
Ë=
EXTI_Löe2
Ë|| ((LINEË=
EXTI_Löe3
) || \

128 ((
LINE
Ë=
EXTI_Löe4
Ë|| ((LINEË=
EXTI_Löe5
) || \

129 ((
LINE
Ë=
EXTI_Löe6
Ë|| ((LINEË=
EXTI_Löe7
) || \

130 ((
LINE
Ë=
EXTI_Löe8
Ë|| ((LINEË=
EXTI_Löe9
) || \

131 ((
LINE
Ë=
EXTI_Löe10
Ë|| ((LINEË=
EXTI_Löe11
) || \

132 ((
LINE
Ë=
EXTI_Löe12
Ë|| ((LINEË=
EXTI_Löe13
) || \

133 ((
LINE
Ë=
EXTI_Löe14
Ë|| ((LINEË=
EXTI_Löe15
) || \

134 ((
LINE
Ë=
EXTI_Löe16
Ë|| ((LINEË=
EXTI_Löe17
) || \

135 ((
LINE
Ë=
EXTI_Löe18
Ë|| ((LINEË=
EXTI_Löe19
))

157 
EXTI_DeInô
();

158 
EXTI_Inô
(
EXTI_InôTy≥Def
* 
EXTI_InôSåu˘
);

159 
EXTI_Såu˘Inô
(
EXTI_InôTy≥Def
* 
EXTI_InôSåu˘
);

160 
EXTI_Gíî©eSWI¡îru±
(
uöt32_t
 
EXTI_Löe
);

161 
FœgSètus
 
EXTI_GëFœgSètus
(
uöt32_t
 
EXTI_Löe
);

162 
EXTI_CÀ¨Fœg
(
uöt32_t
 
EXTI_Löe
);

163 
ITSètus
 
EXTI_GëITSètus
(
uöt32_t
 
EXTI_Löe
);

164 
EXTI_CÀ¨ITPídögBô
(
uöt32_t
 
EXTI_Löe
);

166 #ifde‡
__˝lu•lus


	@Source/STM32F10x_StdPeriph_Driver/inc/stm32f10x_flash.h

23 #i‚de‡
__STM32F10x_FLASH_H


24 
	#__STM32F10x_FLASH_H


	)

26 #ifde‡
__˝lu•lus


31 
	~"°m32f10x.h
"

51 
FLASH_BUSY
 = 1,

52 
FLASH_ERROR_PG
,

53 
FLASH_ERROR_WRP
,

54 
FLASH_COMPLETE
,

55 
FLASH_TIMEOUT


56 }
	tFLASH_Sètus
;

70 
	#FLASH_L©ícy_0
 ((
uöt32_t
)0x00000000Ë

	)

71 
	#FLASH_L©ícy_1
 ((
uöt32_t
)0x00000001Ë

	)

72 
	#FLASH_L©ícy_2
 ((
uöt32_t
)0x00000002Ë

	)

73 
	#IS_FLASH_LATENCY
(
LATENCY
Ë(((LATENCYË=
FLASH_L©ícy_0
Ë|| \

	)

74 ((
LATENCY
Ë=
FLASH_L©ícy_1
) || \

75 ((
LATENCY
Ë=
FLASH_L©ícy_2
))

84 
	#FLASH_HÆfCy˛eAc˚ss_E«bÀ
 ((
uöt32_t
)0x00000008Ë

	)

85 
	#FLASH_HÆfCy˛eAc˚ss_DißbÀ
 ((
uöt32_t
)0x00000000Ë

	)

86 
	#IS_FLASH_HALFCYCLEACCESS_STATE
(
STATE
Ë(((STATEË=
FLASH_HÆfCy˛eAc˚ss_E«bÀ
Ë|| \

	)

87 ((
STATE
Ë=
FLASH_HÆfCy˛eAc˚ss_DißbÀ
))

96 
	#FLASH_Pª„tchBuf„r_E«bÀ
 ((
uöt32_t
)0x00000010Ë

	)

97 
	#FLASH_Pª„tchBuf„r_DißbÀ
 ((
uöt32_t
)0x00000000Ë

	)

98 
	#IS_FLASH_PREFETCHBUFFER_STATE
(
STATE
Ë(((STATEË=
FLASH_Pª„tchBuf„r_E«bÀ
Ë|| \

	)

99 ((
STATE
Ë=
FLASH_Pª„tchBuf„r_DißbÀ
))

109 
	#FLASH_WRPrŸ_Pages0to3
 ((
uöt32_t
)0x00000001Ë

	)

110 
	#FLASH_WRPrŸ_Pages4to7
 ((
uöt32_t
)0x00000002Ë

	)

111 
	#FLASH_WRPrŸ_Pages8to11
 ((
uöt32_t
)0x00000004Ë

	)

112 
	#FLASH_WRPrŸ_Pages12to15
 ((
uöt32_t
)0x00000008Ë

	)

113 
	#FLASH_WRPrŸ_Pages16to19
 ((
uöt32_t
)0x00000010Ë

	)

114 
	#FLASH_WRPrŸ_Pages20to23
 ((
uöt32_t
)0x00000020Ë

	)

115 
	#FLASH_WRPrŸ_Pages24to27
 ((
uöt32_t
)0x00000040Ë

	)

116 
	#FLASH_WRPrŸ_Pages28to31
 ((
uöt32_t
)0x00000080Ë

	)

119 
	#FLASH_WRPrŸ_Pages32to35
 ((
uöt32_t
)0x00000100Ë

	)

120 
	#FLASH_WRPrŸ_Pages36to39
 ((
uöt32_t
)0x00000200Ë

	)

121 
	#FLASH_WRPrŸ_Pages40to43
 ((
uöt32_t
)0x00000400Ë

	)

122 
	#FLASH_WRPrŸ_Pages44to47
 ((
uöt32_t
)0x00000800Ë

	)

123 
	#FLASH_WRPrŸ_Pages48to51
 ((
uöt32_t
)0x00001000Ë

	)

124 
	#FLASH_WRPrŸ_Pages52to55
 ((
uöt32_t
)0x00002000Ë

	)

125 
	#FLASH_WRPrŸ_Pages56to59
 ((
uöt32_t
)0x00004000Ë

	)

126 
	#FLASH_WRPrŸ_Pages60to63
 ((
uöt32_t
)0x00008000Ë

	)

127 
	#FLASH_WRPrŸ_Pages64to67
 ((
uöt32_t
)0x00010000Ë

	)

128 
	#FLASH_WRPrŸ_Pages68to71
 ((
uöt32_t
)0x00020000Ë

	)

129 
	#FLASH_WRPrŸ_Pages72to75
 ((
uöt32_t
)0x00040000Ë

	)

130 
	#FLASH_WRPrŸ_Pages76to79
 ((
uöt32_t
)0x00080000Ë

	)

131 
	#FLASH_WRPrŸ_Pages80to83
 ((
uöt32_t
)0x00100000Ë

	)

132 
	#FLASH_WRPrŸ_Pages84to87
 ((
uöt32_t
)0x00200000Ë

	)

133 
	#FLASH_WRPrŸ_Pages88to91
 ((
uöt32_t
)0x00400000Ë

	)

134 
	#FLASH_WRPrŸ_Pages92to95
 ((
uöt32_t
)0x00800000Ë

	)

135 
	#FLASH_WRPrŸ_Pages96to99
 ((
uöt32_t
)0x01000000Ë

	)

136 
	#FLASH_WRPrŸ_Pages100to103
 ((
uöt32_t
)0x02000000Ë

	)

137 
	#FLASH_WRPrŸ_Pages104to107
 ((
uöt32_t
)0x04000000Ë

	)

138 
	#FLASH_WRPrŸ_Pages108to111
 ((
uöt32_t
)0x08000000Ë

	)

139 
	#FLASH_WRPrŸ_Pages112to115
 ((
uöt32_t
)0x10000000Ë

	)

140 
	#FLASH_WRPrŸ_Pages116to119
 ((
uöt32_t
)0x20000000Ë

	)

141 
	#FLASH_WRPrŸ_Pages120to123
 ((
uöt32_t
)0x40000000Ë

	)

142 
	#FLASH_WRPrŸ_Pages124to127
 ((
uöt32_t
)0x80000000Ë

	)

145 
	#FLASH_WRPrŸ_Pages0to1
 ((
uöt32_t
)0x00000001Ë

	)

147 
	#FLASH_WRPrŸ_Pages2to3
 ((
uöt32_t
)0x00000002Ë

	)

149 
	#FLASH_WRPrŸ_Pages4to5
 ((
uöt32_t
)0x00000004Ë

	)

151 
	#FLASH_WRPrŸ_Pages6to7
 ((
uöt32_t
)0x00000008Ë

	)

153 
	#FLASH_WRPrŸ_Pages8to9
 ((
uöt32_t
)0x00000010Ë

	)

155 
	#FLASH_WRPrŸ_Pages10to11
 ((
uöt32_t
)0x00000020Ë

	)

157 
	#FLASH_WRPrŸ_Pages12to13
 ((
uöt32_t
)0x00000040Ë

	)

159 
	#FLASH_WRPrŸ_Pages14to15
 ((
uöt32_t
)0x00000080Ë

	)

161 
	#FLASH_WRPrŸ_Pages16to17
 ((
uöt32_t
)0x00000100Ë

	)

163 
	#FLASH_WRPrŸ_Pages18to19
 ((
uöt32_t
)0x00000200Ë

	)

165 
	#FLASH_WRPrŸ_Pages20to21
 ((
uöt32_t
)0x00000400Ë

	)

167 
	#FLASH_WRPrŸ_Pages22to23
 ((
uöt32_t
)0x00000800Ë

	)

169 
	#FLASH_WRPrŸ_Pages24to25
 ((
uöt32_t
)0x00001000Ë

	)

171 
	#FLASH_WRPrŸ_Pages26to27
 ((
uöt32_t
)0x00002000Ë

	)

173 
	#FLASH_WRPrŸ_Pages28to29
 ((
uöt32_t
)0x00004000Ë

	)

175 
	#FLASH_WRPrŸ_Pages30to31
 ((
uöt32_t
)0x00008000Ë

	)

177 
	#FLASH_WRPrŸ_Pages32to33
 ((
uöt32_t
)0x00010000Ë

	)

179 
	#FLASH_WRPrŸ_Pages34to35
 ((
uöt32_t
)0x00020000Ë

	)

181 
	#FLASH_WRPrŸ_Pages36to37
 ((
uöt32_t
)0x00040000Ë

	)

183 
	#FLASH_WRPrŸ_Pages38to39
 ((
uöt32_t
)0x00080000Ë

	)

185 
	#FLASH_WRPrŸ_Pages40to41
 ((
uöt32_t
)0x00100000Ë

	)

187 
	#FLASH_WRPrŸ_Pages42to43
 ((
uöt32_t
)0x00200000Ë

	)

189 
	#FLASH_WRPrŸ_Pages44to45
 ((
uöt32_t
)0x00400000Ë

	)

191 
	#FLASH_WRPrŸ_Pages46to47
 ((
uöt32_t
)0x00800000Ë

	)

193 
	#FLASH_WRPrŸ_Pages48to49
 ((
uöt32_t
)0x01000000Ë

	)

195 
	#FLASH_WRPrŸ_Pages50to51
 ((
uöt32_t
)0x02000000Ë

	)

197 
	#FLASH_WRPrŸ_Pages52to53
 ((
uöt32_t
)0x04000000Ë

	)

199 
	#FLASH_WRPrŸ_Pages54to55
 ((
uöt32_t
)0x08000000Ë

	)

201 
	#FLASH_WRPrŸ_Pages56to57
 ((
uöt32_t
)0x10000000Ë

	)

203 
	#FLASH_WRPrŸ_Pages58to59
 ((
uöt32_t
)0x20000000Ë

	)

205 
	#FLASH_WRPrŸ_Pages60to61
 ((
uöt32_t
)0x40000000Ë

	)

207 
	#FLASH_WRPrŸ_Pages62to127
 ((
uöt32_t
)0x80000000Ë

	)

208 
	#FLASH_WRPrŸ_Pages62to255
 ((
uöt32_t
)0x80000000Ë

	)

210 
	#FLASH_WRPrŸ_AŒPages
 ((
uöt32_t
)0xFFFFFFFFË

	)

212 
	#IS_FLASH_WRPROT_PAGE
(
PAGE
Ë(((PAGEË!0x00000000))

	)

214 
	#IS_FLASH_ADDRESS
(
ADDRESS
Ë(((ADDRESSË>0x08000000Ë&& ((ADDRESSË< 0x0807FFFF))

	)

216 
	#IS_OB_DATA_ADDRESS
(
ADDRESS
Ë(((ADDRESSË=0x1FFFF804Ë|| ((ADDRESSË=0x1FFFF806))

	)

226 
	#OB_IWDG_SW
 ((
uöt16_t
)0x0001Ë

	)

227 
	#OB_IWDG_HW
 ((
uöt16_t
)0x0000Ë

	)

228 
	#IS_OB_IWDG_SOURCE
(
SOURCE
Ë(((SOURCEË=
OB_IWDG_SW
Ë|| ((SOURCEË=
OB_IWDG_HW
))

	)

238 
	#OB_STOP_NoRST
 ((
uöt16_t
)0x0002Ë

	)

239 
	#OB_STOP_RST
 ((
uöt16_t
)0x0000Ë

	)

240 
	#IS_OB_STOP_SOURCE
(
SOURCE
Ë(((SOURCEË=
OB_STOP_NoRST
Ë|| ((SOURCEË=
OB_STOP_RST
))

	)

250 
	#OB_STDBY_NoRST
 ((
uöt16_t
)0x0004Ë

	)

251 
	#OB_STDBY_RST
 ((
uöt16_t
)0x0000Ë

	)

252 
	#IS_OB_STDBY_SOURCE
(
SOURCE
Ë(((SOURCEË=
OB_STDBY_NoRST
Ë|| ((SOURCEË=
OB_STDBY_RST
))

	)

262 
	#FLASH_IT_ERROR
 ((
uöt32_t
)0x00000400Ë

	)

263 
	#FLASH_IT_EOP
 ((
uöt32_t
)0x00001000Ë

	)

264 
	#IS_FLASH_IT
(
IT
Ë((((ITË& (
uöt32_t
)0xFFFFEBFFË=0x00000000Ë&& (((ITË!0x00000000)))

	)

274 
	#FLASH_FLAG_BSY
 ((
uöt32_t
)0x00000001Ë

	)

275 
	#FLASH_FLAG_EOP
 ((
uöt32_t
)0x00000020Ë

	)

276 
	#FLASH_FLAG_PGERR
 ((
uöt32_t
)0x00000004Ë

	)

277 
	#FLASH_FLAG_WRPRTERR
 ((
uöt32_t
)0x00000010Ë

	)

278 
	#FLASH_FLAG_OPTERR
 ((
uöt32_t
)0x00000001Ë

	)

280 
	#IS_FLASH_CLEAR_FLAG
(
FLAG
Ë((((FLAGË& (
uöt32_t
)0xFFFFFFCAË=0x00000000Ë&& ((FLAGË!0x00000000))

	)

281 
	#IS_FLASH_GET_FLAG
(
FLAG
Ë(((FLAGË=
FLASH_FLAG_BSY
Ë|| ((FLAGË=
FLASH_FLAG_EOP
Ë|| \

	)

282 ((
FLAG
Ë=
FLASH_FLAG_PGERR
Ë|| ((FLAGË=
FLASH_FLAG_WRPRTERR
) || \

283 ((
FLAG
Ë=
FLASH_FLAG_OPTERR
))

305 
FLASH_SëL©ícy
(
uöt32_t
 
FLASH_L©ícy
);

306 
FLASH_HÆfCy˛eAc˚ssCmd
(
uöt32_t
 
FLASH_HÆfCy˛eAc˚ss
);

307 
FLASH_Pª„tchBuf„rCmd
(
uöt32_t
 
FLASH_Pª„tchBuf„r
);

308 
FLASH_U∆ock
();

309 
FLASH_Lock
();

310 
FLASH_Sètus
 
FLASH_Eø£Page
(
uöt32_t
 
Page_Addªss
);

311 
FLASH_Sètus
 
FLASH_Eø£AŒPages
();

312 
FLASH_Sètus
 
FLASH_Eø£O±i⁄Byãs
();

313 
FLASH_Sètus
 
FLASH_ProgømW‹d
(
uöt32_t
 
Addªss
, uöt32_à
D©a
);

314 
FLASH_Sètus
 
FLASH_ProgømHÆfW‹d
(
uöt32_t
 
Addªss
, 
uöt16_t
 
D©a
);

315 
FLASH_Sètus
 
FLASH_ProgømO±i⁄ByãD©a
(
uöt32_t
 
Addªss
, 
uöt8_t
 
D©a
);

316 
FLASH_Sètus
 
FLASH_E«bÀWrôePrŸe˘i⁄
(
uöt32_t
 
FLASH_Pages
);

317 
FLASH_Sètus
 
FLASH_RódOutPrŸe˘i⁄
(
Fun˘i⁄ÆSèã
 
NewSèã
);

318 
FLASH_Sètus
 
FLASH_U£rO±i⁄ByãC⁄fig
(
uöt16_t
 
OB_IWDG
, uöt16_à
OB_STOP
, uöt16_à
OB_STDBY
);

319 
uöt32_t
 
FLASH_GëU£rO±i⁄Byã
();

320 
uöt32_t
 
FLASH_GëWrôePrŸe˘i⁄O±i⁄Byã
();

321 
FœgSètus
 
FLASH_GëRódOutPrŸe˘i⁄Sètus
();

322 
FœgSètus
 
FLASH_GëPª„tchBuf„rSètus
();

323 
FLASH_ITC⁄fig
(
uöt16_t
 
FLASH_IT
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

324 
FœgSètus
 
FLASH_GëFœgSètus
(
uöt16_t
 
FLASH_FLAG
);

325 
FLASH_CÀ¨Fœg
(
uöt16_t
 
FLASH_FLAG
);

326 
FLASH_Sètus
 
FLASH_GëSètus
();

327 
FLASH_Sètus
 
FLASH_WaôF‹La°O≥øti⁄
(
uöt32_t
 
Timeout
);

329 #ifde‡
__˝lu•lus


	@Source/STM32F10x_StdPeriph_Driver/inc/stm32f10x_fsmc.h

23 #i‚de‡
__STM32F10x_FSMC_H


24 
	#__STM32F10x_FSMC_H


	)

26 #ifde‡
__˝lu•lus


31 
	~"°m32f10x.h
"

51 
uöt32_t
 
FSMC_AddªssSëupTime
;

56 
uöt32_t
 
FSMC_AddªssHﬁdTime
;

61 
uöt32_t
 
FSMC_D©aSëupTime
;

66 
uöt32_t
 
FSMC_BusTu∫AroundDuøti⁄
;

71 
uöt32_t
 
FSMC_CLKDivisi⁄
;

75 
uöt32_t
 
FSMC_D©aL©ícy
;

83 
uöt32_t
 
FSMC_Ac˚ssMode
;

85 }
	tFSMC_NORSRAMTimögInôTy≥Def
;

93 
uöt32_t
 
FSMC_B™k
;

96 
uöt32_t
 
FSMC_D©aAddªssMux
;

100 
uöt32_t
 
FSMC_Mem‹yTy≥
;

104 
uöt32_t
 
FSMC_Mem‹yD©aWidth
;

107 
uöt32_t
 
FSMC_Bur°Ac˚ssMode
;

111 
uöt32_t
 
FSMC_WaôSig«lPﬁ¨ôy
;

115 
uöt32_t
 
FSMC_WøpMode
;

119 
uöt32_t
 
FSMC_WaôSig«lA˘ive
;

124 
uöt32_t
 
FSMC_WrôeO≥øti⁄
;

127 
uöt32_t
 
FSMC_WaôSig«l
;

131 
uöt32_t
 
FSMC_ExãndedMode
;

134 
uöt32_t
 
FSMC_WrôeBur°
;

137 
FSMC_NORSRAMTimögInôTy≥Def
* 
FSMC_RódWrôeTimögSåu˘
;

139 
FSMC_NORSRAMTimögInôTy≥Def
* 
FSMC_WrôeTimögSåu˘
;

140 }
	tFSMC_NORSRAMInôTy≥Def
;

148 
uöt32_t
 
FSMC_SëupTime
;

154 
uöt32_t
 
FSMC_WaôSëupTime
;

160 
uöt32_t
 
FSMC_HﬁdSëupTime
;

167 
uöt32_t
 
FSMC_HiZSëupTime
;

172 }
	tFSMC_NAND_PCCARDTimögInôTy≥Def
;

180 
uöt32_t
 
FSMC_B™k
;

183 
uöt32_t
 
FSMC_Waô„©uª
;

186 
uöt32_t
 
FSMC_Mem‹yD©aWidth
;

189 
uöt32_t
 
FSMC_ECC
;

192 
uöt32_t
 
FSMC_ECCPageSize
;

195 
uöt32_t
 
FSMC_TCLRSëupTime
;

199 
uöt32_t
 
FSMC_TARSëupTime
;

203 
FSMC_NAND_PCCARDTimögInôTy≥Def
* 
FSMC_Comm⁄S∑˚TimögSåu˘
;

205 
FSMC_NAND_PCCARDTimögInôTy≥Def
* 
FSMC_AâribuãS∑˚TimögSåu˘
;

206 }
	tFSMC_NANDInôTy≥Def
;

214 
uöt32_t
 
FSMC_Waô„©uª
;

217 
uöt32_t
 
FSMC_TCLRSëupTime
;

221 
uöt32_t
 
FSMC_TARSëupTime
;

226 
FSMC_NAND_PCCARDTimögInôTy≥Def
* 
FSMC_Comm⁄S∑˚TimögSåu˘
;

228 
FSMC_NAND_PCCARDTimögInôTy≥Def
* 
FSMC_AâribuãS∑˚TimögSåu˘
;

230 
FSMC_NAND_PCCARDTimögInôTy≥Def
* 
FSMC_IOS∑˚TimögSåu˘
;

231 }
	tFSMC_PCCARDInôTy≥Def
;

244 
	#FSMC_B™k1_NORSRAM1
 ((
uöt32_t
)0x00000000)

	)

245 
	#FSMC_B™k1_NORSRAM2
 ((
uöt32_t
)0x00000002)

	)

246 
	#FSMC_B™k1_NORSRAM3
 ((
uöt32_t
)0x00000004)

	)

247 
	#FSMC_B™k1_NORSRAM4
 ((
uöt32_t
)0x00000006)

	)

255 
	#FSMC_B™k2_NAND
 ((
uöt32_t
)0x00000010)

	)

256 
	#FSMC_B™k3_NAND
 ((
uöt32_t
)0x00000100)

	)

264 
	#FSMC_B™k4_PCCARD
 ((
uöt32_t
)0x00001000)

	)

269 
	#IS_FSMC_NORSRAM_BANK
(
BANK
Ë(((BANKË=
FSMC_B™k1_NORSRAM1
Ë|| \

	)

270 ((
BANK
Ë=
FSMC_B™k1_NORSRAM2
) || \

271 ((
BANK
Ë=
FSMC_B™k1_NORSRAM3
) || \

272 ((
BANK
Ë=
FSMC_B™k1_NORSRAM4
))

274 
	#IS_FSMC_NAND_BANK
(
BANK
Ë(((BANKË=
FSMC_B™k2_NAND
Ë|| \

	)

275 ((
BANK
Ë=
FSMC_B™k3_NAND
))

277 
	#IS_FSMC_GETFLAG_BANK
(
BANK
Ë(((BANKË=
FSMC_B™k2_NAND
Ë|| \

	)

278 ((
BANK
Ë=
FSMC_B™k3_NAND
) || \

279 ((
BANK
Ë=
FSMC_B™k4_PCCARD
))

281 
	#IS_FSMC_IT_BANK
(
BANK
Ë(((BANKË=
FSMC_B™k2_NAND
Ë|| \

	)

282 ((
BANK
Ë=
FSMC_B™k3_NAND
) || \

283 ((
BANK
Ë=
FSMC_B™k4_PCCARD
))

293 
	#FSMC_D©aAddªssMux_DißbÀ
 ((
uöt32_t
)0x00000000)

	)

294 
	#FSMC_D©aAddªssMux_E«bÀ
 ((
uöt32_t
)0x00000002)

	)

295 
	#IS_FSMC_MUX
(
MUX
Ë(((MUXË=
FSMC_D©aAddªssMux_DißbÀ
Ë|| \

	)

296 ((
MUX
Ë=
FSMC_D©aAddªssMux_E«bÀ
))

306 
	#FSMC_Mem‹yTy≥_SRAM
 ((
uöt32_t
)0x00000000)

	)

307 
	#FSMC_Mem‹yTy≥_PSRAM
 ((
uöt32_t
)0x00000004)

	)

308 
	#FSMC_Mem‹yTy≥_NOR
 ((
uöt32_t
)0x00000008)

	)

309 
	#IS_FSMC_MEMORY
(
MEMORY
Ë(((MEMORYË=
FSMC_Mem‹yTy≥_SRAM
Ë|| \

	)

310 ((
MEMORY
Ë=
FSMC_Mem‹yTy≥_PSRAM
)|| \

311 ((
MEMORY
Ë=
FSMC_Mem‹yTy≥_NOR
))

321 
	#FSMC_Mem‹yD©aWidth_8b
 ((
uöt32_t
)0x00000000)

	)

322 
	#FSMC_Mem‹yD©aWidth_16b
 ((
uöt32_t
)0x00000010)

	)

323 
	#IS_FSMC_MEMORY_WIDTH
(
WIDTH
Ë(((WIDTHË=
FSMC_Mem‹yD©aWidth_8b
Ë|| \

	)

324 ((
WIDTH
Ë=
FSMC_Mem‹yD©aWidth_16b
))

334 
	#FSMC_Bur°Ac˚ssMode_DißbÀ
 ((
uöt32_t
)0x00000000)

	)

335 
	#FSMC_Bur°Ac˚ssMode_E«bÀ
 ((
uöt32_t
)0x00000100)

	)

336 
	#IS_FSMC_BURSTMODE
(
STATE
Ë(((STATEË=
FSMC_Bur°Ac˚ssMode_DißbÀ
Ë|| \

	)

337 ((
STATE
Ë=
FSMC_Bur°Ac˚ssMode_E«bÀ
))

346 
	#FSMC_WaôSig«lPﬁ¨ôy_Low
 ((
uöt32_t
)0x00000000)

	)

347 
	#FSMC_WaôSig«lPﬁ¨ôy_High
 ((
uöt32_t
)0x00000200)

	)

348 
	#IS_FSMC_WAIT_POLARITY
(
POLARITY
Ë(((POLARITYË=
FSMC_WaôSig«lPﬁ¨ôy_Low
Ë|| \

	)

349 ((
POLARITY
Ë=
FSMC_WaôSig«lPﬁ¨ôy_High
))

359 
	#FSMC_WøpMode_DißbÀ
 ((
uöt32_t
)0x00000000)

	)

360 
	#FSMC_WøpMode_E«bÀ
 ((
uöt32_t
)0x00000400)

	)

361 
	#IS_FSMC_WRAP_MODE
(
MODE
Ë(((MODEË=
FSMC_WøpMode_DißbÀ
Ë|| \

	)

362 ((
MODE
Ë=
FSMC_WøpMode_E«bÀ
))

372 
	#FSMC_WaôSig«lA˘ive_Bef‹eWaôSèã
 ((
uöt32_t
)0x00000000)

	)

373 
	#FSMC_WaôSig«lA˘ive_DurögWaôSèã
 ((
uöt32_t
)0x00000800)

	)

374 
	#IS_FSMC_WAIT_SIGNAL_ACTIVE
(
ACTIVE
Ë(((ACTIVEË=
FSMC_WaôSig«lA˘ive_Bef‹eWaôSèã
Ë|| \

	)

375 ((
ACTIVE
Ë=
FSMC_WaôSig«lA˘ive_DurögWaôSèã
))

385 
	#FSMC_WrôeO≥øti⁄_DißbÀ
 ((
uöt32_t
)0x00000000)

	)

386 
	#FSMC_WrôeO≥øti⁄_E«bÀ
 ((
uöt32_t
)0x00001000)

	)

387 
	#IS_FSMC_WRITE_OPERATION
(
OPERATION
Ë(((OPERATIONË=
FSMC_WrôeO≥øti⁄_DißbÀ
Ë|| \

	)

388 ((
OPERATION
Ë=
FSMC_WrôeO≥øti⁄_E«bÀ
))

398 
	#FSMC_WaôSig«l_DißbÀ
 ((
uöt32_t
)0x00000000)

	)

399 
	#FSMC_WaôSig«l_E«bÀ
 ((
uöt32_t
)0x00002000)

	)

400 
	#IS_FSMC_WAITE_SIGNAL
(
SIGNAL
Ë(((SIGNALË=
FSMC_WaôSig«l_DißbÀ
Ë|| \

	)

401 ((
SIGNAL
Ë=
FSMC_WaôSig«l_E«bÀ
))

410 
	#FSMC_ExãndedMode_DißbÀ
 ((
uöt32_t
)0x00000000)

	)

411 
	#FSMC_ExãndedMode_E«bÀ
 ((
uöt32_t
)0x00004000)

	)

413 
	#IS_FSMC_EXTENDED_MODE
(
MODE
Ë(((MODEË=
FSMC_ExãndedMode_DißbÀ
Ë|| \

	)

414 ((
MODE
Ë=
FSMC_ExãndedMode_E«bÀ
))

424 
	#FSMC_WrôeBur°_DißbÀ
 ((
uöt32_t
)0x00000000)

	)

425 
	#FSMC_WrôeBur°_E«bÀ
 ((
uöt32_t
)0x00080000)

	)

426 
	#IS_FSMC_WRITE_BURST
(
BURST
Ë(((BURSTË=
FSMC_WrôeBur°_DißbÀ
Ë|| \

	)

427 ((
BURST
Ë=
FSMC_WrôeBur°_E«bÀ
))

436 
	#IS_FSMC_ADDRESS_SETUP_TIME
(
TIME
Ë((TIMEË<0xF)

	)

446 
	#IS_FSMC_ADDRESS_HOLD_TIME
(
TIME
Ë((TIMEË<0xF)

	)

456 
	#IS_FSMC_DATASETUP_TIME
(
TIME
Ë(((TIMEË> 0Ë&& ((TIMEË<0xFF))

	)

466 
	#IS_FSMC_TURNAROUND_TIME
(
TIME
Ë((TIMEË<0xF)

	)

476 
	#IS_FSMC_CLK_DIV
(
DIV
Ë((DIVË<0xF)

	)

486 
	#IS_FSMC_DATA_LATENCY
(
LATENCY
Ë((LATENCYË<0xF)

	)

496 
	#FSMC_Ac˚ssMode_A
 ((
uöt32_t
)0x00000000)

	)

497 
	#FSMC_Ac˚ssMode_B
 ((
uöt32_t
)0x10000000)

	)

498 
	#FSMC_Ac˚ssMode_C
 ((
uöt32_t
)0x20000000)

	)

499 
	#FSMC_Ac˚ssMode_D
 ((
uöt32_t
)0x30000000)

	)

500 
	#IS_FSMC_ACCESS_MODE
(
MODE
Ë(((MODEË=
FSMC_Ac˚ssMode_A
Ë|| \

	)

501 ((
MODE
Ë=
FSMC_Ac˚ssMode_B
) || \

502 ((
MODE
Ë=
FSMC_Ac˚ssMode_C
) || \

503 ((
MODE
Ë=
FSMC_Ac˚ssMode_D
))

521 
	#FSMC_Waô„©uª_DißbÀ
 ((
uöt32_t
)0x00000000)

	)

522 
	#FSMC_Waô„©uª_E«bÀ
 ((
uöt32_t
)0x00000002)

	)

523 
	#IS_FSMC_WAIT_FEATURE
(
FEATURE
Ë(((FEATUREË=
FSMC_Waô„©uª_DißbÀ
Ë|| \

	)

524 ((
FEATURE
Ë=
FSMC_Waô„©uª_E«bÀ
))

535 
	#FSMC_ECC_DißbÀ
 ((
uöt32_t
)0x00000000)

	)

536 
	#FSMC_ECC_E«bÀ
 ((
uöt32_t
)0x00000040)

	)

537 
	#IS_FSMC_ECC_STATE
(
STATE
Ë(((STATEË=
FSMC_ECC_DißbÀ
Ë|| \

	)

538 ((
STATE
Ë=
FSMC_ECC_E«bÀ
))

548 
	#FSMC_ECCPageSize_256Byãs
 ((
uöt32_t
)0x00000000)

	)

549 
	#FSMC_ECCPageSize_512Byãs
 ((
uöt32_t
)0x00020000)

	)

550 
	#FSMC_ECCPageSize_1024Byãs
 ((
uöt32_t
)0x00040000)

	)

551 
	#FSMC_ECCPageSize_2048Byãs
 ((
uöt32_t
)0x00060000)

	)

552 
	#FSMC_ECCPageSize_4096Byãs
 ((
uöt32_t
)0x00080000)

	)

553 
	#FSMC_ECCPageSize_8192Byãs
 ((
uöt32_t
)0x000A0000)

	)

554 
	#IS_FSMC_ECCPAGE_SIZE
(
SIZE
Ë(((SIZEË=
FSMC_ECCPageSize_256Byãs
Ë|| \

	)

555 ((
SIZE
Ë=
FSMC_ECCPageSize_512Byãs
) || \

556 ((
SIZE
Ë=
FSMC_ECCPageSize_1024Byãs
) || \

557 ((
SIZE
Ë=
FSMC_ECCPageSize_2048Byãs
) || \

558 ((
SIZE
Ë=
FSMC_ECCPageSize_4096Byãs
) || \

559 ((
SIZE
Ë=
FSMC_ECCPageSize_8192Byãs
))

569 
	#IS_FSMC_TCLR_TIME
(
TIME
Ë((TIMEË<0xFF)

	)

579 
	#IS_FSMC_TAR_TIME
(
TIME
Ë((TIMEË<0xFF)

	)

589 
	#IS_FSMC_SETUP_TIME
(
TIME
Ë((TIMEË<0xFF)

	)

599 
	#IS_FSMC_WAIT_TIME
(
TIME
Ë((TIMEË<0xFF)

	)

609 
	#IS_FSMC_HOLD_TIME
(
TIME
Ë((TIMEË<0xFF)

	)

619 
	#IS_FSMC_HIZ_TIME
(
TIME
Ë((TIMEË<0xFF)

	)

629 
	#FSMC_IT_RisögEdge
 ((
uöt32_t
)0x00000008)

	)

630 
	#FSMC_IT_Levñ
 ((
uöt32_t
)0x00000010)

	)

631 
	#FSMC_IT_FÆlögEdge
 ((
uöt32_t
)0x00000020)

	)

632 
	#IS_FSMC_IT
(
IT
Ë((((ITË& (
uöt32_t
)0xFFFFFFC7Ë=0x00000000Ë&& ((ITË!0x00000000))

	)

633 
	#IS_FSMC_GET_IT
(
IT
Ë(((ITË=
FSMC_IT_RisögEdge
Ë|| \

	)

634 ((
IT
Ë=
FSMC_IT_Levñ
) || \

635 ((
IT
Ë=
FSMC_IT_FÆlögEdge
))

644 
	#FSMC_FLAG_RisögEdge
 ((
uöt32_t
)0x00000001)

	)

645 
	#FSMC_FLAG_Levñ
 ((
uöt32_t
)0x00000002)

	)

646 
	#FSMC_FLAG_FÆlögEdge
 ((
uöt32_t
)0x00000004)

	)

647 
	#FSMC_FLAG_FEMPT
 ((
uöt32_t
)0x00000040)

	)

648 
	#IS_FSMC_GET_FLAG
(
FLAG
Ë(((FLAGË=
FSMC_FLAG_RisögEdge
Ë|| \

	)

649 ((
FLAG
Ë=
FSMC_FLAG_Levñ
) || \

650 ((
FLAG
Ë=
FSMC_FLAG_FÆlögEdge
) || \

651 ((
FLAG
Ë=
FSMC_FLAG_FEMPT
))

653 
	#IS_FSMC_CLEAR_FLAG
(
FLAG
Ë((((FLAGË& (
uöt32_t
)0xFFFFFFF8Ë=0x00000000Ë&& ((FLAGË!0x00000000))

	)

679 
FSMC_NORSRAMDeInô
(
uöt32_t
 
FSMC_B™k
);

680 
FSMC_NANDDeInô
(
uöt32_t
 
FSMC_B™k
);

681 
FSMC_PCCARDDeInô
();

682 
FSMC_NORSRAMInô
(
FSMC_NORSRAMInôTy≥Def
* 
FSMC_NORSRAMInôSåu˘
);

683 
FSMC_NANDInô
(
FSMC_NANDInôTy≥Def
* 
FSMC_NANDInôSåu˘
);

684 
FSMC_PCCARDInô
(
FSMC_PCCARDInôTy≥Def
* 
FSMC_PCCARDInôSåu˘
);

685 
FSMC_NORSRAMSåu˘Inô
(
FSMC_NORSRAMInôTy≥Def
* 
FSMC_NORSRAMInôSåu˘
);

686 
FSMC_NANDSåu˘Inô
(
FSMC_NANDInôTy≥Def
* 
FSMC_NANDInôSåu˘
);

687 
FSMC_PCCARDSåu˘Inô
(
FSMC_PCCARDInôTy≥Def
* 
FSMC_PCCARDInôSåu˘
);

688 
FSMC_NORSRAMCmd
(
uöt32_t
 
FSMC_B™k
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

689 
FSMC_NANDCmd
(
uöt32_t
 
FSMC_B™k
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

690 
FSMC_PCCARDCmd
(
Fun˘i⁄ÆSèã
 
NewSèã
);

691 
FSMC_NANDECCCmd
(
uöt32_t
 
FSMC_B™k
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

692 
uöt32_t
 
FSMC_GëECC
(uöt32_à
FSMC_B™k
);

693 
FSMC_ITC⁄fig
(
uöt32_t
 
FSMC_B™k
, uöt32_à
FSMC_IT
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

694 
FœgSètus
 
FSMC_GëFœgSètus
(
uöt32_t
 
FSMC_B™k
, uöt32_à
FSMC_FLAG
);

695 
FSMC_CÀ¨Fœg
(
uöt32_t
 
FSMC_B™k
, uöt32_à
FSMC_FLAG
);

696 
ITSètus
 
FSMC_GëITSètus
(
uöt32_t
 
FSMC_B™k
, uöt32_à
FSMC_IT
);

697 
FSMC_CÀ¨ITPídögBô
(
uöt32_t
 
FSMC_B™k
, uöt32_à
FSMC_IT
);

699 #ifde‡
__˝lu•lus


	@Source/STM32F10x_StdPeriph_Driver/inc/stm32f10x_gpio.h

23 #i‚de‡
__STM32F10x_GPIO_H


24 
	#__STM32F10x_GPIO_H


	)

26 #ifde‡
__˝lu•lus


31 
	~"°m32f10x.h
"

45 
	#IS_GPIO_ALL_PERIPH
(
PERIPH
Ë(((PERIPHË=
GPIOA
Ë|| \

	)

46 ((
PERIPH
Ë=
GPIOB
) || \

47 ((
PERIPH
Ë=
GPIOC
) || \

48 ((
PERIPH
Ë=
GPIOD
) || \

49 ((
PERIPH
Ë=
GPIOE
) || \

50 ((
PERIPH
Ë=
GPIOF
) || \

51 ((
PERIPH
Ë=
GPIOG
))

59 
GPIO_S≥ed_10MHz
 = 1,

60 
GPIO_S≥ed_2MHz
,

61 
GPIO_S≥ed_50MHz


62 }
	tGPIOS≥ed_Ty≥Def
;

63 
	#IS_GPIO_SPEED
(
SPEED
Ë(((SPEEDË=
GPIO_S≥ed_10MHz
Ë|| ((SPEEDË=
GPIO_S≥ed_2MHz
Ë|| \

	)

64 ((
SPEED
Ë=
GPIO_S≥ed_50MHz
))

71 { 
GPIO_Mode_AIN
 = 0x0,

72 
GPIO_Mode_IN_FLOATING
 = 0x04,

73 
GPIO_Mode_IPD
 = 0x28,

74 
GPIO_Mode_IPU
 = 0x48,

75 
GPIO_Mode_Out_OD
 = 0x14,

76 
GPIO_Mode_Out_PP
 = 0x10,

77 
GPIO_Mode_AF_OD
 = 0x1C,

78 
GPIO_Mode_AF_PP
 = 0x18

79 }
	tGPIOMode_Ty≥Def
;

81 
	#IS_GPIO_MODE
(
MODE
Ë(((MODEË=
GPIO_Mode_AIN
Ë|| ((MODEË=
GPIO_Mode_IN_FLOATING
Ë|| \

	)

82 ((
MODE
Ë=
GPIO_Mode_IPD
Ë|| ((MODEË=
GPIO_Mode_IPU
) || \

83 ((
MODE
Ë=
GPIO_Mode_Out_OD
Ë|| ((MODEË=
GPIO_Mode_Out_PP
) || \

84 ((
MODE
Ë=
GPIO_Mode_AF_OD
Ë|| ((MODEË=
GPIO_Mode_AF_PP
))

92 
uöt16_t
 
GPIO_Pö
;

95 
GPIOS≥ed_Ty≥Def
 
GPIO_S≥ed
;

98 
GPIOMode_Ty≥Def
 
GPIO_Mode
;

100 }
	tGPIO_InôTy≥Def
;

108 { 
Bô_RESET
 = 0,

109 
Bô_SET


110 }
	tBôA˘i⁄
;

112 
	#IS_GPIO_BIT_ACTION
(
ACTION
Ë(((ACTIONË=
Bô_RESET
Ë|| ((ACTIONË=
Bô_SET
))

	)

126 
	#GPIO_Pö_0
 ((
uöt16_t
)0x0001Ë

	)

127 
	#GPIO_Pö_1
 ((
uöt16_t
)0x0002Ë

	)

128 
	#GPIO_Pö_2
 ((
uöt16_t
)0x0004Ë

	)

129 
	#GPIO_Pö_3
 ((
uöt16_t
)0x0008Ë

	)

130 
	#GPIO_Pö_4
 ((
uöt16_t
)0x0010Ë

	)

131 
	#GPIO_Pö_5
 ((
uöt16_t
)0x0020Ë

	)

132 
	#GPIO_Pö_6
 ((
uöt16_t
)0x0040Ë

	)

133 
	#GPIO_Pö_7
 ((
uöt16_t
)0x0080Ë

	)

134 
	#GPIO_Pö_8
 ((
uöt16_t
)0x0100Ë

	)

135 
	#GPIO_Pö_9
 ((
uöt16_t
)0x0200Ë

	)

136 
	#GPIO_Pö_10
 ((
uöt16_t
)0x0400Ë

	)

137 
	#GPIO_Pö_11
 ((
uöt16_t
)0x0800Ë

	)

138 
	#GPIO_Pö_12
 ((
uöt16_t
)0x1000Ë

	)

139 
	#GPIO_Pö_13
 ((
uöt16_t
)0x2000Ë

	)

140 
	#GPIO_Pö_14
 ((
uöt16_t
)0x4000Ë

	)

141 
	#GPIO_Pö_15
 ((
uöt16_t
)0x8000Ë

	)

142 
	#GPIO_Pö_AŒ
 ((
uöt16_t
)0xFFFFË

	)

144 
	#IS_GPIO_PIN
(
PIN
Ë((((PINË& (
uöt16_t
)0x00Ë=0x00Ë&& ((PINË!(uöt16_t)0x00))

	)

146 
	#IS_GET_GPIO_PIN
(
PIN
Ë(((PINË=
GPIO_Pö_0
Ë|| \

	)

147 ((
PIN
Ë=
GPIO_Pö_1
) || \

148 ((
PIN
Ë=
GPIO_Pö_2
) || \

149 ((
PIN
Ë=
GPIO_Pö_3
) || \

150 ((
PIN
Ë=
GPIO_Pö_4
) || \

151 ((
PIN
Ë=
GPIO_Pö_5
) || \

152 ((
PIN
Ë=
GPIO_Pö_6
) || \

153 ((
PIN
Ë=
GPIO_Pö_7
) || \

154 ((
PIN
Ë=
GPIO_Pö_8
) || \

155 ((
PIN
Ë=
GPIO_Pö_9
) || \

156 ((
PIN
Ë=
GPIO_Pö_10
) || \

157 ((
PIN
Ë=
GPIO_Pö_11
) || \

158 ((
PIN
Ë=
GPIO_Pö_12
) || \

159 ((
PIN
Ë=
GPIO_Pö_13
) || \

160 ((
PIN
Ë=
GPIO_Pö_14
) || \

161 ((
PIN
Ë=
GPIO_Pö_15
))

171 
	#GPIO_Rem≠_SPI1
 ((
uöt32_t
)0x00000001Ë

	)

172 
	#GPIO_Rem≠_I2C1
 ((
uöt32_t
)0x00000002Ë

	)

173 
	#GPIO_Rem≠_USART1
 ((
uöt32_t
)0x00000004Ë

	)

174 
	#GPIO_Rem≠_USART2
 ((
uöt32_t
)0x00000008Ë

	)

175 
	#GPIO_P¨tülRem≠_USART3
 ((
uöt32_t
)0x00140010Ë

	)

176 
	#GPIO_FuŒRem≠_USART3
 ((
uöt32_t
)0x00140030Ë

	)

177 
	#GPIO_P¨tülRem≠_TIM1
 ((
uöt32_t
)0x00160040Ë

	)

178 
	#GPIO_FuŒRem≠_TIM1
 ((
uöt32_t
)0x001600C0Ë

	)

179 
	#GPIO_P¨tülRem≠1_TIM2
 ((
uöt32_t
)0x00180100Ë

	)

180 
	#GPIO_P¨tülRem≠2_TIM2
 ((
uöt32_t
)0x00180200Ë

	)

181 
	#GPIO_FuŒRem≠_TIM2
 ((
uöt32_t
)0x00180300Ë

	)

182 
	#GPIO_P¨tülRem≠_TIM3
 ((
uöt32_t
)0x001A0800Ë

	)

183 
	#GPIO_FuŒRem≠_TIM3
 ((
uöt32_t
)0x001A0C00Ë

	)

184 
	#GPIO_Rem≠_TIM4
 ((
uöt32_t
)0x00001000Ë

	)

185 
	#GPIO_Rem≠1_CAN1
 ((
uöt32_t
)0x001D4000Ë

	)

186 
	#GPIO_Rem≠2_CAN1
 ((
uöt32_t
)0x001D6000Ë

	)

187 
	#GPIO_Rem≠_PD01
 ((
uöt32_t
)0x00008000Ë

	)

188 
	#GPIO_Rem≠_TIM5CH4_LSI
 ((
uöt32_t
)0x00200001Ë

	)

189 
	#GPIO_Rem≠_ADC1_ETRGINJ
 ((
uöt32_t
)0x00200002Ë

	)

190 
	#GPIO_Rem≠_ADC1_ETRGREG
 ((
uöt32_t
)0x00200004Ë

	)

191 
	#GPIO_Rem≠_ADC2_ETRGINJ
 ((
uöt32_t
)0x00200008Ë

	)

192 
	#GPIO_Rem≠_ADC2_ETRGREG
 ((
uöt32_t
)0x00200010Ë

	)

193 
	#GPIO_Rem≠_ETH
 ((
uöt32_t
)0x00200020Ë

	)

194 
	#GPIO_Rem≠_CAN2
 ((
uöt32_t
)0x00200040Ë

	)

195 
	#GPIO_Rem≠_SWJ_NoJTRST
 ((
uöt32_t
)0x00300100Ë

	)

196 
	#GPIO_Rem≠_SWJ_JTAGDißbÀ
 ((
uöt32_t
)0x00300200Ë

	)

197 
	#GPIO_Rem≠_SWJ_DißbÀ
 ((
uöt32_t
)0x00300400Ë

	)

198 
	#GPIO_Rem≠_SPI3
 ((
uöt32_t
)0x00201000Ë

	)

199 
	#GPIO_Rem≠_TIM2ITR1_PTP_SOF
 ((
uöt32_t
)0x00202000Ë

	)

202 
	#GPIO_Rem≠_PTP_PPS
 ((
uöt32_t
)0x00204000Ë

	)

204 
	#IS_GPIO_REMAP
(
REMAP
Ë(((REMAPË=
GPIO_Rem≠_SPI1
Ë|| ((REMAPË=
GPIO_Rem≠_I2C1
Ë|| \

	)

205 ((
REMAP
Ë=
GPIO_Rem≠_USART1
Ë|| ((REMAPË=
GPIO_Rem≠_USART2
) || \

206 ((
REMAP
Ë=
GPIO_P¨tülRem≠_USART3
Ë|| ((REMAPË=
GPIO_FuŒRem≠_USART3
) || \

207 ((
REMAP
Ë=
GPIO_P¨tülRem≠_TIM1
Ë|| ((REMAPË=
GPIO_FuŒRem≠_TIM1
) || \

208 ((
REMAP
Ë=
GPIO_P¨tülRem≠1_TIM2
Ë|| ((REMAPË=
GPIO_P¨tülRem≠2_TIM2
) || \

209 ((
REMAP
Ë=
GPIO_FuŒRem≠_TIM2
Ë|| ((REMAPË=
GPIO_P¨tülRem≠_TIM3
) || \

210 ((
REMAP
Ë=
GPIO_FuŒRem≠_TIM3
Ë|| ((REMAPË=
GPIO_Rem≠_TIM4
) || \

211 ((
REMAP
Ë=
GPIO_Rem≠1_CAN1
Ë|| ((REMAPË=
GPIO_Rem≠2_CAN1
) || \

212 ((
REMAP
Ë=
GPIO_Rem≠_PD01
Ë|| ((REMAPË=
GPIO_Rem≠_TIM5CH4_LSI
) || \

213 ((
REMAP
Ë=
GPIO_Rem≠_ADC1_ETRGINJ
Ë||((REMAPË=
GPIO_Rem≠_ADC1_ETRGREG
) || \

214 ((
REMAP
Ë=
GPIO_Rem≠_ADC2_ETRGINJ
Ë||((REMAPË=
GPIO_Rem≠_ADC2_ETRGREG
) || \

215 ((
REMAP
Ë=
GPIO_Rem≠_ETH
Ë||((REMAPË=
GPIO_Rem≠_CAN2
) || \

216 ((
REMAP
Ë=
GPIO_Rem≠_SWJ_NoJTRST
Ë|| ((REMAPË=
GPIO_Rem≠_SWJ_JTAGDißbÀ
) || \

217 ((
REMAP
Ë=
GPIO_Rem≠_SWJ_DißbÀ
)|| ((REMAPË=
GPIO_Rem≠_SPI3
) || \

218 ((
REMAP
Ë=
GPIO_Rem≠_TIM2ITR1_PTP_SOF
Ë|| ((REMAPË=
GPIO_Rem≠_PTP_PPS
))

228 
	#GPIO_P‹tSour˚GPIOA
 ((
uöt8_t
)0x00)

	)

229 
	#GPIO_P‹tSour˚GPIOB
 ((
uöt8_t
)0x01)

	)

230 
	#GPIO_P‹tSour˚GPIOC
 ((
uöt8_t
)0x02)

	)

231 
	#GPIO_P‹tSour˚GPIOD
 ((
uöt8_t
)0x03)

	)

232 
	#GPIO_P‹tSour˚GPIOE
 ((
uöt8_t
)0x04)

	)

233 
	#GPIO_P‹tSour˚GPIOF
 ((
uöt8_t
)0x05)

	)

234 
	#GPIO_P‹tSour˚GPIOG
 ((
uöt8_t
)0x06)

	)

235 
	#IS_GPIO_EVENTOUT_PORT_SOURCE
(
PORTSOURCE
Ë(((PORTSOURCEË=
GPIO_P‹tSour˚GPIOA
Ë|| \

	)

236 ((
PORTSOURCE
Ë=
GPIO_P‹tSour˚GPIOB
) || \

237 ((
PORTSOURCE
Ë=
GPIO_P‹tSour˚GPIOC
) || \

238 ((
PORTSOURCE
Ë=
GPIO_P‹tSour˚GPIOD
) || \

239 ((
PORTSOURCE
Ë=
GPIO_P‹tSour˚GPIOE
))

241 
	#IS_GPIO_EXTI_PORT_SOURCE
(
PORTSOURCE
Ë(((PORTSOURCEË=
GPIO_P‹tSour˚GPIOA
Ë|| \

	)

242 ((
PORTSOURCE
Ë=
GPIO_P‹tSour˚GPIOB
) || \

243 ((
PORTSOURCE
Ë=
GPIO_P‹tSour˚GPIOC
) || \

244 ((
PORTSOURCE
Ë=
GPIO_P‹tSour˚GPIOD
) || \

245 ((
PORTSOURCE
Ë=
GPIO_P‹tSour˚GPIOE
) || \

246 ((
PORTSOURCE
Ë=
GPIO_P‹tSour˚GPIOF
) || \

247 ((
PORTSOURCE
Ë=
GPIO_P‹tSour˚GPIOG
))

257 
	#GPIO_PöSour˚0
 ((
uöt8_t
)0x00)

	)

258 
	#GPIO_PöSour˚1
 ((
uöt8_t
)0x01)

	)

259 
	#GPIO_PöSour˚2
 ((
uöt8_t
)0x02)

	)

260 
	#GPIO_PöSour˚3
 ((
uöt8_t
)0x03)

	)

261 
	#GPIO_PöSour˚4
 ((
uöt8_t
)0x04)

	)

262 
	#GPIO_PöSour˚5
 ((
uöt8_t
)0x05)

	)

263 
	#GPIO_PöSour˚6
 ((
uöt8_t
)0x06)

	)

264 
	#GPIO_PöSour˚7
 ((
uöt8_t
)0x07)

	)

265 
	#GPIO_PöSour˚8
 ((
uöt8_t
)0x08)

	)

266 
	#GPIO_PöSour˚9
 ((
uöt8_t
)0x09)

	)

267 
	#GPIO_PöSour˚10
 ((
uöt8_t
)0x0A)

	)

268 
	#GPIO_PöSour˚11
 ((
uöt8_t
)0x0B)

	)

269 
	#GPIO_PöSour˚12
 ((
uöt8_t
)0x0C)

	)

270 
	#GPIO_PöSour˚13
 ((
uöt8_t
)0x0D)

	)

271 
	#GPIO_PöSour˚14
 ((
uöt8_t
)0x0E)

	)

272 
	#GPIO_PöSour˚15
 ((
uöt8_t
)0x0F)

	)

274 
	#IS_GPIO_PIN_SOURCE
(
PINSOURCE
Ë(((PINSOURCEË=
GPIO_PöSour˚0
Ë|| \

	)

275 ((
PINSOURCE
Ë=
GPIO_PöSour˚1
) || \

276 ((
PINSOURCE
Ë=
GPIO_PöSour˚2
) || \

277 ((
PINSOURCE
Ë=
GPIO_PöSour˚3
) || \

278 ((
PINSOURCE
Ë=
GPIO_PöSour˚4
) || \

279 ((
PINSOURCE
Ë=
GPIO_PöSour˚5
) || \

280 ((
PINSOURCE
Ë=
GPIO_PöSour˚6
) || \

281 ((
PINSOURCE
Ë=
GPIO_PöSour˚7
) || \

282 ((
PINSOURCE
Ë=
GPIO_PöSour˚8
) || \

283 ((
PINSOURCE
Ë=
GPIO_PöSour˚9
) || \

284 ((
PINSOURCE
Ë=
GPIO_PöSour˚10
) || \

285 ((
PINSOURCE
Ë=
GPIO_PöSour˚11
) || \

286 ((
PINSOURCE
Ë=
GPIO_PöSour˚12
) || \

287 ((
PINSOURCE
Ë=
GPIO_PöSour˚13
) || \

288 ((
PINSOURCE
Ë=
GPIO_PöSour˚14
) || \

289 ((
PINSOURCE
Ë=
GPIO_PöSour˚15
))

298 
	#GPIO_ETH_MedüI¡îÁ˚_MII
 ((
u32
)0x00000000)

	)

299 
	#GPIO_ETH_MedüI¡îÁ˚_RMII
 ((
u32
)0x00000001)

	)

301 
	#IS_GPIO_ETH_MEDIA_INTERFACE
(
INTERFACE
Ë(((INTERFACEË=
GPIO_ETH_MedüI¡îÁ˚_MII
Ë|| \

	)

302 ((
INTERFACE
Ë=
GPIO_ETH_MedüI¡îÁ˚_RMII
))

323 
GPIO_DeInô
(
GPIO_Ty≥Def
* 
GPIOx
);

324 
GPIO_AFIODeInô
();

325 
GPIO_Inô
(
GPIO_Ty≥Def
* 
GPIOx
, 
GPIO_InôTy≥Def
* 
GPIO_InôSåu˘
);

326 
GPIO_Såu˘Inô
(
GPIO_InôTy≥Def
* 
GPIO_InôSåu˘
);

327 
uöt8_t
 
GPIO_RódI≈utD©aBô
(
GPIO_Ty≥Def
* 
GPIOx
, 
uöt16_t
 
GPIO_Pö
);

328 
uöt16_t
 
GPIO_RódI≈utD©a
(
GPIO_Ty≥Def
* 
GPIOx
);

329 
uöt8_t
 
GPIO_RódOuçutD©aBô
(
GPIO_Ty≥Def
* 
GPIOx
, 
uöt16_t
 
GPIO_Pö
);

330 
uöt16_t
 
GPIO_RódOuçutD©a
(
GPIO_Ty≥Def
* 
GPIOx
);

331 
GPIO_SëBôs
(
GPIO_Ty≥Def
* 
GPIOx
, 
uöt16_t
 
GPIO_Pö
);

332 
GPIO_Re£tBôs
(
GPIO_Ty≥Def
* 
GPIOx
, 
uöt16_t
 
GPIO_Pö
);

333 
GPIO_WrôeBô
(
GPIO_Ty≥Def
* 
GPIOx
, 
uöt16_t
 
GPIO_Pö
, 
BôA˘i⁄
 
BôVÆ
);

334 
GPIO_Wrôe
(
GPIO_Ty≥Def
* 
GPIOx
, 
uöt16_t
 
P‹tVÆ
);

335 
GPIO_PöLockC⁄fig
(
GPIO_Ty≥Def
* 
GPIOx
, 
uöt16_t
 
GPIO_Pö
);

336 
GPIO_EvítOuçutC⁄fig
(
uöt8_t
 
GPIO_P‹tSour˚
, uöt8_à
GPIO_PöSour˚
);

337 
GPIO_EvítOuçutCmd
(
Fun˘i⁄ÆSèã
 
NewSèã
);

338 
GPIO_PöRem≠C⁄fig
(
uöt32_t
 
GPIO_Rem≠
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

339 
GPIO_EXTILöeC⁄fig
(
uöt8_t
 
GPIO_P‹tSour˚
, uöt8_à
GPIO_PöSour˚
);

340 
GPIO_ETH_MedüI¡îÁ˚C⁄fig
(
uöt32_t
 
GPIO_ETH_MedüI¡îÁ˚
);

342 #ifde‡
__˝lu•lus


	@Source/STM32F10x_StdPeriph_Driver/inc/stm32f10x_i2c.h

23 #i‚de‡
__STM32F10x_I2C_H


24 
	#__STM32F10x_I2C_H


	)

26 #ifde‡
__˝lu•lus


31 
	~"°m32f10x.h
"

51 
uöt32_t
 
I2C_ClockS≥ed
;

54 
uöt16_t
 
I2C_Mode
;

57 
uöt16_t
 
I2C_DutyCy˛e
;

60 
uöt16_t
 
I2C_OwnAddªss1
;

63 
uöt16_t
 
I2C_Ack
;

66 
uöt16_t
 
I2C_AcknowÀdgedAddªss
;

68 }
	tI2C_InôTy≥Def
;

79 
	#IS_I2C_ALL_PERIPH
(
PERIPH
Ë(((PERIPHË=
I2C1
Ë|| \

	)

80 ((
PERIPH
Ë=
I2C2
))

85 
	#I2C_Mode_I2C
 ((
uöt16_t
)0x0000)

	)

86 
	#I2C_Mode_SMBusDevi˚
 ((
uöt16_t
)0x0002)

	)

87 
	#I2C_Mode_SMBusHo°
 ((
uöt16_t
)0x000A)

	)

88 
	#IS_I2C_MODE
(
MODE
Ë(((MODEË=
I2C_Mode_I2C
Ë|| \

	)

89 ((
MODE
Ë=
I2C_Mode_SMBusDevi˚
) || \

90 ((
MODE
Ë=
I2C_Mode_SMBusHo°
))

99 
	#I2C_DutyCy˛e_16_9
 ((
uöt16_t
)0x4000Ë

	)

100 
	#I2C_DutyCy˛e_2
 ((
uöt16_t
)0xBFFFË

	)

101 
	#IS_I2C_DUTY_CYCLE
(
CYCLE
Ë(((CYCLEË=
I2C_DutyCy˛e_16_9
Ë|| \

	)

102 ((
CYCLE
Ë=
I2C_DutyCy˛e_2
))

111 
	#I2C_Ack_E«bÀ
 ((
uöt16_t
)0x0400)

	)

112 
	#I2C_Ack_DißbÀ
 ((
uöt16_t
)0x0000)

	)

113 
	#IS_I2C_ACK_STATE
(
STATE
Ë(((STATEË=
I2C_Ack_E«bÀ
Ë|| \

	)

114 ((
STATE
Ë=
I2C_Ack_DißbÀ
))

123 
	#I2C_Dúe˘i⁄_Tønsmôãr
 ((
uöt8_t
)0x00)

	)

124 
	#I2C_Dúe˘i⁄_Re˚ivî
 ((
uöt8_t
)0x01)

	)

125 
	#IS_I2C_DIRECTION
(
DIRECTION
Ë(((DIRECTIONË=
I2C_Dúe˘i⁄_Tønsmôãr
Ë|| \

	)

126 ((
DIRECTION
Ë=
I2C_Dúe˘i⁄_Re˚ivî
))

135 
	#I2C_AcknowÀdgedAddªss_7bô
 ((
uöt16_t
)0x4000)

	)

136 
	#I2C_AcknowÀdgedAddªss_10bô
 ((
uöt16_t
)0xC000)

	)

137 
	#IS_I2C_ACKNOWLEDGE_ADDRESS
(
ADDRESS
Ë(((ADDRESSË=
I2C_AcknowÀdgedAddªss_7bô
Ë|| \

	)

138 ((
ADDRESS
Ë=
I2C_AcknowÀdgedAddªss_10bô
))

147 
	#I2C_Regi°î_CR1
 ((
uöt8_t
)0x00)

	)

148 
	#I2C_Regi°î_CR2
 ((
uöt8_t
)0x04)

	)

149 
	#I2C_Regi°î_OAR1
 ((
uöt8_t
)0x08)

	)

150 
	#I2C_Regi°î_OAR2
 ((
uöt8_t
)0x0C)

	)

151 
	#I2C_Regi°î_DR
 ((
uöt8_t
)0x10)

	)

152 
	#I2C_Regi°î_SR1
 ((
uöt8_t
)0x14)

	)

153 
	#I2C_Regi°î_SR2
 ((
uöt8_t
)0x18)

	)

154 
	#I2C_Regi°î_CCR
 ((
uöt8_t
)0x1C)

	)

155 
	#I2C_Regi°î_TRISE
 ((
uöt8_t
)0x20)

	)

156 
	#IS_I2C_REGISTER
(
REGISTER
Ë(((REGISTERË=
I2C_Regi°î_CR1
Ë|| \

	)

157 ((
REGISTER
Ë=
I2C_Regi°î_CR2
) || \

158 ((
REGISTER
Ë=
I2C_Regi°î_OAR1
) || \

159 ((
REGISTER
Ë=
I2C_Regi°î_OAR2
) || \

160 ((
REGISTER
Ë=
I2C_Regi°î_DR
) || \

161 ((
REGISTER
Ë=
I2C_Regi°î_SR1
) || \

162 ((
REGISTER
Ë=
I2C_Regi°î_SR2
) || \

163 ((
REGISTER
Ë=
I2C_Regi°î_CCR
) || \

164 ((
REGISTER
Ë=
I2C_Regi°î_TRISE
))

173 
	#I2C_SMBusAÀπ_Low
 ((
uöt16_t
)0x2000)

	)

174 
	#I2C_SMBusAÀπ_High
 ((
uöt16_t
)0xDFFF)

	)

175 
	#IS_I2C_SMBUS_ALERT
(
ALERT
Ë(((ALERTË=
I2C_SMBusAÀπ_Low
Ë|| \

	)

176 ((
ALERT
Ë=
I2C_SMBusAÀπ_High
))

185 
	#I2C_PECPosôi⁄_Next
 ((
uöt16_t
)0x0800)

	)

186 
	#I2C_PECPosôi⁄_Cuºít
 ((
uöt16_t
)0xF7FF)

	)

187 
	#IS_I2C_PEC_POSITION
(
POSITION
Ë(((POSITIONË=
I2C_PECPosôi⁄_Next
Ë|| \

	)

188 ((
POSITION
Ë=
I2C_PECPosôi⁄_Cuºít
))

197 
	#I2C_IT_BUF
 ((
uöt16_t
)0x0400)

	)

198 
	#I2C_IT_EVT
 ((
uöt16_t
)0x0200)

	)

199 
	#I2C_IT_ERR
 ((
uöt16_t
)0x0100)

	)

200 
	#IS_I2C_CONFIG_IT
(
IT
Ë((((ITË& (
uöt16_t
)0xF8FFË=0x00Ë&& ((ITË!0x00))

	)

209 
	#I2C_IT_SMBALERT
 ((
uöt32_t
)0x01008000)

	)

210 
	#I2C_IT_TIMEOUT
 ((
uöt32_t
)0x01004000)

	)

211 
	#I2C_IT_PECERR
 ((
uöt32_t
)0x01001000)

	)

212 
	#I2C_IT_OVR
 ((
uöt32_t
)0x01000800)

	)

213 
	#I2C_IT_AF
 ((
uöt32_t
)0x01000400)

	)

214 
	#I2C_IT_ARLO
 ((
uöt32_t
)0x01000200)

	)

215 
	#I2C_IT_BERR
 ((
uöt32_t
)0x01000100)

	)

216 
	#I2C_IT_TXE
 ((
uöt32_t
)0x06000080)

	)

217 
	#I2C_IT_RXNE
 ((
uöt32_t
)0x06000040)

	)

218 
	#I2C_IT_STOPF
 ((
uöt32_t
)0x02000010)

	)

219 
	#I2C_IT_ADD10
 ((
uöt32_t
)0x02000008)

	)

220 
	#I2C_IT_BTF
 ((
uöt32_t
)0x02000004)

	)

221 
	#I2C_IT_ADDR
 ((
uöt32_t
)0x02000002)

	)

222 
	#I2C_IT_SB
 ((
uöt32_t
)0x02000001)

	)

224 
	#IS_I2C_CLEAR_IT
(
IT
Ë((((ITË& (
uöt16_t
)0x20FFË=0x00Ë&& ((ITË!(uöt16_t)0x00))

	)

226 
	#IS_I2C_GET_IT
(
IT
Ë(((ITË=
I2C_IT_SMBALERT
Ë|| ((ITË=
I2C_IT_TIMEOUT
Ë|| \

	)

227 ((
IT
Ë=
I2C_IT_PECERR
Ë|| ((ITË=
I2C_IT_OVR
) || \

228 ((
IT
Ë=
I2C_IT_AF
Ë|| ((ITË=
I2C_IT_ARLO
) || \

229 ((
IT
Ë=
I2C_IT_BERR
Ë|| ((ITË=
I2C_IT_TXE
) || \

230 ((
IT
Ë=
I2C_IT_RXNE
Ë|| ((ITË=
I2C_IT_STOPF
) || \

231 ((
IT
Ë=
I2C_IT_ADD10
Ë|| ((ITË=
I2C_IT_BTF
) || \

232 ((
IT
Ë=
I2C_IT_ADDR
Ë|| ((ITË=
I2C_IT_SB
))

245 
	#I2C_FLAG_DUALF
 ((
uöt32_t
)0x00800000)

	)

246 
	#I2C_FLAG_SMBHOST
 ((
uöt32_t
)0x00400000)

	)

247 
	#I2C_FLAG_SMBDEFAULT
 ((
uöt32_t
)0x00200000)

	)

248 
	#I2C_FLAG_GENCALL
 ((
uöt32_t
)0x00100000)

	)

249 
	#I2C_FLAG_TRA
 ((
uöt32_t
)0x00040000)

	)

250 
	#I2C_FLAG_BUSY
 ((
uöt32_t
)0x00020000)

	)

251 
	#I2C_FLAG_MSL
 ((
uöt32_t
)0x00010000)

	)

257 
	#I2C_FLAG_SMBALERT
 ((
uöt32_t
)0x10008000)

	)

258 
	#I2C_FLAG_TIMEOUT
 ((
uöt32_t
)0x10004000)

	)

259 
	#I2C_FLAG_PECERR
 ((
uöt32_t
)0x10001000)

	)

260 
	#I2C_FLAG_OVR
 ((
uöt32_t
)0x10000800)

	)

261 
	#I2C_FLAG_AF
 ((
uöt32_t
)0x10000400)

	)

262 
	#I2C_FLAG_ARLO
 ((
uöt32_t
)0x10000200)

	)

263 
	#I2C_FLAG_BERR
 ((
uöt32_t
)0x10000100)

	)

264 
	#I2C_FLAG_TXE
 ((
uöt32_t
)0x10000080)

	)

265 
	#I2C_FLAG_RXNE
 ((
uöt32_t
)0x10000040)

	)

266 
	#I2C_FLAG_STOPF
 ((
uöt32_t
)0x10000010)

	)

267 
	#I2C_FLAG_ADD10
 ((
uöt32_t
)0x10000008)

	)

268 
	#I2C_FLAG_BTF
 ((
uöt32_t
)0x10000004)

	)

269 
	#I2C_FLAG_ADDR
 ((
uöt32_t
)0x10000002)

	)

270 
	#I2C_FLAG_SB
 ((
uöt32_t
)0x10000001)

	)

272 
	#IS_I2C_CLEAR_FLAG
(
FLAG
Ë((((FLAGË& (
uöt16_t
)0x20FFË=0x00Ë&& ((FLAGË!(uöt16_t)0x00))

	)

274 
	#IS_I2C_GET_FLAG
(
FLAG
Ë(((FLAGË=
I2C_FLAG_DUALF
Ë|| ((FLAGË=
I2C_FLAG_SMBHOST
Ë|| \

	)

275 ((
FLAG
Ë=
I2C_FLAG_SMBDEFAULT
Ë|| ((FLAGË=
I2C_FLAG_GENCALL
) || \

276 ((
FLAG
Ë=
I2C_FLAG_TRA
Ë|| ((FLAGË=
I2C_FLAG_BUSY
) || \

277 ((
FLAG
Ë=
I2C_FLAG_MSL
Ë|| ((FLAGË=
I2C_FLAG_SMBALERT
) || \

278 ((
FLAG
Ë=
I2C_FLAG_TIMEOUT
Ë|| ((FLAGË=
I2C_FLAG_PECERR
) || \

279 ((
FLAG
Ë=
I2C_FLAG_OVR
Ë|| ((FLAGË=
I2C_FLAG_AF
) || \

280 ((
FLAG
Ë=
I2C_FLAG_ARLO
Ë|| ((FLAGË=
I2C_FLAG_BERR
) || \

281 ((
FLAG
Ë=
I2C_FLAG_TXE
Ë|| ((FLAGË=
I2C_FLAG_RXNE
) || \

282 ((
FLAG
Ë=
I2C_FLAG_STOPF
Ë|| ((FLAGË=
I2C_FLAG_ADD10
) || \

283 ((
FLAG
Ë=
I2C_FLAG_BTF
Ë|| ((FLAGË=
I2C_FLAG_ADDR
) || \

284 ((
FLAG
Ë=
I2C_FLAG_SB
))

297 
	#I2C_EVENT_SLAVE_TRANSMITTER_ADDRESS_MATCHED
 ((
uöt32_t
)0x00060082Ë

	)

298 
	#I2C_EVENT_SLAVE_RECEIVER_ADDRESS_MATCHED
 ((
uöt32_t
)0x00020002Ë

	)

299 
	#I2C_EVENT_SLAVE_TRANSMITTER_SECONDADDRESS_MATCHED
 ((
uöt32_t
)0x00860080Ë

	)

300 
	#I2C_EVENT_SLAVE_RECEIVER_SECONDADDRESS_MATCHED
 ((
uöt32_t
)0x00820000Ë

	)

301 
	#I2C_EVENT_SLAVE_GENERALCALLADDRESS_MATCHED
 ((
uöt32_t
)0x00120000Ë

	)

307 
	#I2C_EVENT_SLAVE_BYTE_RECEIVED
 ((
uöt32_t
)0x00020040Ë

	)

313 
	#I2C_EVENT_SLAVE_BYTE_TRANSMITTED
 ((
uöt32_t
)0x00060084Ë

	)

319 
	#I2C_EVENT_SLAVE_STOP_DETECTED
 ((
uöt32_t
)0x00000010Ë

	)

325 
	#I2C_EVENT_MASTER_MODE_SELECT
 ((
uöt32_t
)0x00030001Ë

	)

331 
	#I2C_EVENT_MASTER_TRANSMITTER_MODE_SELECTED
 ((
uöt32_t
)0x00070082Ë

	)

332 
	#I2C_EVENT_MASTER_RECEIVER_MODE_SELECTED
 ((
uöt32_t
)0x00030002Ë

	)

338 
	#I2C_EVENT_MASTER_BYTE_RECEIVED
 ((
uöt32_t
)0x00030040Ë

	)

344 
	#I2C_EVENT_MASTER_BYTE_TRANSMITTING
 ((
uöt32_t
)0x00070080Ë

	)

350 
	#I2C_EVENT_MASTER_BYTE_TRANSMITTED
 ((
uöt32_t
)0x00070084Ë

	)

356 
	#I2C_EVENT_MASTER_MODE_ADDRESS10
 ((
uöt32_t
)0x00030008Ë

	)

362 
	#I2C_EVENT_SLAVE_ACK_FAILURE
 ((
uöt32_t
)0x00000400Ë

	)

364 
	#IS_I2C_EVENT
(
EVENT
Ë(((EVENTË=
I2C_EVENT_SLAVE_TRANSMITTER_ADDRESS_MATCHED
Ë|| \

	)

365 ((
EVENT
Ë=
I2C_EVENT_SLAVE_RECEIVER_ADDRESS_MATCHED
) || \

366 ((
EVENT
Ë=
I2C_EVENT_SLAVE_TRANSMITTER_SECONDADDRESS_MATCHED
) || \

367 ((
EVENT
Ë=
I2C_EVENT_SLAVE_RECEIVER_SECONDADDRESS_MATCHED
) || \

368 ((
EVENT
Ë=
I2C_EVENT_SLAVE_GENERALCALLADDRESS_MATCHED
) || \

369 ((
EVENT
Ë=
I2C_EVENT_SLAVE_BYTE_RECEIVED
) || \

370 ((
EVENT
Ë=(
I2C_EVENT_SLAVE_BYTE_RECEIVED
 | 
I2C_FLAG_DUALF
)) || \

371 ((
EVENT
Ë=(
I2C_EVENT_SLAVE_BYTE_RECEIVED
 | 
I2C_FLAG_GENCALL
)) || \

372 ((
EVENT
Ë=
I2C_EVENT_SLAVE_BYTE_TRANSMITTED
) || \

373 ((
EVENT
Ë=(
I2C_EVENT_SLAVE_BYTE_TRANSMITTED
 | 
I2C_FLAG_DUALF
)) || \

374 ((
EVENT
Ë=(
I2C_EVENT_SLAVE_BYTE_TRANSMITTED
 | 
I2C_FLAG_GENCALL
)) || \

375 ((
EVENT
Ë=
I2C_EVENT_SLAVE_STOP_DETECTED
) || \

376 ((
EVENT
Ë=
I2C_EVENT_MASTER_MODE_SELECT
) || \

377 ((
EVENT
Ë=
I2C_EVENT_MASTER_TRANSMITTER_MODE_SELECTED
) || \

378 ((
EVENT
Ë=
I2C_EVENT_MASTER_RECEIVER_MODE_SELECTED
) || \

379 ((
EVENT
Ë=
I2C_EVENT_MASTER_BYTE_RECEIVED
) || \

380 ((
EVENT
Ë=
I2C_EVENT_MASTER_BYTE_TRANSMITTED
) || \

381 ((
EVENT
Ë=
I2C_EVENT_MASTER_BYTE_TRANSMITTING
) || \

382 ((
EVENT
Ë=
I2C_EVENT_MASTER_MODE_ADDRESS10
) || \

383 ((
EVENT
Ë=
I2C_EVENT_SLAVE_ACK_FAILURE
))

392 
	#IS_I2C_OWN_ADDRESS1
(
ADDRESS1
Ë((ADDRESS1Ë<0x3FF)

	)

401 
	#IS_I2C_CLOCK_SPEED
(
SPEED
Ë(((SPEEDË>0x1Ë&& ((SPEEDË<400000))

	)

422 
I2C_DeInô
(
I2C_Ty≥Def
* 
I2Cx
);

423 
I2C_Inô
(
I2C_Ty≥Def
* 
I2Cx
, 
I2C_InôTy≥Def
* 
I2C_InôSåu˘
);

424 
I2C_Såu˘Inô
(
I2C_InôTy≥Def
* 
I2C_InôSåu˘
);

425 
I2C_Cmd
(
I2C_Ty≥Def
* 
I2Cx
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

426 
I2C_DMACmd
(
I2C_Ty≥Def
* 
I2Cx
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

427 
I2C_DMALa°Tøns„rCmd
(
I2C_Ty≥Def
* 
I2Cx
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

428 
I2C_Gíî©eSTART
(
I2C_Ty≥Def
* 
I2Cx
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

429 
I2C_Gíî©eSTOP
(
I2C_Ty≥Def
* 
I2Cx
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

430 
I2C_AcknowÀdgeC⁄fig
(
I2C_Ty≥Def
* 
I2Cx
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

431 
I2C_OwnAddªss2C⁄fig
(
I2C_Ty≥Def
* 
I2Cx
, 
uöt8_t
 
Addªss
);

432 
I2C_DuÆAddªssCmd
(
I2C_Ty≥Def
* 
I2Cx
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

433 
I2C_GíîÆCÆlCmd
(
I2C_Ty≥Def
* 
I2Cx
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

434 
I2C_ITC⁄fig
(
I2C_Ty≥Def
* 
I2Cx
, 
uöt16_t
 
I2C_IT
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

435 
I2C_SídD©a
(
I2C_Ty≥Def
* 
I2Cx
, 
uöt8_t
 
D©a
);

436 
uöt8_t
 
I2C_Re˚iveD©a
(
I2C_Ty≥Def
* 
I2Cx
);

437 
I2C_Síd7bôAddªss
(
I2C_Ty≥Def
* 
I2Cx
, 
uöt8_t
 
Addªss
, uöt8_à
I2C_Dúe˘i⁄
);

438 
uöt16_t
 
I2C_RódRegi°î
(
I2C_Ty≥Def
* 
I2Cx
, 
uöt8_t
 
I2C_Regi°î
);

439 
I2C_So·w¨eRe£tCmd
(
I2C_Ty≥Def
* 
I2Cx
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

440 
I2C_SMBusAÀπC⁄fig
(
I2C_Ty≥Def
* 
I2Cx
, 
uöt16_t
 
I2C_SMBusAÀπ
);

441 
I2C_TønsmôPEC
(
I2C_Ty≥Def
* 
I2Cx
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

442 
I2C_PECPosôi⁄C⁄fig
(
I2C_Ty≥Def
* 
I2Cx
, 
uöt16_t
 
I2C_PECPosôi⁄
);

443 
I2C_CÆcuœãPEC
(
I2C_Ty≥Def
* 
I2Cx
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

444 
uöt8_t
 
I2C_GëPEC
(
I2C_Ty≥Def
* 
I2Cx
);

445 
I2C_ARPCmd
(
I2C_Ty≥Def
* 
I2Cx
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

446 
I2C_SåëchClockCmd
(
I2C_Ty≥Def
* 
I2Cx
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

447 
I2C_Fa°ModeDutyCy˛eC⁄fig
(
I2C_Ty≥Def
* 
I2Cx
, 
uöt16_t
 
I2C_DutyCy˛e
);

448 
uöt32_t
 
I2C_GëLa°Evít
(
I2C_Ty≥Def
* 
I2Cx
);

449 
Eº‹Sètus
 
I2C_CheckEvít
(
I2C_Ty≥Def
* 
I2Cx
, 
uöt32_t
 
I2C_EVENT
);

450 
FœgSètus
 
I2C_GëFœgSètus
(
I2C_Ty≥Def
* 
I2Cx
, 
uöt32_t
 
I2C_FLAG
);

451 
I2C_CÀ¨Fœg
(
I2C_Ty≥Def
* 
I2Cx
, 
uöt32_t
 
I2C_FLAG
);

452 
ITSètus
 
I2C_GëITSètus
(
I2C_Ty≥Def
* 
I2Cx
, 
uöt32_t
 
I2C_IT
);

453 
I2C_CÀ¨ITPídögBô
(
I2C_Ty≥Def
* 
I2Cx
, 
uöt32_t
 
I2C_IT
);

455 #ifde‡
__˝lu•lus


	@Source/STM32F10x_StdPeriph_Driver/inc/stm32f10x_iwdg.h

23 #i‚de‡
__STM32F10x_IWDG_H


24 
	#__STM32F10x_IWDG_H


	)

26 #ifde‡
__˝lu•lus


31 
	~"°m32f10x.h
"

57 
	#IWDG_WrôeAc˚ss_E«bÀ
 ((
uöt16_t
)0x5555)

	)

58 
	#IWDG_WrôeAc˚ss_DißbÀ
 ((
uöt16_t
)0x0000)

	)

59 
	#IS_IWDG_WRITE_ACCESS
(
ACCESS
Ë(((ACCESSË=
IWDG_WrôeAc˚ss_E«bÀ
Ë|| \

	)

60 ((
ACCESS
Ë=
IWDG_WrôeAc˚ss_DißbÀ
))

69 
	#IWDG_PªsˇÀr_4
 ((
uöt8_t
)0x00)

	)

70 
	#IWDG_PªsˇÀr_8
 ((
uöt8_t
)0x01)

	)

71 
	#IWDG_PªsˇÀr_16
 ((
uöt8_t
)0x02)

	)

72 
	#IWDG_PªsˇÀr_32
 ((
uöt8_t
)0x03)

	)

73 
	#IWDG_PªsˇÀr_64
 ((
uöt8_t
)0x04)

	)

74 
	#IWDG_PªsˇÀr_128
 ((
uöt8_t
)0x05)

	)

75 
	#IWDG_PªsˇÀr_256
 ((
uöt8_t
)0x06)

	)

76 
	#IS_IWDG_PRESCALER
(
PRESCALER
Ë(((PRESCALERË=
IWDG_PªsˇÀr_4
Ë|| \

	)

77 ((
PRESCALER
Ë=
IWDG_PªsˇÀr_8
) || \

78 ((
PRESCALER
Ë=
IWDG_PªsˇÀr_16
) || \

79 ((
PRESCALER
Ë=
IWDG_PªsˇÀr_32
) || \

80 ((
PRESCALER
Ë=
IWDG_PªsˇÀr_64
) || \

81 ((
PRESCALER
Ë=
IWDG_PªsˇÀr_128
)|| \

82 ((
PRESCALER
Ë=
IWDG_PªsˇÀr_256
))

91 
	#IWDG_FLAG_PVU
 ((
uöt16_t
)0x0001)

	)

92 
	#IWDG_FLAG_RVU
 ((
uöt16_t
)0x0002)

	)

93 
	#IS_IWDG_FLAG
(
FLAG
Ë(((FLAGË=
IWDG_FLAG_PVU
Ë|| ((FLAGË=
IWDG_FLAG_RVU
))

	)

94 
	#IS_IWDG_RELOAD
(
RELOAD
Ë((RELOADË<0xFFF)

	)

115 
IWDG_WrôeAc˚ssCmd
(
uöt16_t
 
IWDG_WrôeAc˚ss
);

116 
IWDG_SëPªsˇÀr
(
uöt8_t
 
IWDG_PªsˇÀr
);

117 
IWDG_SëRñﬂd
(
uöt16_t
 
Rñﬂd
);

118 
IWDG_RñﬂdCou¡î
();

119 
IWDG_E«bÀ
();

120 
FœgSètus
 
IWDG_GëFœgSètus
(
uöt16_t
 
IWDG_FLAG
);

122 #ifde‡
__˝lu•lus


	@Source/STM32F10x_StdPeriph_Driver/inc/stm32f10x_pwr.h

23 #i‚de‡
__STM32F10x_PWR_H


24 
	#__STM32F10x_PWR_H


	)

26 #ifde‡
__˝lu•lus


31 
	~"°m32f10x.h
"

57 
	#PWR_PVDLevñ_2V2
 ((
uöt32_t
)0x00000000)

	)

58 
	#PWR_PVDLevñ_2V3
 ((
uöt32_t
)0x00000020)

	)

59 
	#PWR_PVDLevñ_2V4
 ((
uöt32_t
)0x00000040)

	)

60 
	#PWR_PVDLevñ_2V5
 ((
uöt32_t
)0x00000060)

	)

61 
	#PWR_PVDLevñ_2V6
 ((
uöt32_t
)0x00000080)

	)

62 
	#PWR_PVDLevñ_2V7
 ((
uöt32_t
)0x000000A0)

	)

63 
	#PWR_PVDLevñ_2V8
 ((
uöt32_t
)0x000000C0)

	)

64 
	#PWR_PVDLevñ_2V9
 ((
uöt32_t
)0x000000E0)

	)

65 
	#IS_PWR_PVD_LEVEL
(
LEVEL
Ë(((LEVELË=
PWR_PVDLevñ_2V2
Ë|| ((LEVELË=
PWR_PVDLevñ_2V3
)|| \

	)

66 ((
LEVEL
Ë=
PWR_PVDLevñ_2V4
Ë|| ((LEVELË=
PWR_PVDLevñ_2V5
)|| \

67 ((
LEVEL
Ë=
PWR_PVDLevñ_2V6
Ë|| ((LEVELË=
PWR_PVDLevñ_2V7
)|| \

68 ((
LEVEL
Ë=
PWR_PVDLevñ_2V8
Ë|| ((LEVELË=
PWR_PVDLevñ_2V9
))

77 
	#PWR_Reguœt‹_ON
 ((
uöt32_t
)0x00000000)

	)

78 
	#PWR_Reguœt‹_LowPowî
 ((
uöt32_t
)0x00000001)

	)

79 
	#IS_PWR_REGULATOR
(
REGULATOR
Ë(((REGULATORË=
PWR_Reguœt‹_ON
Ë|| \

	)

80 ((
REGULATOR
Ë=
PWR_Reguœt‹_LowPowî
))

89 
	#PWR_STOPE¡ry_WFI
 ((
uöt8_t
)0x01)

	)

90 
	#PWR_STOPE¡ry_WFE
 ((
uöt8_t
)0x02)

	)

91 
	#IS_PWR_STOP_ENTRY
(
ENTRY
Ë(((ENTRYË=
PWR_STOPE¡ry_WFI
Ë|| ((ENTRYË=
PWR_STOPE¡ry_WFE
))

	)

101 
	#PWR_FLAG_WU
 ((
uöt32_t
)0x00000001)

	)

102 
	#PWR_FLAG_SB
 ((
uöt32_t
)0x00000002)

	)

103 
	#PWR_FLAG_PVDO
 ((
uöt32_t
)0x00000004)

	)

104 
	#IS_PWR_GET_FLAG
(
FLAG
Ë(((FLAGË=
PWR_FLAG_WU
Ë|| ((FLAGË=
PWR_FLAG_SB
Ë|| \

	)

105 ((
FLAG
Ë=
PWR_FLAG_PVDO
))

107 
	#IS_PWR_CLEAR_FLAG
(
FLAG
Ë(((FLAGË=
PWR_FLAG_WU
Ë|| ((FLAGË=
PWR_FLAG_SB
))

	)

128 
PWR_DeInô
();

129 
PWR_BackupAc˚ssCmd
(
Fun˘i⁄ÆSèã
 
NewSèã
);

130 
PWR_PVDCmd
(
Fun˘i⁄ÆSèã
 
NewSèã
);

131 
PWR_PVDLevñC⁄fig
(
uöt32_t
 
PWR_PVDLevñ
);

132 
PWR_WakeUpPöCmd
(
Fun˘i⁄ÆSèã
 
NewSèã
);

133 
PWR_E¡îSTOPMode
(
uöt32_t
 
PWR_Reguœt‹
, 
uöt8_t
 
PWR_STOPE¡ry
);

134 
PWR_E¡îSTANDBYMode
();

135 
FœgSètus
 
PWR_GëFœgSètus
(
uöt32_t
 
PWR_FLAG
);

136 
PWR_CÀ¨Fœg
(
uöt32_t
 
PWR_FLAG
);

138 #ifde‡
__˝lu•lus


	@Source/STM32F10x_StdPeriph_Driver/inc/stm32f10x_rcc.h

23 #i‚de‡
__STM32F10x_RCC_H


24 
	#__STM32F10x_RCC_H


	)

26 #ifde‡
__˝lu•lus


31 
	~"°m32f10x.h
"

47 
uöt32_t
 
SYSCLK_Fªquícy
;

48 
uöt32_t
 
HCLK_Fªquícy
;

49 
uöt32_t
 
PCLK1_Fªquícy
;

50 
uöt32_t
 
PCLK2_Fªquícy
;

51 
uöt32_t
 
ADCCLK_Fªquícy
;

52 }
	tRCC_ClocksTy≥Def
;

66 
	#RCC_HSE_OFF
 ((
uöt32_t
)0x00000000)

	)

67 
	#RCC_HSE_ON
 ((
uöt32_t
)0x00010000)

	)

68 
	#RCC_HSE_By∑ss
 ((
uöt32_t
)0x00040000)

	)

69 
	#IS_RCC_HSE
(
HSE
Ë(((HSEË=
RCC_HSE_OFF
Ë|| ((HSEË=
RCC_HSE_ON
Ë|| \

	)

70 ((
HSE
Ë=
RCC_HSE_By∑ss
))

80 
	#RCC_PLLSour˚_HSI_Div2
 ((
uöt32_t
)0x00000000)

	)

82 #i‚de‡
STM32F10X_CL


83 
	#RCC_PLLSour˚_HSE_Div1
 ((
uöt32_t
)0x00010000)

	)

84 
	#RCC_PLLSour˚_HSE_Div2
 ((
uöt32_t
)0x00030000)

	)

85 
	#IS_RCC_PLL_SOURCE
(
SOURCE
Ë(((SOURCEË=
RCC_PLLSour˚_HSI_Div2
Ë|| \

	)

86 ((
SOURCE
Ë=
RCC_PLLSour˚_HSE_Div1
) || \

87 ((
SOURCE
Ë=
RCC_PLLSour˚_HSE_Div2
))

89 
	#RCC_PLLSour˚_PREDIV1
 ((
uöt32_t
)0x00010000)

	)

90 
	#IS_RCC_PLL_SOURCE
(
SOURCE
Ë(((SOURCEË=
RCC_PLLSour˚_HSI_Div2
Ë|| \

	)

91 ((
SOURCE
Ë=
RCC_PLLSour˚_PREDIV1
))

101 #i‚de‡
STM32F10X_CL


102 
	#RCC_PLLMul_2
 ((
uöt32_t
)0x00000000)

	)

103 
	#RCC_PLLMul_3
 ((
uöt32_t
)0x00040000)

	)

104 
	#RCC_PLLMul_4
 ((
uöt32_t
)0x00080000)

	)

105 
	#RCC_PLLMul_5
 ((
uöt32_t
)0x000C0000)

	)

106 
	#RCC_PLLMul_6
 ((
uöt32_t
)0x00100000)

	)

107 
	#RCC_PLLMul_7
 ((
uöt32_t
)0x00140000)

	)

108 
	#RCC_PLLMul_8
 ((
uöt32_t
)0x00180000)

	)

109 
	#RCC_PLLMul_9
 ((
uöt32_t
)0x001C0000)

	)

110 
	#RCC_PLLMul_10
 ((
uöt32_t
)0x00200000)

	)

111 
	#RCC_PLLMul_11
 ((
uöt32_t
)0x00240000)

	)

112 
	#RCC_PLLMul_12
 ((
uöt32_t
)0x00280000)

	)

113 
	#RCC_PLLMul_13
 ((
uöt32_t
)0x002C0000)

	)

114 
	#RCC_PLLMul_14
 ((
uöt32_t
)0x00300000)

	)

115 
	#RCC_PLLMul_15
 ((
uöt32_t
)0x00340000)

	)

116 
	#RCC_PLLMul_16
 ((
uöt32_t
)0x00380000)

	)

117 
	#IS_RCC_PLL_MUL
(
MUL
Ë(((MULË=
RCC_PLLMul_2
Ë|| ((MULË=
RCC_PLLMul_3
Ë|| \

	)

118 ((
MUL
Ë=
RCC_PLLMul_4
Ë|| ((MULË=
RCC_PLLMul_5
) || \

119 ((
MUL
Ë=
RCC_PLLMul_6
Ë|| ((MULË=
RCC_PLLMul_7
) || \

120 ((
MUL
Ë=
RCC_PLLMul_8
Ë|| ((MULË=
RCC_PLLMul_9
) || \

121 ((
MUL
Ë=
RCC_PLLMul_10
Ë|| ((MULË=
RCC_PLLMul_11
) || \

122 ((
MUL
Ë=
RCC_PLLMul_12
Ë|| ((MULË=
RCC_PLLMul_13
) || \

123 ((
MUL
Ë=
RCC_PLLMul_14
Ë|| ((MULË=
RCC_PLLMul_15
) || \

124 ((
MUL
Ë=
RCC_PLLMul_16
))

127 
	#RCC_PLLMul_4
 ((
uöt32_t
)0x00080000)

	)

128 
	#RCC_PLLMul_5
 ((
uöt32_t
)0x000C0000)

	)

129 
	#RCC_PLLMul_6
 ((
uöt32_t
)0x00100000)

	)

130 
	#RCC_PLLMul_7
 ((
uöt32_t
)0x00140000)

	)

131 
	#RCC_PLLMul_8
 ((
uöt32_t
)0x00180000)

	)

132 
	#RCC_PLLMul_9
 ((
uöt32_t
)0x001C0000)

	)

133 
	#RCC_PLLMul_6_5
 ((
uöt32_t
)0x00340000)

	)

135 
	#IS_RCC_PLL_MUL
(
MUL
Ë(((MULË=
RCC_PLLMul_4
Ë|| ((MULË=
RCC_PLLMul_5
Ë|| \

	)

136 ((
MUL
Ë=
RCC_PLLMul_6
Ë|| ((MULË=
RCC_PLLMul_7
) || \

137 ((
MUL
Ë=
RCC_PLLMul_8
Ë|| ((MULË=
RCC_PLLMul_9
) || \

138 ((
MUL
Ë=
RCC_PLLMul_6_5
))

144 #ifde‡
STM32F10X_CL


148 
	#RCC_PREDIV1_Div1
 ((
uöt32_t
)0x00000000)

	)

149 
	#RCC_PREDIV1_Div2
 ((
uöt32_t
)0x00000001)

	)

150 
	#RCC_PREDIV1_Div3
 ((
uöt32_t
)0x00000002)

	)

151 
	#RCC_PREDIV1_Div4
 ((
uöt32_t
)0x00000003)

	)

152 
	#RCC_PREDIV1_Div5
 ((
uöt32_t
)0x00000004)

	)

153 
	#RCC_PREDIV1_Div6
 ((
uöt32_t
)0x00000005)

	)

154 
	#RCC_PREDIV1_Div7
 ((
uöt32_t
)0x00000006)

	)

155 
	#RCC_PREDIV1_Div8
 ((
uöt32_t
)0x00000007)

	)

156 
	#RCC_PREDIV1_Div9
 ((
uöt32_t
)0x00000008)

	)

157 
	#RCC_PREDIV1_Div10
 ((
uöt32_t
)0x00000009)

	)

158 
	#RCC_PREDIV1_Div11
 ((
uöt32_t
)0x0000000A)

	)

159 
	#RCC_PREDIV1_Div12
 ((
uöt32_t
)0x0000000B)

	)

160 
	#RCC_PREDIV1_Div13
 ((
uöt32_t
)0x0000000C)

	)

161 
	#RCC_PREDIV1_Div14
 ((
uöt32_t
)0x0000000D)

	)

162 
	#RCC_PREDIV1_Div15
 ((
uöt32_t
)0x0000000E)

	)

163 
	#RCC_PREDIV1_Div16
 ((
uöt32_t
)0x0000000F)

	)

165 
	#IS_RCC_PREDIV1
(
PREDIV1
Ë(((PREDIV1Ë=
RCC_PREDIV1_Div1
Ë|| ((PREDIV1Ë=
RCC_PREDIV1_Div2
Ë|| \

	)

166 ((
PREDIV1
Ë=
RCC_PREDIV1_Div3
Ë|| ((PREDIV1Ë=
RCC_PREDIV1_Div4
) || \

167 ((
PREDIV1
Ë=
RCC_PREDIV1_Div5
Ë|| ((PREDIV1Ë=
RCC_PREDIV1_Div6
) || \

168 ((
PREDIV1
Ë=
RCC_PREDIV1_Div7
Ë|| ((PREDIV1Ë=
RCC_PREDIV1_Div8
) || \

169 ((
PREDIV1
Ë=
RCC_PREDIV1_Div9
Ë|| ((PREDIV1Ë=
RCC_PREDIV1_Div10
) || \

170 ((
PREDIV1
Ë=
RCC_PREDIV1_Div11
Ë|| ((PREDIV1Ë=
RCC_PREDIV1_Div12
) || \

171 ((
PREDIV1
Ë=
RCC_PREDIV1_Div13
Ë|| ((PREDIV1Ë=
RCC_PREDIV1_Div14
) || \

172 ((
PREDIV1
Ë=
RCC_PREDIV1_Div15
Ë|| ((PREDIV1Ë=
RCC_PREDIV1_Div16
))

182 
	#RCC_PREDIV1_Sour˚_HSE
 ((
uöt32_t
)0x00000000)

	)

183 
	#RCC_PREDIV1_Sour˚_PLL2
 ((
uöt32_t
)0x00010000)

	)

185 
	#IS_RCC_PREDIV1_SOURCE
(
SOURCE
Ë(((SOURCEË=
RCC_PREDIV1_Sour˚_HSE
Ë|| \

	)

186 ((
SOURCE
Ë=
RCC_PREDIV1_Sour˚_PLL2
))

196 
	#RCC_PREDIV2_Div1
 ((
uöt32_t
)0x00000000)

	)

197 
	#RCC_PREDIV2_Div2
 ((
uöt32_t
)0x00000010)

	)

198 
	#RCC_PREDIV2_Div3
 ((
uöt32_t
)0x00000020)

	)

199 
	#RCC_PREDIV2_Div4
 ((
uöt32_t
)0x00000030)

	)

200 
	#RCC_PREDIV2_Div5
 ((
uöt32_t
)0x00000040)

	)

201 
	#RCC_PREDIV2_Div6
 ((
uöt32_t
)0x00000050)

	)

202 
	#RCC_PREDIV2_Div7
 ((
uöt32_t
)0x00000060)

	)

203 
	#RCC_PREDIV2_Div8
 ((
uöt32_t
)0x00000070)

	)

204 
	#RCC_PREDIV2_Div9
 ((
uöt32_t
)0x00000080)

	)

205 
	#RCC_PREDIV2_Div10
 ((
uöt32_t
)0x00000090)

	)

206 
	#RCC_PREDIV2_Div11
 ((
uöt32_t
)0x000000A0)

	)

207 
	#RCC_PREDIV2_Div12
 ((
uöt32_t
)0x000000B0)

	)

208 
	#RCC_PREDIV2_Div13
 ((
uöt32_t
)0x000000C0)

	)

209 
	#RCC_PREDIV2_Div14
 ((
uöt32_t
)0x000000D0)

	)

210 
	#RCC_PREDIV2_Div15
 ((
uöt32_t
)0x000000E0)

	)

211 
	#RCC_PREDIV2_Div16
 ((
uöt32_t
)0x000000F0)

	)

213 
	#IS_RCC_PREDIV2
(
PREDIV2
Ë(((PREDIV2Ë=
RCC_PREDIV2_Div1
Ë|| ((PREDIV2Ë=
RCC_PREDIV2_Div2
Ë|| \

	)

214 ((
PREDIV2
Ë=
RCC_PREDIV2_Div3
Ë|| ((PREDIV2Ë=
RCC_PREDIV2_Div4
) || \

215 ((
PREDIV2
Ë=
RCC_PREDIV2_Div5
Ë|| ((PREDIV2Ë=
RCC_PREDIV2_Div6
) || \

216 ((
PREDIV2
Ë=
RCC_PREDIV2_Div7
Ë|| ((PREDIV2Ë=
RCC_PREDIV2_Div8
) || \

217 ((
PREDIV2
Ë=
RCC_PREDIV2_Div9
Ë|| ((PREDIV2Ë=
RCC_PREDIV2_Div10
) || \

218 ((
PREDIV2
Ë=
RCC_PREDIV2_Div11
Ë|| ((PREDIV2Ë=
RCC_PREDIV2_Div12
) || \

219 ((
PREDIV2
Ë=
RCC_PREDIV2_Div13
Ë|| ((PREDIV2Ë=
RCC_PREDIV2_Div14
) || \

220 ((
PREDIV2
Ë=
RCC_PREDIV2_Div15
Ë|| ((PREDIV2Ë=
RCC_PREDIV2_Div16
))

230 
	#RCC_PLL2Mul_8
 ((
uöt32_t
)0x00000600)

	)

231 
	#RCC_PLL2Mul_9
 ((
uöt32_t
)0x00000700)

	)

232 
	#RCC_PLL2Mul_10
 ((
uöt32_t
)0x00000800)

	)

233 
	#RCC_PLL2Mul_11
 ((
uöt32_t
)0x00000900)

	)

234 
	#RCC_PLL2Mul_12
 ((
uöt32_t
)0x00000A00)

	)

235 
	#RCC_PLL2Mul_13
 ((
uöt32_t
)0x00000B00)

	)

236 
	#RCC_PLL2Mul_14
 ((
uöt32_t
)0x00000C00)

	)

237 
	#RCC_PLL2Mul_16
 ((
uöt32_t
)0x00000E00)

	)

238 
	#RCC_PLL2Mul_20
 ((
uöt32_t
)0x00000F00)

	)

240 
	#IS_RCC_PLL2_MUL
(
MUL
Ë(((MULË=
RCC_PLL2Mul_8
Ë|| ((MULË=
RCC_PLL2Mul_9
Ë|| \

	)

241 ((
MUL
Ë=
RCC_PLL2Mul_10
Ë|| ((MULË=
RCC_PLL2Mul_11
) || \

242 ((
MUL
Ë=
RCC_PLL2Mul_12
Ë|| ((MULË=
RCC_PLL2Mul_13
) || \

243 ((
MUL
Ë=
RCC_PLL2Mul_14
Ë|| ((MULË=
RCC_PLL2Mul_16
) || \

244 ((
MUL
Ë=
RCC_PLL2Mul_20
))

254 
	#RCC_PLL3Mul_8
 ((
uöt32_t
)0x00006000)

	)

255 
	#RCC_PLL3Mul_9
 ((
uöt32_t
)0x00007000)

	)

256 
	#RCC_PLL3Mul_10
 ((
uöt32_t
)0x00008000)

	)

257 
	#RCC_PLL3Mul_11
 ((
uöt32_t
)0x00009000)

	)

258 
	#RCC_PLL3Mul_12
 ((
uöt32_t
)0x0000A000)

	)

259 
	#RCC_PLL3Mul_13
 ((
uöt32_t
)0x0000B000)

	)

260 
	#RCC_PLL3Mul_14
 ((
uöt32_t
)0x0000C000)

	)

261 
	#RCC_PLL3Mul_16
 ((
uöt32_t
)0x0000E000)

	)

262 
	#RCC_PLL3Mul_20
 ((
uöt32_t
)0x0000F000)

	)

264 
	#IS_RCC_PLL3_MUL
(
MUL
Ë(((MULË=
RCC_PLL3Mul_8
Ë|| ((MULË=
RCC_PLL3Mul_9
Ë|| \

	)

265 ((
MUL
Ë=
RCC_PLL3Mul_10
Ë|| ((MULË=
RCC_PLL3Mul_11
) || \

266 ((
MUL
Ë=
RCC_PLL3Mul_12
Ë|| ((MULË=
RCC_PLL3Mul_13
) || \

267 ((
MUL
Ë=
RCC_PLL3Mul_14
Ë|| ((MULË=
RCC_PLL3Mul_16
) || \

268 ((
MUL
Ë=
RCC_PLL3Mul_20
))

280 
	#RCC_SYSCLKSour˚_HSI
 ((
uöt32_t
)0x00000000)

	)

281 
	#RCC_SYSCLKSour˚_HSE
 ((
uöt32_t
)0x00000001)

	)

282 
	#RCC_SYSCLKSour˚_PLLCLK
 ((
uöt32_t
)0x00000002)

	)

283 
	#IS_RCC_SYSCLK_SOURCE
(
SOURCE
Ë(((SOURCEË=
RCC_SYSCLKSour˚_HSI
Ë|| \

	)

284 ((
SOURCE
Ë=
RCC_SYSCLKSour˚_HSE
) || \

285 ((
SOURCE
Ë=
RCC_SYSCLKSour˚_PLLCLK
))

294 
	#RCC_SYSCLK_Div1
 ((
uöt32_t
)0x00000000)

	)

295 
	#RCC_SYSCLK_Div2
 ((
uöt32_t
)0x00000080)

	)

296 
	#RCC_SYSCLK_Div4
 ((
uöt32_t
)0x00000090)

	)

297 
	#RCC_SYSCLK_Div8
 ((
uöt32_t
)0x000000A0)

	)

298 
	#RCC_SYSCLK_Div16
 ((
uöt32_t
)0x000000B0)

	)

299 
	#RCC_SYSCLK_Div64
 ((
uöt32_t
)0x000000C0)

	)

300 
	#RCC_SYSCLK_Div128
 ((
uöt32_t
)0x000000D0)

	)

301 
	#RCC_SYSCLK_Div256
 ((
uöt32_t
)0x000000E0)

	)

302 
	#RCC_SYSCLK_Div512
 ((
uöt32_t
)0x000000F0)

	)

303 
	#IS_RCC_HCLK
(
HCLK
Ë(((HCLKË=
RCC_SYSCLK_Div1
Ë|| ((HCLKË=
RCC_SYSCLK_Div2
Ë|| \

	)

304 ((
HCLK
Ë=
RCC_SYSCLK_Div4
Ë|| ((HCLKË=
RCC_SYSCLK_Div8
) || \

305 ((
HCLK
Ë=
RCC_SYSCLK_Div16
Ë|| ((HCLKË=
RCC_SYSCLK_Div64
) || \

306 ((
HCLK
Ë=
RCC_SYSCLK_Div128
Ë|| ((HCLKË=
RCC_SYSCLK_Div256
) || \

307 ((
HCLK
Ë=
RCC_SYSCLK_Div512
))

316 
	#RCC_HCLK_Div1
 ((
uöt32_t
)0x00000000)

	)

317 
	#RCC_HCLK_Div2
 ((
uöt32_t
)0x00000400)

	)

318 
	#RCC_HCLK_Div4
 ((
uöt32_t
)0x00000500)

	)

319 
	#RCC_HCLK_Div8
 ((
uöt32_t
)0x00000600)

	)

320 
	#RCC_HCLK_Div16
 ((
uöt32_t
)0x00000700)

	)

321 
	#IS_RCC_PCLK
(
PCLK
Ë(((PCLKË=
RCC_HCLK_Div1
Ë|| ((PCLKË=
RCC_HCLK_Div2
Ë|| \

	)

322 ((
PCLK
Ë=
RCC_HCLK_Div4
Ë|| ((PCLKË=
RCC_HCLK_Div8
) || \

323 ((
PCLK
Ë=
RCC_HCLK_Div16
))

332 
	#RCC_IT_LSIRDY
 ((
uöt8_t
)0x01)

	)

333 
	#RCC_IT_LSERDY
 ((
uöt8_t
)0x02)

	)

334 
	#RCC_IT_HSIRDY
 ((
uöt8_t
)0x04)

	)

335 
	#RCC_IT_HSERDY
 ((
uöt8_t
)0x08)

	)

336 
	#RCC_IT_PLLRDY
 ((
uöt8_t
)0x10)

	)

337 
	#RCC_IT_CSS
 ((
uöt8_t
)0x80)

	)

339 #i‚de‡
STM32F10X_CL


340 
	#IS_RCC_IT
(
IT
Ë((((ITË& (
uöt8_t
)0xE0Ë=0x00Ë&& ((ITË!0x00))

	)

341 
	#IS_RCC_GET_IT
(
IT
Ë(((ITË=
RCC_IT_LSIRDY
Ë|| ((ITË=
RCC_IT_LSERDY
Ë|| \

	)

342 ((
IT
Ë=
RCC_IT_HSIRDY
Ë|| ((ITË=
RCC_IT_HSERDY
) || \

343 ((
IT
Ë=
RCC_IT_PLLRDY
Ë|| ((ITË=
RCC_IT_CSS
))

344 
	#IS_RCC_CLEAR_IT
(
IT
Ë((((ITË& (
uöt8_t
)0x60Ë=0x00Ë&& ((ITË!0x00))

	)

346 
	#RCC_IT_PLL2RDY
 ((
uöt8_t
)0x20)

	)

347 
	#RCC_IT_PLL3RDY
 ((
uöt8_t
)0x40)

	)

348 
	#IS_RCC_IT
(
IT
Ë((((ITË& (
uöt8_t
)0x80Ë=0x00Ë&& ((ITË!0x00))

	)

349 
	#IS_RCC_GET_IT
(
IT
Ë(((ITË=
RCC_IT_LSIRDY
Ë|| ((ITË=
RCC_IT_LSERDY
Ë|| \

	)

350 ((
IT
Ë=
RCC_IT_HSIRDY
Ë|| ((ITË=
RCC_IT_HSERDY
) || \

351 ((
IT
Ë=
RCC_IT_PLLRDY
Ë|| ((ITË=
RCC_IT_CSS
) || \

352 ((
IT
Ë=
RCC_IT_PLL2RDY
Ë|| ((ITË=
RCC_IT_PLL3RDY
))

353 
	#IS_RCC_CLEAR_IT
(
IT
Ë((ITË!0x00)

	)

361 #i‚de‡
STM32F10X_CL


366 
	#RCC_USBCLKSour˚_PLLCLK_1Div5
 ((
uöt8_t
)0x00)

	)

367 
	#RCC_USBCLKSour˚_PLLCLK_Div1
 ((
uöt8_t
)0x01)

	)

369 
	#IS_RCC_USBCLK_SOURCE
(
SOURCE
Ë(((SOURCEË=
RCC_USBCLKSour˚_PLLCLK_1Div5
Ë|| \

	)

370 ((
SOURCE
Ë=
RCC_USBCLKSour˚_PLLCLK_Div1
))

375 
	#RCC_OTGFSCLKSour˚_PLLVCO_Div3
 ((
uöt8_t
)0x00)

	)

376 
	#RCC_OTGFSCLKSour˚_PLLVCO_Div2
 ((
uöt8_t
)0x01)

	)

378 
	#IS_RCC_OTGFSCLK_SOURCE
(
SOURCE
Ë(((SOURCEË=
RCC_OTGFSCLKSour˚_PLLVCO_Div3
Ë|| \

	)

379 ((
SOURCE
Ë=
RCC_OTGFSCLKSour˚_PLLVCO_Div2
))

385 #ifde‡
STM32F10X_CL


389 
	#RCC_I2S2CLKSour˚_SYSCLK
 ((
uöt8_t
)0x00)

	)

390 
	#RCC_I2S2CLKSour˚_PLL3_VCO
 ((
uöt8_t
)0x01)

	)

392 
	#IS_RCC_I2S2CLK_SOURCE
(
SOURCE
Ë(((SOURCEË=
RCC_I2S2CLKSour˚_SYSCLK
Ë|| \

	)

393 ((
SOURCE
Ë=
RCC_I2S2CLKSour˚_PLL3_VCO
))

401 
	#RCC_I2S3CLKSour˚_SYSCLK
 ((
uöt8_t
)0x00)

	)

402 
	#RCC_I2S3CLKSour˚_PLL3_VCO
 ((
uöt8_t
)0x01)

	)

404 
	#IS_RCC_I2S3CLK_SOURCE
(
SOURCE
Ë(((SOURCEË=
RCC_I2S3CLKSour˚_SYSCLK
Ë|| \

	)

405 ((
SOURCE
Ë=
RCC_I2S3CLKSour˚_PLL3_VCO
))

416 
	#RCC_PCLK2_Div2
 ((
uöt32_t
)0x00000000)

	)

417 
	#RCC_PCLK2_Div4
 ((
uöt32_t
)0x00004000)

	)

418 
	#RCC_PCLK2_Div6
 ((
uöt32_t
)0x00008000)

	)

419 
	#RCC_PCLK2_Div8
 ((
uöt32_t
)0x0000C000)

	)

420 
	#IS_RCC_ADCCLK
(
ADCCLK
Ë(((ADCCLKË=
RCC_PCLK2_Div2
Ë|| ((ADCCLKË=
RCC_PCLK2_Div4
Ë|| \

	)

421 ((
ADCCLK
Ë=
RCC_PCLK2_Div6
Ë|| ((ADCCLKË=
RCC_PCLK2_Div8
))

430 
	#RCC_LSE_OFF
 ((
uöt8_t
)0x00)

	)

431 
	#RCC_LSE_ON
 ((
uöt8_t
)0x01)

	)

432 
	#RCC_LSE_By∑ss
 ((
uöt8_t
)0x04)

	)

433 
	#IS_RCC_LSE
(
LSE
Ë(((LSEË=
RCC_LSE_OFF
Ë|| ((LSEË=
RCC_LSE_ON
Ë|| \

	)

434 ((
LSE
Ë=
RCC_LSE_By∑ss
))

443 
	#RCC_RTCCLKSour˚_LSE
 ((
uöt32_t
)0x00000100)

	)

444 
	#RCC_RTCCLKSour˚_LSI
 ((
uöt32_t
)0x00000200)

	)

445 
	#RCC_RTCCLKSour˚_HSE_Div128
 ((
uöt32_t
)0x00000300)

	)

446 
	#IS_RCC_RTCCLK_SOURCE
(
SOURCE
Ë(((SOURCEË=
RCC_RTCCLKSour˚_LSE
Ë|| \

	)

447 ((
SOURCE
Ë=
RCC_RTCCLKSour˚_LSI
) || \

448 ((
SOURCE
Ë=
RCC_RTCCLKSour˚_HSE_Div128
))

457 
	#RCC_AHBPîùh_DMA1
 ((
uöt32_t
)0x00000001)

	)

458 
	#RCC_AHBPîùh_DMA2
 ((
uöt32_t
)0x00000002)

	)

459 
	#RCC_AHBPîùh_SRAM
 ((
uöt32_t
)0x00000004)

	)

460 
	#RCC_AHBPîùh_FLITF
 ((
uöt32_t
)0x00000010)

	)

461 
	#RCC_AHBPîùh_CRC
 ((
uöt32_t
)0x00000040)

	)

463 #i‚de‡
STM32F10X_CL


464 
	#RCC_AHBPîùh_FSMC
 ((
uöt32_t
)0x00000100)

	)

465 
	#RCC_AHBPîùh_SDIO
 ((
uöt32_t
)0x00000400)

	)

466 
	#IS_RCC_AHB_PERIPH
(
PERIPH
Ë((((PERIPHË& 0xFFFFFAA8Ë=0x00Ë&& ((PERIPHË!0x00))

	)

468 
	#RCC_AHBPîùh_OTG_FS
 ((
uöt32_t
)0x00001000)

	)

469 
	#RCC_AHBPîùh_ETH_MAC
 ((
uöt32_t
)0x00004000)

	)

470 
	#RCC_AHBPîùh_ETH_MAC_Tx
 ((
uöt32_t
)0x00008000)

	)

471 
	#RCC_AHBPîùh_ETH_MAC_Rx
 ((
uöt32_t
)0x00010000)

	)

473 
	#IS_RCC_AHB_PERIPH
(
PERIPH
Ë((((PERIPHË& 0xFFFE2FA8Ë=0x00Ë&& ((PERIPHË!0x00))

	)

474 
	#IS_RCC_AHB_PERIPH_RESET
(
PERIPH
Ë((((PERIPHË& 0xFFFFAFFFË=0x00Ë&& ((PERIPHË!0x00))

	)

484 
	#RCC_APB2Pîùh_AFIO
 ((
uöt32_t
)0x00000001)

	)

485 
	#RCC_APB2Pîùh_GPIOA
 ((
uöt32_t
)0x00000004)

	)

486 
	#RCC_APB2Pîùh_GPIOB
 ((
uöt32_t
)0x00000008)

	)

487 
	#RCC_APB2Pîùh_GPIOC
 ((
uöt32_t
)0x00000010)

	)

488 
	#RCC_APB2Pîùh_GPIOD
 ((
uöt32_t
)0x00000020)

	)

489 
	#RCC_APB2Pîùh_GPIOE
 ((
uöt32_t
)0x00000040)

	)

490 
	#RCC_APB2Pîùh_GPIOF
 ((
uöt32_t
)0x00000080)

	)

491 
	#RCC_APB2Pîùh_GPIOG
 ((
uöt32_t
)0x00000100)

	)

492 
	#RCC_APB2Pîùh_ADC1
 ((
uöt32_t
)0x00000200)

	)

493 
	#RCC_APB2Pîùh_ADC2
 ((
uöt32_t
)0x00000400)

	)

494 
	#RCC_APB2Pîùh_TIM1
 ((
uöt32_t
)0x00000800)

	)

495 
	#RCC_APB2Pîùh_SPI1
 ((
uöt32_t
)0x00001000)

	)

496 
	#RCC_APB2Pîùh_TIM8
 ((
uöt32_t
)0x00002000)

	)

497 
	#RCC_APB2Pîùh_USART1
 ((
uöt32_t
)0x00004000)

	)

498 
	#RCC_APB2Pîùh_ADC3
 ((
uöt32_t
)0x00008000)

	)

500 
	#IS_RCC_APB2_PERIPH
(
PERIPH
Ë((((PERIPHË& 0xFFFF0002Ë=0x00Ë&& ((PERIPHË!0x00))

	)

509 
	#RCC_APB1Pîùh_TIM2
 ((
uöt32_t
)0x00000001)

	)

510 
	#RCC_APB1Pîùh_TIM3
 ((
uöt32_t
)0x00000002)

	)

511 
	#RCC_APB1Pîùh_TIM4
 ((
uöt32_t
)0x00000004)

	)

512 
	#RCC_APB1Pîùh_TIM5
 ((
uöt32_t
)0x00000008)

	)

513 
	#RCC_APB1Pîùh_TIM6
 ((
uöt32_t
)0x00000010)

	)

514 
	#RCC_APB1Pîùh_TIM7
 ((
uöt32_t
)0x00000020)

	)

515 
	#RCC_APB1Pîùh_WWDG
 ((
uöt32_t
)0x00000800)

	)

516 
	#RCC_APB1Pîùh_SPI2
 ((
uöt32_t
)0x00004000)

	)

517 
	#RCC_APB1Pîùh_SPI3
 ((
uöt32_t
)0x00008000)

	)

518 
	#RCC_APB1Pîùh_USART2
 ((
uöt32_t
)0x00020000)

	)

519 
	#RCC_APB1Pîùh_USART3
 ((
uöt32_t
)0x00040000)

	)

520 
	#RCC_APB1Pîùh_UART4
 ((
uöt32_t
)0x00080000)

	)

521 
	#RCC_APB1Pîùh_UART5
 ((
uöt32_t
)0x00100000)

	)

522 
	#RCC_APB1Pîùh_I2C1
 ((
uöt32_t
)0x00200000)

	)

523 
	#RCC_APB1Pîùh_I2C2
 ((
uöt32_t
)0x00400000)

	)

524 
	#RCC_APB1Pîùh_USB
 ((
uöt32_t
)0x00800000)

	)

525 
	#RCC_APB1Pîùh_CAN1
 ((
uöt32_t
)0x02000000)

	)

526 
	#RCC_APB1Pîùh_BKP
 ((
uöt32_t
)0x08000000)

	)

527 
	#RCC_APB1Pîùh_PWR
 ((
uöt32_t
)0x10000000)

	)

528 
	#RCC_APB1Pîùh_DAC
 ((
uöt32_t
)0x20000000)

	)

529 
	#RCC_APB1Pîùh_CAN2
 ((
uöt32_t
)0x04000000)

	)

530 
	#IS_RCC_APB1_PERIPH
(
PERIPH
Ë((((PERIPHË& 0xC10137C0Ë=0x00Ë&& ((PERIPHË!0x00))

	)

540 
	#RCC_MCO_NoClock
 ((
uöt8_t
)0x00)

	)

541 
	#RCC_MCO_SYSCLK
 ((
uöt8_t
)0x04)

	)

542 
	#RCC_MCO_HSI
 ((
uöt8_t
)0x05)

	)

543 
	#RCC_MCO_HSE
 ((
uöt8_t
)0x06)

	)

544 
	#RCC_MCO_PLLCLK_Div2
 ((
uöt8_t
)0x07)

	)

546 #i‚de‡
STM32F10X_CL


547 
	#IS_RCC_MCO
(
MCO
Ë(((MCOË=
RCC_MCO_NoClock
Ë|| ((MCOË=
RCC_MCO_HSI
Ë|| \

	)

548 ((
MCO
Ë=
RCC_MCO_SYSCLK
Ë|| ((MCOË=
RCC_MCO_HSE
) || \

549 ((
MCO
Ë=
RCC_MCO_PLLCLK_Div2
))

551 
	#RCC_MCO_PLL2CLK
 ((
uöt8_t
)0x08)

	)

552 
	#RCC_MCO_PLL3CLK_Div2
 ((
uöt8_t
)0x09)

	)

553 
	#RCC_MCO_XT1
 ((
uöt8_t
)0x0A)

	)

554 
	#RCC_MCO_PLL3CLK
 ((
uöt8_t
)0x0B)

	)

556 
	#IS_RCC_MCO
(
MCO
Ë(((MCOË=
RCC_MCO_NoClock
Ë|| ((MCOË=
RCC_MCO_HSI
Ë|| \

	)

557 ((
MCO
Ë=
RCC_MCO_SYSCLK
Ë|| ((MCOË=
RCC_MCO_HSE
) || \

558 ((
MCO
Ë=
RCC_MCO_PLLCLK_Div2
Ë|| ((MCOË=
RCC_MCO_PLL2CLK
) || \

559 ((
MCO
Ë=
RCC_MCO_PLL3CLK_Div2
Ë|| ((MCOË=
RCC_MCO_XT1
) || \

560 ((
MCO
Ë=
RCC_MCO_PLL3CLK
))

571 
	#RCC_FLAG_HSIRDY
 ((
uöt8_t
)0x21)

	)

572 
	#RCC_FLAG_HSERDY
 ((
uöt8_t
)0x31)

	)

573 
	#RCC_FLAG_PLLRDY
 ((
uöt8_t
)0x39)

	)

574 
	#RCC_FLAG_LSERDY
 ((
uöt8_t
)0x41)

	)

575 
	#RCC_FLAG_LSIRDY
 ((
uöt8_t
)0x61)

	)

576 
	#RCC_FLAG_PINRST
 ((
uöt8_t
)0x7A)

	)

577 
	#RCC_FLAG_PORRST
 ((
uöt8_t
)0x7B)

	)

578 
	#RCC_FLAG_SFTRST
 ((
uöt8_t
)0x7C)

	)

579 
	#RCC_FLAG_IWDGRST
 ((
uöt8_t
)0x7D)

	)

580 
	#RCC_FLAG_WWDGRST
 ((
uöt8_t
)0x7E)

	)

581 
	#RCC_FLAG_LPWRRST
 ((
uöt8_t
)0x7F)

	)

583 #i‚de‡
STM32F10X_CL


584 
	#IS_RCC_FLAG
(
FLAG
Ë(((FLAGË=
RCC_FLAG_HSIRDY
Ë|| ((FLAGË=
RCC_FLAG_HSERDY
Ë|| \

	)

585 ((
FLAG
Ë=
RCC_FLAG_PLLRDY
Ë|| ((FLAGË=
RCC_FLAG_LSERDY
) || \

586 ((
FLAG
Ë=
RCC_FLAG_LSIRDY
Ë|| ((FLAGË=
RCC_FLAG_PINRST
) || \

587 ((
FLAG
Ë=
RCC_FLAG_PORRST
Ë|| ((FLAGË=
RCC_FLAG_SFTRST
) || \

588 ((
FLAG
Ë=
RCC_FLAG_IWDGRST
)|| ((FLAGË=
RCC_FLAG_WWDGRST
)|| \

589 ((
FLAG
Ë=
RCC_FLAG_LPWRRST
))

591 
	#RCC_FLAG_PLL2RDY
 ((
uöt8_t
)0x3B)

	)

592 
	#RCC_FLAG_PLL3RDY
 ((
uöt8_t
)0x3D)

	)

593 
	#IS_RCC_FLAG
(
FLAG
Ë(((FLAGË=
RCC_FLAG_HSIRDY
Ë|| ((FLAGË=
RCC_FLAG_HSERDY
Ë|| \

	)

594 ((
FLAG
Ë=
RCC_FLAG_PLLRDY
Ë|| ((FLAGË=
RCC_FLAG_LSERDY
) || \

595 ((
FLAG
Ë=
RCC_FLAG_PLL2RDY
Ë|| ((FLAGË=
RCC_FLAG_PLL3RDY
) || \

596 ((
FLAG
Ë=
RCC_FLAG_LSIRDY
Ë|| ((FLAGË=
RCC_FLAG_PINRST
) || \

597 ((
FLAG
Ë=
RCC_FLAG_PORRST
Ë|| ((FLAGË=
RCC_FLAG_SFTRST
) || \

598 ((
FLAG
Ë=
RCC_FLAG_IWDGRST
)|| ((FLAGË=
RCC_FLAG_WWDGRST
)|| \

599 ((
FLAG
Ë=
RCC_FLAG_LPWRRST
))

602 
	#IS_RCC_CALIBRATION_VALUE
(
VALUE
Ë((VALUEË<0x1F)

	)

623 
RCC_DeInô
();

624 
RCC_HSEC⁄fig
(
uöt32_t
 
RCC_HSE
);

625 
Eº‹Sètus
 
RCC_WaôF‹HSESèπUp
();

626 
RCC_Adju°HSICÆibøti⁄VÆue
(
uöt8_t
 
HSICÆibøti⁄VÆue
);

627 
RCC_HSICmd
(
Fun˘i⁄ÆSèã
 
NewSèã
);

628 
RCC_PLLC⁄fig
(
uöt32_t
 
RCC_PLLSour˚
, uöt32_à
RCC_PLLMul
);

629 
RCC_PLLCmd
(
Fun˘i⁄ÆSèã
 
NewSèã
);

631 #ifde‡
STM32F10X_CL


632 
RCC_PREDIV1C⁄fig
(
uöt32_t
 
RCC_PREDIV1_Sour˚
, uöt32_à
RCC_PREDIV1_Div
);

633 
RCC_PREDIV2C⁄fig
(
uöt32_t
 
RCC_PREDIV2_Div
);

634 
RCC_PLL2C⁄fig
(
uöt32_t
 
RCC_PLL2Mul
);

635 
RCC_PLL2Cmd
(
Fun˘i⁄ÆSèã
 
NewSèã
);

636 
RCC_PLL3C⁄fig
(
uöt32_t
 
RCC_PLL3Mul
);

637 
RCC_PLL3Cmd
(
Fun˘i⁄ÆSèã
 
NewSèã
);

640 
RCC_SYSCLKC⁄fig
(
uöt32_t
 
RCC_SYSCLKSour˚
);

641 
uöt8_t
 
RCC_GëSYSCLKSour˚
();

642 
RCC_HCLKC⁄fig
(
uöt32_t
 
RCC_SYSCLK
);

643 
RCC_PCLK1C⁄fig
(
uöt32_t
 
RCC_HCLK
);

644 
RCC_PCLK2C⁄fig
(
uöt32_t
 
RCC_HCLK
);

645 
RCC_ITC⁄fig
(
uöt8_t
 
RCC_IT
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

647 #i‚de‡
STM32F10X_CL


648 
RCC_USBCLKC⁄fig
(
uöt32_t
 
RCC_USBCLKSour˚
);

650 
RCC_OTGFSCLKC⁄fig
(
uöt32_t
 
RCC_OTGFSCLKSour˚
);

653 
RCC_ADCCLKC⁄fig
(
uöt32_t
 
RCC_PCLK2
);

655 #ifde‡
STM32F10X_CL


656 
RCC_I2S2CLKC⁄fig
(
uöt32_t
 
RCC_I2S2CLKSour˚
);

657 
RCC_I2S3CLKC⁄fig
(
uöt32_t
 
RCC_I2S3CLKSour˚
);

660 
RCC_LSEC⁄fig
(
uöt8_t
 
RCC_LSE
);

661 
RCC_LSICmd
(
Fun˘i⁄ÆSèã
 
NewSèã
);

662 
RCC_RTCCLKC⁄fig
(
uöt32_t
 
RCC_RTCCLKSour˚
);

663 
RCC_RTCCLKCmd
(
Fun˘i⁄ÆSèã
 
NewSèã
);

664 
RCC_GëClocksFªq
(
RCC_ClocksTy≥Def
* 
RCC_Clocks
);

665 
RCC_AHBPîùhClockCmd
(
uöt32_t
 
RCC_AHBPîùh
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

666 
RCC_APB2PîùhClockCmd
(
uöt32_t
 
RCC_APB2Pîùh
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

667 
RCC_APB1PîùhClockCmd
(
uöt32_t
 
RCC_APB1Pîùh
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

669 #ifde‡
STM32F10X_CL


670 
RCC_AHBPîùhRe£tCmd
(
uöt32_t
 
RCC_AHBPîùh
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

673 
RCC_APB2PîùhRe£tCmd
(
uöt32_t
 
RCC_APB2Pîùh
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

674 
RCC_APB1PîùhRe£tCmd
(
uöt32_t
 
RCC_APB1Pîùh
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

675 
RCC_BackupRe£tCmd
(
Fun˘i⁄ÆSèã
 
NewSèã
);

676 
RCC_ClockSecurôySy°emCmd
(
Fun˘i⁄ÆSèã
 
NewSèã
);

677 
RCC_MCOC⁄fig
(
uöt8_t
 
RCC_MCO
);

678 
FœgSètus
 
RCC_GëFœgSètus
(
uöt8_t
 
RCC_FLAG
);

679 
RCC_CÀ¨Fœg
();

680 
ITSètus
 
RCC_GëITSètus
(
uöt8_t
 
RCC_IT
);

681 
RCC_CÀ¨ITPídögBô
(
uöt8_t
 
RCC_IT
);

683 #ifde‡
__˝lu•lus


	@Source/STM32F10x_StdPeriph_Driver/inc/stm32f10x_rtc.h

23 #i‚de‡
__STM32F10x_RTC_H


24 
	#__STM32F10x_RTC_H


	)

26 #ifde‡
__˝lu•lus


31 
	~"°m32f10x.h
"

57 
	#RTC_IT_OW
 ((
uöt16_t
)0x0004Ë

	)

58 
	#RTC_IT_ALR
 ((
uöt16_t
)0x0002Ë

	)

59 
	#RTC_IT_SEC
 ((
uöt16_t
)0x0001Ë

	)

60 
	#IS_RTC_IT
(
IT
Ë((((ITË& (
uöt16_t
)0xFFF8Ë=0x00Ë&& ((ITË!0x00))

	)

61 
	#IS_RTC_GET_IT
(
IT
Ë(((ITË=
RTC_IT_OW
Ë|| ((ITË=
RTC_IT_ALR
Ë|| \

	)

62 ((
IT
Ë=
RTC_IT_SEC
))

71 
	#RTC_FLAG_RTOFF
 ((
uöt16_t
)0x0020Ë

	)

72 
	#RTC_FLAG_RSF
 ((
uöt16_t
)0x0008Ë

	)

73 
	#RTC_FLAG_OW
 ((
uöt16_t
)0x0004Ë

	)

74 
	#RTC_FLAG_ALR
 ((
uöt16_t
)0x0002Ë

	)

75 
	#RTC_FLAG_SEC
 ((
uöt16_t
)0x0001Ë

	)

76 
	#IS_RTC_CLEAR_FLAG
(
FLAG
Ë((((FLAGË& (
uöt16_t
)0xFFF0Ë=0x00Ë&& ((FLAGË!0x00))

	)

77 
	#IS_RTC_GET_FLAG
(
FLAG
Ë(((FLAGË=
RTC_FLAG_RTOFF
Ë|| ((FLAGË=
RTC_FLAG_RSF
Ë|| \

	)

78 ((
FLAG
Ë=
RTC_FLAG_OW
Ë|| ((FLAGË=
RTC_FLAG_ALR
) || \

79 ((
FLAG
Ë=
RTC_FLAG_SEC
))

80 
	#IS_RTC_PRESCALER
(
PRESCALER
Ë((PRESCALERË<0xFFFFF)

	)

102 
RTC_ITC⁄fig
(
uöt16_t
 
RTC_IT
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

103 
RTC_E¡îC⁄figMode
();

104 
RTC_ExôC⁄figMode
();

105 
uöt32_t
 
RTC_GëCou¡î
();

106 
RTC_SëCou¡î
(
uöt32_t
 
Cou¡îVÆue
);

107 
RTC_SëPªsˇÀr
(
uöt32_t
 
PªsˇÀrVÆue
);

108 
RTC_SëAœrm
(
uöt32_t
 
AœrmVÆue
);

109 
uöt32_t
 
RTC_GëDividî
();

110 
RTC_WaôF‹La°Task
();

111 
RTC_WaôF‹Synchro
();

112 
FœgSètus
 
RTC_GëFœgSètus
(
uöt16_t
 
RTC_FLAG
);

113 
RTC_CÀ¨Fœg
(
uöt16_t
 
RTC_FLAG
);

114 
ITSètus
 
RTC_GëITSètus
(
uöt16_t
 
RTC_IT
);

115 
RTC_CÀ¨ITPídögBô
(
uöt16_t
 
RTC_IT
);

117 #ifde‡
__˝lu•lus


	@Source/STM32F10x_StdPeriph_Driver/inc/stm32f10x_sdio.h

23 #i‚de‡
__STM32F10x_SDIO_H


24 
	#__STM32F10x_SDIO_H


	)

26 #ifde‡
__˝lu•lus


31 
	~"°m32f10x.h
"

47 
uöt32_t
 
SDIO_ClockEdge
;

50 
uöt32_t
 
SDIO_ClockBy∑ss
;

54 
uöt32_t
 
SDIO_ClockPowîSave
;

58 
uöt32_t
 
SDIO_BusWide
;

61 
uöt32_t
 
SDIO_H¨dw¨eFlowC⁄åﬁ
;

64 
uöt8_t
 
SDIO_ClockDiv
;

67 } 
	tSDIO_InôTy≥Def
;

71 
uöt32_t
 
SDIO_Argumít
;

76 
uöt32_t
 
SDIO_CmdIndex
;

78 
uöt32_t
 
SDIO_Re•⁄£
;

81 
uöt32_t
 
SDIO_Waô
;

84 
uöt32_t
 
SDIO_CPSM
;

87 } 
	tSDIO_CmdInôTy≥Def
;

91 
uöt32_t
 
SDIO_D©aTimeOut
;

93 
uöt32_t
 
SDIO_D©aLígth
;

95 
uöt32_t
 
SDIO_D©aBlockSize
;

98 
uöt32_t
 
SDIO_Tøns„rDú
;

102 
uöt32_t
 
SDIO_Tøns„rMode
;

105 
uöt32_t
 
SDIO_DPSM
;

108 } 
	tSDIO_D©aInôTy≥Def
;

122 
	#SDIO_ClockEdge_Risög
 ((
uöt32_t
)0x00000000)

	)

123 
	#SDIO_ClockEdge_FÆlög
 ((
uöt32_t
)0x00002000)

	)

124 
	#IS_SDIO_CLOCK_EDGE
(
EDGE
Ë(((EDGEË=
SDIO_ClockEdge_Risög
Ë|| \

	)

125 ((
EDGE
Ë=
SDIO_ClockEdge_FÆlög
))

134 
	#SDIO_ClockBy∑ss_DißbÀ
 ((
uöt32_t
)0x00000000)

	)

135 
	#SDIO_ClockBy∑ss_E«bÀ
 ((
uöt32_t
)0x00000400)

	)

136 
	#IS_SDIO_CLOCK_BYPASS
(
BYPASS
Ë(((BYPASSË=
SDIO_ClockBy∑ss_DißbÀ
Ë|| \

	)

137 ((
BYPASS
Ë=
SDIO_ClockBy∑ss_E«bÀ
))

146 
	#SDIO_ClockPowîSave_DißbÀ
 ((
uöt32_t
)0x00000000)

	)

147 
	#SDIO_ClockPowîSave_E«bÀ
 ((
uöt32_t
)0x00000200)

	)

148 
	#IS_SDIO_CLOCK_POWER_SAVE
(
SAVE
Ë(((SAVEË=
SDIO_ClockPowîSave_DißbÀ
Ë|| \

	)

149 ((
SAVE
Ë=
SDIO_ClockPowîSave_E«bÀ
))

158 
	#SDIO_BusWide_1b
 ((
uöt32_t
)0x00000000)

	)

159 
	#SDIO_BusWide_4b
 ((
uöt32_t
)0x00000800)

	)

160 
	#SDIO_BusWide_8b
 ((
uöt32_t
)0x00001000)

	)

161 
	#IS_SDIO_BUS_WIDE
(
WIDE
Ë(((WIDEË=
SDIO_BusWide_1b
Ë|| ((WIDEË=
SDIO_BusWide_4b
Ë|| \

	)

162 ((
WIDE
Ë=
SDIO_BusWide_8b
))

172 
	#SDIO_H¨dw¨eFlowC⁄åﬁ_DißbÀ
 ((
uöt32_t
)0x00000000)

	)

173 
	#SDIO_H¨dw¨eFlowC⁄åﬁ_E«bÀ
 ((
uöt32_t
)0x00004000)

	)

174 
	#IS_SDIO_HARDWARE_FLOW_CONTROL
(
CONTROL
Ë(((CONTROLË=
SDIO_H¨dw¨eFlowC⁄åﬁ_DißbÀ
Ë|| \

	)

175 ((
CONTROL
Ë=
SDIO_H¨dw¨eFlowC⁄åﬁ_E«bÀ
))

184 
	#SDIO_PowîSèã_OFF
 ((
uöt32_t
)0x00000000)

	)

185 
	#SDIO_PowîSèã_ON
 ((
uöt32_t
)0x00000003)

	)

186 
	#IS_SDIO_POWER_STATE
(
STATE
Ë(((STATEË=
SDIO_PowîSèã_OFF
Ë|| ((STATEË=
SDIO_PowîSèã_ON
))

	)

196 
	#SDIO_IT_CCRCFAIL
 ((
uöt32_t
)0x00000001)

	)

197 
	#SDIO_IT_DCRCFAIL
 ((
uöt32_t
)0x00000002)

	)

198 
	#SDIO_IT_CTIMEOUT
 ((
uöt32_t
)0x00000004)

	)

199 
	#SDIO_IT_DTIMEOUT
 ((
uöt32_t
)0x00000008)

	)

200 
	#SDIO_IT_TXUNDERR
 ((
uöt32_t
)0x00000010)

	)

201 
	#SDIO_IT_RXOVERR
 ((
uöt32_t
)0x00000020)

	)

202 
	#SDIO_IT_CMDREND
 ((
uöt32_t
)0x00000040)

	)

203 
	#SDIO_IT_CMDSENT
 ((
uöt32_t
)0x00000080)

	)

204 
	#SDIO_IT_DATAEND
 ((
uöt32_t
)0x00000100)

	)

205 
	#SDIO_IT_STBITERR
 ((
uöt32_t
)0x00000200)

	)

206 
	#SDIO_IT_DBCKEND
 ((
uöt32_t
)0x00000400)

	)

207 
	#SDIO_IT_CMDACT
 ((
uöt32_t
)0x00000800)

	)

208 
	#SDIO_IT_TXACT
 ((
uöt32_t
)0x00001000)

	)

209 
	#SDIO_IT_RXACT
 ((
uöt32_t
)0x00002000)

	)

210 
	#SDIO_IT_TXFIFOHE
 ((
uöt32_t
)0x00004000)

	)

211 
	#SDIO_IT_RXFIFOHF
 ((
uöt32_t
)0x00008000)

	)

212 
	#SDIO_IT_TXFIFOF
 ((
uöt32_t
)0x00010000)

	)

213 
	#SDIO_IT_RXFIFOF
 ((
uöt32_t
)0x00020000)

	)

214 
	#SDIO_IT_TXFIFOE
 ((
uöt32_t
)0x00040000)

	)

215 
	#SDIO_IT_RXFIFOE
 ((
uöt32_t
)0x00080000)

	)

216 
	#SDIO_IT_TXDAVL
 ((
uöt32_t
)0x00100000)

	)

217 
	#SDIO_IT_RXDAVL
 ((
uöt32_t
)0x00200000)

	)

218 
	#SDIO_IT_SDIOIT
 ((
uöt32_t
)0x00400000)

	)

219 
	#SDIO_IT_CEATAEND
 ((
uöt32_t
)0x00800000)

	)

220 
	#IS_SDIO_IT
(
IT
Ë((((ITË& (
uöt32_t
)0xFF000000Ë=0x00Ë&& ((ITË!(uöt32_t)0x00))

	)

229 
	#IS_SDIO_CMD_INDEX
(
INDEX
Ë((INDEXË< 0x40)

	)

238 
	#SDIO_Re•⁄£_No
 ((
uöt32_t
)0x00000000)

	)

239 
	#SDIO_Re•⁄£_Sh‹t
 ((
uöt32_t
)0x00000040)

	)

240 
	#SDIO_Re•⁄£_L⁄g
 ((
uöt32_t
)0x000000C0)

	)

241 
	#IS_SDIO_RESPONSE
(
RESPONSE
Ë(((RESPONSEË=
SDIO_Re•⁄£_No
Ë|| \

	)

242 ((
RESPONSE
Ë=
SDIO_Re•⁄£_Sh‹t
) || \

243 ((
RESPONSE
Ë=
SDIO_Re•⁄£_L⁄g
))

252 
	#SDIO_Waô_No
 ((
uöt32_t
)0x00000000Ë

	)

253 
	#SDIO_Waô_IT
 ((
uöt32_t
)0x00000100Ë

	)

254 
	#SDIO_Waô_Píd
 ((
uöt32_t
)0x00000200Ë

	)

255 
	#IS_SDIO_WAIT
(
WAIT
Ë(((WAITË=
SDIO_Waô_No
Ë|| ((WAITË=
SDIO_Waô_IT
Ë|| \

	)

256 ((
WAIT
Ë=
SDIO_Waô_Píd
))

265 
	#SDIO_CPSM_DißbÀ
 ((
uöt32_t
)0x00000000)

	)

266 
	#SDIO_CPSM_E«bÀ
 ((
uöt32_t
)0x00000400)

	)

267 
	#IS_SDIO_CPSM
(
CPSM
Ë(((CPSMË=
SDIO_CPSM_E«bÀ
Ë|| ((CPSMË=
SDIO_CPSM_DißbÀ
))

	)

276 
	#SDIO_RESP1
 ((
uöt32_t
)0x00000000)

	)

277 
	#SDIO_RESP2
 ((
uöt32_t
)0x00000004)

	)

278 
	#SDIO_RESP3
 ((
uöt32_t
)0x00000008)

	)

279 
	#SDIO_RESP4
 ((
uöt32_t
)0x0000000C)

	)

280 
	#IS_SDIO_RESP
(
RESP
Ë(((RESPË=
SDIO_RESP1
Ë|| ((RESPË=
SDIO_RESP2
Ë|| \

	)

281 ((
RESP
Ë=
SDIO_RESP3
Ë|| ((RESPË=
SDIO_RESP4
))

290 
	#IS_SDIO_DATA_LENGTH
(
LENGTH
Ë((LENGTHË<0x01FFFFFF)

	)

299 
	#SDIO_D©aBlockSize_1b
 ((
uöt32_t
)0x00000000)

	)

300 
	#SDIO_D©aBlockSize_2b
 ((
uöt32_t
)0x00000010)

	)

301 
	#SDIO_D©aBlockSize_4b
 ((
uöt32_t
)0x00000020)

	)

302 
	#SDIO_D©aBlockSize_8b
 ((
uöt32_t
)0x00000030)

	)

303 
	#SDIO_D©aBlockSize_16b
 ((
uöt32_t
)0x00000040)

	)

304 
	#SDIO_D©aBlockSize_32b
 ((
uöt32_t
)0x00000050)

	)

305 
	#SDIO_D©aBlockSize_64b
 ((
uöt32_t
)0x00000060)

	)

306 
	#SDIO_D©aBlockSize_128b
 ((
uöt32_t
)0x00000070)

	)

307 
	#SDIO_D©aBlockSize_256b
 ((
uöt32_t
)0x00000080)

	)

308 
	#SDIO_D©aBlockSize_512b
 ((
uöt32_t
)0x00000090)

	)

309 
	#SDIO_D©aBlockSize_1024b
 ((
uöt32_t
)0x000000A0)

	)

310 
	#SDIO_D©aBlockSize_2048b
 ((
uöt32_t
)0x000000B0)

	)

311 
	#SDIO_D©aBlockSize_4096b
 ((
uöt32_t
)0x000000C0)

	)

312 
	#SDIO_D©aBlockSize_8192b
 ((
uöt32_t
)0x000000D0)

	)

313 
	#SDIO_D©aBlockSize_16384b
 ((
uöt32_t
)0x000000E0)

	)

314 
	#IS_SDIO_BLOCK_SIZE
(
SIZE
Ë(((SIZEË=
SDIO_D©aBlockSize_1b
Ë|| \

	)

315 ((
SIZE
Ë=
SDIO_D©aBlockSize_2b
) || \

316 ((
SIZE
Ë=
SDIO_D©aBlockSize_4b
) || \

317 ((
SIZE
Ë=
SDIO_D©aBlockSize_8b
) || \

318 ((
SIZE
Ë=
SDIO_D©aBlockSize_16b
) || \

319 ((
SIZE
Ë=
SDIO_D©aBlockSize_32b
) || \

320 ((
SIZE
Ë=
SDIO_D©aBlockSize_64b
) || \

321 ((
SIZE
Ë=
SDIO_D©aBlockSize_128b
) || \

322 ((
SIZE
Ë=
SDIO_D©aBlockSize_256b
) || \

323 ((
SIZE
Ë=
SDIO_D©aBlockSize_512b
) || \

324 ((
SIZE
Ë=
SDIO_D©aBlockSize_1024b
) || \

325 ((
SIZE
Ë=
SDIO_D©aBlockSize_2048b
) || \

326 ((
SIZE
Ë=
SDIO_D©aBlockSize_4096b
) || \

327 ((
SIZE
Ë=
SDIO_D©aBlockSize_8192b
) || \

328 ((
SIZE
Ë=
SDIO_D©aBlockSize_16384b
))

337 
	#SDIO_Tøns„rDú_ToC¨d
 ((
uöt32_t
)0x00000000)

	)

338 
	#SDIO_Tøns„rDú_ToSDIO
 ((
uöt32_t
)0x00000002)

	)

339 
	#IS_SDIO_TRANSFER_DIR
(
DIR
Ë(((DIRË=
SDIO_Tøns„rDú_ToC¨d
Ë|| \

	)

340 ((
DIR
Ë=
SDIO_Tøns„rDú_ToSDIO
))

349 
	#SDIO_Tøns„rMode_Block
 ((
uöt32_t
)0x00000000)

	)

350 
	#SDIO_Tøns„rMode_Såóm
 ((
uöt32_t
)0x00000004)

	)

351 
	#IS_SDIO_TRANSFER_MODE
(
MODE
Ë(((MODEË=
SDIO_Tøns„rMode_Såóm
Ë|| \

	)

352 ((
MODE
Ë=
SDIO_Tøns„rMode_Block
))

361 
	#SDIO_DPSM_DißbÀ
 ((
uöt32_t
)0x00000000)

	)

362 
	#SDIO_DPSM_E«bÀ
 ((
uöt32_t
)0x00000001)

	)

363 
	#IS_SDIO_DPSM
(
DPSM
Ë(((DPSMË=
SDIO_DPSM_E«bÀ
Ë|| ((DPSMË=
SDIO_DPSM_DißbÀ
))

	)

372 
	#SDIO_FLAG_CCRCFAIL
 ((
uöt32_t
)0x00000001)

	)

373 
	#SDIO_FLAG_DCRCFAIL
 ((
uöt32_t
)0x00000002)

	)

374 
	#SDIO_FLAG_CTIMEOUT
 ((
uöt32_t
)0x00000004)

	)

375 
	#SDIO_FLAG_DTIMEOUT
 ((
uöt32_t
)0x00000008)

	)

376 
	#SDIO_FLAG_TXUNDERR
 ((
uöt32_t
)0x00000010)

	)

377 
	#SDIO_FLAG_RXOVERR
 ((
uöt32_t
)0x00000020)

	)

378 
	#SDIO_FLAG_CMDREND
 ((
uöt32_t
)0x00000040)

	)

379 
	#SDIO_FLAG_CMDSENT
 ((
uöt32_t
)0x00000080)

	)

380 
	#SDIO_FLAG_DATAEND
 ((
uöt32_t
)0x00000100)

	)

381 
	#SDIO_FLAG_STBITERR
 ((
uöt32_t
)0x00000200)

	)

382 
	#SDIO_FLAG_DBCKEND
 ((
uöt32_t
)0x00000400)

	)

383 
	#SDIO_FLAG_CMDACT
 ((
uöt32_t
)0x00000800)

	)

384 
	#SDIO_FLAG_TXACT
 ((
uöt32_t
)0x00001000)

	)

385 
	#SDIO_FLAG_RXACT
 ((
uöt32_t
)0x00002000)

	)

386 
	#SDIO_FLAG_TXFIFOHE
 ((
uöt32_t
)0x00004000)

	)

387 
	#SDIO_FLAG_RXFIFOHF
 ((
uöt32_t
)0x00008000)

	)

388 
	#SDIO_FLAG_TXFIFOF
 ((
uöt32_t
)0x00010000)

	)

389 
	#SDIO_FLAG_RXFIFOF
 ((
uöt32_t
)0x00020000)

	)

390 
	#SDIO_FLAG_TXFIFOE
 ((
uöt32_t
)0x00040000)

	)

391 
	#SDIO_FLAG_RXFIFOE
 ((
uöt32_t
)0x00080000)

	)

392 
	#SDIO_FLAG_TXDAVL
 ((
uöt32_t
)0x00100000)

	)

393 
	#SDIO_FLAG_RXDAVL
 ((
uöt32_t
)0x00200000)

	)

394 
	#SDIO_FLAG_SDIOIT
 ((
uöt32_t
)0x00400000)

	)

395 
	#SDIO_FLAG_CEATAEND
 ((
uöt32_t
)0x00800000)

	)

396 
	#IS_SDIO_FLAG
(
FLAG
Ë(((FLAGË=
SDIO_FLAG_CCRCFAIL
Ë|| \

	)

397 ((
FLAG
Ë=
SDIO_FLAG_DCRCFAIL
) || \

398 ((
FLAG
Ë=
SDIO_FLAG_CTIMEOUT
) || \

399 ((
FLAG
Ë=
SDIO_FLAG_DTIMEOUT
) || \

400 ((
FLAG
Ë=
SDIO_FLAG_TXUNDERR
) || \

401 ((
FLAG
Ë=
SDIO_FLAG_RXOVERR
) || \

402 ((
FLAG
Ë=
SDIO_FLAG_CMDREND
) || \

403 ((
FLAG
Ë=
SDIO_FLAG_CMDSENT
) || \

404 ((
FLAG
Ë=
SDIO_FLAG_DATAEND
) || \

405 ((
FLAG
Ë=
SDIO_FLAG_STBITERR
) || \

406 ((
FLAG
Ë=
SDIO_FLAG_DBCKEND
) || \

407 ((
FLAG
Ë=
SDIO_FLAG_CMDACT
) || \

408 ((
FLAG
Ë=
SDIO_FLAG_TXACT
) || \

409 ((
FLAG
Ë=
SDIO_FLAG_RXACT
) || \

410 ((
FLAG
Ë=
SDIO_FLAG_TXFIFOHE
) || \

411 ((
FLAG
Ë=
SDIO_FLAG_RXFIFOHF
) || \

412 ((
FLAG
Ë=
SDIO_FLAG_TXFIFOF
) || \

413 ((
FLAG
Ë=
SDIO_FLAG_RXFIFOF
) || \

414 ((
FLAG
Ë=
SDIO_FLAG_TXFIFOE
) || \

415 ((
FLAG
Ë=
SDIO_FLAG_RXFIFOE
) || \

416 ((
FLAG
Ë=
SDIO_FLAG_TXDAVL
) || \

417 ((
FLAG
Ë=
SDIO_FLAG_RXDAVL
) || \

418 ((
FLAG
Ë=
SDIO_FLAG_SDIOIT
) || \

419 ((
FLAG
Ë=
SDIO_FLAG_CEATAEND
))

421 
	#IS_SDIO_CLEAR_FLAG
(
FLAG
Ë((((FLAGË& (
uöt32_t
)0xFF3FF800Ë=0x00Ë&& ((FLAGË!(uöt32_t)0x00))

	)

423 
	#IS_SDIO_GET_IT
(
IT
Ë(((ITË=
SDIO_IT_CCRCFAIL
Ë|| \

	)

424 ((
IT
Ë=
SDIO_IT_DCRCFAIL
) || \

425 ((
IT
Ë=
SDIO_IT_CTIMEOUT
) || \

426 ((
IT
Ë=
SDIO_IT_DTIMEOUT
) || \

427 ((
IT
Ë=
SDIO_IT_TXUNDERR
) || \

428 ((
IT
Ë=
SDIO_IT_RXOVERR
) || \

429 ((
IT
Ë=
SDIO_IT_CMDREND
) || \

430 ((
IT
Ë=
SDIO_IT_CMDSENT
) || \

431 ((
IT
Ë=
SDIO_IT_DATAEND
) || \

432 ((
IT
Ë=
SDIO_IT_STBITERR
) || \

433 ((
IT
Ë=
SDIO_IT_DBCKEND
) || \

434 ((
IT
Ë=
SDIO_IT_CMDACT
) || \

435 ((
IT
Ë=
SDIO_IT_TXACT
) || \

436 ((
IT
Ë=
SDIO_IT_RXACT
) || \

437 ((
IT
Ë=
SDIO_IT_TXFIFOHE
) || \

438 ((
IT
Ë=
SDIO_IT_RXFIFOHF
) || \

439 ((
IT
Ë=
SDIO_IT_TXFIFOF
) || \

440 ((
IT
Ë=
SDIO_IT_RXFIFOF
) || \

441 ((
IT
Ë=
SDIO_IT_TXFIFOE
) || \

442 ((
IT
Ë=
SDIO_IT_RXFIFOE
) || \

443 ((
IT
Ë=
SDIO_IT_TXDAVL
) || \

444 ((
IT
Ë=
SDIO_IT_RXDAVL
) || \

445 ((
IT
Ë=
SDIO_IT_SDIOIT
) || \

446 ((
IT
Ë=
SDIO_IT_CEATAEND
))

448 
	#IS_SDIO_CLEAR_IT
(
IT
Ë((((ITË& (
uöt32_t
)0xFF3FF800Ë=0x00Ë&& ((ITË!(uöt32_t)0x00))

	)

458 
	#SDIO_RódWaôMode_CLK
 ((
uöt32_t
)0x00000000)

	)

459 
	#SDIO_RódWaôMode_DATA2
 ((
uöt32_t
)0x00000001)

	)

460 
	#IS_SDIO_READWAIT_MODE
(
MODE
Ë(((MODEË=
SDIO_RódWaôMode_CLK
Ë|| \

	)

461 ((
MODE
Ë=
SDIO_RódWaôMode_DATA2
))

482 
SDIO_DeInô
();

483 
SDIO_Inô
(
SDIO_InôTy≥Def
* 
SDIO_InôSåu˘
);

484 
SDIO_Såu˘Inô
(
SDIO_InôTy≥Def
* 
SDIO_InôSåu˘
);

485 
SDIO_ClockCmd
(
Fun˘i⁄ÆSèã
 
NewSèã
);

486 
SDIO_SëPowîSèã
(
uöt32_t
 
SDIO_PowîSèã
);

487 
uöt32_t
 
SDIO_GëPowîSèã
();

488 
SDIO_ITC⁄fig
(
uöt32_t
 
SDIO_IT
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

489 
SDIO_DMACmd
(
Fun˘i⁄ÆSèã
 
NewSèã
);

490 
SDIO_SídComm™d
(
SDIO_CmdInôTy≥Def
 *
SDIO_CmdInôSåu˘
);

491 
SDIO_CmdSåu˘Inô
(
SDIO_CmdInôTy≥Def
* 
SDIO_CmdInôSåu˘
);

492 
uöt8_t
 
SDIO_GëComm™dRe•⁄£
();

493 
uöt32_t
 
SDIO_GëRe•⁄£
(uöt32_à
SDIO_RESP
);

494 
SDIO_D©aC⁄fig
(
SDIO_D©aInôTy≥Def
* 
SDIO_D©aInôSåu˘
);

495 
SDIO_D©aSåu˘Inô
(
SDIO_D©aInôTy≥Def
* 
SDIO_D©aInôSåu˘
);

496 
uöt32_t
 
SDIO_GëD©aCou¡î
();

497 
uöt32_t
 
SDIO_RódD©a
();

498 
SDIO_WrôeD©a
(
uöt32_t
 
D©a
);

499 
uöt32_t
 
SDIO_GëFIFOCou¡
();

500 
SDIO_SèπSDIORódWaô
(
Fun˘i⁄ÆSèã
 
NewSèã
);

501 
SDIO_St›SDIORódWaô
(
Fun˘i⁄ÆSèã
 
NewSèã
);

502 
SDIO_SëSDIORódWaôMode
(
uöt32_t
 
SDIO_RódWaôMode
);

503 
SDIO_SëSDIOO≥øti⁄
(
Fun˘i⁄ÆSèã
 
NewSèã
);

504 
SDIO_SídSDIOSu•ídCmd
(
Fun˘i⁄ÆSèã
 
NewSèã
);

505 
SDIO_Comm™dCom∂ëi⁄Cmd
(
Fun˘i⁄ÆSèã
 
NewSèã
);

506 
SDIO_CEATAITCmd
(
Fun˘i⁄ÆSèã
 
NewSèã
);

507 
SDIO_SídCEATACmd
(
Fun˘i⁄ÆSèã
 
NewSèã
);

508 
FœgSètus
 
SDIO_GëFœgSètus
(
uöt32_t
 
SDIO_FLAG
);

509 
SDIO_CÀ¨Fœg
(
uöt32_t
 
SDIO_FLAG
);

510 
ITSètus
 
SDIO_GëITSètus
(
uöt32_t
 
SDIO_IT
);

511 
SDIO_CÀ¨ITPídögBô
(
uöt32_t
 
SDIO_IT
);

513 #ifde‡
__˝lu•lus


	@Source/STM32F10x_StdPeriph_Driver/inc/stm32f10x_spi.h

23 #i‚de‡
__STM32F10x_SPI_H


24 
	#__STM32F10x_SPI_H


	)

26 #ifde‡
__˝lu•lus


31 
	~"°m32f10x.h
"

51 
uöt16_t
 
SPI_Dúe˘i⁄
;

54 
uöt16_t
 
SPI_Mode
;

57 
uöt16_t
 
SPI_D©aSize
;

60 
uöt16_t
 
SPI_CPOL
;

63 
uöt16_t
 
SPI_CPHA
;

66 
uöt16_t
 
SPI_NSS
;

70 
uöt16_t
 
SPI_BaudR©ePªsˇÀr
;

76 
uöt16_t
 
SPI_Fú°Bô
;

79 
uöt16_t
 
SPI_CRCPﬁynomül
;

80 }
	tSPI_InôTy≥Def
;

89 
uöt16_t
 
I2S_Mode
;

92 
uöt16_t
 
I2S_Sènd¨d
;

95 
uöt16_t
 
I2S_D©aF‹m©
;

98 
uöt16_t
 
I2S_MCLKOuçut
;

101 
uöt16_t
 
I2S_AudioFªq
;

104 
uöt16_t
 
I2S_CPOL
;

106 }
	tI2S_InôTy≥Def
;

116 
	#IS_SPI_ALL_PERIPH
(
PERIPH
Ë(((PERIPHË=
SPI1
Ë|| \

	)

117 ((
PERIPH
Ë=
SPI2
) || \

118 ((
PERIPH
Ë=
SPI3
))

120 
	#IS_SPI_23_PERIPH
(
PERIPH
Ë(((PERIPHË=
SPI2
Ë|| \

	)

121 ((
PERIPH
Ë=
SPI3
))

127 
	#SPI_Dúe˘i⁄_2Löes_FuŒDu∂ex
 ((
uöt16_t
)0x0000)

	)

128 
	#SPI_Dúe˘i⁄_2Löes_RxO∆y
 ((
uöt16_t
)0x0400)

	)

129 
	#SPI_Dúe˘i⁄_1Löe_Rx
 ((
uöt16_t
)0x8000)

	)

130 
	#SPI_Dúe˘i⁄_1Löe_Tx
 ((
uöt16_t
)0xC000)

	)

131 
	#IS_SPI_DIRECTION_MODE
(
MODE
Ë(((MODEË=
SPI_Dúe˘i⁄_2Löes_FuŒDu∂ex
Ë|| \

	)

132 ((
MODE
Ë=
SPI_Dúe˘i⁄_2Löes_RxO∆y
) || \

133 ((
MODE
Ë=
SPI_Dúe˘i⁄_1Löe_Rx
) || \

134 ((
MODE
Ë=
SPI_Dúe˘i⁄_1Löe_Tx
))

143 
	#SPI_Mode_Ma°î
 ((
uöt16_t
)0x0104)

	)

144 
	#SPI_Mode_Sœve
 ((
uöt16_t
)0x0000)

	)

145 
	#IS_SPI_MODE
(
MODE
Ë(((MODEË=
SPI_Mode_Ma°î
Ë|| \

	)

146 ((
MODE
Ë=
SPI_Mode_Sœve
))

155 
	#SPI_D©aSize_16b
 ((
uöt16_t
)0x0800)

	)

156 
	#SPI_D©aSize_8b
 ((
uöt16_t
)0x0000)

	)

157 
	#IS_SPI_DATASIZE
(
DATASIZE
Ë(((DATASIZEË=
SPI_D©aSize_16b
Ë|| \

	)

158 ((
DATASIZE
Ë=
SPI_D©aSize_8b
))

167 
	#SPI_CPOL_Low
 ((
uöt16_t
)0x0000)

	)

168 
	#SPI_CPOL_High
 ((
uöt16_t
)0x0002)

	)

169 
	#IS_SPI_CPOL
(
CPOL
Ë(((CPOLË=
SPI_CPOL_Low
Ë|| \

	)

170 ((
CPOL
Ë=
SPI_CPOL_High
))

179 
	#SPI_CPHA_1Edge
 ((
uöt16_t
)0x0000)

	)

180 
	#SPI_CPHA_2Edge
 ((
uöt16_t
)0x0001)

	)

181 
	#IS_SPI_CPHA
(
CPHA
Ë(((CPHAË=
SPI_CPHA_1Edge
Ë|| \

	)

182 ((
CPHA
Ë=
SPI_CPHA_2Edge
))

191 
	#SPI_NSS_So·
 ((
uöt16_t
)0x0200)

	)

192 
	#SPI_NSS_H¨d
 ((
uöt16_t
)0x0000)

	)

193 
	#IS_SPI_NSS
(
NSS
Ë(((NSSË=
SPI_NSS_So·
Ë|| \

	)

194 ((
NSS
Ë=
SPI_NSS_H¨d
))

203 
	#SPI_BaudR©ePªsˇÀr_2
 ((
uöt16_t
)0x0000)

	)

204 
	#SPI_BaudR©ePªsˇÀr_4
 ((
uöt16_t
)0x0008)

	)

205 
	#SPI_BaudR©ePªsˇÀr_8
 ((
uöt16_t
)0x0010)

	)

206 
	#SPI_BaudR©ePªsˇÀr_16
 ((
uöt16_t
)0x0018)

	)

207 
	#SPI_BaudR©ePªsˇÀr_32
 ((
uöt16_t
)0x0020)

	)

208 
	#SPI_BaudR©ePªsˇÀr_64
 ((
uöt16_t
)0x0028)

	)

209 
	#SPI_BaudR©ePªsˇÀr_128
 ((
uöt16_t
)0x0030)

	)

210 
	#SPI_BaudR©ePªsˇÀr_256
 ((
uöt16_t
)0x0038)

	)

211 
	#IS_SPI_BAUDRATE_PRESCALER
(
PRESCALER
Ë(((PRESCALERË=
SPI_BaudR©ePªsˇÀr_2
Ë|| \

	)

212 ((
PRESCALER
Ë=
SPI_BaudR©ePªsˇÀr_4
) || \

213 ((
PRESCALER
Ë=
SPI_BaudR©ePªsˇÀr_8
) || \

214 ((
PRESCALER
Ë=
SPI_BaudR©ePªsˇÀr_16
) || \

215 ((
PRESCALER
Ë=
SPI_BaudR©ePªsˇÀr_32
) || \

216 ((
PRESCALER
Ë=
SPI_BaudR©ePªsˇÀr_64
) || \

217 ((
PRESCALER
Ë=
SPI_BaudR©ePªsˇÀr_128
) || \

218 ((
PRESCALER
Ë=
SPI_BaudR©ePªsˇÀr_256
))

227 
	#SPI_Fú°Bô_MSB
 ((
uöt16_t
)0x0000)

	)

228 
	#SPI_Fú°Bô_LSB
 ((
uöt16_t
)0x0080)

	)

229 
	#IS_SPI_FIRST_BIT
(
BIT
Ë(((BITË=
SPI_Fú°Bô_MSB
Ë|| \

	)

230 ((
BIT
Ë=
SPI_Fú°Bô_LSB
))

239 
	#I2S_Mode_SœveTx
 ((
uöt16_t
)0x0000)

	)

240 
	#I2S_Mode_SœveRx
 ((
uöt16_t
)0x0100)

	)

241 
	#I2S_Mode_Ma°îTx
 ((
uöt16_t
)0x0200)

	)

242 
	#I2S_Mode_Ma°îRx
 ((
uöt16_t
)0x0300)

	)

243 
	#IS_I2S_MODE
(
MODE
Ë(((MODEË=
I2S_Mode_SœveTx
Ë|| \

	)

244 ((
MODE
Ë=
I2S_Mode_SœveRx
) || \

245 ((
MODE
Ë=
I2S_Mode_Ma°îTx
) || \

246 ((
MODE
Ë=
I2S_Mode_Ma°îRx
) )

255 
	#I2S_Sènd¨d_Phûlùs
 ((
uöt16_t
)0x0000)

	)

256 
	#I2S_Sènd¨d_MSB
 ((
uöt16_t
)0x0010)

	)

257 
	#I2S_Sènd¨d_LSB
 ((
uöt16_t
)0x0020)

	)

258 
	#I2S_Sènd¨d_PCMSh‹t
 ((
uöt16_t
)0x0030)

	)

259 
	#I2S_Sènd¨d_PCML⁄g
 ((
uöt16_t
)0x00B0)

	)

260 
	#IS_I2S_STANDARD
(
STANDARD
Ë(((STANDARDË=
I2S_Sènd¨d_Phûlùs
Ë|| \

	)

261 ((
STANDARD
Ë=
I2S_Sènd¨d_MSB
) || \

262 ((
STANDARD
Ë=
I2S_Sènd¨d_LSB
) || \

263 ((
STANDARD
Ë=
I2S_Sènd¨d_PCMSh‹t
) || \

264 ((
STANDARD
Ë=
I2S_Sènd¨d_PCML⁄g
))

273 
	#I2S_D©aF‹m©_16b
 ((
uöt16_t
)0x0000)

	)

274 
	#I2S_D©aF‹m©_16bexãnded
 ((
uöt16_t
)0x0001)

	)

275 
	#I2S_D©aF‹m©_24b
 ((
uöt16_t
)0x0003)

	)

276 
	#I2S_D©aF‹m©_32b
 ((
uöt16_t
)0x0005)

	)

277 
	#IS_I2S_DATA_FORMAT
(
FORMAT
Ë(((FORMATË=
I2S_D©aF‹m©_16b
Ë|| \

	)

278 ((
FORMAT
Ë=
I2S_D©aF‹m©_16bexãnded
) || \

279 ((
FORMAT
Ë=
I2S_D©aF‹m©_24b
) || \

280 ((
FORMAT
Ë=
I2S_D©aF‹m©_32b
))

289 
	#I2S_MCLKOuçut_E«bÀ
 ((
uöt16_t
)0x0200)

	)

290 
	#I2S_MCLKOuçut_DißbÀ
 ((
uöt16_t
)0x0000)

	)

291 
	#IS_I2S_MCLK_OUTPUT
(
OUTPUT
Ë(((OUTPUTË=
I2S_MCLKOuçut_E«bÀ
Ë|| \

	)

292 ((
OUTPUT
Ë=
I2S_MCLKOuçut_DißbÀ
))

301 
	#I2S_AudioFªq_96k
 ((
uöt16_t
)96000)

	)

302 
	#I2S_AudioFªq_48k
 ((
uöt16_t
)48000)

	)

303 
	#I2S_AudioFªq_44k
 ((
uöt16_t
)44100)

	)

304 
	#I2S_AudioFªq_32k
 ((
uöt16_t
)32000)

	)

305 
	#I2S_AudioFªq_22k
 ((
uöt16_t
)22050)

	)

306 
	#I2S_AudioFªq_16k
 ((
uöt16_t
)16000)

	)

307 
	#I2S_AudioFªq_11k
 ((
uöt16_t
)11025)

	)

308 
	#I2S_AudioFªq_8k
 ((
uöt16_t
)8000)

	)

309 
	#I2S_AudioFªq_DeÁu…
 ((
uöt16_t
)2)

	)

310 
	#IS_I2S_AUDIO_FREQ
(
FREQ
Ë(((FREQË=
I2S_AudioFªq_96k
Ë|| \

	)

311 ((
FREQ
Ë=
I2S_AudioFªq_48k
) || \

312 ((
FREQ
Ë=
I2S_AudioFªq_44k
) || \

313 ((
FREQ
Ë=
I2S_AudioFªq_32k
) || \

314 ((
FREQ
Ë=
I2S_AudioFªq_22k
) || \

315 ((
FREQ
Ë=
I2S_AudioFªq_16k
) || \

316 ((
FREQ
Ë=
I2S_AudioFªq_11k
) || \

317 ((
FREQ
Ë=
I2S_AudioFªq_8k
) || \

318 ((
FREQ
Ë=
I2S_AudioFªq_DeÁu…
))

327 
	#I2S_CPOL_Low
 ((
uöt16_t
)0x0000)

	)

328 
	#I2S_CPOL_High
 ((
uöt16_t
)0x0008)

	)

329 
	#IS_I2S_CPOL
(
CPOL
Ë(((CPOLË=
I2S_CPOL_Low
Ë|| \

	)

330 ((
CPOL
Ë=
I2S_CPOL_High
))

339 
	#SPI_I2S_DMAReq_Tx
 ((
uöt16_t
)0x0002)

	)

340 
	#SPI_I2S_DMAReq_Rx
 ((
uöt16_t
)0x0001)

	)

341 
	#IS_SPI_I2S_DMAREQ
(
DMAREQ
Ë((((DMAREQË& (
uöt16_t
)0xFFFCË=0x00Ë&& ((DMAREQË!0x00))

	)

350 
	#SPI_NSSI¡î«lSo·_Së
 ((
uöt16_t
)0x0100)

	)

351 
	#SPI_NSSI¡î«lSo·_Re£t
 ((
uöt16_t
)0xFEFF)

	)

352 
	#IS_SPI_NSS_INTERNAL
(
INTERNAL
Ë(((INTERNALË=
SPI_NSSI¡î«lSo·_Së
Ë|| \

	)

353 ((
INTERNAL
Ë=
SPI_NSSI¡î«lSo·_Re£t
))

362 
	#SPI_CRC_Tx
 ((
uöt8_t
)0x00)

	)

363 
	#SPI_CRC_Rx
 ((
uöt8_t
)0x01)

	)

364 
	#IS_SPI_CRC
(
CRC
Ë(((CRCË=
SPI_CRC_Tx
Ë|| ((CRCË=
SPI_CRC_Rx
))

	)

373 
	#SPI_Dúe˘i⁄_Rx
 ((
uöt16_t
)0xBFFF)

	)

374 
	#SPI_Dúe˘i⁄_Tx
 ((
uöt16_t
)0x4000)

	)

375 
	#IS_SPI_DIRECTION
(
DIRECTION
Ë(((DIRECTIONË=
SPI_Dúe˘i⁄_Rx
Ë|| \

	)

376 ((
DIRECTION
Ë=
SPI_Dúe˘i⁄_Tx
))

385 
	#SPI_I2S_IT_TXE
 ((
uöt8_t
)0x71)

	)

386 
	#SPI_I2S_IT_RXNE
 ((
uöt8_t
)0x60)

	)

387 
	#SPI_I2S_IT_ERR
 ((
uöt8_t
)0x50)

	)

388 
	#IS_SPI_I2S_CONFIG_IT
(
IT
Ë(((ITË=
SPI_I2S_IT_TXE
Ë|| \

	)

389 ((
IT
Ë=
SPI_I2S_IT_RXNE
) || \

390 ((
IT
Ë=
SPI_I2S_IT_ERR
))

391 
	#SPI_I2S_IT_OVR
 ((
uöt8_t
)0x56)

	)

392 
	#SPI_IT_MODF
 ((
uöt8_t
)0x55)

	)

393 
	#SPI_IT_CRCERR
 ((
uöt8_t
)0x54)

	)

394 
	#I2S_IT_UDR
 ((
uöt8_t
)0x53)

	)

395 
	#IS_SPI_I2S_CLEAR_IT
(
IT
Ë(((ITË=
SPI_IT_CRCERR
))

	)

396 
	#IS_SPI_I2S_GET_IT
(
IT
Ë(((ITË=
SPI_I2S_IT_RXNE
Ë|| ((ITË=
SPI_I2S_IT_TXE
Ë|| \

	)

397 ((
IT
Ë=
I2S_IT_UDR
Ë|| ((ITË=
SPI_IT_CRCERR
) || \

398 ((
IT
Ë=
SPI_IT_MODF
Ë|| ((ITË=
SPI_I2S_IT_OVR
))

407 
	#SPI_I2S_FLAG_RXNE
 ((
uöt16_t
)0x0001)

	)

408 
	#SPI_I2S_FLAG_TXE
 ((
uöt16_t
)0x0002)

	)

409 
	#I2S_FLAG_CHSIDE
 ((
uöt16_t
)0x0004)

	)

410 
	#I2S_FLAG_UDR
 ((
uöt16_t
)0x0008)

	)

411 
	#SPI_FLAG_CRCERR
 ((
uöt16_t
)0x0010)

	)

412 
	#SPI_FLAG_MODF
 ((
uöt16_t
)0x0020)

	)

413 
	#SPI_I2S_FLAG_OVR
 ((
uöt16_t
)0x0040)

	)

414 
	#SPI_I2S_FLAG_BSY
 ((
uöt16_t
)0x0080)

	)

415 
	#IS_SPI_I2S_CLEAR_FLAG
(
FLAG
Ë(((FLAGË=
SPI_FLAG_CRCERR
))

	)

416 
	#IS_SPI_I2S_GET_FLAG
(
FLAG
Ë(((FLAGË=
SPI_I2S_FLAG_BSY
Ë|| ((FLAGË=
SPI_I2S_FLAG_OVR
Ë|| \

	)

417 ((
FLAG
Ë=
SPI_FLAG_MODF
Ë|| ((FLAGË=
SPI_FLAG_CRCERR
) || \

418 ((
FLAG
Ë=
I2S_FLAG_UDR
Ë|| ((FLAGË=
I2S_FLAG_CHSIDE
) || \

419 ((
FLAG
Ë=
SPI_I2S_FLAG_TXE
Ë|| ((FLAGË=
SPI_I2S_FLAG_RXNE
))

428 
	#IS_SPI_CRC_POLYNOMIAL
(
POLYNOMIAL
Ë((POLYNOMIALË>0x1)

	)

449 
SPI_I2S_DeInô
(
SPI_Ty≥Def
* 
SPIx
);

450 
SPI_Inô
(
SPI_Ty≥Def
* 
SPIx
, 
SPI_InôTy≥Def
* 
SPI_InôSåu˘
);

451 
I2S_Inô
(
SPI_Ty≥Def
* 
SPIx
, 
I2S_InôTy≥Def
* 
I2S_InôSåu˘
);

452 
SPI_Såu˘Inô
(
SPI_InôTy≥Def
* 
SPI_InôSåu˘
);

453 
I2S_Såu˘Inô
(
I2S_InôTy≥Def
* 
I2S_InôSåu˘
);

454 
SPI_Cmd
(
SPI_Ty≥Def
* 
SPIx
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

455 
I2S_Cmd
(
SPI_Ty≥Def
* 
SPIx
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

456 
SPI_I2S_ITC⁄fig
(
SPI_Ty≥Def
* 
SPIx
, 
uöt8_t
 
SPI_I2S_IT
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

457 
SPI_I2S_DMACmd
(
SPI_Ty≥Def
* 
SPIx
, 
uöt16_t
 
SPI_I2S_DMAReq
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

458 
SPI_I2S_SídD©a
(
SPI_Ty≥Def
* 
SPIx
, 
uöt16_t
 
D©a
);

459 
uöt16_t
 
SPI_I2S_Re˚iveD©a
(
SPI_Ty≥Def
* 
SPIx
);

460 
SPI_NSSI¡î«lSo·w¨eC⁄fig
(
SPI_Ty≥Def
* 
SPIx
, 
uöt16_t
 
SPI_NSSI¡î«lSo·
);

461 
SPI_SSOuçutCmd
(
SPI_Ty≥Def
* 
SPIx
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

462 
SPI_D©aSizeC⁄fig
(
SPI_Ty≥Def
* 
SPIx
, 
uöt16_t
 
SPI_D©aSize
);

463 
SPI_TønsmôCRC
(
SPI_Ty≥Def
* 
SPIx
);

464 
SPI_CÆcuœãCRC
(
SPI_Ty≥Def
* 
SPIx
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

465 
uöt16_t
 
SPI_GëCRC
(
SPI_Ty≥Def
* 
SPIx
, 
uöt8_t
 
SPI_CRC
);

466 
uöt16_t
 
SPI_GëCRCPﬁynomül
(
SPI_Ty≥Def
* 
SPIx
);

467 
SPI_BiDúe˘i⁄ÆLöeC⁄fig
(
SPI_Ty≥Def
* 
SPIx
, 
uöt16_t
 
SPI_Dúe˘i⁄
);

468 
FœgSètus
 
SPI_I2S_GëFœgSètus
(
SPI_Ty≥Def
* 
SPIx
, 
uöt16_t
 
SPI_I2S_FLAG
);

469 
SPI_I2S_CÀ¨Fœg
(
SPI_Ty≥Def
* 
SPIx
, 
uöt16_t
 
SPI_I2S_FLAG
);

470 
ITSètus
 
SPI_I2S_GëITSètus
(
SPI_Ty≥Def
* 
SPIx
, 
uöt8_t
 
SPI_I2S_IT
);

471 
SPI_I2S_CÀ¨ITPídögBô
(
SPI_Ty≥Def
* 
SPIx
, 
uöt8_t
 
SPI_I2S_IT
);

473 #ifde‡
__˝lu•lus


	@Source/STM32F10x_StdPeriph_Driver/inc/stm32f10x_tim.h

23 #i‚de‡
__STM32F10x_TIM_H


24 
	#__STM32F10x_TIM_H


	)

26 #ifde‡
__˝lu•lus


31 
	~"°m32f10x.h
"

52 
uöt16_t
 
TIM_PªsˇÀr
;

55 
uöt16_t
 
TIM_Cou¡îMode
;

58 
uöt16_t
 
TIM_Pîiod
;

62 
uöt16_t
 
TIM_ClockDivisi⁄
;

65 
uöt8_t
 
TIM_Rïëôi⁄Cou¡î
;

73 } 
	tTIM_TimeBa£InôTy≥Def
;

81 
uöt16_t
 
TIM_OCMode
;

84 
uöt16_t
 
TIM_OuçutSèã
;

87 
uöt16_t
 
TIM_OuçutNSèã
;

91 
uöt16_t
 
TIM_Pul£
;

94 
uöt16_t
 
TIM_OCPﬁ¨ôy
;

97 
uöt16_t
 
TIM_OCNPﬁ¨ôy
;

101 
uöt16_t
 
TIM_OCIdÀSèã
;

105 
uöt16_t
 
TIM_OCNIdÀSèã
;

108 } 
	tTIM_OCInôTy≥Def
;

117 
uöt16_t
 
TIM_Ch™√l
;

120 
uöt16_t
 
TIM_ICPﬁ¨ôy
;

123 
uöt16_t
 
TIM_ICSñe˘i⁄
;

126 
uöt16_t
 
TIM_ICPªsˇÀr
;

129 
uöt16_t
 
TIM_ICFûãr
;

131 } 
	tTIM_ICInôTy≥Def
;

141 
uöt16_t
 
TIM_OSSRSèã
;

144 
uöt16_t
 
TIM_OSSISèã
;

147 
uöt16_t
 
TIM_LOCKLevñ
;

150 
uöt16_t
 
TIM_DódTime
;

154 
uöt16_t
 
TIM_Bªak
;

157 
uöt16_t
 
TIM_BªakPﬁ¨ôy
;

160 
uöt16_t
 
TIM_Autom©icOuçut
;

162 } 
	tTIM_BDTRInôTy≥Def
;

168 
	#IS_TIM_ALL_PERIPH
(
PERIPH
Ë(((PERIPHË=
TIM1
Ë|| \

	)

169 ((
PERIPH
Ë=
TIM2
) || \

170 ((
PERIPH
Ë=
TIM3
) || \

171 ((
PERIPH
Ë=
TIM4
) || \

172 ((
PERIPH
Ë=
TIM5
) || \

173 ((
PERIPH
Ë=
TIM6
) || \

174 ((
PERIPH
Ë=
TIM7
) || \

175 ((
PERIPH
Ë=
TIM8
))

177 
	#IS_TIM_18_PERIPH
(
PERIPH
Ë(((PERIPHË=
TIM1
Ë|| \

	)

178 ((
PERIPH
Ë=
TIM8
))

180 
	#IS_TIM_123458_PERIPH
(
PERIPH
Ë(((PERIPHË=
TIM1
Ë|| \

	)

181 ((
PERIPH
Ë=
TIM2
) || \

182 ((
PERIPH
Ë=
TIM3
) || \

183 ((
PERIPH
Ë=
TIM4
) || \

184 ((
PERIPH
Ë=
TIM5
) || \

185 ((
PERIPH
Ë=
TIM8
))

194 
	#TIM_OCMode_Timög
 ((
uöt16_t
)0x0000)

	)

195 
	#TIM_OCMode_A˘ive
 ((
uöt16_t
)0x0010)

	)

196 
	#TIM_OCMode_I«˘ive
 ((
uöt16_t
)0x0020)

	)

197 
	#TIM_OCMode_ToggÀ
 ((
uöt16_t
)0x0030)

	)

198 
	#TIM_OCMode_PWM1
 ((
uöt16_t
)0x0060)

	)

199 
	#TIM_OCMode_PWM2
 ((
uöt16_t
)0x0070)

	)

200 
	#IS_TIM_OC_MODE
(
MODE
Ë(((MODEË=
TIM_OCMode_Timög
Ë|| \

	)

201 ((
MODE
Ë=
TIM_OCMode_A˘ive
) || \

202 ((
MODE
Ë=
TIM_OCMode_I«˘ive
) || \

203 ((
MODE
Ë=
TIM_OCMode_ToggÀ
)|| \

204 ((
MODE
Ë=
TIM_OCMode_PWM1
) || \

205 ((
MODE
Ë=
TIM_OCMode_PWM2
))

206 
	#IS_TIM_OCM
(
MODE
Ë(((MODEË=
TIM_OCMode_Timög
Ë|| \

	)

207 ((
MODE
Ë=
TIM_OCMode_A˘ive
) || \

208 ((
MODE
Ë=
TIM_OCMode_I«˘ive
) || \

209 ((
MODE
Ë=
TIM_OCMode_ToggÀ
)|| \

210 ((
MODE
Ë=
TIM_OCMode_PWM1
) || \

211 ((
MODE
Ë=
TIM_OCMode_PWM2
) || \

212 ((
MODE
Ë=
TIM_F‹˚dA˘i⁄_A˘ive
) || \

213 ((
MODE
Ë=
TIM_F‹˚dA˘i⁄_InA˘ive
))

222 
	#TIM_OPMode_SögÀ
 ((
uöt16_t
)0x0008)

	)

223 
	#TIM_OPMode_Rïëôive
 ((
uöt16_t
)0x0000)

	)

224 
	#IS_TIM_OPM_MODE
(
MODE
Ë(((MODEË=
TIM_OPMode_SögÀ
Ë|| \

	)

225 ((
MODE
Ë=
TIM_OPMode_Rïëôive
))

234 
	#TIM_Ch™√l_1
 ((
uöt16_t
)0x0000)

	)

235 
	#TIM_Ch™√l_2
 ((
uöt16_t
)0x0004)

	)

236 
	#TIM_Ch™√l_3
 ((
uöt16_t
)0x0008)

	)

237 
	#TIM_Ch™√l_4
 ((
uöt16_t
)0x000C)

	)

238 
	#IS_TIM_CHANNEL
(
CHANNEL
Ë(((CHANNELË=
TIM_Ch™√l_1
Ë|| \

	)

239 ((
CHANNEL
Ë=
TIM_Ch™√l_2
) || \

240 ((
CHANNEL
Ë=
TIM_Ch™√l_3
) || \

241 ((
CHANNEL
Ë=
TIM_Ch™√l_4
))

242 
	#IS_TIM_PWMI_CHANNEL
(
CHANNEL
Ë(((CHANNELË=
TIM_Ch™√l_1
Ë|| \

	)

243 ((
CHANNEL
Ë=
TIM_Ch™√l_2
))

244 
	#IS_TIM_COMPLEMENTARY_CHANNEL
(
CHANNEL
Ë(((CHANNELË=
TIM_Ch™√l_1
Ë|| \

	)

245 ((
CHANNEL
Ë=
TIM_Ch™√l_2
) || \

246 ((
CHANNEL
Ë=
TIM_Ch™√l_3
))

255 
	#TIM_CKD_DIV1
 ((
uöt16_t
)0x0000)

	)

256 
	#TIM_CKD_DIV2
 ((
uöt16_t
)0x0100)

	)

257 
	#TIM_CKD_DIV4
 ((
uöt16_t
)0x0200)

	)

258 
	#IS_TIM_CKD_DIV
(
DIV
Ë(((DIVË=
TIM_CKD_DIV1
Ë|| \

	)

259 ((
DIV
Ë=
TIM_CKD_DIV2
) || \

260 ((
DIV
Ë=
TIM_CKD_DIV4
))

269 
	#TIM_Cou¡îMode_Up
 ((
uöt16_t
)0x0000)

	)

270 
	#TIM_Cou¡îMode_Down
 ((
uöt16_t
)0x0010)

	)

271 
	#TIM_Cou¡îMode_CíãrAlig√d1
 ((
uöt16_t
)0x0020)

	)

272 
	#TIM_Cou¡îMode_CíãrAlig√d2
 ((
uöt16_t
)0x0040)

	)

273 
	#TIM_Cou¡îMode_CíãrAlig√d3
 ((
uöt16_t
)0x0060)

	)

274 
	#IS_TIM_COUNTER_MODE
(
MODE
Ë(((MODEË=
TIM_Cou¡îMode_Up
Ë|| \

	)

275 ((
MODE
Ë=
TIM_Cou¡îMode_Down
) || \

276 ((
MODE
Ë=
TIM_Cou¡îMode_CíãrAlig√d1
) || \

277 ((
MODE
Ë=
TIM_Cou¡îMode_CíãrAlig√d2
) || \

278 ((
MODE
Ë=
TIM_Cou¡îMode_CíãrAlig√d3
))

287 
	#TIM_OCPﬁ¨ôy_High
 ((
uöt16_t
)0x0000)

	)

288 
	#TIM_OCPﬁ¨ôy_Low
 ((
uöt16_t
)0x0002)

	)

289 
	#IS_TIM_OC_POLARITY
(
POLARITY
Ë(((POLARITYË=
TIM_OCPﬁ¨ôy_High
Ë|| \

	)

290 ((
POLARITY
Ë=
TIM_OCPﬁ¨ôy_Low
))

299 
	#TIM_OCNPﬁ¨ôy_High
 ((
uöt16_t
)0x0000)

	)

300 
	#TIM_OCNPﬁ¨ôy_Low
 ((
uöt16_t
)0x0008)

	)

301 
	#IS_TIM_OCN_POLARITY
(
POLARITY
Ë(((POLARITYË=
TIM_OCNPﬁ¨ôy_High
Ë|| \

	)

302 ((
POLARITY
Ë=
TIM_OCNPﬁ¨ôy_Low
))

311 
	#TIM_OuçutSèã_DißbÀ
 ((
uöt16_t
)0x0000)

	)

312 
	#TIM_OuçutSèã_E«bÀ
 ((
uöt16_t
)0x0001)

	)

313 
	#IS_TIM_OUTPUT_STATE
(
STATE
Ë(((STATEË=
TIM_OuçutSèã_DißbÀ
Ë|| \

	)

314 ((
STATE
Ë=
TIM_OuçutSèã_E«bÀ
))

323 
	#TIM_OuçutNSèã_DißbÀ
 ((
uöt16_t
)0x0000)

	)

324 
	#TIM_OuçutNSèã_E«bÀ
 ((
uöt16_t
)0x0004)

	)

325 
	#IS_TIM_OUTPUTN_STATE
(
STATE
Ë(((STATEË=
TIM_OuçutNSèã_DißbÀ
Ë|| \

	)

326 ((
STATE
Ë=
TIM_OuçutNSèã_E«bÀ
))

335 
	#TIM_CCx_E«bÀ
 ((
uöt16_t
)0x0001)

	)

336 
	#TIM_CCx_DißbÀ
 ((
uöt16_t
)0x0000)

	)

337 
	#IS_TIM_CCX
(
CCX
Ë(((CCXË=
TIM_CCx_E«bÀ
Ë|| \

	)

338 ((
CCX
Ë=
TIM_CCx_DißbÀ
))

347 
	#TIM_CCxN_E«bÀ
 ((
uöt16_t
)0x0004)

	)

348 
	#TIM_CCxN_DißbÀ
 ((
uöt16_t
)0x0000)

	)

349 
	#IS_TIM_CCXN
(
CCXN
Ë(((CCXNË=
TIM_CCxN_E«bÀ
Ë|| \

	)

350 ((
CCXN
Ë=
TIM_CCxN_DißbÀ
))

359 
	#TIM_Bªak_E«bÀ
 ((
uöt16_t
)0x1000)

	)

360 
	#TIM_Bªak_DißbÀ
 ((
uöt16_t
)0x0000)

	)

361 
	#IS_TIM_BREAK_STATE
(
STATE
Ë(((STATEË=
TIM_Bªak_E«bÀ
Ë|| \

	)

362 ((
STATE
Ë=
TIM_Bªak_DißbÀ
))

371 
	#TIM_BªakPﬁ¨ôy_Low
 ((
uöt16_t
)0x0000)

	)

372 
	#TIM_BªakPﬁ¨ôy_High
 ((
uöt16_t
)0x2000)

	)

373 
	#IS_TIM_BREAK_POLARITY
(
POLARITY
Ë(((POLARITYË=
TIM_BªakPﬁ¨ôy_Low
Ë|| \

	)

374 ((
POLARITY
Ë=
TIM_BªakPﬁ¨ôy_High
))

383 
	#TIM_Autom©icOuçut_E«bÀ
 ((
uöt16_t
)0x4000)

	)

384 
	#TIM_Autom©icOuçut_DißbÀ
 ((
uöt16_t
)0x0000)

	)

385 
	#IS_TIM_AUTOMATIC_OUTPUT_STATE
(
STATE
Ë(((STATEË=
TIM_Autom©icOuçut_E«bÀ
Ë|| \

	)

386 ((
STATE
Ë=
TIM_Autom©icOuçut_DißbÀ
))

395 
	#TIM_LOCKLevñ_OFF
 ((
uöt16_t
)0x0000)

	)

396 
	#TIM_LOCKLevñ_1
 ((
uöt16_t
)0x0100)

	)

397 
	#TIM_LOCKLevñ_2
 ((
uöt16_t
)0x0200)

	)

398 
	#TIM_LOCKLevñ_3
 ((
uöt16_t
)0x0300)

	)

399 
	#IS_TIM_LOCK_LEVEL
(
LEVEL
Ë(((LEVELË=
TIM_LOCKLevñ_OFF
Ë|| \

	)

400 ((
LEVEL
Ë=
TIM_LOCKLevñ_1
) || \

401 ((
LEVEL
Ë=
TIM_LOCKLevñ_2
) || \

402 ((
LEVEL
Ë=
TIM_LOCKLevñ_3
))

411 
	#TIM_OSSISèã_E«bÀ
 ((
uöt16_t
)0x0400)

	)

412 
	#TIM_OSSISèã_DißbÀ
 ((
uöt16_t
)0x0000)

	)

413 
	#IS_TIM_OSSI_STATE
(
STATE
Ë(((STATEË=
TIM_OSSISèã_E«bÀ
Ë|| \

	)

414 ((
STATE
Ë=
TIM_OSSISèã_DißbÀ
))

423 
	#TIM_OSSRSèã_E«bÀ
 ((
uöt16_t
)0x0800)

	)

424 
	#TIM_OSSRSèã_DißbÀ
 ((
uöt16_t
)0x0000)

	)

425 
	#IS_TIM_OSSR_STATE
(
STATE
Ë(((STATEË=
TIM_OSSRSèã_E«bÀ
Ë|| \

	)

426 ((
STATE
Ë=
TIM_OSSRSèã_DißbÀ
))

435 
	#TIM_OCIdÀSèã_Së
 ((
uöt16_t
)0x0100)

	)

436 
	#TIM_OCIdÀSèã_Re£t
 ((
uöt16_t
)0x0000)

	)

437 
	#IS_TIM_OCIDLE_STATE
(
STATE
Ë(((STATEË=
TIM_OCIdÀSèã_Së
Ë|| \

	)

438 ((
STATE
Ë=
TIM_OCIdÀSèã_Re£t
))

447 
	#TIM_OCNIdÀSèã_Së
 ((
uöt16_t
)0x0200)

	)

448 
	#TIM_OCNIdÀSèã_Re£t
 ((
uöt16_t
)0x0000)

	)

449 
	#IS_TIM_OCNIDLE_STATE
(
STATE
Ë(((STATEË=
TIM_OCNIdÀSèã_Së
Ë|| \

	)

450 ((
STATE
Ë=
TIM_OCNIdÀSèã_Re£t
))

459 
	#TIM_ICPﬁ¨ôy_Risög
 ((
uöt16_t
)0x0000)

	)

460 
	#TIM_ICPﬁ¨ôy_FÆlög
 ((
uöt16_t
)0x0002)

	)

461 
	#IS_TIM_IC_POLARITY
(
POLARITY
Ë(((POLARITYË=
TIM_ICPﬁ¨ôy_Risög
Ë|| \

	)

462 ((
POLARITY
Ë=
TIM_ICPﬁ¨ôy_FÆlög
))

471 
	#TIM_ICSñe˘i⁄_Dúe˘TI
 ((
uöt16_t
)0x0001Ë

	)

473 
	#TIM_ICSñe˘i⁄_Indúe˘TI
 ((
uöt16_t
)0x0002Ë

	)

475 
	#TIM_ICSñe˘i⁄_TRC
 ((
uöt16_t
)0x0003Ë

	)

476 
	#IS_TIM_IC_SELECTION
(
SELECTION
Ë(((SELECTIONË=
TIM_ICSñe˘i⁄_Dúe˘TI
Ë|| \

	)

477 ((
SELECTION
Ë=
TIM_ICSñe˘i⁄_Indúe˘TI
) || \

478 ((
SELECTION
Ë=
TIM_ICSñe˘i⁄_TRC
))

487 
	#TIM_ICPSC_DIV1
 ((
uöt16_t
)0x0000Ë

	)

488 
	#TIM_ICPSC_DIV2
 ((
uöt16_t
)0x0004Ë

	)

489 
	#TIM_ICPSC_DIV4
 ((
uöt16_t
)0x0008Ë

	)

490 
	#TIM_ICPSC_DIV8
 ((
uöt16_t
)0x000CË

	)

491 
	#IS_TIM_IC_PRESCALER
(
PRESCALER
Ë(((PRESCALERË=
TIM_ICPSC_DIV1
Ë|| \

	)

492 ((
PRESCALER
Ë=
TIM_ICPSC_DIV2
) || \

493 ((
PRESCALER
Ë=
TIM_ICPSC_DIV4
) || \

494 ((
PRESCALER
Ë=
TIM_ICPSC_DIV8
))

503 
	#TIM_IT_Upd©e
 ((
uöt16_t
)0x0001)

	)

504 
	#TIM_IT_CC1
 ((
uöt16_t
)0x0002)

	)

505 
	#TIM_IT_CC2
 ((
uöt16_t
)0x0004)

	)

506 
	#TIM_IT_CC3
 ((
uöt16_t
)0x0008)

	)

507 
	#TIM_IT_CC4
 ((
uöt16_t
)0x0010)

	)

508 
	#TIM_IT_COM
 ((
uöt16_t
)0x0020)

	)

509 
	#TIM_IT_Triggî
 ((
uöt16_t
)0x0040)

	)

510 
	#TIM_IT_Bªak
 ((
uöt16_t
)0x0080)

	)

511 
	#IS_TIM_IT
(
IT
Ë((((ITË& (
uöt16_t
)0xFF00Ë=0x0000Ë&& ((ITË!0x0000))

	)

513 
	#IS_TIM_GET_IT
(
IT
Ë(((ITË=
TIM_IT_Upd©e
Ë|| \

	)

514 ((
IT
Ë=
TIM_IT_CC1
) || \

515 ((
IT
Ë=
TIM_IT_CC2
) || \

516 ((
IT
Ë=
TIM_IT_CC3
) || \

517 ((
IT
Ë=
TIM_IT_CC4
) || \

518 ((
IT
Ë=
TIM_IT_COM
) || \

519 ((
IT
Ë=
TIM_IT_Triggî
) || \

520 ((
IT
Ë=
TIM_IT_Bªak
))

529 
	#TIM_DMABa£_CR1
 ((
uöt16_t
)0x0000)

	)

530 
	#TIM_DMABa£_CR2
 ((
uöt16_t
)0x0001)

	)

531 
	#TIM_DMABa£_SMCR
 ((
uöt16_t
)0x0002)

	)

532 
	#TIM_DMABa£_DIER
 ((
uöt16_t
)0x0003)

	)

533 
	#TIM_DMABa£_SR
 ((
uöt16_t
)0x0004)

	)

534 
	#TIM_DMABa£_EGR
 ((
uöt16_t
)0x0005)

	)

535 
	#TIM_DMABa£_CCMR1
 ((
uöt16_t
)0x0006)

	)

536 
	#TIM_DMABa£_CCMR2
 ((
uöt16_t
)0x0007)

	)

537 
	#TIM_DMABa£_CCER
 ((
uöt16_t
)0x0008)

	)

538 
	#TIM_DMABa£_CNT
 ((
uöt16_t
)0x0009)

	)

539 
	#TIM_DMABa£_PSC
 ((
uöt16_t
)0x000A)

	)

540 
	#TIM_DMABa£_ARR
 ((
uöt16_t
)0x000B)

	)

541 
	#TIM_DMABa£_RCR
 ((
uöt16_t
)0x000C)

	)

542 
	#TIM_DMABa£_CCR1
 ((
uöt16_t
)0x000D)

	)

543 
	#TIM_DMABa£_CCR2
 ((
uöt16_t
)0x000E)

	)

544 
	#TIM_DMABa£_CCR3
 ((
uöt16_t
)0x000F)

	)

545 
	#TIM_DMABa£_CCR4
 ((
uöt16_t
)0x0010)

	)

546 
	#TIM_DMABa£_BDTR
 ((
uöt16_t
)0x0011)

	)

547 
	#TIM_DMABa£_DCR
 ((
uöt16_t
)0x0012)

	)

548 
	#IS_TIM_DMA_BASE
(
BASE
Ë(((BASEË=
TIM_DMABa£_CR1
Ë|| \

	)

549 ((
BASE
Ë=
TIM_DMABa£_CR2
) || \

550 ((
BASE
Ë=
TIM_DMABa£_SMCR
) || \

551 ((
BASE
Ë=
TIM_DMABa£_DIER
) || \

552 ((
BASE
Ë=
TIM_DMABa£_SR
) || \

553 ((
BASE
Ë=
TIM_DMABa£_EGR
) || \

554 ((
BASE
Ë=
TIM_DMABa£_CCMR1
) || \

555 ((
BASE
Ë=
TIM_DMABa£_CCMR2
) || \

556 ((
BASE
Ë=
TIM_DMABa£_CCER
) || \

557 ((
BASE
Ë=
TIM_DMABa£_CNT
) || \

558 ((
BASE
Ë=
TIM_DMABa£_PSC
) || \

559 ((
BASE
Ë=
TIM_DMABa£_ARR
) || \

560 ((
BASE
Ë=
TIM_DMABa£_RCR
) || \

561 ((
BASE
Ë=
TIM_DMABa£_CCR1
) || \

562 ((
BASE
Ë=
TIM_DMABa£_CCR2
) || \

563 ((
BASE
Ë=
TIM_DMABa£_CCR3
) || \

564 ((
BASE
Ë=
TIM_DMABa£_CCR4
) || \

565 ((
BASE
Ë=
TIM_DMABa£_BDTR
) || \

566 ((
BASE
Ë=
TIM_DMABa£_DCR
))

575 
	#TIM_DMABur°Lígth_1Byã
 ((
uöt16_t
)0x0000)

	)

576 
	#TIM_DMABur°Lígth_2Byãs
 ((
uöt16_t
)0x0100)

	)

577 
	#TIM_DMABur°Lígth_3Byãs
 ((
uöt16_t
)0x0200)

	)

578 
	#TIM_DMABur°Lígth_4Byãs
 ((
uöt16_t
)0x0300)

	)

579 
	#TIM_DMABur°Lígth_5Byãs
 ((
uöt16_t
)0x0400)

	)

580 
	#TIM_DMABur°Lígth_6Byãs
 ((
uöt16_t
)0x0500)

	)

581 
	#TIM_DMABur°Lígth_7Byãs
 ((
uöt16_t
)0x0600)

	)

582 
	#TIM_DMABur°Lígth_8Byãs
 ((
uöt16_t
)0x0700)

	)

583 
	#TIM_DMABur°Lígth_9Byãs
 ((
uöt16_t
)0x0800)

	)

584 
	#TIM_DMABur°Lígth_10Byãs
 ((
uöt16_t
)0x0900)

	)

585 
	#TIM_DMABur°Lígth_11Byãs
 ((
uöt16_t
)0x0A00)

	)

586 
	#TIM_DMABur°Lígth_12Byãs
 ((
uöt16_t
)0x0B00)

	)

587 
	#TIM_DMABur°Lígth_13Byãs
 ((
uöt16_t
)0x0C00)

	)

588 
	#TIM_DMABur°Lígth_14Byãs
 ((
uöt16_t
)0x0D00)

	)

589 
	#TIM_DMABur°Lígth_15Byãs
 ((
uöt16_t
)0x0E00)

	)

590 
	#TIM_DMABur°Lígth_16Byãs
 ((
uöt16_t
)0x0F00)

	)

591 
	#TIM_DMABur°Lígth_17Byãs
 ((
uöt16_t
)0x1000)

	)

592 
	#TIM_DMABur°Lígth_18Byãs
 ((
uöt16_t
)0x1100)

	)

593 
	#IS_TIM_DMA_LENGTH
(
LENGTH
Ë(((LENGTHË=
TIM_DMABur°Lígth_1Byã
Ë|| \

	)

594 ((
LENGTH
Ë=
TIM_DMABur°Lígth_2Byãs
) || \

595 ((
LENGTH
Ë=
TIM_DMABur°Lígth_3Byãs
) || \

596 ((
LENGTH
Ë=
TIM_DMABur°Lígth_4Byãs
) || \

597 ((
LENGTH
Ë=
TIM_DMABur°Lígth_5Byãs
) || \

598 ((
LENGTH
Ë=
TIM_DMABur°Lígth_6Byãs
) || \

599 ((
LENGTH
Ë=
TIM_DMABur°Lígth_7Byãs
) || \

600 ((
LENGTH
Ë=
TIM_DMABur°Lígth_8Byãs
) || \

601 ((
LENGTH
Ë=
TIM_DMABur°Lígth_9Byãs
) || \

602 ((
LENGTH
Ë=
TIM_DMABur°Lígth_10Byãs
) || \

603 ((
LENGTH
Ë=
TIM_DMABur°Lígth_11Byãs
) || \

604 ((
LENGTH
Ë=
TIM_DMABur°Lígth_12Byãs
) || \

605 ((
LENGTH
Ë=
TIM_DMABur°Lígth_13Byãs
) || \

606 ((
LENGTH
Ë=
TIM_DMABur°Lígth_14Byãs
) || \

607 ((
LENGTH
Ë=
TIM_DMABur°Lígth_15Byãs
) || \

608 ((
LENGTH
Ë=
TIM_DMABur°Lígth_16Byãs
) || \

609 ((
LENGTH
Ë=
TIM_DMABur°Lígth_17Byãs
) || \

610 ((
LENGTH
Ë=
TIM_DMABur°Lígth_18Byãs
))

619 
	#TIM_DMA_Upd©e
 ((
uöt16_t
)0x0100)

	)

620 
	#TIM_DMA_CC1
 ((
uöt16_t
)0x0200)

	)

621 
	#TIM_DMA_CC2
 ((
uöt16_t
)0x0400)

	)

622 
	#TIM_DMA_CC3
 ((
uöt16_t
)0x0800)

	)

623 
	#TIM_DMA_CC4
 ((
uöt16_t
)0x1000)

	)

624 
	#TIM_DMA_COM
 ((
uöt16_t
)0x2000)

	)

625 
	#TIM_DMA_Triggî
 ((
uöt16_t
)0x4000)

	)

626 
	#IS_TIM_DMA_SOURCE
(
SOURCE
Ë((((SOURCEË& (
uöt16_t
)0x80FFË=0x0000Ë&& ((SOURCEË!0x0000))

	)

636 
	#TIM_ExtTRGPSC_OFF
 ((
uöt16_t
)0x0000)

	)

637 
	#TIM_ExtTRGPSC_DIV2
 ((
uöt16_t
)0x1000)

	)

638 
	#TIM_ExtTRGPSC_DIV4
 ((
uöt16_t
)0x2000)

	)

639 
	#TIM_ExtTRGPSC_DIV8
 ((
uöt16_t
)0x3000)

	)

640 
	#IS_TIM_EXT_PRESCALER
(
PRESCALER
Ë(((PRESCALERË=
TIM_ExtTRGPSC_OFF
Ë|| \

	)

641 ((
PRESCALER
Ë=
TIM_ExtTRGPSC_DIV2
) || \

642 ((
PRESCALER
Ë=
TIM_ExtTRGPSC_DIV4
) || \

643 ((
PRESCALER
Ë=
TIM_ExtTRGPSC_DIV8
))

652 
	#TIM_TS_ITR0
 ((
uöt16_t
)0x0000)

	)

653 
	#TIM_TS_ITR1
 ((
uöt16_t
)0x0010)

	)

654 
	#TIM_TS_ITR2
 ((
uöt16_t
)0x0020)

	)

655 
	#TIM_TS_ITR3
 ((
uöt16_t
)0x0030)

	)

656 
	#TIM_TS_TI1F_ED
 ((
uöt16_t
)0x0040)

	)

657 
	#TIM_TS_TI1FP1
 ((
uöt16_t
)0x0050)

	)

658 
	#TIM_TS_TI2FP2
 ((
uöt16_t
)0x0060)

	)

659 
	#TIM_TS_ETRF
 ((
uöt16_t
)0x0070)

	)

660 
	#IS_TIM_TRIGGER_SELECTION
(
SELECTION
Ë(((SELECTIONË=
TIM_TS_ITR0
Ë|| \

	)

661 ((
SELECTION
Ë=
TIM_TS_ITR1
) || \

662 ((
SELECTION
Ë=
TIM_TS_ITR2
) || \

663 ((
SELECTION
Ë=
TIM_TS_ITR3
) || \

664 ((
SELECTION
Ë=
TIM_TS_TI1F_ED
) || \

665 ((
SELECTION
Ë=
TIM_TS_TI1FP1
) || \

666 ((
SELECTION
Ë=
TIM_TS_TI2FP2
) || \

667 ((
SELECTION
Ë=
TIM_TS_ETRF
))

668 
	#IS_TIM_INTERNAL_TRIGGER_SELECTION
(
SELECTION
Ë(((SELECTIONË=
TIM_TS_ITR0
Ë|| \

	)

669 ((
SELECTION
Ë=
TIM_TS_ITR1
) || \

670 ((
SELECTION
Ë=
TIM_TS_ITR2
) || \

671 ((
SELECTION
Ë=
TIM_TS_ITR3
))

680 
	#TIM_TIxExã∫ÆCLK1Sour˚_TI1
 ((
uöt16_t
)0x0050)

	)

681 
	#TIM_TIxExã∫ÆCLK1Sour˚_TI2
 ((
uöt16_t
)0x0060)

	)

682 
	#TIM_TIxExã∫ÆCLK1Sour˚_TI1ED
 ((
uöt16_t
)0x0040)

	)

683 
	#IS_TIM_TIXCLK_SOURCE
(
SOURCE
Ë(((SOURCEË=
TIM_TIxExã∫ÆCLK1Sour˚_TI1
Ë|| \

	)

684 ((
SOURCE
Ë=
TIM_TIxExã∫ÆCLK1Sour˚_TI2
) || \

685 ((
SOURCE
Ë=
TIM_TIxExã∫ÆCLK1Sour˚_TI1ED
))

693 
	#TIM_ExtTRGPﬁ¨ôy_Invîãd
 ((
uöt16_t
)0x8000)

	)

694 
	#TIM_ExtTRGPﬁ¨ôy_N⁄Invîãd
 ((
uöt16_t
)0x0000)

	)

695 
	#IS_TIM_EXT_POLARITY
(
POLARITY
Ë(((POLARITYË=
TIM_ExtTRGPﬁ¨ôy_Invîãd
Ë|| \

	)

696 ((
POLARITY
Ë=
TIM_ExtTRGPﬁ¨ôy_N⁄Invîãd
))

705 
	#TIM_PSCRñﬂdMode_Upd©e
 ((
uöt16_t
)0x0000)

	)

706 
	#TIM_PSCRñﬂdMode_Immedüã
 ((
uöt16_t
)0x0001)

	)

707 
	#IS_TIM_PRESCALER_RELOAD
(
RELOAD
Ë(((RELOADË=
TIM_PSCRñﬂdMode_Upd©e
Ë|| \

	)

708 ((
RELOAD
Ë=
TIM_PSCRñﬂdMode_Immedüã
))

717 
	#TIM_F‹˚dA˘i⁄_A˘ive
 ((
uöt16_t
)0x0050)

	)

718 
	#TIM_F‹˚dA˘i⁄_InA˘ive
 ((
uöt16_t
)0x0040)

	)

719 
	#IS_TIM_FORCED_ACTION
(
ACTION
Ë(((ACTIONË=
TIM_F‹˚dA˘i⁄_A˘ive
Ë|| \

	)

720 ((
ACTION
Ë=
TIM_F‹˚dA˘i⁄_InA˘ive
))

729 
	#TIM_EncodîMode_TI1
 ((
uöt16_t
)0x0001)

	)

730 
	#TIM_EncodîMode_TI2
 ((
uöt16_t
)0x0002)

	)

731 
	#TIM_EncodîMode_TI12
 ((
uöt16_t
)0x0003)

	)

732 
	#IS_TIM_ENCODER_MODE
(
MODE
Ë(((MODEË=
TIM_EncodîMode_TI1
Ë|| \

	)

733 ((
MODE
Ë=
TIM_EncodîMode_TI2
) || \

734 ((
MODE
Ë=
TIM_EncodîMode_TI12
))

744 
	#TIM_EvítSour˚_Upd©e
 ((
uöt16_t
)0x0001)

	)

745 
	#TIM_EvítSour˚_CC1
 ((
uöt16_t
)0x0002)

	)

746 
	#TIM_EvítSour˚_CC2
 ((
uöt16_t
)0x0004)

	)

747 
	#TIM_EvítSour˚_CC3
 ((
uöt16_t
)0x0008)

	)

748 
	#TIM_EvítSour˚_CC4
 ((
uöt16_t
)0x0010)

	)

749 
	#TIM_EvítSour˚_COM
 ((
uöt16_t
)0x0020)

	)

750 
	#TIM_EvítSour˚_Triggî
 ((
uöt16_t
)0x0040)

	)

751 
	#TIM_EvítSour˚_Bªak
 ((
uöt16_t
)0x0080)

	)

752 
	#IS_TIM_EVENT_SOURCE
(
SOURCE
Ë((((SOURCEË& (
uöt16_t
)0xFF00Ë=0x0000Ë&& ((SOURCEË!0x0000))

	)

762 
	#TIM_Upd©eSour˚_GlobÆ
 ((
uöt16_t
)0x0000Ë

	)

765 
	#TIM_Upd©eSour˚_Reguœr
 ((
uöt16_t
)0x0001Ë

	)

766 
	#IS_TIM_UPDATE_SOURCE
(
SOURCE
Ë(((SOURCEË=
TIM_Upd©eSour˚_GlobÆ
Ë|| \

	)

767 ((
SOURCE
Ë=
TIM_Upd©eSour˚_Reguœr
))

776 
	#TIM_OCPªlﬂd_E«bÀ
 ((
uöt16_t
)0x0008)

	)

777 
	#TIM_OCPªlﬂd_DißbÀ
 ((
uöt16_t
)0x0000)

	)

778 
	#IS_TIM_OCPRELOAD_STATE
(
STATE
Ë(((STATEË=
TIM_OCPªlﬂd_E«bÀ
Ë|| \

	)

779 ((
STATE
Ë=
TIM_OCPªlﬂd_DißbÀ
))

788 
	#TIM_OCFa°_E«bÀ
 ((
uöt16_t
)0x0004)

	)

789 
	#TIM_OCFa°_DißbÀ
 ((
uöt16_t
)0x0000)

	)

790 
	#IS_TIM_OCFAST_STATE
(
STATE
Ë(((STATEË=
TIM_OCFa°_E«bÀ
Ë|| \

	)

791 ((
STATE
Ë=
TIM_OCFa°_DißbÀ
))

801 
	#TIM_OCCÀ¨_E«bÀ
 ((
uöt16_t
)0x0080)

	)

802 
	#TIM_OCCÀ¨_DißbÀ
 ((
uöt16_t
)0x0000)

	)

803 
	#IS_TIM_OCCLEAR_STATE
(
STATE
Ë(((STATEË=
TIM_OCCÀ¨_E«bÀ
Ë|| \

	)

804 ((
STATE
Ë=
TIM_OCCÀ¨_DißbÀ
))

813 
	#TIM_TRGOSour˚_Re£t
 ((
uöt16_t
)0x0000)

	)

814 
	#TIM_TRGOSour˚_E«bÀ
 ((
uöt16_t
)0x0010)

	)

815 
	#TIM_TRGOSour˚_Upd©e
 ((
uöt16_t
)0x0020)

	)

816 
	#TIM_TRGOSour˚_OC1
 ((
uöt16_t
)0x0030)

	)

817 
	#TIM_TRGOSour˚_OC1Ref
 ((
uöt16_t
)0x0040)

	)

818 
	#TIM_TRGOSour˚_OC2Ref
 ((
uöt16_t
)0x0050)

	)

819 
	#TIM_TRGOSour˚_OC3Ref
 ((
uöt16_t
)0x0060)

	)

820 
	#TIM_TRGOSour˚_OC4Ref
 ((
uöt16_t
)0x0070)

	)

821 
	#IS_TIM_TRGO_SOURCE
(
SOURCE
Ë(((SOURCEË=
TIM_TRGOSour˚_Re£t
Ë|| \

	)

822 ((
SOURCE
Ë=
TIM_TRGOSour˚_E«bÀ
) || \

823 ((
SOURCE
Ë=
TIM_TRGOSour˚_Upd©e
) || \

824 ((
SOURCE
Ë=
TIM_TRGOSour˚_OC1
) || \

825 ((
SOURCE
Ë=
TIM_TRGOSour˚_OC1Ref
) || \

826 ((
SOURCE
Ë=
TIM_TRGOSour˚_OC2Ref
) || \

827 ((
SOURCE
Ë=
TIM_TRGOSour˚_OC3Ref
) || \

828 ((
SOURCE
Ë=
TIM_TRGOSour˚_OC4Ref
))

837 
	#TIM_SœveMode_Re£t
 ((
uöt16_t
)0x0004)

	)

838 
	#TIM_SœveMode_G©ed
 ((
uöt16_t
)0x0005)

	)

839 
	#TIM_SœveMode_Triggî
 ((
uöt16_t
)0x0006)

	)

840 
	#TIM_SœveMode_Exã∫Æ1
 ((
uöt16_t
)0x0007)

	)

841 
	#IS_TIM_SLAVE_MODE
(
MODE
Ë(((MODEË=
TIM_SœveMode_Re£t
Ë|| \

	)

842 ((
MODE
Ë=
TIM_SœveMode_G©ed
) || \

843 ((
MODE
Ë=
TIM_SœveMode_Triggî
) || \

844 ((
MODE
Ë=
TIM_SœveMode_Exã∫Æ1
))

853 
	#TIM_Ma°îSœveMode_E«bÀ
 ((
uöt16_t
)0x0080)

	)

854 
	#TIM_Ma°îSœveMode_DißbÀ
 ((
uöt16_t
)0x0000)

	)

855 
	#IS_TIM_MSM_STATE
(
STATE
Ë(((STATEË=
TIM_Ma°îSœveMode_E«bÀ
Ë|| \

	)

856 ((
STATE
Ë=
TIM_Ma°îSœveMode_DißbÀ
))

865 
	#TIM_FLAG_Upd©e
 ((
uöt16_t
)0x0001)

	)

866 
	#TIM_FLAG_CC1
 ((
uöt16_t
)0x0002)

	)

867 
	#TIM_FLAG_CC2
 ((
uöt16_t
)0x0004)

	)

868 
	#TIM_FLAG_CC3
 ((
uöt16_t
)0x0008)

	)

869 
	#TIM_FLAG_CC4
 ((
uöt16_t
)0x0010)

	)

870 
	#TIM_FLAG_COM
 ((
uöt16_t
)0x0020)

	)

871 
	#TIM_FLAG_Triggî
 ((
uöt16_t
)0x0040)

	)

872 
	#TIM_FLAG_Bªak
 ((
uöt16_t
)0x0080)

	)

873 
	#TIM_FLAG_CC1OF
 ((
uöt16_t
)0x0200)

	)

874 
	#TIM_FLAG_CC2OF
 ((
uöt16_t
)0x0400)

	)

875 
	#TIM_FLAG_CC3OF
 ((
uöt16_t
)0x0800)

	)

876 
	#TIM_FLAG_CC4OF
 ((
uöt16_t
)0x1000)

	)

877 
	#IS_TIM_GET_FLAG
(
FLAG
Ë(((FLAGË=
TIM_FLAG_Upd©e
Ë|| \

	)

878 ((
FLAG
Ë=
TIM_FLAG_CC1
) || \

879 ((
FLAG
Ë=
TIM_FLAG_CC2
) || \

880 ((
FLAG
Ë=
TIM_FLAG_CC3
) || \

881 ((
FLAG
Ë=
TIM_FLAG_CC4
) || \

882 ((
FLAG
Ë=
TIM_FLAG_COM
) || \

883 ((
FLAG
Ë=
TIM_FLAG_Triggî
) || \

884 ((
FLAG
Ë=
TIM_FLAG_Bªak
) || \

885 ((
FLAG
Ë=
TIM_FLAG_CC1OF
) || \

886 ((
FLAG
Ë=
TIM_FLAG_CC2OF
) || \

887 ((
FLAG
Ë=
TIM_FLAG_CC3OF
) || \

888 ((
FLAG
Ë=
TIM_FLAG_CC4OF
))

891 
	#IS_TIM_CLEAR_FLAG
(
TIM_FLAG
Ë((((TIM_FLAGË& (
uöt16_t
)0xE100Ë=0x0000Ë&& ((TIM_FLAGË!0x0000))

	)

900 
	#IS_TIM_IC_FILTER
(
ICFILTER
Ë((ICFILTERË<0xF)

	)

909 
	#IS_TIM_EXT_FILTER
(
EXTFILTER
Ë((EXTFILTERË<0xF)

	)

930 
TIM_DeInô
(
TIM_Ty≥Def
* 
TIMx
);

931 
TIM_TimeBa£Inô
(
TIM_Ty≥Def
* 
TIMx
, 
TIM_TimeBa£InôTy≥Def
* 
TIM_TimeBa£InôSåu˘
);

932 
TIM_OC1Inô
(
TIM_Ty≥Def
* 
TIMx
, 
TIM_OCInôTy≥Def
* 
TIM_OCInôSåu˘
);

933 
TIM_OC2Inô
(
TIM_Ty≥Def
* 
TIMx
, 
TIM_OCInôTy≥Def
* 
TIM_OCInôSåu˘
);

934 
TIM_OC3Inô
(
TIM_Ty≥Def
* 
TIMx
, 
TIM_OCInôTy≥Def
* 
TIM_OCInôSåu˘
);

935 
TIM_OC4Inô
(
TIM_Ty≥Def
* 
TIMx
, 
TIM_OCInôTy≥Def
* 
TIM_OCInôSåu˘
);

936 
TIM_ICInô
(
TIM_Ty≥Def
* 
TIMx
, 
TIM_ICInôTy≥Def
* 
TIM_ICInôSåu˘
);

937 
TIM_PWMIC⁄fig
(
TIM_Ty≥Def
* 
TIMx
, 
TIM_ICInôTy≥Def
* 
TIM_ICInôSåu˘
);

938 
TIM_BDTRC⁄fig
(
TIM_Ty≥Def
* 
TIMx
, 
TIM_BDTRInôTy≥Def
 *
TIM_BDTRInôSåu˘
);

939 
TIM_TimeBa£Såu˘Inô
(
TIM_TimeBa£InôTy≥Def
* 
TIM_TimeBa£InôSåu˘
);

940 
TIM_OCSåu˘Inô
(
TIM_OCInôTy≥Def
* 
TIM_OCInôSåu˘
);

941 
TIM_ICSåu˘Inô
(
TIM_ICInôTy≥Def
* 
TIM_ICInôSåu˘
);

942 
TIM_BDTRSåu˘Inô
(
TIM_BDTRInôTy≥Def
* 
TIM_BDTRInôSåu˘
);

943 
TIM_Cmd
(
TIM_Ty≥Def
* 
TIMx
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

944 
TIM_CålPWMOuçuts
(
TIM_Ty≥Def
* 
TIMx
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

945 
TIM_ITC⁄fig
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_IT
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

946 
TIM_Gíî©eEvít
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_EvítSour˚
);

947 
TIM_DMAC⁄fig
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_DMABa£
, uöt16_à
TIM_DMABur°Lígth
);

948 
TIM_DMACmd
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_DMASour˚
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

949 
TIM_I¡î«lClockC⁄fig
(
TIM_Ty≥Def
* 
TIMx
);

950 
TIM_ITRxExã∫ÆClockC⁄fig
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_I≈utTriggîSour˚
);

951 
TIM_TIxExã∫ÆClockC⁄fig
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_TIxExã∫ÆCLKSour˚
,

952 
uöt16_t
 
TIM_ICPﬁ¨ôy
, uöt16_à
ICFûãr
);

953 
TIM_ETRClockMode1C⁄fig
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_ExtTRGPªsˇÀr
, uöt16_à
TIM_ExtTRGPﬁ¨ôy
,

954 
uöt16_t
 
ExtTRGFûãr
);

955 
TIM_ETRClockMode2C⁄fig
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_ExtTRGPªsˇÀr
,

956 
uöt16_t
 
TIM_ExtTRGPﬁ¨ôy
, uöt16_à
ExtTRGFûãr
);

957 
TIM_ETRC⁄fig
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_ExtTRGPªsˇÀr
, uöt16_à
TIM_ExtTRGPﬁ¨ôy
,

958 
uöt16_t
 
ExtTRGFûãr
);

959 
TIM_PªsˇÀrC⁄fig
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
PªsˇÀr
, uöt16_à
TIM_PSCRñﬂdMode
);

960 
TIM_Cou¡îModeC⁄fig
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_Cou¡îMode
);

961 
TIM_Sñe˘I≈utTriggî
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_I≈utTriggîSour˚
);

962 
TIM_EncodîI¡îÁ˚C⁄fig
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_EncodîMode
,

963 
uöt16_t
 
TIM_IC1Pﬁ¨ôy
, uöt16_à
TIM_IC2Pﬁ¨ôy
);

964 
TIM_F‹˚dOC1C⁄fig
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_F‹˚dA˘i⁄
);

965 
TIM_F‹˚dOC2C⁄fig
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_F‹˚dA˘i⁄
);

966 
TIM_F‹˚dOC3C⁄fig
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_F‹˚dA˘i⁄
);

967 
TIM_F‹˚dOC4C⁄fig
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_F‹˚dA˘i⁄
);

968 
TIM_ARRPªlﬂdC⁄fig
(
TIM_Ty≥Def
* 
TIMx
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

969 
TIM_Sñe˘COM
(
TIM_Ty≥Def
* 
TIMx
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

970 
TIM_Sñe˘CCDMA
(
TIM_Ty≥Def
* 
TIMx
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

971 
TIM_CCPªlﬂdC⁄åﬁ
(
TIM_Ty≥Def
* 
TIMx
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

972 
TIM_OC1PªlﬂdC⁄fig
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_OCPªlﬂd
);

973 
TIM_OC2PªlﬂdC⁄fig
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_OCPªlﬂd
);

974 
TIM_OC3PªlﬂdC⁄fig
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_OCPªlﬂd
);

975 
TIM_OC4PªlﬂdC⁄fig
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_OCPªlﬂd
);

976 
TIM_OC1Fa°C⁄fig
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_OCFa°
);

977 
TIM_OC2Fa°C⁄fig
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_OCFa°
);

978 
TIM_OC3Fa°C⁄fig
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_OCFa°
);

979 
TIM_OC4Fa°C⁄fig
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_OCFa°
);

980 
TIM_CÀ¨OC1Ref
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_OCCÀ¨
);

981 
TIM_CÀ¨OC2Ref
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_OCCÀ¨
);

982 
TIM_CÀ¨OC3Ref
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_OCCÀ¨
);

983 
TIM_CÀ¨OC4Ref
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_OCCÀ¨
);

984 
TIM_OC1Pﬁ¨ôyC⁄fig
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_OCPﬁ¨ôy
);

985 
TIM_OC1NPﬁ¨ôyC⁄fig
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_OCNPﬁ¨ôy
);

986 
TIM_OC2Pﬁ¨ôyC⁄fig
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_OCPﬁ¨ôy
);

987 
TIM_OC2NPﬁ¨ôyC⁄fig
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_OCNPﬁ¨ôy
);

988 
TIM_OC3Pﬁ¨ôyC⁄fig
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_OCPﬁ¨ôy
);

989 
TIM_OC3NPﬁ¨ôyC⁄fig
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_OCNPﬁ¨ôy
);

990 
TIM_OC4Pﬁ¨ôyC⁄fig
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_OCPﬁ¨ôy
);

991 
TIM_CCxCmd
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_Ch™√l
, uöt16_à
TIM_CCx
);

992 
TIM_CCxNCmd
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_Ch™√l
, uöt16_à
TIM_CCxN
);

993 
TIM_Sñe˘OCxM
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_Ch™√l
, uöt16_à
TIM_OCMode
);

994 
TIM_Upd©eDißbÀC⁄fig
(
TIM_Ty≥Def
* 
TIMx
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

995 
TIM_Upd©eReque°C⁄fig
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_Upd©eSour˚
);

996 
TIM_Sñe˘HÆlSís‹
(
TIM_Ty≥Def
* 
TIMx
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

997 
TIM_Sñe˘O√Pul£Mode
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_OPMode
);

998 
TIM_Sñe˘OuçutTriggî
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_TRGOSour˚
);

999 
TIM_Sñe˘SœveMode
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_SœveMode
);

1000 
TIM_Sñe˘Ma°îSœveMode
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_Ma°îSœveMode
);

1001 
TIM_SëCou¡î
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
Cou¡î
);

1002 
TIM_SëAut‹ñﬂd
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
Aut‹ñﬂd
);

1003 
TIM_SëCom∑ª1
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
Com∑ª1
);

1004 
TIM_SëCom∑ª2
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
Com∑ª2
);

1005 
TIM_SëCom∑ª3
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
Com∑ª3
);

1006 
TIM_SëCom∑ª4
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
Com∑ª4
);

1007 
TIM_SëIC1PªsˇÀr
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_ICPSC
);

1008 
TIM_SëIC2PªsˇÀr
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_ICPSC
);

1009 
TIM_SëIC3PªsˇÀr
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_ICPSC
);

1010 
TIM_SëIC4PªsˇÀr
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_ICPSC
);

1011 
TIM_SëClockDivisi⁄
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_CKD
);

1012 
uöt16_t
 
TIM_GëC≠tuª1
(
TIM_Ty≥Def
* 
TIMx
);

1013 
uöt16_t
 
TIM_GëC≠tuª2
(
TIM_Ty≥Def
* 
TIMx
);

1014 
uöt16_t
 
TIM_GëC≠tuª3
(
TIM_Ty≥Def
* 
TIMx
);

1015 
uöt16_t
 
TIM_GëC≠tuª4
(
TIM_Ty≥Def
* 
TIMx
);

1016 
uöt16_t
 
TIM_GëCou¡î
(
TIM_Ty≥Def
* 
TIMx
);

1017 
uöt16_t
 
TIM_GëPªsˇÀr
(
TIM_Ty≥Def
* 
TIMx
);

1018 
FœgSètus
 
TIM_GëFœgSètus
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_FLAG
);

1019 
TIM_CÀ¨Fœg
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_FLAG
);

1020 
ITSètus
 
TIM_GëITSètus
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_IT
);

1021 
TIM_CÀ¨ITPídögBô
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_IT
);

1023 #ifde‡
__˝lu•lus


	@Source/STM32F10x_StdPeriph_Driver/inc/stm32f10x_usart.h

23 #i‚de‡
__STM32F10x_USART_H


24 
	#__STM32F10x_USART_H


	)

26 #ifde‡
__˝lu•lus


31 
	~"°m32f10x.h
"

51 
uöt32_t
 
USART_BaudR©e
;

56 
uöt16_t
 
USART_W‹dLígth
;

59 
uöt16_t
 
USART_St›Bôs
;

62 
uöt16_t
 
USART_P¨ôy
;

69 
uöt16_t
 
USART_Mode
;

72 
uöt16_t
 
USART_H¨dw¨eFlowC⁄åﬁ
;

75 } 
	tUSART_InôTy≥Def
;

84 
uöt16_t
 
USART_Clock
;

87 
uöt16_t
 
USART_CPOL
;

90 
uöt16_t
 
USART_CPHA
;

93 
uöt16_t
 
USART_La°Bô
;

96 } 
	tUSART_ClockInôTy≥Def
;

106 
	#IS_USART_ALL_PERIPH
(
PERIPH
Ë(((PERIPHË=
USART1
Ë|| \

	)

107 ((
PERIPH
Ë=
USART2
) || \

108 ((
PERIPH
Ë=
USART3
) || \

109 ((
PERIPH
Ë=
UART4
) || \

110 ((
PERIPH
Ë=
UART5
))

112 
	#IS_USART_123_PERIPH
(
PERIPH
Ë(((PERIPHË=
USART1
Ë|| \

	)

113 ((
PERIPH
Ë=
USART2
) || \

114 ((
PERIPH
Ë=
USART3
))

116 
	#IS_USART_1234_PERIPH
(
PERIPH
Ë(((PERIPHË=
USART1
Ë|| \

	)

117 ((
PERIPH
Ë=
USART2
) || \

118 ((
PERIPH
Ë=
USART3
) || \

119 ((
PERIPH
Ë=
UART4
))

124 
	#USART_W‹dLígth_8b
 ((
uöt16_t
)0x0000)

	)

125 
	#USART_W‹dLígth_9b
 ((
uöt16_t
)0x1000)

	)

127 
	#IS_USART_WORD_LENGTH
(
LENGTH
Ë(((LENGTHË=
USART_W‹dLígth_8b
Ë|| \

	)

128 ((
LENGTH
Ë=
USART_W‹dLígth_9b
))

137 
	#USART_St›Bôs_1
 ((
uöt16_t
)0x0000)

	)

138 
	#USART_St›Bôs_0_5
 ((
uöt16_t
)0x1000)

	)

139 
	#USART_St›Bôs_2
 ((
uöt16_t
)0x2000)

	)

140 
	#USART_St›Bôs_1_5
 ((
uöt16_t
)0x3000)

	)

141 
	#IS_USART_STOPBITS
(
STOPBITS
Ë(((STOPBITSË=
USART_St›Bôs_1
Ë|| \

	)

142 ((
STOPBITS
Ë=
USART_St›Bôs_0_5
) || \

143 ((
STOPBITS
Ë=
USART_St›Bôs_2
) || \

144 ((
STOPBITS
Ë=
USART_St›Bôs_1_5
))

153 
	#USART_P¨ôy_No
 ((
uöt16_t
)0x0000)

	)

154 
	#USART_P¨ôy_Eví
 ((
uöt16_t
)0x0400)

	)

155 
	#USART_P¨ôy_Odd
 ((
uöt16_t
)0x0600)

	)

156 
	#IS_USART_PARITY
(
PARITY
Ë(((PARITYË=
USART_P¨ôy_No
Ë|| \

	)

157 ((
PARITY
Ë=
USART_P¨ôy_Eví
) || \

158 ((
PARITY
Ë=
USART_P¨ôy_Odd
))

167 
	#USART_Mode_Rx
 ((
uöt16_t
)0x0004)

	)

168 
	#USART_Mode_Tx
 ((
uöt16_t
)0x0008)

	)

169 
	#IS_USART_MODE
(
MODE
Ë((((MODEË& (
uöt16_t
)0xFFF3Ë=0x00Ë&& ((MODEË!(uöt16_t)0x00))

	)

177 
	#USART_H¨dw¨eFlowC⁄åﬁ_N⁄e
 ((
uöt16_t
)0x0000)

	)

178 
	#USART_H¨dw¨eFlowC⁄åﬁ_RTS
 ((
uöt16_t
)0x0100)

	)

179 
	#USART_H¨dw¨eFlowC⁄åﬁ_CTS
 ((
uöt16_t
)0x0200)

	)

180 
	#USART_H¨dw¨eFlowC⁄åﬁ_RTS_CTS
 ((
uöt16_t
)0x0300)

	)

181 
	#IS_USART_HARDWARE_FLOW_CONTROL
(
CONTROL
)\

	)

182 (((
CONTROL
Ë=
USART_H¨dw¨eFlowC⁄åﬁ_N⁄e
) || \

183 ((
CONTROL
Ë=
USART_H¨dw¨eFlowC⁄åﬁ_RTS
) || \

184 ((
CONTROL
Ë=
USART_H¨dw¨eFlowC⁄åﬁ_CTS
) || \

185 ((
CONTROL
Ë=
USART_H¨dw¨eFlowC⁄åﬁ_RTS_CTS
))

193 
	#USART_Clock_DißbÀ
 ((
uöt16_t
)0x0000)

	)

194 
	#USART_Clock_E«bÀ
 ((
uöt16_t
)0x0800)

	)

195 
	#IS_USART_CLOCK
(
CLOCK
Ë(((CLOCKË=
USART_Clock_DißbÀ
Ë|| \

	)

196 ((
CLOCK
Ë=
USART_Clock_E«bÀ
))

205 
	#USART_CPOL_Low
 ((
uöt16_t
)0x0000)

	)

206 
	#USART_CPOL_High
 ((
uöt16_t
)0x0400)

	)

207 
	#IS_USART_CPOL
(
CPOL
Ë(((CPOLË=
USART_CPOL_Low
Ë|| ((CPOLË=
USART_CPOL_High
))

	)

217 
	#USART_CPHA_1Edge
 ((
uöt16_t
)0x0000)

	)

218 
	#USART_CPHA_2Edge
 ((
uöt16_t
)0x0200)

	)

219 
	#IS_USART_CPHA
(
CPHA
Ë(((CPHAË=
USART_CPHA_1Edge
Ë|| ((CPHAË=
USART_CPHA_2Edge
))

	)

229 
	#USART_La°Bô_DißbÀ
 ((
uöt16_t
)0x0000)

	)

230 
	#USART_La°Bô_E«bÀ
 ((
uöt16_t
)0x0100)

	)

231 
	#IS_USART_LASTBIT
(
LASTBIT
Ë(((LASTBITË=
USART_La°Bô_DißbÀ
Ë|| \

	)

232 ((
LASTBIT
Ë=
USART_La°Bô_E«bÀ
))

241 
	#USART_IT_PE
 ((
uöt16_t
)0x0028)

	)

242 
	#USART_IT_TXE
 ((
uöt16_t
)0x0727)

	)

243 
	#USART_IT_TC
 ((
uöt16_t
)0x0626)

	)

244 
	#USART_IT_RXNE
 ((
uöt16_t
)0x0525)

	)

245 
	#USART_IT_IDLE
 ((
uöt16_t
)0x0424)

	)

246 
	#USART_IT_LBD
 ((
uöt16_t
)0x0846)

	)

247 
	#USART_IT_CTS
 ((
uöt16_t
)0x096A)

	)

248 
	#USART_IT_ERR
 ((
uöt16_t
)0x0060)

	)

249 
	#USART_IT_ORE
 ((
uöt16_t
)0x0360)

	)

250 
	#USART_IT_NE
 ((
uöt16_t
)0x0260)

	)

251 
	#USART_IT_FE
 ((
uöt16_t
)0x0160)

	)

252 
	#IS_USART_CONFIG_IT
(
IT
Ë(((ITË=
USART_IT_PE
Ë|| ((ITË=
USART_IT_TXE
Ë|| \

	)

253 ((
IT
Ë=
USART_IT_TC
Ë|| ((ITË=
USART_IT_RXNE
) || \

254 ((
IT
Ë=
USART_IT_IDLE
Ë|| ((ITË=
USART_IT_LBD
) || \

255 ((
IT
Ë=
USART_IT_CTS
Ë|| ((ITË=
USART_IT_ERR
))

256 
	#IS_USART_GET_IT
(
IT
Ë(((ITË=
USART_IT_PE
Ë|| ((ITË=
USART_IT_TXE
Ë|| \

	)

257 ((
IT
Ë=
USART_IT_TC
Ë|| ((ITË=
USART_IT_RXNE
) || \

258 ((
IT
Ë=
USART_IT_IDLE
Ë|| ((ITË=
USART_IT_LBD
) || \

259 ((
IT
Ë=
USART_IT_CTS
Ë|| ((ITË=
USART_IT_ORE
) || \

260 ((
IT
Ë=
USART_IT_NE
Ë|| ((ITË=
USART_IT_FE
))

261 
	#IS_USART_CLEAR_IT
(
IT
Ë(((ITË=
USART_IT_TC
Ë|| ((ITË=
USART_IT_RXNE
Ë|| \

	)

262 ((
IT
Ë=
USART_IT_LBD
Ë|| ((ITË=
USART_IT_CTS
))

271 
	#USART_DMAReq_Tx
 ((
uöt16_t
)0x0080)

	)

272 
	#USART_DMAReq_Rx
 ((
uöt16_t
)0x0040)

	)

273 
	#IS_USART_DMAREQ
(
DMAREQ
Ë((((DMAREQË& (
uöt16_t
)0xFF3FË=0x00Ë&& ((DMAREQË!(uöt16_t)0x00))

	)

283 
	#USART_WakeUp_IdÀLöe
 ((
uöt16_t
)0x0000)

	)

284 
	#USART_WakeUp_AddªssM¨k
 ((
uöt16_t
)0x0800)

	)

285 
	#IS_USART_WAKEUP
(
WAKEUP
Ë(((WAKEUPË=
USART_WakeUp_IdÀLöe
Ë|| \

	)

286 ((
WAKEUP
Ë=
USART_WakeUp_AddªssM¨k
))

295 
	#USART_LINBªakDëe˘Lígth_10b
 ((
uöt16_t
)0x0000)

	)

296 
	#USART_LINBªakDëe˘Lígth_11b
 ((
uöt16_t
)0x0020)

	)

297 
	#IS_USART_LIN_BREAK_DETECT_LENGTH
(
LENGTH
Ë\

	)

298 (((
LENGTH
Ë=
USART_LINBªakDëe˘Lígth_10b
) || \

299 ((
LENGTH
Ë=
USART_LINBªakDëe˘Lígth_11b
))

308 
	#USART_IrDAMode_LowPowî
 ((
uöt16_t
)0x0004)

	)

309 
	#USART_IrDAMode_N‹mÆ
 ((
uöt16_t
)0x0000)

	)

310 
	#IS_USART_IRDA_MODE
(
MODE
Ë(((MODEË=
USART_IrDAMode_LowPowî
Ë|| \

	)

311 ((
MODE
Ë=
USART_IrDAMode_N‹mÆ
))

320 
	#USART_FLAG_CTS
 ((
uöt16_t
)0x0200)

	)

321 
	#USART_FLAG_LBD
 ((
uöt16_t
)0x0100)

	)

322 
	#USART_FLAG_TXE
 ((
uöt16_t
)0x0080)

	)

323 
	#USART_FLAG_TC
 ((
uöt16_t
)0x0040)

	)

324 
	#USART_FLAG_RXNE
 ((
uöt16_t
)0x0020)

	)

325 
	#USART_FLAG_IDLE
 ((
uöt16_t
)0x0010)

	)

326 
	#USART_FLAG_ORE
 ((
uöt16_t
)0x0008)

	)

327 
	#USART_FLAG_NE
 ((
uöt16_t
)0x0004)

	)

328 
	#USART_FLAG_FE
 ((
uöt16_t
)0x0002)

	)

329 
	#USART_FLAG_PE
 ((
uöt16_t
)0x0001)

	)

330 
	#IS_USART_FLAG
(
FLAG
Ë(((FLAGË=
USART_FLAG_PE
Ë|| ((FLAGË=
USART_FLAG_TXE
Ë|| \

	)

331 ((
FLAG
Ë=
USART_FLAG_TC
Ë|| ((FLAGË=
USART_FLAG_RXNE
) || \

332 ((
FLAG
Ë=
USART_FLAG_IDLE
Ë|| ((FLAGË=
USART_FLAG_LBD
) || \

333 ((
FLAG
Ë=
USART_FLAG_CTS
Ë|| ((FLAGË=
USART_FLAG_ORE
) || \

334 ((
FLAG
Ë=
USART_FLAG_NE
Ë|| ((FLAGË=
USART_FLAG_FE
))

336 
	#IS_USART_CLEAR_FLAG
(
FLAG
Ë((((FLAGË& (
uöt16_t
)0xFC9FË=0x00Ë&& ((FLAGË!(uöt16_t)0x00))

	)

337 
	#IS_USART_PERIPH_FLAG
(
PERIPH
, 
USART_FLAG
Ë((((*(
uöt32_t
*)&(PERIPH)Ë!
UART4_BASE
Ë&&\

	)

338 ((*(
uöt32_t
*)&(
PERIPH
)Ë!
UART5_BASE
)) \

339 || ((
USART_FLAG
Ë!
USART_FLAG_CTS
))

340 
	#IS_USART_BAUDRATE
(
BAUDRATE
Ë(((BAUDRATEË> 0Ë&& ((BAUDRATEË< 0x0044AA21))

	)

341 
	#IS_USART_ADDRESS
(
ADDRESS
Ë((ADDRESSË<0xF)

	)

342 
	#IS_USART_DATA
(
DATA
Ë((DATAË<0x1FF)

	)

364 
USART_DeInô
(
USART_Ty≥Def
* 
USARTx
);

365 
USART_Inô
(
USART_Ty≥Def
* 
USARTx
, 
USART_InôTy≥Def
* 
USART_InôSåu˘
);

366 
USART_Såu˘Inô
(
USART_InôTy≥Def
* 
USART_InôSåu˘
);

367 
USART_ClockInô
(
USART_Ty≥Def
* 
USARTx
, 
USART_ClockInôTy≥Def
* 
USART_ClockInôSåu˘
);

368 
USART_ClockSåu˘Inô
(
USART_ClockInôTy≥Def
* 
USART_ClockInôSåu˘
);

369 
USART_Cmd
(
USART_Ty≥Def
* 
USARTx
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

370 
USART_ITC⁄fig
(
USART_Ty≥Def
* 
USARTx
, 
uöt16_t
 
USART_IT
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

371 
USART_DMACmd
(
USART_Ty≥Def
* 
USARTx
, 
uöt16_t
 
USART_DMAReq
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

372 
USART_SëAddªss
(
USART_Ty≥Def
* 
USARTx
, 
uöt8_t
 
USART_Addªss
);

373 
USART_WakeUpC⁄fig
(
USART_Ty≥Def
* 
USARTx
, 
uöt16_t
 
USART_WakeUp
);

374 
USART_Re˚ivîWakeUpCmd
(
USART_Ty≥Def
* 
USARTx
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

375 
USART_LINBªakDëe˘LígthC⁄fig
(
USART_Ty≥Def
* 
USARTx
, 
uöt16_t
 
USART_LINBªakDëe˘Lígth
);

376 
USART_LINCmd
(
USART_Ty≥Def
* 
USARTx
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

377 
USART_SídD©a
(
USART_Ty≥Def
* 
USARTx
, 
uöt16_t
 
D©a
);

378 
uöt16_t
 
USART_Re˚iveD©a
(
USART_Ty≥Def
* 
USARTx
);

379 
USART_SídBªak
(
USART_Ty≥Def
* 
USARTx
);

380 
USART_SëGu¨dTime
(
USART_Ty≥Def
* 
USARTx
, 
uöt8_t
 
USART_Gu¨dTime
);

381 
USART_SëPªsˇÀr
(
USART_Ty≥Def
* 
USARTx
, 
uöt8_t
 
USART_PªsˇÀr
);

382 
USART_Sm¨tC¨dCmd
(
USART_Ty≥Def
* 
USARTx
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

383 
USART_Sm¨tC¨dNACKCmd
(
USART_Ty≥Def
* 
USARTx
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

384 
USART_HÆfDu∂exCmd
(
USART_Ty≥Def
* 
USARTx
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

385 
USART_IrDAC⁄fig
(
USART_Ty≥Def
* 
USARTx
, 
uöt16_t
 
USART_IrDAMode
);

386 
USART_IrDACmd
(
USART_Ty≥Def
* 
USARTx
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

387 
FœgSètus
 
USART_GëFœgSètus
(
USART_Ty≥Def
* 
USARTx
, 
uöt16_t
 
USART_FLAG
);

388 
USART_CÀ¨Fœg
(
USART_Ty≥Def
* 
USARTx
, 
uöt16_t
 
USART_FLAG
);

389 
ITSètus
 
USART_GëITSètus
(
USART_Ty≥Def
* 
USARTx
, 
uöt16_t
 
USART_IT
);

390 
USART_CÀ¨ITPídögBô
(
USART_Ty≥Def
* 
USARTx
, 
uöt16_t
 
USART_IT
);

392 #ifde‡
__˝lu•lus


	@Source/STM32F10x_StdPeriph_Driver/inc/stm32f10x_wwdg.h

23 #i‚de‡
__STM32F10x_WWDG_H


24 
	#__STM32F10x_WWDG_H


	)

26 #ifde‡
__˝lu•lus


31 
	~"°m32f10x.h
"

57 
	#WWDG_PªsˇÀr_1
 ((
uöt32_t
)0x00000000)

	)

58 
	#WWDG_PªsˇÀr_2
 ((
uöt32_t
)0x00000080)

	)

59 
	#WWDG_PªsˇÀr_4
 ((
uöt32_t
)0x00000100)

	)

60 
	#WWDG_PªsˇÀr_8
 ((
uöt32_t
)0x00000180)

	)

61 
	#IS_WWDG_PRESCALER
(
PRESCALER
Ë(((PRESCALERË=
WWDG_PªsˇÀr_1
Ë|| \

	)

62 ((
PRESCALER
Ë=
WWDG_PªsˇÀr_2
) || \

63 ((
PRESCALER
Ë=
WWDG_PªsˇÀr_4
) || \

64 ((
PRESCALER
Ë=
WWDG_PªsˇÀr_8
))

65 
	#IS_WWDG_WINDOW_VALUE
(
VALUE
Ë((VALUEË<0x7F)

	)

66 
	#IS_WWDG_COUNTER
(
COUNTER
Ë(((COUNTERË>0x40Ë&& ((COUNTERË<0x7F))

	)

87 
WWDG_DeInô
();

88 
WWDG_SëPªsˇÀr
(
uöt32_t
 
WWDG_PªsˇÀr
);

89 
WWDG_SëWödowVÆue
(
uöt8_t
 
WödowVÆue
);

90 
WWDG_E«bÀIT
();

91 
WWDG_SëCou¡î
(
uöt8_t
 
Cou¡î
);

92 
WWDG_E«bÀ
(
uöt8_t
 
Cou¡î
);

93 
FœgSètus
 
WWDG_GëFœgSètus
();

94 
WWDG_CÀ¨Fœg
();

96 #ifde‡
__˝lu•lus


	@Source/STM32F10x_StdPeriph_Driver/src/misc.c

22 
	~"misc.h
"

27 
	#AIRCR_VECTKEY_MASK
 ((
uöt32_t
)0x05FA0000)

	)

52 
	$NVIC_Pri‹ôyGroupC⁄fig
(
uöt32_t
 
NVIC_Pri‹ôyGroup
)

55 
	`as£π_∑øm
(
	`IS_NVIC_PRIORITY_GROUP
(
NVIC_Pri‹ôyGroup
));

58 
SCB
->
AIRCR
 = 
AIRCR_VECTKEY_MASK
 | 
NVIC_Pri‹ôyGroup
;

59 
	}
}

66 
	$NVIC_Inô
(
NVIC_InôTy≥Def
* 
NVIC_InôSåu˘
)

68 
uöt32_t
 
tmµri‹ôy
 = 0x00, 
tmµª
 = 0x00, 
tmpsub
 = 0x0F;

71 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NVIC_InôSåu˘
->
NVIC_IRQCh™√lCmd
));

72 
	`as£π_∑øm
(
	`IS_NVIC_PREEMPTION_PRIORITY
(
NVIC_InôSåu˘
->
NVIC_IRQCh™√lPªem±i⁄Pri‹ôy
));

73 
	`as£π_∑øm
(
	`IS_NVIC_SUB_PRIORITY
(
NVIC_InôSåu˘
->
NVIC_IRQCh™√lSubPri‹ôy
));

75 i‡(
NVIC_InôSåu˘
->
NVIC_IRQCh™√lCmd
 !
DISABLE
)

78 
tmµri‹ôy
 = (0x700 - ((
SCB
->
AIRCR
Ë& (
uöt32_t
)0x700))>> 0x08;

79 
tmµª
 = (0x4 - 
tmµri‹ôy
);

80 
tmpsub
 =Åmpsub >> 
tmµri‹ôy
;

82 
tmµri‹ôy
 = (
uöt32_t
)
NVIC_InôSåu˘
->
NVIC_IRQCh™√lPªem±i⁄Pri‹ôy
 << 
tmµª
;

83 
tmµri‹ôy
 |
NVIC_InôSåu˘
->
NVIC_IRQCh™√lSubPri‹ôy
 & 
tmpsub
;

84 
tmµri‹ôy
 =Åmppriority << 0x04;

86 
NVIC
->
IP
[
NVIC_InôSåu˘
->
NVIC_IRQCh™√l
] = 
tmµri‹ôy
;

89 
NVIC
->
ISER
[
NVIC_InôSåu˘
->
NVIC_IRQCh™√l
 >> 0x05] =

90 (
uöt32_t
)0x01 << (
NVIC_InôSåu˘
->
NVIC_IRQCh™√l
 & (
uöt8_t
)0x1F);

95 
NVIC
->
ICER
[
NVIC_InôSåu˘
->
NVIC_IRQCh™√l
 >> 0x05] =

96 (
uöt32_t
)0x01 << (
NVIC_InôSåu˘
->
NVIC_IRQCh™√l
 & (
uöt8_t
)0x1F);

98 
	}
}

109 
	$NVIC_SëVe˘‹TabÀ
(
uöt32_t
 
NVIC_Ve˘Tab
, uöt32_à
Off£t
)

112 
	`as£π_∑øm
(
	`IS_NVIC_VECTTAB
(
NVIC_Ve˘Tab
));

113 
	`as£π_∑øm
(
	`IS_NVIC_OFFSET
(
Off£t
));

115 
SCB
->
VTOR
 = 
NVIC_Ve˘Tab
 | (
Off£t
 & (
uöt32_t
)0x1FFFFF80);

116 
	}
}

128 
	$NVIC_Sy°emLPC⁄fig
(
uöt8_t
 
LowPowîMode
, 
Fun˘i⁄ÆSèã
 
NewSèã
)

131 
	`as£π_∑øm
(
	`IS_NVIC_LP
(
LowPowîMode
));

132 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

134 i‡(
NewSèã
 !
DISABLE
)

136 
SCB
->
SCR
 |
LowPowîMode
;

140 
SCB
->
SCR
 &(
uöt32_t
)(~(uöt32_t)
LowPowîMode
);

142 
	}
}

152 
	$SysTick_CLKSour˚C⁄fig
(
uöt32_t
 
SysTick_CLKSour˚
)

155 
	`as£π_∑øm
(
	`IS_SYSTICK_CLK_SOURCE
(
SysTick_CLKSour˚
));

156 i‡(
SysTick_CLKSour˚
 =
SysTick_CLKSour˚_HCLK
)

158 
SysTick
->
CTRL
 |
SysTick_CLKSour˚_HCLK
;

162 
SysTick
->
CTRL
 &
SysTick_CLKSour˚_HCLK_Div8
;

164 
	}
}

	@Source/STM32F10x_StdPeriph_Driver/src/stm32f10x_adc.c

22 
	~"°m32f10x_adc.h
"

23 
	~"°m32f10x_rcc.h
"

47 
	#CR1_DISCNUM_Re£t
 ((
uöt32_t
)0xFFFF1FFF)

	)

50 
	#CR1_DISCEN_Së
 ((
uöt32_t
)0x00000800)

	)

51 
	#CR1_DISCEN_Re£t
 ((
uöt32_t
)0xFFFFF7FF)

	)

54 
	#CR1_JAUTO_Së
 ((
uöt32_t
)0x00000400)

	)

55 
	#CR1_JAUTO_Re£t
 ((
uöt32_t
)0xFFFFFBFF)

	)

58 
	#CR1_JDISCEN_Së
 ((
uöt32_t
)0x00001000)

	)

59 
	#CR1_JDISCEN_Re£t
 ((
uöt32_t
)0xFFFFEFFF)

	)

62 
	#CR1_AWDCH_Re£t
 ((
uöt32_t
)0xFFFFFFE0)

	)

65 
	#CR1_AWDMode_Re£t
 ((
uöt32_t
)0xFF3FFDFF)

	)

68 
	#CR1_CLEAR_Mask
 ((
uöt32_t
)0xFFF0FEFF)

	)

71 
	#CR2_ADON_Së
 ((
uöt32_t
)0x00000001)

	)

72 
	#CR2_ADON_Re£t
 ((
uöt32_t
)0xFFFFFFFE)

	)

75 
	#CR2_DMA_Së
 ((
uöt32_t
)0x00000100)

	)

76 
	#CR2_DMA_Re£t
 ((
uöt32_t
)0xFFFFFEFF)

	)

79 
	#CR2_RSTCAL_Së
 ((
uöt32_t
)0x00000008)

	)

82 
	#CR2_CAL_Së
 ((
uöt32_t
)0x00000004)

	)

85 
	#CR2_SWSTART_Së
 ((
uöt32_t
)0x00400000)

	)

88 
	#CR2_EXTTRIG_Së
 ((
uöt32_t
)0x00100000)

	)

89 
	#CR2_EXTTRIG_Re£t
 ((
uöt32_t
)0xFFEFFFFF)

	)

92 
	#CR2_EXTTRIG_SWSTART_Së
 ((
uöt32_t
)0x00500000)

	)

93 
	#CR2_EXTTRIG_SWSTART_Re£t
 ((
uöt32_t
)0xFFAFFFFF)

	)

96 
	#CR2_JEXTSEL_Re£t
 ((
uöt32_t
)0xFFFF8FFF)

	)

99 
	#CR2_JEXTTRIG_Së
 ((
uöt32_t
)0x00008000)

	)

100 
	#CR2_JEXTTRIG_Re£t
 ((
uöt32_t
)0xFFFF7FFF)

	)

103 
	#CR2_JSWSTART_Së
 ((
uöt32_t
)0x00200000)

	)

106 
	#CR2_JEXTTRIG_JSWSTART_Së
 ((
uöt32_t
)0x00208000)

	)

107 
	#CR2_JEXTTRIG_JSWSTART_Re£t
 ((
uöt32_t
)0xFFDF7FFF)

	)

110 
	#CR2_TSVREFE_Së
 ((
uöt32_t
)0x00800000)

	)

111 
	#CR2_TSVREFE_Re£t
 ((
uöt32_t
)0xFF7FFFFF)

	)

114 
	#CR2_CLEAR_Mask
 ((
uöt32_t
)0xFFF1F7FD)

	)

117 
	#SQR3_SQ_Së
 ((
uöt32_t
)0x0000001F)

	)

118 
	#SQR2_SQ_Së
 ((
uöt32_t
)0x0000001F)

	)

119 
	#SQR1_SQ_Së
 ((
uöt32_t
)0x0000001F)

	)

122 
	#SQR1_CLEAR_Mask
 ((
uöt32_t
)0xFF0FFFFF)

	)

125 
	#JSQR_JSQ_Së
 ((
uöt32_t
)0x0000001F)

	)

128 
	#JSQR_JL_Së
 ((
uöt32_t
)0x00300000)

	)

129 
	#JSQR_JL_Re£t
 ((
uöt32_t
)0xFFCFFFFF)

	)

132 
	#SMPR1_SMP_Së
 ((
uöt32_t
)0x00000007)

	)

133 
	#SMPR2_SMP_Së
 ((
uöt32_t
)0x00000007)

	)

136 
	#JDR_Off£t
 ((
uöt8_t
)0x28)

	)

139 
	#DR_ADDRESS
 ((
uöt32_t
)0x4001244C)

	)

178 
	$ADC_DeInô
(
ADC_Ty≥Def
* 
ADCx
)

183 i‡(
ADCx
 =
ADC1
)

186 
	`RCC_APB2PîùhRe£tCmd
(
RCC_APB2Pîùh_ADC1
, 
ENABLE
);

188 
	`RCC_APB2PîùhRe£tCmd
(
RCC_APB2Pîùh_ADC1
, 
DISABLE
);

190 i‡(
ADCx
 =
ADC2
)

193 
	`RCC_APB2PîùhRe£tCmd
(
RCC_APB2Pîùh_ADC2
, 
ENABLE
);

195 
	`RCC_APB2PîùhRe£tCmd
(
RCC_APB2Pîùh_ADC2
, 
DISABLE
);

199 i‡(
ADCx
 =
ADC3
)

202 
	`RCC_APB2PîùhRe£tCmd
(
RCC_APB2Pîùh_ADC3
, 
ENABLE
);

204 
	`RCC_APB2PîùhRe£tCmd
(
RCC_APB2Pîùh_ADC3
, 
DISABLE
);

207 
	}
}

217 
	$ADC_Inô
(
ADC_Ty≥Def
* 
ADCx
, 
ADC_InôTy≥Def
* 
ADC_InôSåu˘
)

219 
uöt32_t
 
tm¥eg1
 = 0;

220 
uöt8_t
 
tm¥eg2
 = 0;

232 
tm¥eg1
 = 
ADCx
->
CR1
;

234 
tm¥eg1
 &
CR1_CLEAR_Mask
;

238 
tm¥eg1
 |(
uöt32_t
)(
ADC_InôSåu˘
->
ADC_Mode
 | ((uöt32_t)ADC_InôSåu˘->
ADC_SˇnC⁄vMode
 << 8));

240 
ADCx
->
CR1
 = 
tm¥eg1
;

244 
tm¥eg1
 = 
ADCx
->
CR2
;

246 
tm¥eg1
 &
CR2_CLEAR_Mask
;

251 
tm¥eg1
 |(
uöt32_t
)(
ADC_InôSåu˘
->
ADC_D©aAlign
 | ADC_InôSåu˘->
ADC_Exã∫ÆTrigC⁄v
 |

252 ((
uöt32_t
)
ADC_InôSåu˘
->
ADC_C⁄töuousC⁄vMode
 << 1));

254 
ADCx
->
CR2
 = 
tm¥eg1
;

258 
tm¥eg1
 = 
ADCx
->
SQR1
;

260 
tm¥eg1
 &
SQR1_CLEAR_Mask
;

263 
tm¥eg2
 |(
uöt8_t
Ë(
ADC_InôSåu˘
->
ADC_NbrOfCh™√l
 - (uint8_t)1);

264 
tm¥eg1
 |(
uöt32_t
)
tm¥eg2
 << 20;

266 
ADCx
->
SQR1
 = 
tm¥eg1
;

267 
	}
}

274 
	$ADC_Såu˘Inô
(
ADC_InôTy≥Def
* 
ADC_InôSåu˘
)

278 
ADC_InôSåu˘
->
ADC_Mode
 = 
ADC_Mode_Indïídít
;

280 
ADC_InôSåu˘
->
ADC_SˇnC⁄vMode
 = 
DISABLE
;

282 
ADC_InôSåu˘
->
ADC_C⁄töuousC⁄vMode
 = 
DISABLE
;

284 
ADC_InôSåu˘
->
ADC_Exã∫ÆTrigC⁄v
 = 
ADC_Exã∫ÆTrigC⁄v_T1_CC1
;

286 
ADC_InôSåu˘
->
ADC_D©aAlign
 = 
ADC_D©aAlign_Right
;

288 
ADC_InôSåu˘
->
ADC_NbrOfCh™√l
 = 1;

289 
	}
}

298 
	$ADC_Cmd
(
ADC_Ty≥Def
* 
ADCx
, 
Fun˘i⁄ÆSèã
 
NewSèã
)

303 i‡(
NewSèã
 !
DISABLE
)

306 
ADCx
->
CR2
 |
CR2_ADON_Së
;

311 
ADCx
->
CR2
 &
CR2_ADON_Re£t
;

313 
	}
}

323 
	$ADC_DMACmd
(
ADC_Ty≥Def
* 
ADCx
, 
Fun˘i⁄ÆSèã
 
NewSèã
)

328 i‡(
NewSèã
 !
DISABLE
)

331 
ADCx
->
CR2
 |
CR2_DMA_Së
;

336 
ADCx
->
CR2
 &
CR2_DMA_Re£t
;

338 
	}
}

352 
	$ADC_ITC⁄fig
(
ADC_Ty≥Def
* 
ADCx
, 
uöt16_t
 
ADC_IT
, 
Fun˘i⁄ÆSèã
 
NewSèã
)

354 
uöt8_t
 
ômask
 = 0;

360 
ômask
 = (
uöt8_t
)
ADC_IT
;

361 i‡(
NewSèã
 !
DISABLE
)

364 
ADCx
->
CR1
 |
ômask
;

369 
ADCx
->
CR1
 &(~(
uöt32_t
)
ômask
);

371 
	}
}

378 
	$ADC_Re£tCÆibøti⁄
(
ADC_Ty≥Def
* 
ADCx
)

383 
ADCx
->
CR2
 |
CR2_RSTCAL_Së
;

384 
	}
}

391 
FœgSètus
 
	$ADC_GëRe£tCÆibøti⁄Sètus
(
ADC_Ty≥Def
* 
ADCx
)

393 
FœgSètus
 
bô°©us
 = 
RESET
;

397 i‡((
ADCx
->
CR2
 & 
CR2_RSTCAL_Së
Ë!(
uöt32_t
)
RESET
)

400 
bô°©us
 = 
SET
;

405 
bô°©us
 = 
RESET
;

408  
bô°©us
;

409 
	}
}

416 
	$ADC_SèπCÆibøti⁄
(
ADC_Ty≥Def
* 
ADCx
)

421 
ADCx
->
CR2
 |
CR2_CAL_Së
;

422 
	}
}

429 
FœgSètus
 
	$ADC_GëCÆibøti⁄Sètus
(
ADC_Ty≥Def
* 
ADCx
)

431 
FœgSètus
 
bô°©us
 = 
RESET
;

435 i‡((
ADCx
->
CR2
 & 
CR2_CAL_Së
Ë!(
uöt32_t
)
RESET
)

438 
bô°©us
 = 
SET
;

443 
bô°©us
 = 
RESET
;

446  
bô°©us
;

447 
	}
}

456 
	$ADC_So·w¨eSèπC⁄vCmd
(
ADC_Ty≥Def
* 
ADCx
, 
Fun˘i⁄ÆSèã
 
NewSèã
)

461 i‡(
NewSèã
 !
DISABLE
)

465 
ADCx
->
CR2
 |
CR2_EXTTRIG_SWSTART_Së
;

471 
ADCx
->
CR2
 &
CR2_EXTTRIG_SWSTART_Re£t
;

473 
	}
}

480 
FœgSètus
 
	$ADC_GëSo·w¨eSèπC⁄vSètus
(
ADC_Ty≥Def
* 
ADCx
)

482 
FœgSètus
 
bô°©us
 = 
RESET
;

486 i‡((
ADCx
->
CR2
 & 
CR2_SWSTART_Së
Ë!(
uöt32_t
)
RESET
)

489 
bô°©us
 = 
SET
;

494 
bô°©us
 = 
RESET
;

497  
bô°©us
;

498 
	}
}

508 
	$ADC_DiscModeCh™√lCou¡C⁄fig
(
ADC_Ty≥Def
* 
ADCx
, 
uöt8_t
 
Numbî
)

510 
uöt32_t
 
tm¥eg1
 = 0;

511 
uöt32_t
 
tm¥eg2
 = 0;

516 
tm¥eg1
 = 
ADCx
->
CR1
;

518 
tm¥eg1
 &
CR1_DISCNUM_Re£t
;

520 
tm¥eg2
 = 
Numbî
 - 1;

521 
tm¥eg1
 |
tm¥eg2
 << 13;

523 
ADCx
->
CR1
 = 
tm¥eg1
;

524 
	}
}

535 
	$ADC_DiscModeCmd
(
ADC_Ty≥Def
* 
ADCx
, 
Fun˘i⁄ÆSèã
 
NewSèã
)

540 i‡(
NewSèã
 !
DISABLE
)

543 
ADCx
->
CR1
 |
CR1_DISCEN_Së
;

548 
ADCx
->
CR1
 &
CR1_DISCEN_Re£t
;

550 
	}
}

589 
	$ADC_ReguœrCh™√lC⁄fig
(
ADC_Ty≥Def
* 
ADCx
, 
uöt8_t
 
ADC_Ch™√l
, uöt8_à
R™k
, uöt8_à
ADC_Sam∂eTime
)

591 
uöt32_t
 
tm¥eg1
 = 0, 
tm¥eg2
 = 0;

598 i‡(
ADC_Ch™√l
 > 
ADC_Ch™√l_9
)

601 
tm¥eg1
 = 
ADCx
->
SMPR1
;

603 
tm¥eg2
 = 
SMPR1_SMP_Së
 << (3 * (
ADC_Ch™√l
 - 10));

605 
tm¥eg1
 &~
tm¥eg2
;

607 
tm¥eg2
 = (
uöt32_t
)
ADC_Sam∂eTime
 << (3 * (
ADC_Ch™√l
 - 10));

609 
tm¥eg1
 |
tm¥eg2
;

611 
ADCx
->
SMPR1
 = 
tm¥eg1
;

616 
tm¥eg1
 = 
ADCx
->
SMPR2
;

618 
tm¥eg2
 = 
SMPR2_SMP_Së
 << (3 * 
ADC_Ch™√l
);

620 
tm¥eg1
 &~
tm¥eg2
;

622 
tm¥eg2
 = (
uöt32_t
)
ADC_Sam∂eTime
 << (3 * 
ADC_Ch™√l
);

624 
tm¥eg1
 |
tm¥eg2
;

626 
ADCx
->
SMPR2
 = 
tm¥eg1
;

629 i‡(
R™k
 < 7)

632 
tm¥eg1
 = 
ADCx
->
SQR3
;

634 
tm¥eg2
 = 
SQR3_SQ_Së
 << (5 * (
R™k
 - 1));

636 
tm¥eg1
 &~
tm¥eg2
;

638 
tm¥eg2
 = (
uöt32_t
)
ADC_Ch™√l
 << (5 * (
R™k
 - 1));

640 
tm¥eg1
 |
tm¥eg2
;

642 
ADCx
->
SQR3
 = 
tm¥eg1
;

645 i‡(
R™k
 < 13)

648 
tm¥eg1
 = 
ADCx
->
SQR2
;

650 
tm¥eg2
 = 
SQR2_SQ_Së
 << (5 * (
R™k
 - 7));

652 
tm¥eg1
 &~
tm¥eg2
;

654 
tm¥eg2
 = (
uöt32_t
)
ADC_Ch™√l
 << (5 * (
R™k
 - 7));

656 
tm¥eg1
 |
tm¥eg2
;

658 
ADCx
->
SQR2
 = 
tm¥eg1
;

664 
tm¥eg1
 = 
ADCx
->
SQR1
;

666 
tm¥eg2
 = 
SQR1_SQ_Së
 << (5 * (
R™k
 - 13));

668 
tm¥eg1
 &~
tm¥eg2
;

670 
tm¥eg2
 = (
uöt32_t
)
ADC_Ch™√l
 << (5 * (
R™k
 - 13));

672 
tm¥eg1
 |
tm¥eg2
;

674 
ADCx
->
SQR1
 = 
tm¥eg1
;

676 
	}
}

685 
	$ADC_Exã∫ÆTrigC⁄vCmd
(
ADC_Ty≥Def
* 
ADCx
, 
Fun˘i⁄ÆSèã
 
NewSèã
)

690 i‡(
NewSèã
 !
DISABLE
)

693 
ADCx
->
CR2
 |
CR2_EXTTRIG_Së
;

698 
ADCx
->
CR2
 &
CR2_EXTTRIG_Re£t
;

700 
	}
}

707 
uöt16_t
 
	$ADC_GëC⁄vîsi⁄VÆue
(
ADC_Ty≥Def
* 
ADCx
)

712  (
uöt16_t
Ë
ADCx
->
DR
;

713 
	}
}

719 
uöt32_t
 
	$ADC_GëDuÆModeC⁄vîsi⁄VÆue
()

722  (*(
__IO
 
uöt32_t
 *Ë
DR_ADDRESS
);

723 
	}
}

733 
	$ADC_AutoInje˘edC⁄vCmd
(
ADC_Ty≥Def
* 
ADCx
, 
Fun˘i⁄ÆSèã
 
NewSèã
)

738 i‡(
NewSèã
 !
DISABLE
)

741 
ADCx
->
CR1
 |
CR1_JAUTO_Së
;

746 
ADCx
->
CR1
 &
CR1_JAUTO_Re£t
;

748 
	}
}

759 
	$ADC_Inje˘edDiscModeCmd
(
ADC_Ty≥Def
* 
ADCx
, 
Fun˘i⁄ÆSèã
 
NewSèã
)

764 i‡(
NewSèã
 !
DISABLE
)

767 
ADCx
->
CR1
 |
CR1_JDISCEN_Së
;

772 
ADCx
->
CR1
 &
CR1_JDISCEN_Re£t
;

774 
	}
}

798 
	$ADC_Exã∫ÆTrigInje˘edC⁄vC⁄fig
(
ADC_Ty≥Def
* 
ADCx
, 
uöt32_t
 
ADC_Exã∫ÆTrigInjecC⁄v
)

800 
uöt32_t
 
tm¥eg
 = 0;

805 
tm¥eg
 = 
ADCx
->
CR2
;

807 
tm¥eg
 &
CR2_JEXTSEL_Re£t
;

809 
tm¥eg
 |
ADC_Exã∫ÆTrigInjecC⁄v
;

811 
ADCx
->
CR2
 = 
tm¥eg
;

812 
	}
}

823 
	$ADC_Exã∫ÆTrigInje˘edC⁄vCmd
(
ADC_Ty≥Def
* 
ADCx
, 
Fun˘i⁄ÆSèã
 
NewSèã
)

828 i‡(
NewSèã
 !
DISABLE
)

831 
ADCx
->
CR2
 |
CR2_JEXTTRIG_Së
;

836 
ADCx
->
CR2
 &
CR2_JEXTTRIG_Re£t
;

838 
	}
}

848 
	$ADC_So·w¨eSèπInje˘edC⁄vCmd
(
ADC_Ty≥Def
* 
ADCx
, 
Fun˘i⁄ÆSèã
 
NewSèã
)

853 i‡(
NewSèã
 !
DISABLE
)

857 
ADCx
->
CR2
 |
CR2_JEXTTRIG_JSWSTART_Së
;

863 
ADCx
->
CR2
 &
CR2_JEXTTRIG_JSWSTART_Re£t
;

865 
	}
}

872 
FœgSètus
 
	$ADC_GëSo·w¨eSèπInje˘edC⁄vCmdSètus
(
ADC_Ty≥Def
* 
ADCx
)

874 
FœgSètus
 
bô°©us
 = 
RESET
;

878 i‡((
ADCx
->
CR2
 & 
CR2_JSWSTART_Së
Ë!(
uöt32_t
)
RESET
)

881 
bô°©us
 = 
SET
;

886 
bô°©us
 = 
RESET
;

889  
bô°©us
;

890 
	}
}

929 
	$ADC_Inje˘edCh™√lC⁄fig
(
ADC_Ty≥Def
* 
ADCx
, 
uöt8_t
 
ADC_Ch™√l
, uöt8_à
R™k
, uöt8_à
ADC_Sam∂eTime
)

931 
uöt32_t
 
tm¥eg1
 = 0, 
tm¥eg2
 = 0, 
tm¥eg3
 = 0;

938 i‡(
ADC_Ch™√l
 > 
ADC_Ch™√l_9
)

941 
tm¥eg1
 = 
ADCx
->
SMPR1
;

943 
tm¥eg2
 = 
SMPR1_SMP_Së
 << (3*(
ADC_Ch™√l
 - 10));

945 
tm¥eg1
 &~
tm¥eg2
;

947 
tm¥eg2
 = (
uöt32_t
)
ADC_Sam∂eTime
 << (3*(
ADC_Ch™√l
 - 10));

949 
tm¥eg1
 |
tm¥eg2
;

951 
ADCx
->
SMPR1
 = 
tm¥eg1
;

956 
tm¥eg1
 = 
ADCx
->
SMPR2
;

958 
tm¥eg2
 = 
SMPR2_SMP_Së
 << (3 * 
ADC_Ch™√l
);

960 
tm¥eg1
 &~
tm¥eg2
;

962 
tm¥eg2
 = (
uöt32_t
)
ADC_Sam∂eTime
 << (3 * 
ADC_Ch™√l
);

964 
tm¥eg1
 |
tm¥eg2
;

966 
ADCx
->
SMPR2
 = 
tm¥eg1
;

970 
tm¥eg1
 = 
ADCx
->
JSQR
;

972 
tm¥eg3
 = (
tm¥eg1
 & 
JSQR_JL_Së
)>> 20;

974 
tm¥eg2
 = 
JSQR_JSQ_Së
 << (5 * (
uöt8_t
)((
R™k
 + 3Ë- (
tm¥eg3
 + 1)));

976 
tm¥eg1
 &~
tm¥eg2
;

978 
tm¥eg2
 = (
uöt32_t
)
ADC_Ch™√l
 << (5 * (
uöt8_t
)((
R™k
 + 3Ë- (
tm¥eg3
 + 1)));

980 
tm¥eg1
 |
tm¥eg2
;

982 
ADCx
->
JSQR
 = 
tm¥eg1
;

983 
	}
}

992 
	$ADC_Inje˘edSequí˚rLígthC⁄fig
(
ADC_Ty≥Def
* 
ADCx
, 
uöt8_t
 
Lígth
)

994 
uöt32_t
 
tm¥eg1
 = 0;

995 
uöt32_t
 
tm¥eg2
 = 0;

1001 
tm¥eg1
 = 
ADCx
->
JSQR
;

1003 
tm¥eg1
 &
JSQR_JL_Re£t
;

1005 
tm¥eg2
 = 
Lígth
 - 1;

1006 
tm¥eg1
 |
tm¥eg2
 << 20;

1008 
ADCx
->
JSQR
 = 
tm¥eg1
;

1009 
	}
}

1024 
	$ADC_SëInje˘edOff£t
(
ADC_Ty≥Def
* 
ADCx
, 
uöt8_t
 
ADC_Inje˘edCh™√l
, 
uöt16_t
 
Off£t
)

1026 
__IO
 
uöt32_t
 
tmp
 = 0;

1033 
tmp
 = (
uöt32_t
)
ADCx
;

1034 
tmp
 +
ADC_Inje˘edCh™√l
;

1037 *(
__IO
 
uöt32_t
 *Ë
tmp
 = (uöt32_t)
Off£t
;

1038 
	}
}

1051 
uöt16_t
 
	$ADC_GëInje˘edC⁄vîsi⁄VÆue
(
ADC_Ty≥Def
* 
ADCx
, 
uöt8_t
 
ADC_Inje˘edCh™√l
)

1053 
__IO
 
uöt32_t
 
tmp
 = 0;

1059 
tmp
 = (
uöt32_t
)
ADCx
;

1060 
tmp
 +
ADC_Inje˘edCh™√l
 + 
JDR_Off£t
;

1063  (
uöt16_t
Ë(*(
__IO
 
uöt32_t
*Ë
tmp
);

1064 
	}
}

1081 
	$ADC_A«logW©chdogCmd
(
ADC_Ty≥Def
* 
ADCx
, 
uöt32_t
 
ADC_A«logW©chdog
)

1083 
uöt32_t
 
tm¥eg
 = 0;

1088 
tm¥eg
 = 
ADCx
->
CR1
;

1090 
tm¥eg
 &
CR1_AWDMode_Re£t
;

1092 
tm¥eg
 |
ADC_A«logW©chdog
;

1094 
ADCx
->
CR1
 = 
tm¥eg
;

1095 
	}
}

1106 
	$ADC_A«logW©chdogThªshﬁdsC⁄fig
(
ADC_Ty≥Def
* 
ADCx
, 
uöt16_t
 
HighThªshﬁd
,

1107 
uöt16_t
 
LowThªshﬁd
)

1114 
ADCx
->
HTR
 = 
HighThªshﬁd
;

1116 
ADCx
->
LTR
 = 
LowThªshﬁd
;

1117 
	}
}

1144 
	$ADC_A«logW©chdogSögÀCh™√lC⁄fig
(
ADC_Ty≥Def
* 
ADCx
, 
uöt8_t
 
ADC_Ch™√l
)

1146 
uöt32_t
 
tm¥eg
 = 0;

1151 
tm¥eg
 = 
ADCx
->
CR1
;

1153 
tm¥eg
 &
CR1_AWDCH_Re£t
;

1155 
tm¥eg
 |
ADC_Ch™√l
;

1157 
ADCx
->
CR1
 = 
tm¥eg
;

1158 
	}
}

1166 
	$ADC_TempSís‹VªfötCmd
(
Fun˘i⁄ÆSèã
 
NewSèã
)

1170 i‡(
NewSèã
 !
DISABLE
)

1173 
ADC1
->
CR2
 |
CR2_TSVREFE_Së
;

1178 
ADC1
->
CR2
 &
CR2_TSVREFE_Re£t
;

1180 
	}
}

1194 
FœgSètus
 
	$ADC_GëFœgSètus
(
ADC_Ty≥Def
* 
ADCx
, 
uöt8_t
 
ADC_FLAG
)

1196 
FœgSètus
 
bô°©us
 = 
RESET
;

1201 i‡((
ADCx
->
SR
 & 
ADC_FLAG
Ë!(
uöt8_t
)
RESET
)

1204 
bô°©us
 = 
SET
;

1209 
bô°©us
 = 
RESET
;

1212  
bô°©us
;

1213 
	}
}

1227 
	$ADC_CÀ¨Fœg
(
ADC_Ty≥Def
* 
ADCx
, 
uöt8_t
 
ADC_FLAG
)

1233 
ADCx
->
SR
 = ~(
uöt32_t
)
ADC_FLAG
;

1234 
	}
}

1246 
ITSètus
 
	$ADC_GëITSètus
(
ADC_Ty≥Def
* 
ADCx
, 
uöt16_t
 
ADC_IT
)

1248 
ITSètus
 
bô°©us
 = 
RESET
;

1249 
uöt32_t
 
ômask
 = 0, 
íabÀ°©us
 = 0;

1254 
ômask
 = 
ADC_IT
 >> 8;

1256 
íabÀ°©us
 = (
ADCx
->
CR1
 & (
uöt8_t
)
ADC_IT
) ;

1258 i‡(((
ADCx
->
SR
 & 
ômask
Ë!(
uöt32_t
)
RESET
Ë&& 
íabÀ°©us
)

1261 
bô°©us
 = 
SET
;

1266 
bô°©us
 = 
RESET
;

1269  
bô°©us
;

1270 
	}
}

1282 
	$ADC_CÀ¨ITPídögBô
(
ADC_Ty≥Def
* 
ADCx
, 
uöt16_t
 
ADC_IT
)

1284 
uöt8_t
 
ômask
 = 0;

1289 
ômask
 = (
uöt8_t
)(
ADC_IT
 >> 8);

1291 
ADCx
->
SR
 = ~(
uöt32_t
)
ômask
;

1292 
	}
}

	@Source/STM32F10x_StdPeriph_Driver/src/stm32f10x_bkp.c

22 
	~"°m32f10x_bkp.h
"

23 
	~"°m32f10x_rcc.h
"

29 
	#BKP_OFFSET
 (
BKP_BASE
 - 
PERIPH_BASE
)

	)

34 
	#CR_OFFSET
 (
BKP_OFFSET
 + 0x30)

	)

35 
	#TPAL_BôNumbî
 0x01

	)

36 
	#CR_TPAL_BB
 (
PERIPH_BB_BASE
 + (
CR_OFFSET
 * 32Ë+ (
TPAL_BôNumbî
 * 4))

	)

39 
	#TPE_BôNumbî
 0x00

	)

40 
	#CR_TPE_BB
 (
PERIPH_BB_BASE
 + (
CR_OFFSET
 * 32Ë+ (
TPE_BôNumbî
 * 4))

	)

45 
	#CSR_OFFSET
 (
BKP_OFFSET
 + 0x34)

	)

46 
	#TPIE_BôNumbî
 0x02

	)

47 
	#CSR_TPIE_BB
 (
PERIPH_BB_BASE
 + (
CSR_OFFSET
 * 32Ë+ (
TPIE_BôNumbî
 * 4))

	)

50 
	#TIF_BôNumbî
 0x09

	)

51 
	#CSR_TIF_BB
 (
PERIPH_BB_BASE
 + (
CSR_OFFSET
 * 32Ë+ (
TIF_BôNumbî
 * 4))

	)

54 
	#TEF_BôNumbî
 0x08

	)

55 
	#CSR_TEF_BB
 (
PERIPH_BB_BASE
 + (
CSR_OFFSET
 * 32Ë+ (
TEF_BôNumbî
 * 4))

	)

60 
	#RTCCR_CAL_Mask
 ((
uöt16_t
)0xFF80)

	)

61 
	#RTCCR_Mask
 ((
uöt16_t
)0xFC7F)

	)

64 
	#CSR_CTE_Së
 ((
uöt16_t
)0x0001)

	)

65 
	#CSR_CTI_Së
 ((
uöt16_t
)0x0002)

	)

77 
	$BKP_DeInô
()

79 
	`RCC_BackupRe£tCmd
(
ENABLE
);

80 
	`RCC_BackupRe£tCmd
(
DISABLE
);

81 
	}
}

91 
	$BKP_Tam≥rPöLevñC⁄fig
(
uöt16_t
 
BKP_Tam≥rPöLevñ
)

94 
	`as£π_∑øm
(
	`IS_BKP_TAMPER_PIN_LEVEL
(
BKP_Tam≥rPöLevñ
));

95 *(
__IO
 
uöt32_t
 *Ë
CR_TPAL_BB
 = 
BKP_Tam≥rPöLevñ
;

96 
	}
}

104 
	$BKP_Tam≥rPöCmd
(
Fun˘i⁄ÆSèã
 
NewSèã
)

107 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

108 *(
__IO
 
uöt32_t
 *Ë
CR_TPE_BB
 = (uöt32_t)
NewSèã
;

109 
	}
}

117 
	$BKP_ITC⁄fig
(
Fun˘i⁄ÆSèã
 
NewSèã
)

120 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

121 *(
__IO
 
uöt32_t
 *Ë
CSR_TPIE_BB
 = (uöt32_t)
NewSèã
;

122 
	}
}

134 
	$BKP_RTCOuçutC⁄fig
(
uöt16_t
 
BKP_RTCOuçutSour˚
)

136 
uöt16_t
 
tm¥eg
 = 0;

138 
	`as£π_∑øm
(
	`IS_BKP_RTC_OUTPUT_SOURCE
(
BKP_RTCOuçutSour˚
));

139 
tm¥eg
 = 
BKP
->
RTCCR
;

141 
tm¥eg
 &
RTCCR_Mask
;

144 
tm¥eg
 |
BKP_RTCOuçutSour˚
;

146 
BKP
->
RTCCR
 = 
tm¥eg
;

147 
	}
}

155 
	$BKP_SëRTCCÆibøti⁄VÆue
(
uöt8_t
 
CÆibøti⁄VÆue
)

157 
uöt16_t
 
tm¥eg
 = 0;

159 
	`as£π_∑øm
(
	`IS_BKP_CALIBRATION_VALUE
(
CÆibøti⁄VÆue
));

160 
tm¥eg
 = 
BKP
->
RTCCR
;

162 
tm¥eg
 &
RTCCR_CAL_Mask
;

164 
tm¥eg
 |
CÆibøti⁄VÆue
;

166 
BKP
->
RTCCR
 = 
tm¥eg
;

167 
	}
}

176 
	$BKP_WrôeBackupRegi°î
(
uöt16_t
 
BKP_DR
, uöt16_à
D©a
)

178 
__IO
 
uöt32_t
 
tmp
 = 0;

181 
	`as£π_∑øm
(
	`IS_BKP_DR
(
BKP_DR
));

183 
tmp
 = (
uöt32_t
)
BKP_BASE
;

184 
tmp
 +
BKP_DR
;

186 *(
__IO
 
uöt32_t
 *Ë
tmp
 = 
D©a
;

187 
	}
}

195 
uöt16_t
 
	$BKP_RódBackupRegi°î
(
uöt16_t
 
BKP_DR
)

197 
__IO
 
uöt32_t
 
tmp
 = 0;

200 
	`as£π_∑øm
(
	`IS_BKP_DR
(
BKP_DR
));

202 
tmp
 = (
uöt32_t
)
BKP_BASE
;

203 
tmp
 +
BKP_DR
;

205  (*(
__IO
 
uöt16_t
 *Ë
tmp
);

206 
	}
}

213 
FœgSètus
 
	$BKP_GëFœgSètus
()

215  (
FœgSètus
)(*(
__IO
 
uöt32_t
 *Ë
CSR_TEF_BB
);

216 
	}
}

223 
	$BKP_CÀ¨Fœg
()

226 
BKP
->
CSR
 |
CSR_CTE_Së
;

227 
	}
}

234 
ITSètus
 
	$BKP_GëITSètus
()

236  (
ITSètus
)(*(
__IO
 
uöt32_t
 *Ë
CSR_TIF_BB
);

237 
	}
}

244 
	$BKP_CÀ¨ITPídögBô
()

247 
BKP
->
CSR
 |
CSR_CTI_Së
;

248 
	}
}

	@Source/STM32F10x_StdPeriph_Driver/src/stm32f10x_can.c

22 
	~"°m32f10x_ˇn.h
"

23 
	~"°m32f10x_rcc.h
"

47 
	#MCR_INRQ
 ((
uöt32_t
)0x00000001Ë

	)

48 
	#MCR_SLEEP
 ((
uöt32_t
)0x00000002Ë

	)

49 
	#MCR_TXFP
 ((
uöt32_t
)0x00000004Ë

	)

50 
	#MCR_RFLM
 ((
uöt32_t
)0x00000008Ë

	)

51 
	#MCR_NART
 ((
uöt32_t
)0x00000010Ë

	)

52 
	#MCR_AWUM
 ((
uöt32_t
)0x00000020Ë

	)

53 
	#MCR_ABOM
 ((
uöt32_t
)0x00000040Ë

	)

54 
	#MCR_TTCM
 ((
uöt32_t
)0x00000080Ë

	)

55 
	#MCR_RESET
 ((
uöt32_t
)0x00008000Ë

	)

56 
	#MCR_DBF
 ((
uöt32_t
)0x00010000Ë

	)

59 
	#MSR_INAK
 ((
uöt32_t
)0x00000001Ë

	)

60 
	#MSR_WKUI
 ((
uöt32_t
)0x00000008Ë

	)

61 
	#MSR_SLAKI
 ((
uöt32_t
)0x00000010Ë

	)

64 
	#TSR_RQCP0
 ((
uöt32_t
)0x00000001Ë

	)

65 
	#TSR_TXOK0
 ((
uöt32_t
)0x00000002Ë

	)

66 
	#TSR_ABRQ0
 ((
uöt32_t
)0x00000080Ë

	)

67 
	#TSR_RQCP1
 ((
uöt32_t
)0x00000100Ë

	)

68 
	#TSR_TXOK1
 ((
uöt32_t
)0x00000200Ë

	)

69 
	#TSR_ABRQ1
 ((
uöt32_t
)0x00008000Ë

	)

70 
	#TSR_RQCP2
 ((
uöt32_t
)0x00010000Ë

	)

71 
	#TSR_TXOK2
 ((
uöt32_t
)0x00020000Ë

	)

72 
	#TSR_ABRQ2
 ((
uöt32_t
)0x00800000Ë

	)

73 
	#TSR_TME0
 ((
uöt32_t
)0x04000000Ë

	)

74 
	#TSR_TME1
 ((
uöt32_t
)0x08000000Ë

	)

75 
	#TSR_TME2
 ((
uöt32_t
)0x10000000Ë

	)

78 
	#RF0R_FULL0
 ((
uöt32_t
)0x00000008Ë

	)

79 
	#RF0R_FOVR0
 ((
uöt32_t
)0x00000010Ë

	)

80 
	#RF0R_RFOM0
 ((
uöt32_t
)0x00000020Ë

	)

83 
	#RF1R_FULL1
 ((
uöt32_t
)0x00000008Ë

	)

84 
	#RF1R_FOVR1
 ((
uöt32_t
)0x00000010Ë

	)

85 
	#RF1R_RFOM1
 ((
uöt32_t
)0x00000020Ë

	)

88 
	#ESR_EWGF
 ((
uöt32_t
)0x00000001Ë

	)

89 
	#ESR_EPVF
 ((
uöt32_t
)0x00000002Ë

	)

90 
	#ESR_BOFF
 ((
uöt32_t
)0x00000004Ë

	)

93 
	#TMIDxR_TXRQ
 ((
uöt32_t
)0x00000001Ë

	)

96 
	#FMR_FINIT
 ((
uöt32_t
)0x00000001Ë

	)

99 
	#INAK_TimeOut
 ((
uöt32_t
)0x0000FFFF)

	)

102 
	#SLAK_TimeOut
 ((
uöt32_t
)0x0000FFFF)

	)

128 
ITSètus
 
CheckITSètus
(
uöt32_t
 
CAN_Reg
, uöt32_à
It_Bô
);

143 
	$CAN_DeInô
(
CAN_Ty≥Def
* 
CANx
)

148 i‡(
CANx
 =
CAN1
)

151 
	`RCC_APB1PîùhRe£tCmd
(
RCC_APB1Pîùh_CAN1
, 
ENABLE
);

153 
	`RCC_APB1PîùhRe£tCmd
(
RCC_APB1Pîùh_CAN1
, 
DISABLE
);

158 
	`RCC_APB1PîùhRe£tCmd
(
RCC_APB1Pîùh_CAN2
, 
ENABLE
);

160 
	`RCC_APB1PîùhRe£tCmd
(
RCC_APB1Pîùh_CAN2
, 
DISABLE
);

162 
	}
}

173 
uöt8_t
 
	$CAN_Inô
(
CAN_Ty≥Def
* 
CANx
, 
CAN_InôTy≥Def
* 
CAN_InôSåu˘
)

175 
uöt8_t
 
InôSètus
 = 
CANINITFAILED
;

176 
uöt32_t
 
waô_ack
 = 0x00000000;

194 
CANx
->
MCR
 &~
MCR_SLEEP
;

197 
CANx
->
MCR
 |
MCR_INRQ
 ;

200 ((
CANx
->
MSR
 & 
MSR_INAK
Ë!MSR_INAKË&& (
waô_ack
 !
INAK_TimeOut
))

202 
waô_ack
++;

206 i‡((
CANx
->
MSR
 & 
MSR_INAK
) != MSR_INAK)

208 
InôSètus
 = 
CANINITFAILED
;

213 i‡(
CAN_InôSåu˘
->
CAN_TTCM
 =
ENABLE
)

215 
CANx
->
MCR
 |
MCR_TTCM
;

219 
CANx
->
MCR
 &~
MCR_TTCM
;

223 i‡(
CAN_InôSåu˘
->
CAN_ABOM
 =
ENABLE
)

225 
CANx
->
MCR
 |
MCR_ABOM
;

229 
CANx
->
MCR
 &~
MCR_ABOM
;

233 i‡(
CAN_InôSåu˘
->
CAN_AWUM
 =
ENABLE
)

235 
CANx
->
MCR
 |
MCR_AWUM
;

239 
CANx
->
MCR
 &~
MCR_AWUM
;

243 i‡(
CAN_InôSåu˘
->
CAN_NART
 =
ENABLE
)

245 
CANx
->
MCR
 |
MCR_NART
;

249 
CANx
->
MCR
 &~
MCR_NART
;

253 i‡(
CAN_InôSåu˘
->
CAN_RFLM
 =
ENABLE
)

255 
CANx
->
MCR
 |
MCR_RFLM
;

259 
CANx
->
MCR
 &~
MCR_RFLM
;

263 i‡(
CAN_InôSåu˘
->
CAN_TXFP
 =
ENABLE
)

265 
CANx
->
MCR
 |
MCR_TXFP
;

269 
CANx
->
MCR
 &~
MCR_TXFP
;

273 
CANx
->
BTR
 = (
uöt32_t
)((uöt32_t)
CAN_InôSåu˘
->
CAN_Mode
 << 30Ë| ((uöt32_t)CAN_InôSåu˘->
CAN_SJW
 << 24) |

274 ((
uöt32_t
)
CAN_InôSåu˘
->
CAN_BS1
 << 16Ë| ((uöt32_t)CAN_InôSåu˘->
CAN_BS2
 << 20) |

275 ((
uöt32_t
)
CAN_InôSåu˘
->
CAN_PªsˇÀr
 - 1);

278 
CANx
->
MCR
 &~
MCR_INRQ
;

281 
waô_ack
 = 0x00;

283 ((
CANx
->
MSR
 & 
MSR_INAK
Ë=MSR_INAKË&& (
waô_ack
 !
INAK_TimeOut
))

285 
waô_ack
++;

289 i‡((
CANx
->
MSR
 & 
MSR_INAK
) == MSR_INAK)

291 
InôSètus
 = 
CANINITFAILED
;

295 
InôSètus
 = 
CANINITOK
 ;

300  
InôSètus
;

301 
	}
}

310 
	$CAN_FûãrInô
(
CAN_FûãrInôTy≥Def
* 
CAN_FûãrInôSåu˘
)

312 
uöt32_t
 
fûãr_numbî_bô_pos
 = 0;

320 
fûãr_numbî_bô_pos
 = ((
uöt32_t
)0x00000001Ë<< 
CAN_FûãrInôSåu˘
->
CAN_FûãrNumbî
;

323 
CAN1
->
FMR
 |
FMR_FINIT
;

326 
CAN1
->
FA1R
 &~(
uöt32_t
)
fûãr_numbî_bô_pos
;

329 i‡(
CAN_FûãrInôSåu˘
->
CAN_FûãrSˇÀ
 =
CAN_FûãrSˇÀ_16bô
)

332 
CAN1
->
FS1R
 &~(
uöt32_t
)
fûãr_numbî_bô_pos
;

336 
CAN1
->
sFûãrRegi°î
[
CAN_FûãrInôSåu˘
->
CAN_FûãrNumbî
].
FR1
 =

337 ((0x0000FFFF & (
uöt32_t
)
CAN_FûãrInôSåu˘
->
CAN_FûãrMaskIdLow
) << 16) |

338 (0x0000FFFF & (
uöt32_t
)
CAN_FûãrInôSåu˘
->
CAN_FûãrIdLow
);

342 
CAN1
->
sFûãrRegi°î
[
CAN_FûãrInôSåu˘
->
CAN_FûãrNumbî
].
FR2
 =

343 ((0x0000FFFF & (
uöt32_t
)
CAN_FûãrInôSåu˘
->
CAN_FûãrMaskIdHigh
) << 16) |

344 (0x0000FFFF & (
uöt32_t
)
CAN_FûãrInôSåu˘
->
CAN_FûãrIdHigh
);

347 i‡(
CAN_FûãrInôSåu˘
->
CAN_FûãrSˇÀ
 =
CAN_FûãrSˇÀ_32bô
)

350 
CAN1
->
FS1R
 |
fûãr_numbî_bô_pos
;

352 
CAN1
->
sFûãrRegi°î
[
CAN_FûãrInôSåu˘
->
CAN_FûãrNumbî
].
FR1
 =

353 ((0x0000FFFF & (
uöt32_t
)
CAN_FûãrInôSåu˘
->
CAN_FûãrIdHigh
) << 16) |

354 (0x0000FFFF & (
uöt32_t
)
CAN_FûãrInôSåu˘
->
CAN_FûãrIdLow
);

356 
CAN1
->
sFûãrRegi°î
[
CAN_FûãrInôSåu˘
->
CAN_FûãrNumbî
].
FR2
 =

357 ((0x0000FFFF & (
uöt32_t
)
CAN_FûãrInôSåu˘
->
CAN_FûãrMaskIdHigh
) << 16) |

358 (0x0000FFFF & (
uöt32_t
)
CAN_FûãrInôSåu˘
->
CAN_FûãrMaskIdLow
);

362 i‡(
CAN_FûãrInôSåu˘
->
CAN_FûãrMode
 =
CAN_FûãrMode_IdMask
)

365 
CAN1
->
FM1R
 &~(
uöt32_t
)
fûãr_numbî_bô_pos
;

370 
CAN1
->
FM1R
 |(
uöt32_t
)
fûãr_numbî_bô_pos
;

374 i‡(
CAN_FûãrInôSåu˘
->
CAN_FûãrFIFOAssignmít
 =
CAN_FûãrFIFO0
)

377 
CAN1
->
FFA1R
 &~(
uöt32_t
)
fûãr_numbî_bô_pos
;

380 i‡(
CAN_FûãrInôSåu˘
->
CAN_FûãrFIFOAssignmít
 =
CAN_FûãrFIFO1
)

383 
CAN1
->
FFA1R
 |(
uöt32_t
)
fûãr_numbî_bô_pos
;

387 i‡(
CAN_FûãrInôSåu˘
->
CAN_FûãrA˘iv©i⁄
 =
ENABLE
)

389 
CAN1
->
FA1R
 |
fûãr_numbî_bô_pos
;

393 
CAN1
->
FMR
 &~
FMR_FINIT
;

394 
	}
}

402 
	$CAN_Såu˘Inô
(
CAN_InôTy≥Def
* 
CAN_InôSåu˘
)

406 
CAN_InôSåu˘
->
CAN_TTCM
 = 
DISABLE
;

408 
CAN_InôSåu˘
->
CAN_ABOM
 = 
DISABLE
;

410 
CAN_InôSåu˘
->
CAN_AWUM
 = 
DISABLE
;

412 
CAN_InôSåu˘
->
CAN_NART
 = 
DISABLE
;

414 
CAN_InôSåu˘
->
CAN_RFLM
 = 
DISABLE
;

416 
CAN_InôSåu˘
->
CAN_TXFP
 = 
DISABLE
;

418 
CAN_InôSåu˘
->
CAN_Mode
 = 
CAN_Mode_N‹mÆ
;

420 
CAN_InôSåu˘
->
CAN_SJW
 = 
CAN_SJW_1tq
;

422 
CAN_InôSåu˘
->
CAN_BS1
 = 
CAN_BS1_4tq
;

424 
CAN_InôSåu˘
->
CAN_BS2
 = 
CAN_BS2_3tq
;

426 
CAN_InôSåu˘
->
CAN_PªsˇÀr
 = 1;

427 
	}
}

435 
	$CAN_SœveSèπB™k
(
uöt8_t
 
CAN_B™kNumbî
)

440 
CAN1
->
FMR
 |
FMR_FINIT
;

442 
CAN1
->
FMR
 &(
uöt32_t
)0xFFFFC0F1 ;

443 
CAN1
->
FMR
 |(
uöt32_t
)(
CAN_B™kNumbî
)<<8;

445 
CAN1
->
FMR
 &~
FMR_FINIT
;

446 
	}
}

461 
	$CAN_ITC⁄fig
(
CAN_Ty≥Def
* 
CANx
, 
uöt32_t
 
CAN_IT
, 
Fun˘i⁄ÆSèã
 
NewSèã
)

468 i‡(
NewSèã
 !
DISABLE
)

471 
CANx
->
IER
 |
CAN_IT
;

476 
CANx
->
IER
 &~
CAN_IT
;

478 
	}
}

488 
uöt8_t
 
	$CAN_Tønsmô
(
CAN_Ty≥Def
* 
CANx
, 
C™TxMsg
* 
TxMesßge
)

490 
uöt8_t
 
å™smô_maûbox
 = 0;

498 i‡((
CANx
->
TSR
&
TSR_TME0
) == TSR_TME0)

500 
å™smô_maûbox
 = 0;

502 i‡((
CANx
->
TSR
&
TSR_TME1
) == TSR_TME1)

504 
å™smô_maûbox
 = 1;

506 i‡((
CANx
->
TSR
&
TSR_TME2
) == TSR_TME2)

508 
å™smô_maûbox
 = 2;

512 
å™smô_maûbox
 = 
CAN_NO_MB
;

515 i‡(
å™smô_maûbox
 !
CAN_NO_MB
)

518 
CANx
->
sTxMaûBox
[
å™smô_maûbox
].
TIR
 &
TMIDxR_TXRQ
;

519 i‡(
TxMesßge
->
IDE
 =
CAN_ID_STD
)

522 
CANx
->
sTxMaûBox
[
å™smô_maûbox
].
TIR
 |((
TxMesßge
->
StdId
 << 21Ë| TxMesßge->
RTR
);

527 
CANx
->
sTxMaûBox
[
å™smô_maûbox
].
TIR
 |((
TxMesßge
->
ExtId
<<3Ë| TxMesßge->
IDE
 |

528 
TxMesßge
->
RTR
);

533 
TxMesßge
->
DLC
 &(
uöt8_t
)0x0000000F;

534 
CANx
->
sTxMaûBox
[
å™smô_maûbox
].
TDTR
 &(
uöt32_t
)0xFFFFFFF0;

535 
CANx
->
sTxMaûBox
[
å™smô_maûbox
].
TDTR
 |
TxMesßge
->
DLC
;

538 
CANx
->
sTxMaûBox
[
å™smô_maûbox
].
TDLR
 = (((
uöt32_t
)
TxMesßge
->
D©a
[3] << 24) |

539 ((
uöt32_t
)
TxMesßge
->
D©a
[2] << 16) |

540 ((
uöt32_t
)
TxMesßge
->
D©a
[1] << 8) |

541 ((
uöt32_t
)
TxMesßge
->
D©a
[0]));

542 
CANx
->
sTxMaûBox
[
å™smô_maûbox
].
TDHR
 = (((
uöt32_t
)
TxMesßge
->
D©a
[7] << 24) |

543 ((
uöt32_t
)
TxMesßge
->
D©a
[6] << 16) |

544 ((
uöt32_t
)
TxMesßge
->
D©a
[5] << 8) |

545 ((
uöt32_t
)
TxMesßge
->
D©a
[4]));

547 
CANx
->
sTxMaûBox
[
å™smô_maûbox
].
TIR
 |
TMIDxR_TXRQ
;

549  
å™smô_maûbox
;

550 
	}
}

558 
uöt8_t
 
	$CAN_TønsmôSètus
(
CAN_Ty≥Def
* 
CANx
, 
uöt8_t
 
TønsmôMaûbox
)

561 
uöt8_t
 
°©e
 = 0;

565 
TønsmôMaûbox
)

567 (0): 
°©e
 |(
uöt8_t
)((
CANx
->
TSR
 & 
TSR_RQCP0
) << 2);

568 
°©e
 |(
uöt8_t
)((
CANx
->
TSR
 & 
TSR_TXOK0
) >> 0);

569 
°©e
 |(
uöt8_t
)((
CANx
->
TSR
 & 
TSR_TME0
) >> 26);

571 (1): 
°©e
 |(
uöt8_t
)((
CANx
->
TSR
 & 
TSR_RQCP1
) >> 6);

572 
°©e
 |(
uöt8_t
)((
CANx
->
TSR
 & 
TSR_TXOK1
) >> 8);

573 
°©e
 |(
uöt8_t
)((
CANx
->
TSR
 & 
TSR_TME1
) >> 27);

575 (2): 
°©e
 |(
uöt8_t
)((
CANx
->
TSR
 & 
TSR_RQCP2
) >> 14);

576 
°©e
 |(
uöt8_t
)((
CANx
->
TSR
 & 
TSR_TXOK2
) >> 16);

577 
°©e
 |(
uöt8_t
)((
CANx
->
TSR
 & 
TSR_TME2
) >> 28);

580 
°©e
 = 
CANTXFAILED
;

583 
°©e
)

586 (0x0): 
°©e
 = 
CANTXPENDING
;

589 (0x5): 
°©e
 = 
CANTXFAILED
;

592 (0x7): 
°©e
 = 
CANTXOK
;

595 
°©e
 = 
CANTXFAILED
;

598  
°©e
;

599 
	}
}

607 
	$CAN_C™˚lTønsmô
(
CAN_Ty≥Def
* 
CANx
, 
uöt8_t
 
Maûbox
)

613 
Maûbox
)

615 (0): 
CANx
->
TSR
 |
TSR_ABRQ0
;

617 (1): 
CANx
->
TSR
 |
TSR_ABRQ1
;

619 (2): 
CANx
->
TSR
 |
TSR_ABRQ2
;

624 
	}
}

632 
	$CAN_FIFORñó£
(
CAN_Ty≥Def
* 
CANx
, 
uöt8_t
 
FIFONumbî
)

638 i‡(
FIFONumbî
 =
CAN_FIFO0
)

640 
CANx
->
RF0R
 = 
RF0R_RFOM0
;

645 
CANx
->
RF1R
 = 
RF1R_RFOM1
;

647 
	}
}

655 
uöt8_t
 
	$CAN_MesßgePídög
(
CAN_Ty≥Def
* 
CANx
, 
uöt8_t
 
FIFONumbî
)

657 
uöt8_t
 
mesßge_≥ndög
=0;

661 i‡(
FIFONumbî
 =
CAN_FIFO0
)

663 
mesßge_≥ndög
 = (
uöt8_t
)(
CANx
->
RF0R
&(
uöt32_t
)0x03);

665 i‡(
FIFONumbî
 =
CAN_FIFO1
)

667 
mesßge_≥ndög
 = (
uöt8_t
)(
CANx
->
RF1R
&(
uöt32_t
)0x03);

671 
mesßge_≥ndög
 = 0;

673  
mesßge_≥ndög
;

674 
	}
}

684 
	$CAN_Re˚ive
(
CAN_Ty≥Def
* 
CANx
, 
uöt8_t
 
FIFONumbî
, 
C™RxMsg
* 
RxMesßge
)

690 
RxMesßge
->
IDE
 = (
uöt8_t
)0x04 & 
CANx
->
sFIFOMaûBox
[
FIFONumbî
].
RIR
;

691 i‡(
RxMesßge
->
IDE
 =
CAN_ID_STD
)

693 
RxMesßge
->
StdId
 = (
uöt32_t
)0x000007FF & (
CANx
->
sFIFOMaûBox
[
FIFONumbî
].
RIR
 >> 21);

697 
RxMesßge
->
ExtId
 = (
uöt32_t
)0x1FFFFFFF & (
CANx
->
sFIFOMaûBox
[
FIFONumbî
].
RIR
 >> 3);

700 
RxMesßge
->
RTR
 = (
uöt8_t
)0x02 & 
CANx
->
sFIFOMaûBox
[
FIFONumbî
].
RIR
;

702 
RxMesßge
->
DLC
 = (
uöt8_t
)0x0F & 
CANx
->
sFIFOMaûBox
[
FIFONumbî
].
RDTR
;

704 
RxMesßge
->
FMI
 = (
uöt8_t
)0xFF & (
CANx
->
sFIFOMaûBox
[
FIFONumbî
].
RDTR
 >> 8);

706 
RxMesßge
->
D©a
[0] = (
uöt8_t
)0xFF & 
CANx
->
sFIFOMaûBox
[
FIFONumbî
].
RDLR
;

707 
RxMesßge
->
D©a
[1] = (
uöt8_t
)0xFF & (
CANx
->
sFIFOMaûBox
[
FIFONumbî
].
RDLR
 >> 8);

708 
RxMesßge
->
D©a
[2] = (
uöt8_t
)0xFF & (
CANx
->
sFIFOMaûBox
[
FIFONumbî
].
RDLR
 >> 16);

709 
RxMesßge
->
D©a
[3] = (
uöt8_t
)0xFF & (
CANx
->
sFIFOMaûBox
[
FIFONumbî
].
RDLR
 >> 24);

710 
RxMesßge
->
D©a
[4] = (
uöt8_t
)0xFF & 
CANx
->
sFIFOMaûBox
[
FIFONumbî
].
RDHR
;

711 
RxMesßge
->
D©a
[5] = (
uöt8_t
)0xFF & (
CANx
->
sFIFOMaûBox
[
FIFONumbî
].
RDHR
 >> 8);

712 
RxMesßge
->
D©a
[6] = (
uöt8_t
)0xFF & (
CANx
->
sFIFOMaûBox
[
FIFONumbî
].
RDHR
 >> 16);

713 
RxMesßge
->
D©a
[7] = (
uöt8_t
)0xFF & (
CANx
->
sFIFOMaûBox
[
FIFONumbî
].
RDHR
 >> 24);

715 
	`CAN_FIFORñó£
(
CANx
, 
FIFONumbî
);

716 
	}
}

725 
	$CAN_DBGFªeze
(
CAN_Ty≥Def
* 
CANx
, 
Fun˘i⁄ÆSèã
 
NewSèã
)

731 i‡(
NewSèã
 !
DISABLE
)

734 
CANx
->
MCR
 |
MCR_DBF
;

739 
CANx
->
MCR
 &~
MCR_DBF
;

741 
	}
}

748 
uöt8_t
 
	$CAN_SÀï
(
CAN_Ty≥Def
* 
CANx
)

750 
uöt8_t
 
¶ìp°©us
 = 
CANSLEEPFAILED
;

756 
CANx
->
MCR
 = (((CANx->MCRË& (
uöt32_t
)(~
MCR_INRQ
)Ë| 
MCR_SLEEP
);

759 i‡((
CANx
->
MSR
 & (
CAN_MSR_SLAK
|
CAN_MSR_INAK
)) == CAN_MSR_SLAK)

762 
¶ìp°©us
 = 
CANSLEEPOK
;

765  (
uöt8_t
)
¶ìp°©us
;

766 
	}
}

773 
uöt8_t
 
	$CAN_WakeUp
(
CAN_Ty≥Def
* 
CANx
)

775 
uöt32_t
 
waô_¶ak
 = 
SLAK_TimeOut
 ;

776 
uöt8_t
 
wakeup°©us
 = 
CANWAKEUPFAILED
;

782 
CANx
->
MCR
 &~
MCR_SLEEP
;

785 ((
CANx
->
MSR
 & 
CAN_MSR_SLAK
Ë=CAN_MSR_SLAK)&&(
waô_¶ak
!=0x00))

787 
waô_¶ak
--;

789 if((
CANx
->
MSR
 & 
CAN_MSR_SLAK
) != CAN_MSR_SLAK)

792 
wakeup°©us
 = 
CANWAKEUPOK
;

795  (
uöt8_t
)
wakeup°©us
;

796 
	}
}

805 
FœgSètus
 
	$CAN_GëFœgSètus
(
CAN_Ty≥Def
* 
CANx
, 
uöt32_t
 
CAN_FLAG
)

807 
FœgSètus
 
bô°©us
 = 
RESET
;

812 i‡((
CANx
->
ESR
 & 
CAN_FLAG
Ë!(
uöt32_t
)
RESET
)

815 
bô°©us
 = 
SET
;

820 
bô°©us
 = 
RESET
;

823  
bô°©us
;

824 
	}
}

832 
	$CAN_CÀ¨Fœg
(
CAN_Ty≥Def
* 
CANx
, 
uöt32_t
 
CAN_FLAG
)

838 
CANx
->
ESR
 &~
CAN_FLAG
;

839 
	}
}

851 
ITSètus
 
	$CAN_GëITSètus
(
CAN_Ty≥Def
* 
CANx
, 
uöt32_t
 
CAN_IT
)

853 
ITSètus
 
≥ndögbô°©us
 = 
RESET
;

857 
CAN_IT
)

859 
CAN_IT_RQCP0
:

860 
≥ndögbô°©us
 = 
	`CheckITSètus
(
CANx
->
TSR
, 
TSR_RQCP0
);

862 
CAN_IT_RQCP1
:

863 
≥ndögbô°©us
 = 
	`CheckITSètus
(
CANx
->
TSR
, 
TSR_RQCP1
);

865 
CAN_IT_RQCP2
:

866 
≥ndögbô°©us
 = 
	`CheckITSètus
(
CANx
->
TSR
, 
TSR_RQCP2
);

868 
CAN_IT_FF0
:

869 
≥ndögbô°©us
 = 
	`CheckITSètus
(
CANx
->
RF0R
, 
RF0R_FULL0
);

871 
CAN_IT_FOV0
:

872 
≥ndögbô°©us
 = 
	`CheckITSètus
(
CANx
->
RF0R
, 
RF0R_FOVR0
);

874 
CAN_IT_FF1
:

875 
≥ndögbô°©us
 = 
	`CheckITSètus
(
CANx
->
RF1R
, 
RF1R_FULL1
);

877 
CAN_IT_FOV1
:

878 
≥ndögbô°©us
 = 
	`CheckITSètus
(
CANx
->
RF1R
, 
RF1R_FOVR1
);

880 
CAN_IT_EWG
:

881 
≥ndögbô°©us
 = 
	`CheckITSètus
(
CANx
->
ESR
, 
ESR_EWGF
);

883 
CAN_IT_EPV
:

884 
≥ndögbô°©us
 = 
	`CheckITSètus
(
CANx
->
ESR
, 
ESR_EPVF
);

886 
CAN_IT_BOF
:

887 
≥ndögbô°©us
 = 
	`CheckITSètus
(
CANx
->
ESR
, 
ESR_BOFF
);

889 
CAN_IT_SLK
:

890 
≥ndögbô°©us
 = 
	`CheckITSètus
(
CANx
->
MSR
, 
MSR_SLAKI
);

892 
CAN_IT_WKU
:

893 
≥ndögbô°©us
 = 
	`CheckITSètus
(
CANx
->
MSR
, 
MSR_WKUI
);

896 
≥ndögbô°©us
 = 
RESET
;

900  
≥ndögbô°©us
;

901 
	}
}

909 
	$CAN_CÀ¨ITPídögBô
(
CAN_Ty≥Def
* 
CANx
, 
uöt32_t
 
CAN_IT
)

914 
CAN_IT
)

916 
CAN_IT_RQCP0
:

917 
CANx
->
TSR
 = 
TSR_RQCP0
;

919 
CAN_IT_RQCP1
:

920 
CANx
->
TSR
 = 
TSR_RQCP1
;

922 
CAN_IT_RQCP2
:

923 
CANx
->
TSR
 = 
TSR_RQCP2
;

925 
CAN_IT_FF0
:

926 
CANx
->
RF0R
 = 
RF0R_FULL0
;

928 
CAN_IT_FOV0
:

929 
CANx
->
RF0R
 = 
RF0R_FOVR0
;

931 
CAN_IT_FF1
:

932 
CANx
->
RF1R
 = 
RF1R_FULL1
;

934 
CAN_IT_FOV1
:

935 
CANx
->
RF1R
 = 
RF1R_FOVR1
;

937 
CAN_IT_EWG
:

938 
CANx
->
ESR
 &~ 
ESR_EWGF
;

940 
CAN_IT_EPV
:

941 
CANx
->
ESR
 &~ 
ESR_EPVF
;

943 
CAN_IT_BOF
:

944 
CANx
->
ESR
 &~ 
ESR_BOFF
;

946 
CAN_IT_WKU
:

947 
CANx
->
MSR
 = 
MSR_WKUI
;

949 
CAN_IT_SLK
:

950 
CANx
->
MSR
 = 
MSR_SLAKI
;

955 
	}
}

963 
ITSètus
 
	$CheckITSètus
(
uöt32_t
 
CAN_Reg
, uöt32_à
It_Bô
)

965 
ITSètus
 
≥ndögbô°©us
 = 
RESET
;

967 i‡((
CAN_Reg
 & 
It_Bô
Ë!(
uöt32_t
)
RESET
)

970 
≥ndögbô°©us
 = 
SET
;

975 
≥ndögbô°©us
 = 
RESET
;

977  
≥ndögbô°©us
;

978 
	}
}

	@Source/STM32F10x_StdPeriph_Driver/src/stm32f10x_crc.c

22 
	~"°m32f10x_¸c.h
"

29 
	#CR_RESET_Së
 ((
uöt32_t
)0x00000001)

	)

42 
	$CRC_Re£tDR
()

45 
CRC
->
CR
 = 
CR_RESET_Së
;

46 
	}
}

53 
uöt32_t
 
	$CRC_CÆcCRC
(
uöt32_t
 
D©a
)

55 
CRC
->
DR
 = 
D©a
;

57  (
CRC
->
DR
);

58 
	}
}

66 
uöt32_t
 
	$CRC_CÆcBlockCRC
(
uöt32_t
 
pBuf„r
[], uöt32_à
Buf„rLígth
)

68 
uöt32_t
 
ödex
 = 0;

70 
ödex
 = 0; index < 
Buf„rLígth
; index++)

72 
CRC
->
DR
 = 
pBuf„r
[
ödex
];

74  (
CRC
->
DR
);

75 
	}
}

82 
uöt32_t
 
	$CRC_GëCRC
()

84  (
CRC
->
DR
);

85 
	}
}

92 
	$CRC_SëIDRegi°î
(
uöt8_t
 
IDVÆue
)

94 
CRC
->
IDR
 = 
IDVÆue
;

95 
	}
}

102 
uöt8_t
 
	$CRC_GëIDRegi°î
()

104  (
CRC
->
IDR
);

105 
	}
}

	@Source/STM32F10x_StdPeriph_Driver/src/stm32f10x_dac.c

22 
	~"°m32f10x_dac.h
"

23 
	~"°m32f10x_rcc.h
"

29 
	#CR_EN_Së
 ((
uöt32_t
)0x00000001)

	)

32 
	#CR_DMAEN_Së
 ((
uöt32_t
)0x00001000)

	)

35 
	#CR_CLEAR_Mask
 ((
uöt32_t
)0x00000FFE)

	)

38 
	#SWTRIGR_SWTRIG_Së
 ((
uöt32_t
)0x00000001)

	)

41 
	#DUAL_SWTRIG_Së
 ((
uöt32_t
)0x00000003)

	)

42 
	#DUAL_SWTRIG_Re£t
 ((
uöt32_t
)0xFFFFFFFC)

	)

45 
	#DHR12R1_Off£t
 ((
uöt32_t
)0x00000008)

	)

46 
	#DHR12R2_Off£t
 ((
uöt32_t
)0x00000014)

	)

47 
	#DHR12RD_Off£t
 ((
uöt32_t
)0x00000020)

	)

50 
	#DOR_Off£t
 ((
uöt32_t
)0x0000002C)

	)

62 
	$DAC_DeInô
()

65 
	`RCC_APB1PîùhRe£tCmd
(
RCC_APB1Pîùh_DAC
, 
ENABLE
);

67 
	`RCC_APB1PîùhRe£tCmd
(
RCC_APB1Pîùh_DAC
, 
DISABLE
);

68 
	}
}

79 
	$DAC_Inô
(
uöt32_t
 
DAC_Ch™√l
, 
DAC_InôTy≥Def
* 
DAC_InôSåu˘
)

81 
uöt32_t
 
tm¥eg1
 = 0, 
tm¥eg2
 = 0;

83 
	`as£π_∑øm
(
	`IS_DAC_TRIGGER
(
DAC_InôSåu˘
->
DAC_Triggî
));

84 
	`as£π_∑øm
(
	`IS_DAC_GENERATE_WAVE
(
DAC_InôSåu˘
->
DAC_WaveGíî©i⁄
));

85 
	`as£π_∑øm
(
	`IS_DAC_LFSR_UNMASK_TRIANGLE_AMPLITUDE
(
DAC_InôSåu˘
->
DAC_LFSRUnmask_TrüngÀAm∂ôude
));

86 
	`as£π_∑øm
(
	`IS_DAC_OUTPUT_BUFFER_STATE
(
DAC_InôSåu˘
->
DAC_OuçutBuf„r
));

89 
tm¥eg1
 = 
DAC
->
CR
;

91 
tm¥eg1
 &~(
CR_CLEAR_Mask
 << 
DAC_Ch™√l
);

97 
tm¥eg2
 = (
DAC_InôSåu˘
->
DAC_Triggî
 | DAC_InôSåu˘->
DAC_WaveGíî©i⁄
 |

98 
DAC_InôSåu˘
->
DAC_LFSRUnmask_TrüngÀAm∂ôude
 | DAC_InôSåu˘->
DAC_OuçutBuf„r
);

100 
tm¥eg1
 |
tm¥eg2
 << 
DAC_Ch™√l
;

102 
DAC
->
CR
 = 
tm¥eg1
;

103 
	}
}

110 
	$DAC_Såu˘Inô
(
DAC_InôTy≥Def
* 
DAC_InôSåu˘
)

114 
DAC_InôSåu˘
->
DAC_Triggî
 = 
DAC_Triggî_N⁄e
;

116 
DAC_InôSåu˘
->
DAC_WaveGíî©i⁄
 = 
DAC_WaveGíî©i⁄_N⁄e
;

118 
DAC_InôSåu˘
->
DAC_LFSRUnmask_TrüngÀAm∂ôude
 = 
DAC_LFSRUnmask_Bô0
;

120 
DAC_InôSåu˘
->
DAC_OuçutBuf„r
 = 
DAC_OuçutBuf„r_E«bÀ
;

121 
	}
}

133 
	$DAC_Cmd
(
uöt32_t
 
DAC_Ch™√l
, 
Fun˘i⁄ÆSèã
 
NewSèã
)

136 
	`as£π_∑øm
(
	`IS_DAC_CHANNEL
(
DAC_Ch™√l
));

137 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

138 i‡(
NewSèã
 !
DISABLE
)

141 
DAC
->
CR
 |
CR_EN_Së
 << 
DAC_Ch™√l
;

146 
DAC
->
CR
 &~(
CR_EN_Së
 << 
DAC_Ch™√l
);

148 
	}
}

160 
	$DAC_DMACmd
(
uöt32_t
 
DAC_Ch™√l
, 
Fun˘i⁄ÆSèã
 
NewSèã
)

163 
	`as£π_∑øm
(
	`IS_DAC_CHANNEL
(
DAC_Ch™√l
));

164 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

165 i‡(
NewSèã
 !
DISABLE
)

168 
DAC
->
CR
 |
CR_DMAEN_Së
 << 
DAC_Ch™√l
;

173 
DAC
->
CR
 &~(
CR_DMAEN_Së
 << 
DAC_Ch™√l
);

175 
	}
}

187 
	$DAC_So·w¨eTriggîCmd
(
uöt32_t
 
DAC_Ch™√l
, 
Fun˘i⁄ÆSèã
 
NewSèã
)

190 
	`as£π_∑øm
(
	`IS_DAC_CHANNEL
(
DAC_Ch™√l
));

191 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

192 i‡(
NewSèã
 !
DISABLE
)

195 
DAC
->
SWTRIGR
 |
SWTRIGR_SWTRIG_Së
 << (
DAC_Ch™√l
 >> 4);

200 
DAC
->
SWTRIGR
 &~(
SWTRIGR_SWTRIG_Së
 << (
DAC_Ch™√l
 >> 4));

202 
	}
}

210 
	$DAC_DuÆSo·w¨eTriggîCmd
(
Fun˘i⁄ÆSèã
 
NewSèã
)

213 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

214 i‡(
NewSèã
 !
DISABLE
)

217 
DAC
->
SWTRIGR
 |
DUAL_SWTRIG_Së
 ;

222 
DAC
->
SWTRIGR
 &
DUAL_SWTRIG_Re£t
;

224 
	}
}

240 
	$DAC_WaveGíî©i⁄Cmd
(
uöt32_t
 
DAC_Ch™√l
, uöt32_à
DAC_Wave
, 
Fun˘i⁄ÆSèã
 
NewSèã
)

243 
	`as£π_∑øm
(
	`IS_DAC_CHANNEL
(
DAC_Ch™√l
));

244 
	`as£π_∑øm
(
	`IS_DAC_WAVE
(
DAC_Wave
));

245 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

246 i‡(
NewSèã
 !
DISABLE
)

249 
DAC
->
CR
 |
DAC_Wave
 << 
DAC_Ch™√l
;

254 
DAC
->
CR
 &~(
DAC_Wave
 << 
DAC_Ch™√l
);

256 
	}
}

268 
	$DAC_SëCh™√l1D©a
(
uöt32_t
 
DAC_Align
, 
uöt16_t
 
D©a
)

270 
__IO
 
uöt32_t
 
tmp
 = 0;

273 
	`as£π_∑øm
(
	`IS_DAC_ALIGN
(
DAC_Align
));

274 
	`as£π_∑øm
(
	`IS_DAC_DATA
(
D©a
));

276 
tmp
 = (
uöt32_t
)
DAC_BASE
;

277 
tmp
 +
DHR12R1_Off£t
 + 
DAC_Align
;

280 *(
__IO
 
uöt32_t
 *Ë
tmp
 = 
D©a
;

281 
	}
}

293 
	$DAC_SëCh™√l2D©a
(
uöt32_t
 
DAC_Align
, 
uöt16_t
 
D©a
)

295 
__IO
 
uöt32_t
 
tmp
 = 0;

298 
	`as£π_∑øm
(
	`IS_DAC_ALIGN
(
DAC_Align
));

299 
	`as£π_∑øm
(
	`IS_DAC_DATA
(
D©a
));

301 
tmp
 = (
uöt32_t
)
DAC_BASE
;

302 
tmp
 +
DHR12R2_Off£t
 + 
DAC_Align
;

305 *(
__IO
 
uöt32_t
 *)
tmp
 = 
D©a
;

306 
	}
}

319 
	$DAC_SëDuÆCh™√lD©a
(
uöt32_t
 
DAC_Align
, 
uöt16_t
 
D©a2
, uöt16_à
D©a1
)

321 
uöt32_t
 
d©a
 = 0, 
tmp
 = 0;

324 
	`as£π_∑øm
(
	`IS_DAC_ALIGN
(
DAC_Align
));

325 
	`as£π_∑øm
(
	`IS_DAC_DATA
(
D©a1
));

326 
	`as£π_∑øm
(
	`IS_DAC_DATA
(
D©a2
));

329 i‡(
DAC_Align
 =
DAC_Align_8b_R
)

331 
d©a
 = ((
uöt32_t
)
D©a2
 << 8Ë| 
D©a1
;

335 
d©a
 = ((
uöt32_t
)
D©a2
 << 16Ë| 
D©a1
;

338 
tmp
 = (
uöt32_t
)
DAC_BASE
;

339 
tmp
 +
DHR12RD_Off£t
 + 
DAC_Align
;

342 *(
__IO
 
uöt32_t
 *)
tmp
 = 
d©a
;

343 
	}
}

353 
uöt16_t
 
	$DAC_GëD©aOuçutVÆue
(
uöt32_t
 
DAC_Ch™√l
)

355 
__IO
 
uöt32_t
 
tmp
 = 0;

358 
	`as£π_∑øm
(
	`IS_DAC_CHANNEL
(
DAC_Ch™√l
));

360 
tmp
 = (
uöt32_t
Ë
DAC_BASE
 ;

361 
tmp
 +
DOR_Off£t
 + ((
uöt32_t
)
DAC_Ch™√l
 >> 2);

364  (
uöt16_t
Ë(*(
__IO
 
uöt32_t
*Ë
tmp
);

365 
	}
}

	@Source/STM32F10x_StdPeriph_Driver/src/stm32f10x_dbgmcu.c

22 
	~"°m32f10x_dbgmcu.h
"

27 
	#IDCODE_DEVID_Mask
 ((
uöt32_t
)0x00000FFF)

	)

39 
uöt32_t
 
	$DBGMCU_GëREVID
()

41 (
DBGMCU
->
IDCODE
 >> 16);

42 
	}
}

49 
uöt32_t
 
	$DBGMCU_GëDEVID
()

51 (
DBGMCU
->
IDCODE
 & 
IDCODE_DEVID_Mask
);

52 
	}
}

79 
	$DBGMCU_C⁄fig
(
uöt32_t
 
DBGMCU_Pîùh
, 
Fun˘i⁄ÆSèã
 
NewSèã
)

82 
	`as£π_∑øm
(
	`IS_DBGMCU_PERIPH
(
DBGMCU_Pîùh
));

83 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

85 i‡(
NewSèã
 !
DISABLE
)

87 
DBGMCU
->
CR
 |
DBGMCU_Pîùh
;

91 
DBGMCU
->
CR
 &~
DBGMCU_Pîùh
;

93 
	}
}

	@Source/STM32F10x_StdPeriph_Driver/src/stm32f10x_dma.c

22 
	~"°m32f10x_dma.h
"

23 
	~"°m32f10x_rcc.h
"

29 
	#CCR_ENABLE_Së
 ((
uöt32_t
)0x00000001)

	)

30 
	#CCR_ENABLE_Re£t
 ((
uöt32_t
)0xFFFFFFFE)

	)

33 
	#DMA1_Ch™√l1_IT_Mask
 ((
uöt32_t
)0x0000000F)

	)

34 
	#DMA1_Ch™√l2_IT_Mask
 ((
uöt32_t
)0x000000F0)

	)

35 
	#DMA1_Ch™√l3_IT_Mask
 ((
uöt32_t
)0x00000F00)

	)

36 
	#DMA1_Ch™√l4_IT_Mask
 ((
uöt32_t
)0x0000F000)

	)

37 
	#DMA1_Ch™√l5_IT_Mask
 ((
uöt32_t
)0x000F0000)

	)

38 
	#DMA1_Ch™√l6_IT_Mask
 ((
uöt32_t
)0x00F00000)

	)

39 
	#DMA1_Ch™√l7_IT_Mask
 ((
uöt32_t
)0x0F000000)

	)

42 
	#DMA2_Ch™√l1_IT_Mask
 ((
uöt32_t
)0x0000000F)

	)

43 
	#DMA2_Ch™√l2_IT_Mask
 ((
uöt32_t
)0x000000F0)

	)

44 
	#DMA2_Ch™√l3_IT_Mask
 ((
uöt32_t
)0x00000F00)

	)

45 
	#DMA2_Ch™√l4_IT_Mask
 ((
uöt32_t
)0x0000F000)

	)

46 
	#DMA2_Ch™√l5_IT_Mask
 ((
uöt32_t
)0x000F0000)

	)

49 
	#FLAG_Mask
 ((
uöt32_t
)0x10000000)

	)

52 
	#CCR_CLEAR_Mask
 ((
uöt32_t
)0xFFFF800F)

	)

64 
	$DMA_DeInô
(
DMA_Ch™√l_Ty≥Def
* 
DMAy_Ch™√lx
)

67 
	`as£π_∑øm
(
	`IS_DMA_ALL_PERIPH
(
DMAy_Ch™√lx
));

69 
DMAy_Ch™√lx
->
CCR
 &
CCR_ENABLE_Re£t
;

71 
DMAy_Ch™√lx
->
CCR
 = 0;

74 
DMAy_Ch™√lx
->
CNDTR
 = 0;

77 
DMAy_Ch™√lx
->
CPAR
 = 0;

80 
DMAy_Ch™√lx
->
CMAR
 = 0;

82 i‡(
DMAy_Ch™√lx
 =
DMA1_Ch™√l1
)

85 
DMA1
->
IFCR
 |
DMA1_Ch™√l1_IT_Mask
;

87 i‡(
DMAy_Ch™√lx
 =
DMA1_Ch™√l2
)

90 
DMA1
->
IFCR
 |
DMA1_Ch™√l2_IT_Mask
;

92 i‡(
DMAy_Ch™√lx
 =
DMA1_Ch™√l3
)

95 
DMA1
->
IFCR
 |
DMA1_Ch™√l3_IT_Mask
;

97 i‡(
DMAy_Ch™√lx
 =
DMA1_Ch™√l4
)

100 
DMA1
->
IFCR
 |
DMA1_Ch™√l4_IT_Mask
;

102 i‡(
DMAy_Ch™√lx
 =
DMA1_Ch™√l5
)

105 
DMA1
->
IFCR
 |
DMA1_Ch™√l5_IT_Mask
;

107 i‡(
DMAy_Ch™√lx
 =
DMA1_Ch™√l6
)

110 
DMA1
->
IFCR
 |
DMA1_Ch™√l6_IT_Mask
;

112 i‡(
DMAy_Ch™√lx
 =
DMA1_Ch™√l7
)

115 
DMA1
->
IFCR
 |
DMA1_Ch™√l7_IT_Mask
;

117 i‡(
DMAy_Ch™√lx
 =
DMA2_Ch™√l1
)

120 
DMA2
->
IFCR
 |
DMA2_Ch™√l1_IT_Mask
;

122 i‡(
DMAy_Ch™√lx
 =
DMA2_Ch™√l2
)

125 
DMA2
->
IFCR
 |
DMA2_Ch™√l2_IT_Mask
;

127 i‡(
DMAy_Ch™√lx
 =
DMA2_Ch™√l3
)

130 
DMA2
->
IFCR
 |
DMA2_Ch™√l3_IT_Mask
;

132 i‡(
DMAy_Ch™√lx
 =
DMA2_Ch™√l4
)

135 
DMA2
->
IFCR
 |
DMA2_Ch™√l4_IT_Mask
;

139 i‡(
DMAy_Ch™√lx
 =
DMA2_Ch™√l5
)

142 
DMA2
->
IFCR
 |
DMA2_Ch™√l5_IT_Mask
;

145 
	}
}

153 
	$DMA_Inô
(
DMA_Ch™√l_Ty≥Def
* 
DMAy_Ch™√lx
, 
DMA_InôTy≥Def
* 
DMA_InôSåu˘
)

155 
uöt32_t
 
tm¥eg
 = 0;

158 
	`as£π_∑øm
(
	`IS_DMA_ALL_PERIPH
(
DMAy_Ch™√lx
));

159 
	`as£π_∑øm
(
	`IS_DMA_DIR
(
DMA_InôSåu˘
->
DMA_DIR
));

160 
	`as£π_∑øm
(
	`IS_DMA_BUFFER_SIZE
(
DMA_InôSåu˘
->
DMA_Buf„rSize
));

161 
	`as£π_∑øm
(
	`IS_DMA_PERIPHERAL_INC_STATE
(
DMA_InôSåu˘
->
DMA_PîùhîÆInc
));

162 
	`as£π_∑øm
(
	`IS_DMA_MEMORY_INC_STATE
(
DMA_InôSåu˘
->
DMA_Mem‹yInc
));

163 
	`as£π_∑øm
(
	`IS_DMA_PERIPHERAL_DATA_SIZE
(
DMA_InôSåu˘
->
DMA_PîùhîÆD©aSize
));

164 
	`as£π_∑øm
(
	`IS_DMA_MEMORY_DATA_SIZE
(
DMA_InôSåu˘
->
DMA_Mem‹yD©aSize
));

165 
	`as£π_∑øm
(
	`IS_DMA_MODE
(
DMA_InôSåu˘
->
DMA_Mode
));

166 
	`as£π_∑øm
(
	`IS_DMA_PRIORITY
(
DMA_InôSåu˘
->
DMA_Pri‹ôy
));

167 
	`as£π_∑øm
(
	`IS_DMA_M2M_STATE
(
DMA_InôSåu˘
->
DMA_M2M
));

171 
tm¥eg
 = 
DMAy_Ch™√lx
->
CCR
;

173 
tm¥eg
 &
CCR_CLEAR_Mask
;

183 
tm¥eg
 |
DMA_InôSåu˘
->
DMA_DIR
 | DMA_InôSåu˘->
DMA_Mode
 |

184 
DMA_InôSåu˘
->
DMA_PîùhîÆInc
 | DMA_InôSåu˘->
DMA_Mem‹yInc
 |

185 
DMA_InôSåu˘
->
DMA_PîùhîÆD©aSize
 | DMA_InôSåu˘->
DMA_Mem‹yD©aSize
 |

186 
DMA_InôSåu˘
->
DMA_Pri‹ôy
 | DMA_InôSåu˘->
DMA_M2M
;

189 
DMAy_Ch™√lx
->
CCR
 = 
tm¥eg
;

193 
DMAy_Ch™√lx
->
CNDTR
 = 
DMA_InôSåu˘
->
DMA_Buf„rSize
;

197 
DMAy_Ch™√lx
->
CPAR
 = 
DMA_InôSåu˘
->
DMA_PîùhîÆBa£Addr
;

201 
DMAy_Ch™√lx
->
CMAR
 = 
DMA_InôSåu˘
->
DMA_Mem‹yBa£Addr
;

202 
	}
}

210 
	$DMA_Såu˘Inô
(
DMA_InôTy≥Def
* 
DMA_InôSåu˘
)

214 
DMA_InôSåu˘
->
DMA_PîùhîÆBa£Addr
 = 0;

216 
DMA_InôSåu˘
->
DMA_Mem‹yBa£Addr
 = 0;

218 
DMA_InôSåu˘
->
DMA_DIR
 = 
DMA_DIR_PîùhîÆSRC
;

220 
DMA_InôSåu˘
->
DMA_Buf„rSize
 = 0;

222 
DMA_InôSåu˘
->
DMA_PîùhîÆInc
 = 
DMA_PîùhîÆInc_DißbÀ
;

224 
DMA_InôSåu˘
->
DMA_Mem‹yInc
 = 
DMA_Mem‹yInc_DißbÀ
;

226 
DMA_InôSåu˘
->
DMA_PîùhîÆD©aSize
 = 
DMA_PîùhîÆD©aSize_Byã
;

228 
DMA_InôSåu˘
->
DMA_Mem‹yD©aSize
 = 
DMA_Mem‹yD©aSize_Byã
;

230 
DMA_InôSåu˘
->
DMA_Mode
 = 
DMA_Mode_N‹mÆ
;

232 
DMA_InôSåu˘
->
DMA_Pri‹ôy
 = 
DMA_Pri‹ôy_Low
;

234 
DMA_InôSåu˘
->
DMA_M2M
 = 
DMA_M2M_DißbÀ
;

235 
	}
}

244 
	$DMA_Cmd
(
DMA_Ch™√l_Ty≥Def
* 
DMAy_Ch™√lx
, 
Fun˘i⁄ÆSèã
 
NewSèã
)

247 
	`as£π_∑øm
(
	`IS_DMA_ALL_PERIPH
(
DMAy_Ch™√lx
));

248 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

250 i‡(
NewSèã
 !
DISABLE
)

253 
DMAy_Ch™√lx
->
CCR
 |
CCR_ENABLE_Së
;

258 
DMAy_Ch™√lx
->
CCR
 &
CCR_ENABLE_Re£t
;

260 
	}
}

274 
	$DMA_ITC⁄fig
(
DMA_Ch™√l_Ty≥Def
* 
DMAy_Ch™√lx
, 
uöt32_t
 
DMA_IT
, 
Fun˘i⁄ÆSèã
 
NewSèã
)

277 
	`as£π_∑øm
(
	`IS_DMA_ALL_PERIPH
(
DMAy_Ch™√lx
));

278 
	`as£π_∑øm
(
	`IS_DMA_CONFIG_IT
(
DMA_IT
));

279 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

280 i‡(
NewSèã
 !
DISABLE
)

283 
DMAy_Ch™√lx
->
CCR
 |
DMA_IT
;

288 
DMAy_Ch™√lx
->
CCR
 &~
DMA_IT
;

290 
	}
}

297 
uöt16_t
 
	$DMA_GëCuºD©aCou¡î
(
DMA_Ch™√l_Ty≥Def
* 
DMAy_Ch™√lx
)

300 
	`as£π_∑øm
(
	`IS_DMA_ALL_PERIPH
(
DMAy_Ch™√lx
));

302  ((
uöt16_t
)(
DMAy_Ch™√lx
->
CNDTR
));

303 
	}
}

359 
FœgSètus
 
	$DMA_GëFœgSètus
(
uöt32_t
 
DMA_FLAG
)

361 
FœgSètus
 
bô°©us
 = 
RESET
;

362 
uöt32_t
 
tm¥eg
 = 0;

364 
	`as£π_∑øm
(
	`IS_DMA_GET_FLAG
(
DMA_FLAG
));

367 i‡((
DMA_FLAG
 & 
FLAG_Mask
Ë!(
uöt32_t
)
RESET
)

370 
tm¥eg
 = 
DMA2
->
ISR
 ;

375 
tm¥eg
 = 
DMA1
->
ISR
 ;

379 i‡((
tm¥eg
 & 
DMA_FLAG
Ë!(
uöt32_t
)
RESET
)

382 
bô°©us
 = 
SET
;

387 
bô°©us
 = 
RESET
;

391  
bô°©us
;

392 
	}
}

448 
	$DMA_CÀ¨Fœg
(
uöt32_t
 
DMA_FLAG
)

451 
	`as£π_∑øm
(
	`IS_DMA_CLEAR_FLAG
(
DMA_FLAG
));

454 i‡((
DMA_FLAG
 & 
FLAG_Mask
Ë!(
uöt32_t
)
RESET
)

457 
DMA2
->
IFCR
 = 
DMA_FLAG
;

462 
DMA1
->
IFCR
 = 
DMA_FLAG
;

464 
	}
}

520 
ITSètus
 
	$DMA_GëITSètus
(
uöt32_t
 
DMA_IT
)

522 
ITSètus
 
bô°©us
 = 
RESET
;

523 
uöt32_t
 
tm¥eg
 = 0;

525 
	`as£π_∑øm
(
	`IS_DMA_GET_IT
(
DMA_IT
));

528 i‡((
DMA_IT
 & 
FLAG_Mask
Ë!(
uöt32_t
)
RESET
)

531 
tm¥eg
 = 
DMA2
->
ISR
 ;

536 
tm¥eg
 = 
DMA1
->
ISR
 ;

540 i‡((
tm¥eg
 & 
DMA_IT
Ë!(
uöt32_t
)
RESET
)

543 
bô°©us
 = 
SET
;

548 
bô°©us
 = 
RESET
;

551  
bô°©us
;

552 
	}
}

608 
	$DMA_CÀ¨ITPídögBô
(
uöt32_t
 
DMA_IT
)

611 
	`as£π_∑øm
(
	`IS_DMA_CLEAR_IT
(
DMA_IT
));

614 i‡((
DMA_IT
 & 
FLAG_Mask
Ë!(
uöt32_t
)
RESET
)

617 
DMA2
->
IFCR
 = 
DMA_IT
;

622 
DMA1
->
IFCR
 = 
DMA_IT
;

624 
	}
}

	@Source/STM32F10x_StdPeriph_Driver/src/stm32f10x_exti.c

22 
	~"°m32f10x_exti.h
"

27 
	#EXTI_LöeN⁄e
 ((
uöt32_t
)0x00000Ë

	)

39 
	$EXTI_DeInô
()

41 
EXTI
->
IMR
 = 0x00000000;

42 
EXTI
->
EMR
 = 0x00000000;

43 
EXTI
->
RTSR
 = 0x00000000;

44 
EXTI
->
FTSR
 = 0x00000000;

45 
EXTI
->
PR
 = 0x000FFFFF;

46 
	}
}

53 
	$EXTI_Inô
(
EXTI_InôTy≥Def
* 
EXTI_InôSåu˘
)

55 
uöt32_t
 
tmp
 = 0;

58 
	`as£π_∑øm
(
	`IS_EXTI_MODE
(
EXTI_InôSåu˘
->
EXTI_Mode
));

59 
	`as£π_∑øm
(
	`IS_EXTI_TRIGGER
(
EXTI_InôSåu˘
->
EXTI_Triggî
));

60 
	`as£π_∑øm
(
	`IS_EXTI_LINE
(
EXTI_InôSåu˘
->
EXTI_Löe
));

61 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
EXTI_InôSåu˘
->
EXTI_LöeCmd
));

63 
tmp
 = (
uöt32_t
)
EXTI_BASE
;

65 i‡(
EXTI_InôSåu˘
->
EXTI_LöeCmd
 !
DISABLE
)

68 
EXTI
->
IMR
 &~
EXTI_InôSåu˘
->
EXTI_Löe
;

69 
EXTI
->
EMR
 &~
EXTI_InôSåu˘
->
EXTI_Löe
;

71 
tmp
 +
EXTI_InôSåu˘
->
EXTI_Mode
;

73 *(
__IO
 
uöt32_t
 *Ë
tmp
 |
EXTI_InôSåu˘
->
EXTI_Löe
;

76 
EXTI
->
RTSR
 &~
EXTI_InôSåu˘
->
EXTI_Löe
;

77 
EXTI
->
FTSR
 &~
EXTI_InôSåu˘
->
EXTI_Löe
;

80 i‡(
EXTI_InôSåu˘
->
EXTI_Triggî
 =
EXTI_Triggî_Risög_FÆlög
)

83 
EXTI
->
RTSR
 |
EXTI_InôSåu˘
->
EXTI_Löe
;

84 
EXTI
->
FTSR
 |
EXTI_InôSåu˘
->
EXTI_Löe
;

88 
tmp
 = (
uöt32_t
)
EXTI_BASE
;

89 
tmp
 +
EXTI_InôSåu˘
->
EXTI_Triggî
;

91 *(
__IO
 
uöt32_t
 *Ë
tmp
 |
EXTI_InôSåu˘
->
EXTI_Löe
;

96 
tmp
 +
EXTI_InôSåu˘
->
EXTI_Mode
;

99 *(
__IO
 
uöt32_t
 *Ë
tmp
 &~
EXTI_InôSåu˘
->
EXTI_Löe
;

101 
	}
}

108 
	$EXTI_Såu˘Inô
(
EXTI_InôTy≥Def
* 
EXTI_InôSåu˘
)

110 
EXTI_InôSåu˘
->
EXTI_Löe
 = 
EXTI_LöeN⁄e
;

111 
EXTI_InôSåu˘
->
EXTI_Mode
 = 
EXTI_Mode_I¡îru±
;

112 
EXTI_InôSåu˘
->
EXTI_Triggî
 = 
EXTI_Triggî_FÆlög
;

113 
EXTI_InôSåu˘
->
EXTI_LöeCmd
 = 
DISABLE
;

114 
	}
}

122 
	$EXTI_Gíî©eSWI¡îru±
(
uöt32_t
 
EXTI_Löe
)

125 
	`as£π_∑øm
(
	`IS_EXTI_LINE
(
EXTI_Löe
));

127 
EXTI
->
SWIER
 |
EXTI_Löe
;

128 
	}
}

137 
FœgSètus
 
	$EXTI_GëFœgSètus
(
uöt32_t
 
EXTI_Löe
)

139 
FœgSètus
 
bô°©us
 = 
RESET
;

141 
	`as£π_∑øm
(
	`IS_GET_EXTI_LINE
(
EXTI_Löe
));

143 i‡((
EXTI
->
PR
 & 
EXTI_Löe
Ë!(
uöt32_t
)
RESET
)

145 
bô°©us
 = 
SET
;

149 
bô°©us
 = 
RESET
;

151  
bô°©us
;

152 
	}
}

160 
	$EXTI_CÀ¨Fœg
(
uöt32_t
 
EXTI_Löe
)

163 
	`as£π_∑øm
(
	`IS_EXTI_LINE
(
EXTI_Löe
));

165 
EXTI
->
PR
 = 
EXTI_Löe
;

166 
	}
}

175 
ITSètus
 
	$EXTI_GëITSètus
(
uöt32_t
 
EXTI_Löe
)

177 
ITSètus
 
bô°©us
 = 
RESET
;

178 
uöt32_t
 
íabÀ°©us
 = 0;

180 
	`as£π_∑øm
(
	`IS_GET_EXTI_LINE
(
EXTI_Löe
));

182 
íabÀ°©us
 = 
EXTI
->
IMR
 & 
EXTI_Löe
;

183 i‡(((
EXTI
->
PR
 & 
EXTI_Löe
Ë!(
uöt32_t
)
RESET
Ë&& (
íabÀ°©us
 != (uint32_t)RESET))

185 
bô°©us
 = 
SET
;

189 
bô°©us
 = 
RESET
;

191  
bô°©us
;

192 
	}
}

200 
	$EXTI_CÀ¨ITPídögBô
(
uöt32_t
 
EXTI_Löe
)

203 
	`as£π_∑øm
(
	`IS_EXTI_LINE
(
EXTI_Löe
));

205 
EXTI
->
PR
 = 
EXTI_Löe
;

206 
	}
}

	@Source/STM32F10x_StdPeriph_Driver/src/stm32f10x_flash.c

22 
	~"°m32f10x_Êash.h
"

28 
	#ACR_LATENCY_Mask
 ((
uöt32_t
)0x00000038)

	)

29 
	#ACR_HLFCYA_Mask
 ((
uöt32_t
)0xFFFFFFF7)

	)

30 
	#ACR_PRFTBE_Mask
 ((
uöt32_t
)0xFFFFFFEF)

	)

33 
	#ACR_PRFTBS_Mask
 ((
uöt32_t
)0x00000020)

	)

36 
	#CR_PG_Së
 ((
uöt32_t
)0x00000001)

	)

37 
	#CR_PG_Re£t
 ((
uöt32_t
)0x00001FFE)

	)

38 
	#CR_PER_Së
 ((
uöt32_t
)0x00000002)

	)

39 
	#CR_PER_Re£t
 ((
uöt32_t
)0x00001FFD)

	)

40 
	#CR_MER_Së
 ((
uöt32_t
)0x00000004)

	)

41 
	#CR_MER_Re£t
 ((
uöt32_t
)0x00001FFB)

	)

42 
	#CR_OPTPG_Së
 ((
uöt32_t
)0x00000010)

	)

43 
	#CR_OPTPG_Re£t
 ((
uöt32_t
)0x00001FEF)

	)

44 
	#CR_OPTER_Së
 ((
uöt32_t
)0x00000020)

	)

45 
	#CR_OPTER_Re£t
 ((
uöt32_t
)0x00001FDF)

	)

46 
	#CR_STRT_Së
 ((
uöt32_t
)0x00000040)

	)

47 
	#CR_LOCK_Së
 ((
uöt32_t
)0x00000080)

	)

50 
	#RDPRT_Mask
 ((
uöt32_t
)0x00000002)

	)

51 
	#WRP0_Mask
 ((
uöt32_t
)0x000000FF)

	)

52 
	#WRP1_Mask
 ((
uöt32_t
)0x0000FF00)

	)

53 
	#WRP2_Mask
 ((
uöt32_t
)0x00FF0000)

	)

54 
	#WRP3_Mask
 ((
uöt32_t
)0xFF000000)

	)

57 
	#RDP_Key
 ((
uöt16_t
)0x00A5)

	)

58 
	#FLASH_KEY1
 ((
uöt32_t
)0x45670123)

	)

59 
	#FLASH_KEY2
 ((
uöt32_t
)0xCDEF89AB)

	)

62 
	#Eø£Timeout
 ((
uöt32_t
)0x00000FFF)

	)

63 
	#ProgømTimeout
 ((
uöt32_t
)0x0000000F)

	)

69 
dñay
();

79 
	$FLASH_SëL©ícy
(
uöt32_t
 
FLASH_L©ícy
)

81 
uöt32_t
 
tm¥eg
 = 0;

84 
	`as£π_∑øm
(
	`IS_FLASH_LATENCY
(
FLASH_L©ícy
));

87 
tm¥eg
 = 
FLASH
->
ACR
;

90 
tm¥eg
 &
ACR_LATENCY_Mask
;

91 
tm¥eg
 |
FLASH_L©ícy
;

94 
FLASH
->
ACR
 = 
tm¥eg
;

95 
	}
}

105 
	$FLASH_HÆfCy˛eAc˚ssCmd
(
uöt32_t
 
FLASH_HÆfCy˛eAc˚ss
)

108 
	`as£π_∑øm
(
	`IS_FLASH_HALFCYCLEACCESS_STATE
(
FLASH_HÆfCy˛eAc˚ss
));

111 
FLASH
->
ACR
 &
ACR_HLFCYA_Mask
;

112 
FLASH
->
ACR
 |
FLASH_HÆfCy˛eAc˚ss
;

113 
	}
}

123 
	$FLASH_Pª„tchBuf„rCmd
(
uöt32_t
 
FLASH_Pª„tchBuf„r
)

126 
	`as£π_∑øm
(
	`IS_FLASH_PREFETCHBUFFER_STATE
(
FLASH_Pª„tchBuf„r
));

129 
FLASH
->
ACR
 &
ACR_PRFTBE_Mask
;

130 
FLASH
->
ACR
 |
FLASH_Pª„tchBuf„r
;

131 
	}
}

138 
	$FLASH_U∆ock
()

141 
FLASH
->
KEYR
 = 
FLASH_KEY1
;

142 
FLASH
->
KEYR
 = 
FLASH_KEY2
;

143 
	}
}

150 
	$FLASH_Lock
()

153 
FLASH
->
CR
 |
CR_LOCK_Së
;

154 
	}
}

162 
FLASH_Sètus
 
	$FLASH_Eø£Page
(
uöt32_t
 
Page_Addªss
)

164 
FLASH_Sètus
 
°©us
 = 
FLASH_COMPLETE
;

166 
	`as£π_∑øm
(
	`IS_FLASH_ADDRESS
(
Page_Addªss
));

168 
°©us
 = 
	`FLASH_WaôF‹La°O≥øti⁄
(
Eø£Timeout
);

170 if(
°©us
 =
FLASH_COMPLETE
)

173 
FLASH
->
CR
|
CR_PER_Së
;

174 
FLASH
->
AR
 = 
Page_Addªss
;

175 
FLASH
->
CR
|
CR_STRT_Së
;

178 
°©us
 = 
	`FLASH_WaôF‹La°O≥øti⁄
(
Eø£Timeout
);

179 if(
°©us
 !
FLASH_TIMEOUT
)

182 
FLASH
->
CR
 &
CR_PER_Re£t
;

186  
°©us
;

187 
	}
}

195 
FLASH_Sètus
 
	$FLASH_Eø£AŒPages
()

197 
FLASH_Sètus
 
°©us
 = 
FLASH_COMPLETE
;

199 
°©us
 = 
	`FLASH_WaôF‹La°O≥øti⁄
(
Eø£Timeout
);

201 if(
°©us
 =
FLASH_COMPLETE
)

204 
FLASH
->
CR
 |
CR_MER_Së
;

205 
FLASH
->
CR
 |
CR_STRT_Së
;

208 
°©us
 = 
	`FLASH_WaôF‹La°O≥øti⁄
(
Eø£Timeout
);

209 if(
°©us
 !
FLASH_TIMEOUT
)

212 
FLASH
->
CR
 &
CR_MER_Re£t
;

216  
°©us
;

217 
	}
}

225 
FLASH_Sètus
 
	$FLASH_Eø£O±i⁄Byãs
()

227 
FLASH_Sètus
 
°©us
 = 
FLASH_COMPLETE
;

230 
°©us
 = 
	`FLASH_WaôF‹La°O≥øti⁄
(
Eø£Timeout
);

231 if(
°©us
 =
FLASH_COMPLETE
)

234 
FLASH
->
OPTKEYR
 = 
FLASH_KEY1
;

235 
FLASH
->
OPTKEYR
 = 
FLASH_KEY2
;

238 
FLASH
->
CR
 |
CR_OPTER_Së
;

239 
FLASH
->
CR
 |
CR_STRT_Së
;

241 
°©us
 = 
	`FLASH_WaôF‹La°O≥øti⁄
(
Eø£Timeout
);

243 if(
°©us
 =
FLASH_COMPLETE
)

246 
FLASH
->
CR
 &
CR_OPTER_Re£t
;

249 
FLASH
->
CR
 |
CR_OPTPG_Së
;

251 
OB
->
RDP

RDP_Key
;

253 
°©us
 = 
	`FLASH_WaôF‹La°O≥øti⁄
(
ProgømTimeout
);

255 if(
°©us
 !
FLASH_TIMEOUT
)

258 
FLASH
->
CR
 &
CR_OPTPG_Re£t
;

263 i‡(
°©us
 !
FLASH_TIMEOUT
)

266 
FLASH
->
CR
 &
CR_OPTPG_Re£t
;

271  
°©us
;

272 
	}
}

281 
FLASH_Sètus
 
	$FLASH_ProgømW‹d
(
uöt32_t
 
Addªss
, uöt32_à
D©a
)

283 
FLASH_Sètus
 
°©us
 = 
FLASH_COMPLETE
;

284 
__IO
 
uöt32_t
 
tmp
 = 0;

287 
	`as£π_∑øm
(
	`IS_FLASH_ADDRESS
(
Addªss
));

289 
°©us
 = 
	`FLASH_WaôF‹La°O≥øti⁄
(
ProgømTimeout
);

291 if(
°©us
 =
FLASH_COMPLETE
)

294 
FLASH
->
CR
 |
CR_PG_Së
;

296 *(
__IO
 
uöt16_t
*)
Addªss
 = (uöt16_t)
D©a
;

298 
°©us
 = 
	`FLASH_WaôF‹La°O≥øti⁄
(
ProgømTimeout
);

300 if(
°©us
 =
FLASH_COMPLETE
)

303 
tmp
 = 
Addªss
 + 2;

305 *(
__IO
 
uöt16_t
*Ë
tmp
 = 
D©a
 >> 16;

308 
°©us
 = 
	`FLASH_WaôF‹La°O≥øti⁄
(
ProgømTimeout
);

310 if(
°©us
 !
FLASH_TIMEOUT
)

313 
FLASH
->
CR
 &
CR_PG_Re£t
;

318 i‡(
°©us
 !
FLASH_TIMEOUT
)

321 
FLASH
->
CR
 &
CR_PG_Re£t
;

326  
°©us
;

327 
	}
}

336 
FLASH_Sètus
 
	$FLASH_ProgømHÆfW‹d
(
uöt32_t
 
Addªss
, 
uöt16_t
 
D©a
)

338 
FLASH_Sètus
 
°©us
 = 
FLASH_COMPLETE
;

340 
	`as£π_∑øm
(
	`IS_FLASH_ADDRESS
(
Addªss
));

342 
°©us
 = 
	`FLASH_WaôF‹La°O≥øti⁄
(
ProgømTimeout
);

344 if(
°©us
 =
FLASH_COMPLETE
)

347 
FLASH
->
CR
 |
CR_PG_Së
;

349 *(
__IO
 
uöt16_t
*)
Addªss
 = 
D©a
;

351 
°©us
 = 
	`FLASH_WaôF‹La°O≥øti⁄
(
ProgømTimeout
);

352 if(
°©us
 !
FLASH_TIMEOUT
)

355 
FLASH
->
CR
 &
CR_PG_Re£t
;

359  
°©us
;

360 
	}
}

370 
FLASH_Sètus
 
	$FLASH_ProgømO±i⁄ByãD©a
(
uöt32_t
 
Addªss
, 
uöt8_t
 
D©a
)

372 
FLASH_Sètus
 
°©us
 = 
FLASH_COMPLETE
;

374 
	`as£π_∑øm
(
	`IS_OB_DATA_ADDRESS
(
Addªss
));

375 
°©us
 = 
	`FLASH_WaôF‹La°O≥øti⁄
(
ProgømTimeout
);

376 if(
°©us
 =
FLASH_COMPLETE
)

379 
FLASH
->
OPTKEYR
 = 
FLASH_KEY1
;

380 
FLASH
->
OPTKEYR
 = 
FLASH_KEY2
;

382 
FLASH
->
CR
 |
CR_OPTPG_Së
;

383 *(
__IO
 
uöt16_t
*)
Addªss
 = 
D©a
;

386 
°©us
 = 
	`FLASH_WaôF‹La°O≥øti⁄
(
ProgømTimeout
);

387 if(
°©us
 !
FLASH_TIMEOUT
)

390 
FLASH
->
CR
 &
CR_OPTPG_Re£t
;

394  
°©us
;

395 
	}
}

409 
FLASH_Sètus
 
	$FLASH_E«bÀWrôePrŸe˘i⁄
(
uöt32_t
 
FLASH_Pages
)

411 
uöt16_t
 
WRP0_D©a
 = 0xFFFF, 
WRP1_D©a
 = 0xFFFF, 
WRP2_D©a
 = 0xFFFF, 
WRP3_D©a
 = 0xFFFF;

413 
FLASH_Sètus
 
°©us
 = 
FLASH_COMPLETE
;

416 
	`as£π_∑øm
(
	`IS_FLASH_WRPROT_PAGE
(
FLASH_Pages
));

418 
FLASH_Pages
 = (
uöt32_t
)(~FLASH_Pages);

419 
WRP0_D©a
 = (
uöt16_t
)(
FLASH_Pages
 & 
WRP0_Mask
);

420 
WRP1_D©a
 = (
uöt16_t
)((
FLASH_Pages
 & 
WRP1_Mask
) >> 8);

421 
WRP2_D©a
 = (
uöt16_t
)((
FLASH_Pages
 & 
WRP2_Mask
) >> 16);

422 
WRP3_D©a
 = (
uöt16_t
)((
FLASH_Pages
 & 
WRP3_Mask
) >> 24);

425 
°©us
 = 
	`FLASH_WaôF‹La°O≥øti⁄
(
ProgømTimeout
);

427 if(
°©us
 =
FLASH_COMPLETE
)

430 
FLASH
->
OPTKEYR
 = 
FLASH_KEY1
;

431 
FLASH
->
OPTKEYR
 = 
FLASH_KEY2
;

432 
FLASH
->
CR
 |
CR_OPTPG_Së
;

433 if(
WRP0_D©a
 != 0xFF)

435 
OB
->
WRP0
 = 
WRP0_D©a
;

438 
°©us
 = 
	`FLASH_WaôF‹La°O≥øti⁄
(
ProgømTimeout
);

440 if((
°©us
 =
FLASH_COMPLETE
Ë&& (
WRP1_D©a
 != 0xFF))

442 
OB
->
WRP1
 = 
WRP1_D©a
;

445 
°©us
 = 
	`FLASH_WaôF‹La°O≥øti⁄
(
ProgømTimeout
);

447 if((
°©us
 =
FLASH_COMPLETE
Ë&& (
WRP2_D©a
 != 0xFF))

449 
OB
->
WRP2
 = 
WRP2_D©a
;

452 
°©us
 = 
	`FLASH_WaôF‹La°O≥øti⁄
(
ProgømTimeout
);

455 if((
°©us
 =
FLASH_COMPLETE
)&& (
WRP3_D©a
 != 0xFF))

457 
OB
->
WRP3
 = 
WRP3_D©a
;

460 
°©us
 = 
	`FLASH_WaôF‹La°O≥øti⁄
(
ProgømTimeout
);

463 if(
°©us
 !
FLASH_TIMEOUT
)

466 
FLASH
->
CR
 &
CR_OPTPG_Re£t
;

470  
°©us
;

471 
	}
}

482 
FLASH_Sètus
 
	$FLASH_RódOutPrŸe˘i⁄
(
Fun˘i⁄ÆSèã
 
NewSèã
)

484 
FLASH_Sètus
 
°©us
 = 
FLASH_COMPLETE
;

486 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

487 
°©us
 = 
	`FLASH_WaôF‹La°O≥øti⁄
(
Eø£Timeout
);

488 if(
°©us
 =
FLASH_COMPLETE
)

491 
FLASH
->
OPTKEYR
 = 
FLASH_KEY1
;

492 
FLASH
->
OPTKEYR
 = 
FLASH_KEY2
;

493 
FLASH
->
CR
 |
CR_OPTER_Së
;

494 
FLASH
->
CR
 |
CR_STRT_Së
;

496 
°©us
 = 
	`FLASH_WaôF‹La°O≥øti⁄
(
Eø£Timeout
);

497 if(
°©us
 =
FLASH_COMPLETE
)

500 
FLASH
->
CR
 &
CR_OPTER_Re£t
;

502 
FLASH
->
CR
 |
CR_OPTPG_Së
;

503 if(
NewSèã
 !
DISABLE
)

505 
OB
->
RDP
 = 0x00;

509 
OB
->
RDP
 = 
RDP_Key
;

512 
°©us
 = 
	`FLASH_WaôF‹La°O≥øti⁄
(
Eø£Timeout
);

514 if(
°©us
 !
FLASH_TIMEOUT
)

517 
FLASH
->
CR
 &
CR_OPTPG_Re£t
;

522 if(
°©us
 !
FLASH_TIMEOUT
)

525 
FLASH
->
CR
 &
CR_OPTER_Re£t
;

530  
°©us
;

531 
	}
}

550 
FLASH_Sètus
 
	$FLASH_U£rO±i⁄ByãC⁄fig
(
uöt16_t
 
OB_IWDG
, uöt16_à
OB_STOP
, uöt16_à
OB_STDBY
)

552 
FLASH_Sètus
 
°©us
 = 
FLASH_COMPLETE
;

555 
	`as£π_∑øm
(
	`IS_OB_IWDG_SOURCE
(
OB_IWDG
));

556 
	`as£π_∑øm
(
	`IS_OB_STOP_SOURCE
(
OB_STOP
));

557 
	`as£π_∑øm
(
	`IS_OB_STDBY_SOURCE
(
OB_STDBY
));

560 
FLASH
->
OPTKEYR
 = 
FLASH_KEY1
;

561 
FLASH
->
OPTKEYR
 = 
FLASH_KEY2
;

564 
°©us
 = 
	`FLASH_WaôF‹La°O≥øti⁄
(
ProgømTimeout
);

566 if(
°©us
 =
FLASH_COMPLETE
)

569 
FLASH
->
CR
 |
CR_OPTPG_Së
;

571 
OB
->
USER
 = 
OB_IWDG
 | (
uöt16_t
)(
OB_STOP
 | (uöt16_t)(
OB_STDBY
 | ((uint16_t)0xF8)));

574 
°©us
 = 
	`FLASH_WaôF‹La°O≥øti⁄
(
ProgømTimeout
);

575 if(
°©us
 !
FLASH_TIMEOUT
)

578 
FLASH
->
CR
 &
CR_OPTPG_Re£t
;

582  
°©us
;

583 
	}
}

590 
uöt32_t
 
	$FLASH_GëU£rO±i⁄Byã
()

593  (
uöt32_t
)(
FLASH
->
OBR
 >> 2);

594 
	}
}

601 
uöt32_t
 
	$FLASH_GëWrôePrŸe˘i⁄O±i⁄Byã
()

604  (
uöt32_t
)(
FLASH
->
WRPR
);

605 
	}
}

612 
FœgSètus
 
	$FLASH_GëRódOutPrŸe˘i⁄Sètus
()

614 
FœgSètus
 
ªadout°©us
 = 
RESET
;

615 i‡((
FLASH
->
OBR
 & 
RDPRT_Mask
Ë!(
uöt32_t
)
RESET
)

617 
ªadout°©us
 = 
SET
;

621 
ªadout°©us
 = 
RESET
;

623  
ªadout°©us
;

624 
	}
}

631 
FœgSètus
 
	$FLASH_GëPª„tchBuf„rSètus
()

633 
FœgSètus
 
bô°©us
 = 
RESET
;

635 i‡((
FLASH
->
ACR
 & 
ACR_PRFTBS_Mask
Ë!(
uöt32_t
)
RESET
)

637 
bô°©us
 = 
SET
;

641 
bô°©us
 = 
RESET
;

644  
bô°©us
;

645 
	}
}

657 
	$FLASH_ITC⁄fig
(
uöt16_t
 
FLASH_IT
, 
Fun˘i⁄ÆSèã
 
NewSèã
)

660 
	`as£π_∑øm
(
	`IS_FLASH_IT
(
FLASH_IT
));

661 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

662 if(
NewSèã
 !
DISABLE
)

665 
FLASH
->
CR
 |
FLASH_IT
;

670 
FLASH
->
CR
 &~(
uöt32_t
)
FLASH_IT
;

672 
	}
}

685 
FœgSètus
 
	$FLASH_GëFœgSètus
(
uöt16_t
 
FLASH_FLAG
)

687 
FœgSètus
 
bô°©us
 = 
RESET
;

689 
	`as£π_∑øm
(
	`IS_FLASH_GET_FLAG
(
FLASH_FLAG
)) ;

690 if(
FLASH_FLAG
 =
FLASH_FLAG_OPTERR
)

692 if((
FLASH
->
OBR
 & 
FLASH_FLAG_OPTERR
Ë!(
uöt32_t
)
RESET
)

694 
bô°©us
 = 
SET
;

698 
bô°©us
 = 
RESET
;

703 if((
FLASH
->
SR
 & 
FLASH_FLAG
Ë!(
uöt32_t
)
RESET
)

705 
bô°©us
 = 
SET
;

709 
bô°©us
 = 
RESET
;

713  
bô°©us
;

714 
	}
}

725 
	$FLASH_CÀ¨Fœg
(
uöt16_t
 
FLASH_FLAG
)

728 
	`as£π_∑øm
(
	`IS_FLASH_CLEAR_FLAG
(
FLASH_FLAG
)) ;

731 
FLASH
->
SR
 = 
FLASH_FLAG
;

732 
	}
}

740 
FLASH_Sètus
 
	$FLASH_GëSètus
()

742 
FLASH_Sètus
 
Êash°©us
 = 
FLASH_COMPLETE
;

744 if((
FLASH
->
SR
 & 
FLASH_FLAG_BSY
) == FLASH_FLAG_BSY)

746 
Êash°©us
 = 
FLASH_BUSY
;

750 if((
FLASH
->
SR
 & 
FLASH_FLAG_PGERR
) != 0)

752 
Êash°©us
 = 
FLASH_ERROR_PG
;

756 if((
FLASH
->
SR
 & 
FLASH_FLAG_WRPRTERR
) != 0 )

758 
Êash°©us
 = 
FLASH_ERROR_WRP
;

762 
Êash°©us
 = 
FLASH_COMPLETE
;

767  
Êash°©us
;

768 
	}
}

776 
FLASH_Sètus
 
	$FLASH_WaôF‹La°O≥øti⁄
(
uöt32_t
 
Timeout
)

778 
FLASH_Sètus
 
°©us
 = 
FLASH_COMPLETE
;

781 
°©us
 = 
	`FLASH_GëSètus
();

783 (
°©us
 =
FLASH_BUSY
Ë&& (
Timeout
 != 0x00))

785 
	`dñay
();

786 
°©us
 = 
	`FLASH_GëSètus
();

787 
Timeout
--;

789 if(
Timeout
 == 0x00 )

791 
°©us
 = 
FLASH_TIMEOUT
;

794  
°©us
;

795 
	}
}

802 
	$dñay
()

804 
__IO
 
uöt32_t
 
i
 = 0;

805 
i
 = 0xFF; i != 0; i--)

808 
	}
}

	@Source/STM32F10x_StdPeriph_Driver/src/stm32f10x_fsmc.c

22 
	~"°m32f10x_fsmc.h
"

23 
	~"°m32f10x_rcc.h
"

48 
	#BCR_MBKEN_Së
 ((
uöt32_t
)0x00000001)

	)

49 
	#BCR_MBKEN_Re£t
 ((
uöt32_t
)0x000FFFFE)

	)

50 
	#BCR_FACCEN_Së
 ((
uöt32_t
)0x00000040)

	)

53 
	#PCR_PBKEN_Së
 ((
uöt32_t
)0x00000004)

	)

54 
	#PCR_PBKEN_Re£t
 ((
uöt32_t
)0x000FFFFB)

	)

55 
	#PCR_ECCEN_Së
 ((
uöt32_t
)0x00000040)

	)

56 
	#PCR_ECCEN_Re£t
 ((
uöt32_t
)0x000FFFBF)

	)

57 
	#PCR_Mem‹yTy≥_NAND
 ((
uöt32_t
)0x00000008)

	)

101 
	$FSMC_NORSRAMDeInô
(
uöt32_t
 
FSMC_B™k
)

104 
	`as£π_∑øm
(
	`IS_FSMC_NORSRAM_BANK
(
FSMC_B™k
));

107 if(
FSMC_B™k
 =
FSMC_B™k1_NORSRAM1
)

109 
FSMC_B™k1
->
BTCR
[
FSMC_B™k
] = 0x000030DB;

114 
FSMC_B™k1
->
BTCR
[
FSMC_B™k
] = 0x000030D2;

116 
FSMC_B™k1
->
BTCR
[
FSMC_B™k
 + 1] = 0x0FFFFFFF;

117 
FSMC_B™k1E
->
BWTR
[
FSMC_B™k
] = 0x0FFFFFFF;

118 
	}
}

129 
	$FSMC_NANDDeInô
(
uöt32_t
 
FSMC_B™k
)

132 
	`as£π_∑øm
(
	`IS_FSMC_NAND_BANK
(
FSMC_B™k
));

134 if(
FSMC_B™k
 =
FSMC_B™k2_NAND
)

137 
FSMC_B™k2
->
PCR2
 = 0x00000018;

138 
FSMC_B™k2
->
SR2
 = 0x00000040;

139 
FSMC_B™k2
->
PMEM2
 = 0xFCFCFCFC;

140 
FSMC_B™k2
->
PATT2
 = 0xFCFCFCFC;

146 
FSMC_B™k3
->
PCR3
 = 0x00000018;

147 
FSMC_B™k3
->
SR3
 = 0x00000040;

148 
FSMC_B™k3
->
PMEM3
 = 0xFCFCFCFC;

149 
FSMC_B™k3
->
PATT3
 = 0xFCFCFCFC;

151 
	}
}

159 
	$FSMC_PCCARDDeInô
()

162 
FSMC_B™k4
->
PCR4
 = 0x00000018;

163 
FSMC_B™k4
->
SR4
 = 0x00000000;

164 
FSMC_B™k4
->
PMEM4
 = 0xFCFCFCFC;

165 
FSMC_B™k4
->
PATT4
 = 0xFCFCFCFC;

166 
FSMC_B™k4
->
PIO4
 = 0xFCFCFCFC;

167 
	}
}

177 
	$FSMC_NORSRAMInô
(
FSMC_NORSRAMInôTy≥Def
* 
FSMC_NORSRAMInôSåu˘
)

180 
	`as£π_∑øm
(
	`IS_FSMC_NORSRAM_BANK
(
FSMC_NORSRAMInôSåu˘
->
FSMC_B™k
));

181 
	`as£π_∑øm
(
	`IS_FSMC_MUX
(
FSMC_NORSRAMInôSåu˘
->
FSMC_D©aAddªssMux
));

182 
	`as£π_∑øm
(
	`IS_FSMC_MEMORY
(
FSMC_NORSRAMInôSåu˘
->
FSMC_Mem‹yTy≥
));

183 
	`as£π_∑øm
(
	`IS_FSMC_MEMORY_WIDTH
(
FSMC_NORSRAMInôSåu˘
->
FSMC_Mem‹yD©aWidth
));

184 
	`as£π_∑øm
(
	`IS_FSMC_BURSTMODE
(
FSMC_NORSRAMInôSåu˘
->
FSMC_Bur°Ac˚ssMode
));

185 
	`as£π_∑øm
(
	`IS_FSMC_WAIT_POLARITY
(
FSMC_NORSRAMInôSåu˘
->
FSMC_WaôSig«lPﬁ¨ôy
));

186 
	`as£π_∑øm
(
	`IS_FSMC_WRAP_MODE
(
FSMC_NORSRAMInôSåu˘
->
FSMC_WøpMode
));

187 
	`as£π_∑øm
(
	`IS_FSMC_WAIT_SIGNAL_ACTIVE
(
FSMC_NORSRAMInôSåu˘
->
FSMC_WaôSig«lA˘ive
));

188 
	`as£π_∑øm
(
	`IS_FSMC_WRITE_OPERATION
(
FSMC_NORSRAMInôSåu˘
->
FSMC_WrôeO≥øti⁄
));

189 
	`as£π_∑øm
(
	`IS_FSMC_WAITE_SIGNAL
(
FSMC_NORSRAMInôSåu˘
->
FSMC_WaôSig«l
));

190 
	`as£π_∑øm
(
	`IS_FSMC_EXTENDED_MODE
(
FSMC_NORSRAMInôSåu˘
->
FSMC_ExãndedMode
));

191 
	`as£π_∑øm
(
	`IS_FSMC_WRITE_BURST
(
FSMC_NORSRAMInôSåu˘
->
FSMC_WrôeBur°
));

192 
	`as£π_∑øm
(
	`IS_FSMC_ADDRESS_SETUP_TIME
(
FSMC_NORSRAMInôSåu˘
->
FSMC_RódWrôeTimögSåu˘
->
FSMC_AddªssSëupTime
));

193 
	`as£π_∑øm
(
	`IS_FSMC_ADDRESS_HOLD_TIME
(
FSMC_NORSRAMInôSåu˘
->
FSMC_RódWrôeTimögSåu˘
->
FSMC_AddªssHﬁdTime
));

194 
	`as£π_∑øm
(
	`IS_FSMC_DATASETUP_TIME
(
FSMC_NORSRAMInôSåu˘
->
FSMC_RódWrôeTimögSåu˘
->
FSMC_D©aSëupTime
));

195 
	`as£π_∑øm
(
	`IS_FSMC_TURNAROUND_TIME
(
FSMC_NORSRAMInôSåu˘
->
FSMC_RódWrôeTimögSåu˘
->
FSMC_BusTu∫AroundDuøti⁄
));

196 
	`as£π_∑øm
(
	`IS_FSMC_CLK_DIV
(
FSMC_NORSRAMInôSåu˘
->
FSMC_RódWrôeTimögSåu˘
->
FSMC_CLKDivisi⁄
));

197 
	`as£π_∑øm
(
	`IS_FSMC_DATA_LATENCY
(
FSMC_NORSRAMInôSåu˘
->
FSMC_RódWrôeTimögSåu˘
->
FSMC_D©aL©ícy
));

198 
	`as£π_∑øm
(
	`IS_FSMC_ACCESS_MODE
(
FSMC_NORSRAMInôSåu˘
->
FSMC_RódWrôeTimögSåu˘
->
FSMC_Ac˚ssMode
));

201 
FSMC_B™k1
->
BTCR
[
FSMC_NORSRAMInôSåu˘
->
FSMC_B™k
] =

202 (
uöt32_t
)
FSMC_NORSRAMInôSåu˘
->
FSMC_D©aAddªssMux
 |

203 
FSMC_NORSRAMInôSåu˘
->
FSMC_Mem‹yTy≥
 |

204 
FSMC_NORSRAMInôSåu˘
->
FSMC_Mem‹yD©aWidth
 |

205 
FSMC_NORSRAMInôSåu˘
->
FSMC_Bur°Ac˚ssMode
 |

206 
FSMC_NORSRAMInôSåu˘
->
FSMC_WaôSig«lPﬁ¨ôy
 |

207 
FSMC_NORSRAMInôSåu˘
->
FSMC_WøpMode
 |

208 
FSMC_NORSRAMInôSåu˘
->
FSMC_WaôSig«lA˘ive
 |

209 
FSMC_NORSRAMInôSåu˘
->
FSMC_WrôeO≥øti⁄
 |

210 
FSMC_NORSRAMInôSåu˘
->
FSMC_WaôSig«l
 |

211 
FSMC_NORSRAMInôSåu˘
->
FSMC_ExãndedMode
 |

212 
FSMC_NORSRAMInôSåu˘
->
FSMC_WrôeBur°
;

213 if(
FSMC_NORSRAMInôSåu˘
->
FSMC_Mem‹yTy≥
 =
FSMC_Mem‹yTy≥_NOR
)

215 
FSMC_B™k1
->
BTCR
[
FSMC_NORSRAMInôSåu˘
->
FSMC_B™k
] |(
uöt32_t
)
BCR_FACCEN_Së
;

218 
FSMC_B™k1
->
BTCR
[
FSMC_NORSRAMInôSåu˘
->
FSMC_B™k
+1] =

219 (
uöt32_t
)
FSMC_NORSRAMInôSåu˘
->
FSMC_RódWrôeTimögSåu˘
->
FSMC_AddªssSëupTime
 |

220 (
FSMC_NORSRAMInôSåu˘
->
FSMC_RódWrôeTimögSåu˘
->
FSMC_AddªssHﬁdTime
 << 4) |

221 (
FSMC_NORSRAMInôSåu˘
->
FSMC_RódWrôeTimögSåu˘
->
FSMC_D©aSëupTime
 << 8) |

222 (
FSMC_NORSRAMInôSåu˘
->
FSMC_RódWrôeTimögSåu˘
->
FSMC_BusTu∫AroundDuøti⁄
 << 16) |

223 (
FSMC_NORSRAMInôSåu˘
->
FSMC_RódWrôeTimögSåu˘
->
FSMC_CLKDivisi⁄
 << 20) |

224 (
FSMC_NORSRAMInôSåu˘
->
FSMC_RódWrôeTimögSåu˘
->
FSMC_D©aL©ícy
 << 24) |

225 
FSMC_NORSRAMInôSåu˘
->
FSMC_RódWrôeTimögSåu˘
->
FSMC_Ac˚ssMode
;

229 if(
FSMC_NORSRAMInôSåu˘
->
FSMC_ExãndedMode
 =
FSMC_ExãndedMode_E«bÀ
)

231 
	`as£π_∑øm
(
	`IS_FSMC_ADDRESS_SETUP_TIME
(
FSMC_NORSRAMInôSåu˘
->
FSMC_WrôeTimögSåu˘
->
FSMC_AddªssSëupTime
));

232 
	`as£π_∑øm
(
	`IS_FSMC_ADDRESS_HOLD_TIME
(
FSMC_NORSRAMInôSåu˘
->
FSMC_WrôeTimögSåu˘
->
FSMC_AddªssHﬁdTime
));

233 
	`as£π_∑øm
(
	`IS_FSMC_DATASETUP_TIME
(
FSMC_NORSRAMInôSåu˘
->
FSMC_WrôeTimögSåu˘
->
FSMC_D©aSëupTime
));

234 
	`as£π_∑øm
(
	`IS_FSMC_CLK_DIV
(
FSMC_NORSRAMInôSåu˘
->
FSMC_WrôeTimögSåu˘
->
FSMC_CLKDivisi⁄
));

235 
	`as£π_∑øm
(
	`IS_FSMC_DATA_LATENCY
(
FSMC_NORSRAMInôSåu˘
->
FSMC_WrôeTimögSåu˘
->
FSMC_D©aL©ícy
));

236 
	`as£π_∑øm
(
	`IS_FSMC_ACCESS_MODE
(
FSMC_NORSRAMInôSåu˘
->
FSMC_WrôeTimögSåu˘
->
FSMC_Ac˚ssMode
));

237 
FSMC_B™k1E
->
BWTR
[
FSMC_NORSRAMInôSåu˘
->
FSMC_B™k
] =

238 (
uöt32_t
)
FSMC_NORSRAMInôSåu˘
->
FSMC_WrôeTimögSåu˘
->
FSMC_AddªssSëupTime
 |

239 (
FSMC_NORSRAMInôSåu˘
->
FSMC_WrôeTimögSåu˘
->
FSMC_AddªssHﬁdTime
 << 4 )|

240 (
FSMC_NORSRAMInôSåu˘
->
FSMC_WrôeTimögSåu˘
->
FSMC_D©aSëupTime
 << 8) |

241 (
FSMC_NORSRAMInôSåu˘
->
FSMC_WrôeTimögSåu˘
->
FSMC_CLKDivisi⁄
 << 20) |

242 (
FSMC_NORSRAMInôSåu˘
->
FSMC_WrôeTimögSåu˘
->
FSMC_D©aL©ícy
 << 24) |

243 
FSMC_NORSRAMInôSåu˘
->
FSMC_WrôeTimögSåu˘
->
FSMC_Ac˚ssMode
;

247 
FSMC_B™k1E
->
BWTR
[
FSMC_NORSRAMInôSåu˘
->
FSMC_B™k
] = 0x0FFFFFFF;

249 
	}
}

259 
	$FSMC_NANDInô
(
FSMC_NANDInôTy≥Def
* 
FSMC_NANDInôSåu˘
)

261 
uöt32_t
 
tmµ¸
 = 0x00000000, 
tmµmem
 = 0x00000000, 
tmµ©t
 = 0x00000000;

264 
	`as£π_∑øm
–
	`IS_FSMC_NAND_BANK
(
FSMC_NANDInôSåu˘
->
FSMC_B™k
));

265 
	`as£π_∑øm
–
	`IS_FSMC_WAIT_FEATURE
(
FSMC_NANDInôSåu˘
->
FSMC_Waô„©uª
));

266 
	`as£π_∑øm
–
	`IS_FSMC_DATA_WIDTH
(
FSMC_NANDInôSåu˘
->
FSMC_Mem‹yD©aWidth
));

267 
	`as£π_∑øm
–
	`IS_FSMC_ECC_STATE
(
FSMC_NANDInôSåu˘
->
FSMC_ECC
));

268 
	`as£π_∑øm
–
	`IS_FSMC_ECCPAGE_SIZE
(
FSMC_NANDInôSåu˘
->
FSMC_ECCPageSize
));

269 
	`as£π_∑øm
–
	`IS_FSMC_TCLR_TIME
(
FSMC_NANDInôSåu˘
->
FSMC_TCLRSëupTime
));

270 
	`as£π_∑øm
–
	`IS_FSMC_TAR_TIME
(
FSMC_NANDInôSåu˘
->
FSMC_TARSëupTime
));

271 
	`as£π_∑øm
(
	`IS_FSMC_SETUP_TIME
(
FSMC_NANDInôSåu˘
->
FSMC_Comm⁄S∑˚TimögSåu˘
->
FSMC_SëupTime
));

272 
	`as£π_∑øm
(
	`IS_FSMC_WAIT_TIME
(
FSMC_NANDInôSåu˘
->
FSMC_Comm⁄S∑˚TimögSåu˘
->
FSMC_WaôSëupTime
));

273 
	`as£π_∑øm
(
	`IS_FSMC_HOLD_TIME
(
FSMC_NANDInôSåu˘
->
FSMC_Comm⁄S∑˚TimögSåu˘
->
FSMC_HﬁdSëupTime
));

274 
	`as£π_∑øm
(
	`IS_FSMC_HIZ_TIME
(
FSMC_NANDInôSåu˘
->
FSMC_Comm⁄S∑˚TimögSåu˘
->
FSMC_HiZSëupTime
));

275 
	`as£π_∑øm
(
	`IS_FSMC_SETUP_TIME
(
FSMC_NANDInôSåu˘
->
FSMC_AâribuãS∑˚TimögSåu˘
->
FSMC_SëupTime
));

276 
	`as£π_∑øm
(
	`IS_FSMC_WAIT_TIME
(
FSMC_NANDInôSåu˘
->
FSMC_AâribuãS∑˚TimögSåu˘
->
FSMC_WaôSëupTime
));

277 
	`as£π_∑øm
(
	`IS_FSMC_HOLD_TIME
(
FSMC_NANDInôSåu˘
->
FSMC_AâribuãS∑˚TimögSåu˘
->
FSMC_HﬁdSëupTime
));

278 
	`as£π_∑øm
(
	`IS_FSMC_HIZ_TIME
(
FSMC_NANDInôSåu˘
->
FSMC_AâribuãS∑˚TimögSåu˘
->
FSMC_HiZSëupTime
));

281 
tmµ¸
 = (
uöt32_t
)
FSMC_NANDInôSåu˘
->
FSMC_Waô„©uª
 |

282 
PCR_Mem‹yTy≥_NAND
 |

283 
FSMC_NANDInôSåu˘
->
FSMC_Mem‹yD©aWidth
 |

284 
FSMC_NANDInôSåu˘
->
FSMC_ECC
 |

285 
FSMC_NANDInôSåu˘
->
FSMC_ECCPageSize
 |

286 (
FSMC_NANDInôSåu˘
->
FSMC_TCLRSëupTime
 << 9 )|

287 (
FSMC_NANDInôSåu˘
->
FSMC_TARSëupTime
 << 13);

290 
tmµmem
 = (
uöt32_t
)
FSMC_NANDInôSåu˘
->
FSMC_Comm⁄S∑˚TimögSåu˘
->
FSMC_SëupTime
 |

291 (
FSMC_NANDInôSåu˘
->
FSMC_Comm⁄S∑˚TimögSåu˘
->
FSMC_WaôSëupTime
 << 8) |

292 (
FSMC_NANDInôSåu˘
->
FSMC_Comm⁄S∑˚TimögSåu˘
->
FSMC_HﬁdSëupTime
 << 16)|

293 (
FSMC_NANDInôSåu˘
->
FSMC_Comm⁄S∑˚TimögSåu˘
->
FSMC_HiZSëupTime
 << 24);

296 
tmµ©t
 = (
uöt32_t
)
FSMC_NANDInôSåu˘
->
FSMC_AâribuãS∑˚TimögSåu˘
->
FSMC_SëupTime
 |

297 (
FSMC_NANDInôSåu˘
->
FSMC_AâribuãS∑˚TimögSåu˘
->
FSMC_WaôSëupTime
 << 8) |

298 (
FSMC_NANDInôSåu˘
->
FSMC_AâribuãS∑˚TimögSåu˘
->
FSMC_HﬁdSëupTime
 << 16)|

299 (
FSMC_NANDInôSåu˘
->
FSMC_AâribuãS∑˚TimögSåu˘
->
FSMC_HiZSëupTime
 << 24);

301 if(
FSMC_NANDInôSåu˘
->
FSMC_B™k
 =
FSMC_B™k2_NAND
)

304 
FSMC_B™k2
->
PCR2
 = 
tmµ¸
;

305 
FSMC_B™k2
->
PMEM2
 = 
tmµmem
;

306 
FSMC_B™k2
->
PATT2
 = 
tmµ©t
;

311 
FSMC_B™k3
->
PCR3
 = 
tmµ¸
;

312 
FSMC_B™k3
->
PMEM3
 = 
tmµmem
;

313 
FSMC_B™k3
->
PATT3
 = 
tmµ©t
;

315 
	}
}

325 
	$FSMC_PCCARDInô
(
FSMC_PCCARDInôTy≥Def
* 
FSMC_PCCARDInôSåu˘
)

328 
	`as£π_∑øm
(
	`IS_FSMC_WAIT_FEATURE
(
FSMC_PCCARDInôSåu˘
->
FSMC_Waô„©uª
));

329 
	`as£π_∑øm
(
	`IS_FSMC_TCLR_TIME
(
FSMC_PCCARDInôSåu˘
->
FSMC_TCLRSëupTime
));

330 
	`as£π_∑øm
(
	`IS_FSMC_TAR_TIME
(
FSMC_PCCARDInôSåu˘
->
FSMC_TARSëupTime
));

332 
	`as£π_∑øm
(
	`IS_FSMC_SETUP_TIME
(
FSMC_PCCARDInôSåu˘
->
FSMC_Comm⁄S∑˚TimögSåu˘
->
FSMC_SëupTime
));

333 
	`as£π_∑øm
(
	`IS_FSMC_WAIT_TIME
(
FSMC_PCCARDInôSåu˘
->
FSMC_Comm⁄S∑˚TimögSåu˘
->
FSMC_WaôSëupTime
));

334 
	`as£π_∑øm
(
	`IS_FSMC_HOLD_TIME
(
FSMC_PCCARDInôSåu˘
->
FSMC_Comm⁄S∑˚TimögSåu˘
->
FSMC_HﬁdSëupTime
));

335 
	`as£π_∑øm
(
	`IS_FSMC_HIZ_TIME
(
FSMC_PCCARDInôSåu˘
->
FSMC_Comm⁄S∑˚TimögSåu˘
->
FSMC_HiZSëupTime
));

337 
	`as£π_∑øm
(
	`IS_FSMC_SETUP_TIME
(
FSMC_PCCARDInôSåu˘
->
FSMC_AâribuãS∑˚TimögSåu˘
->
FSMC_SëupTime
));

338 
	`as£π_∑øm
(
	`IS_FSMC_WAIT_TIME
(
FSMC_PCCARDInôSåu˘
->
FSMC_AâribuãS∑˚TimögSåu˘
->
FSMC_WaôSëupTime
));

339 
	`as£π_∑øm
(
	`IS_FSMC_HOLD_TIME
(
FSMC_PCCARDInôSåu˘
->
FSMC_AâribuãS∑˚TimögSåu˘
->
FSMC_HﬁdSëupTime
));

340 
	`as£π_∑øm
(
	`IS_FSMC_HIZ_TIME
(
FSMC_PCCARDInôSåu˘
->
FSMC_AâribuãS∑˚TimögSåu˘
->
FSMC_HiZSëupTime
));

341 
	`as£π_∑øm
(
	`IS_FSMC_SETUP_TIME
(
FSMC_PCCARDInôSåu˘
->
FSMC_IOS∑˚TimögSåu˘
->
FSMC_SëupTime
));

342 
	`as£π_∑øm
(
	`IS_FSMC_WAIT_TIME
(
FSMC_PCCARDInôSåu˘
->
FSMC_IOS∑˚TimögSåu˘
->
FSMC_WaôSëupTime
));

343 
	`as£π_∑øm
(
	`IS_FSMC_HOLD_TIME
(
FSMC_PCCARDInôSåu˘
->
FSMC_IOS∑˚TimögSåu˘
->
FSMC_HﬁdSëupTime
));

344 
	`as£π_∑øm
(
	`IS_FSMC_HIZ_TIME
(
FSMC_PCCARDInôSåu˘
->
FSMC_IOS∑˚TimögSåu˘
->
FSMC_HiZSëupTime
));

347 
FSMC_B™k4
->
PCR4
 = (
uöt32_t
)
FSMC_PCCARDInôSåu˘
->
FSMC_Waô„©uª
 |

348 
FSMC_Mem‹yD©aWidth_16b
 |

349 (
FSMC_PCCARDInôSåu˘
->
FSMC_TCLRSëupTime
 << 9) |

350 (
FSMC_PCCARDInôSåu˘
->
FSMC_TARSëupTime
 << 13);

353 
FSMC_B™k4
->
PMEM4
 = (
uöt32_t
)
FSMC_PCCARDInôSåu˘
->
FSMC_Comm⁄S∑˚TimögSåu˘
->
FSMC_SëupTime
 |

354 (
FSMC_PCCARDInôSåu˘
->
FSMC_Comm⁄S∑˚TimögSåu˘
->
FSMC_WaôSëupTime
 << 8) |

355 (
FSMC_PCCARDInôSåu˘
->
FSMC_Comm⁄S∑˚TimögSåu˘
->
FSMC_HﬁdSëupTime
 << 16)|

356 (
FSMC_PCCARDInôSåu˘
->
FSMC_Comm⁄S∑˚TimögSåu˘
->
FSMC_HiZSëupTime
 << 24);

359 
FSMC_B™k4
->
PATT4
 = (
uöt32_t
)
FSMC_PCCARDInôSåu˘
->
FSMC_AâribuãS∑˚TimögSåu˘
->
FSMC_SëupTime
 |

360 (
FSMC_PCCARDInôSåu˘
->
FSMC_AâribuãS∑˚TimögSåu˘
->
FSMC_WaôSëupTime
 << 8) |

361 (
FSMC_PCCARDInôSåu˘
->
FSMC_AâribuãS∑˚TimögSåu˘
->
FSMC_HﬁdSëupTime
 << 16)|

362 (
FSMC_PCCARDInôSåu˘
->
FSMC_AâribuãS∑˚TimögSåu˘
->
FSMC_HiZSëupTime
 << 24);

365 
FSMC_B™k4
->
PIO4
 = (
uöt32_t
)
FSMC_PCCARDInôSåu˘
->
FSMC_IOS∑˚TimögSåu˘
->
FSMC_SëupTime
 |

366 (
FSMC_PCCARDInôSåu˘
->
FSMC_IOS∑˚TimögSåu˘
->
FSMC_WaôSëupTime
 << 8) |

367 (
FSMC_PCCARDInôSåu˘
->
FSMC_IOS∑˚TimögSåu˘
->
FSMC_HﬁdSëupTime
 << 16)|

368 (
FSMC_PCCARDInôSåu˘
->
FSMC_IOS∑˚TimögSåu˘
->
FSMC_HiZSëupTime
 << 24);

369 
	}
}

377 
	$FSMC_NORSRAMSåu˘Inô
(
FSMC_NORSRAMInôTy≥Def
* 
FSMC_NORSRAMInôSåu˘
)

380 
FSMC_NORSRAMInôSåu˘
->
FSMC_B™k
 = 
FSMC_B™k1_NORSRAM1
;

381 
FSMC_NORSRAMInôSåu˘
->
FSMC_D©aAddªssMux
 = 
FSMC_D©aAddªssMux_E«bÀ
;

382 
FSMC_NORSRAMInôSåu˘
->
FSMC_Mem‹yTy≥
 = 
FSMC_Mem‹yTy≥_SRAM
;

383 
FSMC_NORSRAMInôSåu˘
->
FSMC_Mem‹yD©aWidth
 = 
FSMC_Mem‹yD©aWidth_8b
;

384 
FSMC_NORSRAMInôSåu˘
->
FSMC_Bur°Ac˚ssMode
 = 
FSMC_Bur°Ac˚ssMode_DißbÀ
;

385 
FSMC_NORSRAMInôSåu˘
->
FSMC_WaôSig«lPﬁ¨ôy
 = 
FSMC_WaôSig«lPﬁ¨ôy_Low
;

386 
FSMC_NORSRAMInôSåu˘
->
FSMC_WøpMode
 = 
FSMC_WøpMode_DißbÀ
;

387 
FSMC_NORSRAMInôSåu˘
->
FSMC_WaôSig«lA˘ive
 = 
FSMC_WaôSig«lA˘ive_Bef‹eWaôSèã
;

388 
FSMC_NORSRAMInôSåu˘
->
FSMC_WrôeO≥øti⁄
 = 
FSMC_WrôeO≥øti⁄_E«bÀ
;

389 
FSMC_NORSRAMInôSåu˘
->
FSMC_WaôSig«l
 = 
FSMC_WaôSig«l_E«bÀ
;

390 
FSMC_NORSRAMInôSåu˘
->
FSMC_ExãndedMode
 = 
FSMC_ExãndedMode_DißbÀ
;

391 
FSMC_NORSRAMInôSåu˘
->
FSMC_WrôeBur°
 = 
FSMC_WrôeBur°_DißbÀ
;

392 
FSMC_NORSRAMInôSåu˘
->
FSMC_RódWrôeTimögSåu˘
->
FSMC_AddªssSëupTime
 = 0xF;

393 
FSMC_NORSRAMInôSåu˘
->
FSMC_RódWrôeTimögSåu˘
->
FSMC_AddªssHﬁdTime
 = 0xF;

394 
FSMC_NORSRAMInôSåu˘
->
FSMC_RódWrôeTimögSåu˘
->
FSMC_D©aSëupTime
 = 0xFF;

395 
FSMC_NORSRAMInôSåu˘
->
FSMC_RódWrôeTimögSåu˘
->
FSMC_BusTu∫AroundDuøti⁄
 = 0xF;

396 
FSMC_NORSRAMInôSåu˘
->
FSMC_RódWrôeTimögSåu˘
->
FSMC_CLKDivisi⁄
 = 0xF;

397 
FSMC_NORSRAMInôSåu˘
->
FSMC_RódWrôeTimögSåu˘
->
FSMC_D©aL©ícy
 = 0xF;

398 
FSMC_NORSRAMInôSåu˘
->
FSMC_RódWrôeTimögSåu˘
->
FSMC_Ac˚ssMode
 = 
FSMC_Ac˚ssMode_A
;

399 
FSMC_NORSRAMInôSåu˘
->
FSMC_WrôeTimögSåu˘
->
FSMC_AddªssSëupTime
 = 0xF;

400 
FSMC_NORSRAMInôSåu˘
->
FSMC_WrôeTimögSåu˘
->
FSMC_AddªssHﬁdTime
 = 0xF;

401 
FSMC_NORSRAMInôSåu˘
->
FSMC_WrôeTimögSåu˘
->
FSMC_D©aSëupTime
 = 0xFF;

402 
FSMC_NORSRAMInôSåu˘
->
FSMC_WrôeTimögSåu˘
->
FSMC_BusTu∫AroundDuøti⁄
 = 0xF;

403 
FSMC_NORSRAMInôSåu˘
->
FSMC_WrôeTimögSåu˘
->
FSMC_CLKDivisi⁄
 = 0xF;

404 
FSMC_NORSRAMInôSåu˘
->
FSMC_WrôeTimögSåu˘
->
FSMC_D©aL©ícy
 = 0xF;

405 
FSMC_NORSRAMInôSåu˘
->
FSMC_WrôeTimögSåu˘
->
FSMC_Ac˚ssMode
 = 
FSMC_Ac˚ssMode_A
;

406 
	}
}

414 
	$FSMC_NANDSåu˘Inô
(
FSMC_NANDInôTy≥Def
* 
FSMC_NANDInôSåu˘
)

417 
FSMC_NANDInôSåu˘
->
FSMC_B™k
 = 
FSMC_B™k2_NAND
;

418 
FSMC_NANDInôSåu˘
->
FSMC_Waô„©uª
 = 
FSMC_Waô„©uª_DißbÀ
;

419 
FSMC_NANDInôSåu˘
->
FSMC_Mem‹yD©aWidth
 = 
FSMC_Mem‹yD©aWidth_8b
;

420 
FSMC_NANDInôSåu˘
->
FSMC_ECC
 = 
FSMC_ECC_DißbÀ
;

421 
FSMC_NANDInôSåu˘
->
FSMC_ECCPageSize
 = 
FSMC_ECCPageSize_256Byãs
;

422 
FSMC_NANDInôSåu˘
->
FSMC_TCLRSëupTime
 = 0x0;

423 
FSMC_NANDInôSåu˘
->
FSMC_TARSëupTime
 = 0x0;

424 
FSMC_NANDInôSåu˘
->
FSMC_Comm⁄S∑˚TimögSåu˘
->
FSMC_SëupTime
 = 0xFC;

425 
FSMC_NANDInôSåu˘
->
FSMC_Comm⁄S∑˚TimögSåu˘
->
FSMC_WaôSëupTime
 = 0xFC;

426 
FSMC_NANDInôSåu˘
->
FSMC_Comm⁄S∑˚TimögSåu˘
->
FSMC_HﬁdSëupTime
 = 0xFC;

427 
FSMC_NANDInôSåu˘
->
FSMC_Comm⁄S∑˚TimögSåu˘
->
FSMC_HiZSëupTime
 = 0xFC;

428 
FSMC_NANDInôSåu˘
->
FSMC_AâribuãS∑˚TimögSåu˘
->
FSMC_SëupTime
 = 0xFC;

429 
FSMC_NANDInôSåu˘
->
FSMC_AâribuãS∑˚TimögSåu˘
->
FSMC_WaôSëupTime
 = 0xFC;

430 
FSMC_NANDInôSåu˘
->
FSMC_AâribuãS∑˚TimögSåu˘
->
FSMC_HﬁdSëupTime
 = 0xFC;

431 
FSMC_NANDInôSåu˘
->
FSMC_AâribuãS∑˚TimögSåu˘
->
FSMC_HiZSëupTime
 = 0xFC;

432 
	}
}

440 
	$FSMC_PCCARDSåu˘Inô
(
FSMC_PCCARDInôTy≥Def
* 
FSMC_PCCARDInôSåu˘
)

443 
FSMC_PCCARDInôSåu˘
->
FSMC_Waô„©uª
 = 
FSMC_Waô„©uª_DißbÀ
;

444 
FSMC_PCCARDInôSåu˘
->
FSMC_TCLRSëupTime
 = 0x0;

445 
FSMC_PCCARDInôSåu˘
->
FSMC_TARSëupTime
 = 0x0;

446 
FSMC_PCCARDInôSåu˘
->
FSMC_Comm⁄S∑˚TimögSåu˘
->
FSMC_SëupTime
 = 0xFC;

447 
FSMC_PCCARDInôSåu˘
->
FSMC_Comm⁄S∑˚TimögSåu˘
->
FSMC_WaôSëupTime
 = 0xFC;

448 
FSMC_PCCARDInôSåu˘
->
FSMC_Comm⁄S∑˚TimögSåu˘
->
FSMC_HﬁdSëupTime
 = 0xFC;

449 
FSMC_PCCARDInôSåu˘
->
FSMC_Comm⁄S∑˚TimögSåu˘
->
FSMC_HiZSëupTime
 = 0xFC;

450 
FSMC_PCCARDInôSåu˘
->
FSMC_AâribuãS∑˚TimögSåu˘
->
FSMC_SëupTime
 = 0xFC;

451 
FSMC_PCCARDInôSåu˘
->
FSMC_AâribuãS∑˚TimögSåu˘
->
FSMC_WaôSëupTime
 = 0xFC;

452 
FSMC_PCCARDInôSåu˘
->
FSMC_AâribuãS∑˚TimögSåu˘
->
FSMC_HﬁdSëupTime
 = 0xFC;

453 
FSMC_PCCARDInôSåu˘
->
FSMC_AâribuãS∑˚TimögSåu˘
->
FSMC_HiZSëupTime
 = 0xFC;

454 
FSMC_PCCARDInôSåu˘
->
FSMC_IOS∑˚TimögSåu˘
->
FSMC_SëupTime
 = 0xFC;

455 
FSMC_PCCARDInôSåu˘
->
FSMC_IOS∑˚TimögSåu˘
->
FSMC_WaôSëupTime
 = 0xFC;

456 
FSMC_PCCARDInôSåu˘
->
FSMC_IOS∑˚TimögSåu˘
->
FSMC_HﬁdSëupTime
 = 0xFC;

457 
FSMC_PCCARDInôSåu˘
->
FSMC_IOS∑˚TimögSåu˘
->
FSMC_HiZSëupTime
 = 0xFC;

458 
	}
}

472 
	$FSMC_NORSRAMCmd
(
uöt32_t
 
FSMC_B™k
, 
Fun˘i⁄ÆSèã
 
NewSèã
)

474 
	`as£π_∑øm
(
	`IS_FSMC_NORSRAM_BANK
(
FSMC_B™k
));

475 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

477 i‡(
NewSèã
 !
DISABLE
)

480 
FSMC_B™k1
->
BTCR
[
FSMC_B™k
] |
BCR_MBKEN_Së
;

485 
FSMC_B™k1
->
BTCR
[
FSMC_B™k
] &
BCR_MBKEN_Re£t
;

487 
	}
}

499 
	$FSMC_NANDCmd
(
uöt32_t
 
FSMC_B™k
, 
Fun˘i⁄ÆSèã
 
NewSèã
)

501 
	`as£π_∑øm
(
	`IS_FSMC_NAND_BANK
(
FSMC_B™k
));

502 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

504 i‡(
NewSèã
 !
DISABLE
)

507 if(
FSMC_B™k
 =
FSMC_B™k2_NAND
)

509 
FSMC_B™k2
->
PCR2
 |
PCR_PBKEN_Së
;

513 
FSMC_B™k3
->
PCR3
 |
PCR_PBKEN_Së
;

519 if(
FSMC_B™k
 =
FSMC_B™k2_NAND
)

521 
FSMC_B™k2
->
PCR2
 &
PCR_PBKEN_Re£t
;

525 
FSMC_B™k3
->
PCR3
 &
PCR_PBKEN_Re£t
;

528 
	}
}

536 
	$FSMC_PCCARDCmd
(
Fun˘i⁄ÆSèã
 
NewSèã
)

538 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

540 i‡(
NewSèã
 !
DISABLE
)

543 
FSMC_B™k4
->
PCR4
 |
PCR_PBKEN_Së
;

548 
FSMC_B™k4
->
PCR4
 &
PCR_PBKEN_Re£t
;

550 
	}
}

562 
	$FSMC_NANDECCCmd
(
uöt32_t
 
FSMC_B™k
, 
Fun˘i⁄ÆSèã
 
NewSèã
)

564 
	`as£π_∑øm
(
	`IS_FSMC_NAND_BANK
(
FSMC_B™k
));

565 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

567 i‡(
NewSèã
 !
DISABLE
)

570 if(
FSMC_B™k
 =
FSMC_B™k2_NAND
)

572 
FSMC_B™k2
->
PCR2
 |
PCR_ECCEN_Së
;

576 
FSMC_B™k3
->
PCR3
 |
PCR_ECCEN_Së
;

582 if(
FSMC_B™k
 =
FSMC_B™k2_NAND
)

584 
FSMC_B™k2
->
PCR2
 &
PCR_ECCEN_Re£t
;

588 
FSMC_B™k3
->
PCR3
 &
PCR_ECCEN_Re£t
;

591 
	}
}

601 
uöt32_t
 
	$FSMC_GëECC
(
uöt32_t
 
FSMC_B™k
)

603 
uöt32_t
 
eccvÆ
 = 0x00000000;

605 if(
FSMC_B™k
 =
FSMC_B™k2_NAND
)

608 
eccvÆ
 = 
FSMC_B™k2
->
ECCR2
;

613 
eccvÆ
 = 
FSMC_B™k3
->
ECCR3
;

616 (
eccvÆ
);

617 
	}
}

636 
	$FSMC_ITC⁄fig
(
uöt32_t
 
FSMC_B™k
, uöt32_à
FSMC_IT
, 
Fun˘i⁄ÆSèã
 
NewSèã
)

638 
	`as£π_∑øm
(
	`IS_FSMC_IT_BANK
(
FSMC_B™k
));

639 
	`as£π_∑øm
(
	`IS_FSMC_IT
(
FSMC_IT
));

640 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

642 i‡(
NewSèã
 !
DISABLE
)

645 if(
FSMC_B™k
 =
FSMC_B™k2_NAND
)

647 
FSMC_B™k2
->
SR2
 |
FSMC_IT
;

650 i‡(
FSMC_B™k
 =
FSMC_B™k3_NAND
)

652 
FSMC_B™k3
->
SR3
 |
FSMC_IT
;

657 
FSMC_B™k4
->
SR4
 |
FSMC_IT
;

663 if(
FSMC_B™k
 =
FSMC_B™k2_NAND
)

666 
FSMC_B™k2
->
SR2
 &(
uöt32_t
)~
FSMC_IT
;

669 i‡(
FSMC_B™k
 =
FSMC_B™k3_NAND
)

671 
FSMC_B™k3
->
SR3
 &(
uöt32_t
)~
FSMC_IT
;

676 
FSMC_B™k4
->
SR4
 &(
uöt32_t
)~
FSMC_IT
;

679 
	}
}

696 
FœgSètus
 
	$FSMC_GëFœgSètus
(
uöt32_t
 
FSMC_B™k
, uöt32_à
FSMC_FLAG
)

698 
FœgSètus
 
bô°©us
 = 
RESET
;

699 
uöt32_t
 
tmp§
 = 0x00000000;

702 
	`as£π_∑øm
(
	`IS_FSMC_GETFLAG_BANK
(
FSMC_B™k
));

703 
	`as£π_∑øm
(
	`IS_FSMC_GET_FLAG
(
FSMC_FLAG
));

705 if(
FSMC_B™k
 =
FSMC_B™k2_NAND
)

707 
tmp§
 = 
FSMC_B™k2
->
SR2
;

709 if(
FSMC_B™k
 =
FSMC_B™k3_NAND
)

711 
tmp§
 = 
FSMC_B™k3
->
SR3
;

716 
tmp§
 = 
FSMC_B™k4
->
SR4
;

720 i‡((
tmp§
 & 
FSMC_FLAG
Ë!(
uöt16_t
)
RESET
 )

722 
bô°©us
 = 
SET
;

726 
bô°©us
 = 
RESET
;

729  
bô°©us
;

730 
	}
}

746 
	$FSMC_CÀ¨Fœg
(
uöt32_t
 
FSMC_B™k
, uöt32_à
FSMC_FLAG
)

749 
	`as£π_∑øm
(
	`IS_FSMC_GETFLAG_BANK
(
FSMC_B™k
));

750 
	`as£π_∑øm
(
	`IS_FSMC_CLEAR_FLAG
(
FSMC_FLAG
)) ;

752 if(
FSMC_B™k
 =
FSMC_B™k2_NAND
)

754 
FSMC_B™k2
->
SR2
 &~
FSMC_FLAG
;

756 if(
FSMC_B™k
 =
FSMC_B™k3_NAND
)

758 
FSMC_B™k3
->
SR3
 &~
FSMC_FLAG
;

763 
FSMC_B™k4
->
SR4
 &~
FSMC_FLAG
;

765 
	}
}

781 
ITSètus
 
	$FSMC_GëITSètus
(
uöt32_t
 
FSMC_B™k
, uöt32_à
FSMC_IT
)

783 
ITSètus
 
bô°©us
 = 
RESET
;

784 
uöt32_t
 
tmp§
 = 0x0, 
ô°©us
 = 0x0, 
ôíabÀ
 = 0x0;

787 
	`as£π_∑øm
(
	`IS_FSMC_IT_BANK
(
FSMC_B™k
));

788 
	`as£π_∑øm
(
	`IS_FSMC_GET_IT
(
FSMC_IT
));

790 if(
FSMC_B™k
 =
FSMC_B™k2_NAND
)

792 
tmp§
 = 
FSMC_B™k2
->
SR2
;

794 if(
FSMC_B™k
 =
FSMC_B™k3_NAND
)

796 
tmp§
 = 
FSMC_B™k3
->
SR3
;

801 
tmp§
 = 
FSMC_B™k4
->
SR4
;

804 
ô°©us
 = 
tmp§
 & 
FSMC_IT
;

806 
ôíabÀ
 = 
tmp§
 & (
FSMC_IT
 >> 3);

807 i‡((
ô°©us
 !(
uöt32_t
)
RESET
Ë&& (
ôíabÀ
 != (uint32_t)RESET))

809 
bô°©us
 = 
SET
;

813 
bô°©us
 = 
RESET
;

815  
bô°©us
;

816 
	}
}

832 
	$FSMC_CÀ¨ITPídögBô
(
uöt32_t
 
FSMC_B™k
, uöt32_à
FSMC_IT
)

835 
	`as£π_∑øm
(
	`IS_FSMC_IT_BANK
(
FSMC_B™k
));

836 
	`as£π_∑øm
(
	`IS_FSMC_IT
(
FSMC_IT
));

838 if(
FSMC_B™k
 =
FSMC_B™k2_NAND
)

840 
FSMC_B™k2
->
SR2
 &~(
FSMC_IT
 >> 3);

842 if(
FSMC_B™k
 =
FSMC_B™k3_NAND
)

844 
FSMC_B™k3
->
SR3
 &~(
FSMC_IT
 >> 3);

849 
FSMC_B™k4
->
SR4
 &~(
FSMC_IT
 >> 3);

851 
	}
}

	@Source/STM32F10x_StdPeriph_Driver/src/stm32f10x_gpio.c

22 
	~"°m32f10x_gpio.h
"

23 
	~"°m32f10x_rcc.h
"

29 
	#AFIO_OFFSET
 (
AFIO_BASE
 - 
PERIPH_BASE
)

	)

34 
	#EVCR_OFFSET
 (
AFIO_OFFSET
 + 0x00)

	)

35 
	#EVOE_BôNumbî
 ((
uöt8_t
)0x07)

	)

36 
	#EVCR_EVOE_BB
 (
PERIPH_BB_BASE
 + (
EVCR_OFFSET
 * 32Ë+ (
EVOE_BôNumbî
 * 4))

	)

41 
	#MAPR_OFFSET
 (
AFIO_OFFSET
 + 0x04)

	)

42 
	#MII_RMII_SEL_BôNumbî
 ((
u8
)0x17)

	)

43 
	#MAPR_MII_RMII_SEL_BB
 (
PERIPH_BB_BASE
 + (
MAPR_OFFSET
 * 32Ë+ (
MII_RMII_SEL_BôNumbî
 * 4))

	)

46 
	#EVCR_PORTPINCONFIG_MASK
 ((
uöt16_t
)0xFF80)

	)

47 
	#LSB_MASK
 ((
uöt16_t
)0xFFFF)

	)

48 
	#DBGAFR_POSITION_MASK
 ((
uöt32_t
)0x000F0000)

	)

49 
	#DBGAFR_SWJCFG_MASK
 ((
uöt32_t
)0xF0FFFFFF)

	)

50 
	#DBGAFR_LOCATION_MASK
 ((
uöt32_t
)0x00200000)

	)

51 
	#DBGAFR_NUMBITS_MASK
 ((
uöt32_t
)0x00100000)

	)

63 
	$GPIO_DeInô
(
GPIO_Ty≥Def
* 
GPIOx
)

66 
	`as£π_∑øm
(
	`IS_GPIO_ALL_PERIPH
(
GPIOx
));

68 i‡(
GPIOx
 =
GPIOA
)

70 
	`RCC_APB2PîùhRe£tCmd
(
RCC_APB2Pîùh_GPIOA
, 
ENABLE
);

71 
	`RCC_APB2PîùhRe£tCmd
(
RCC_APB2Pîùh_GPIOA
, 
DISABLE
);

73 i‡(
GPIOx
 =
GPIOB
)

75 
	`RCC_APB2PîùhRe£tCmd
(
RCC_APB2Pîùh_GPIOB
, 
ENABLE
);

76 
	`RCC_APB2PîùhRe£tCmd
(
RCC_APB2Pîùh_GPIOB
, 
DISABLE
);

78 i‡(
GPIOx
 =
GPIOC
)

80 
	`RCC_APB2PîùhRe£tCmd
(
RCC_APB2Pîùh_GPIOC
, 
ENABLE
);

81 
	`RCC_APB2PîùhRe£tCmd
(
RCC_APB2Pîùh_GPIOC
, 
DISABLE
);

83 i‡(
GPIOx
 =
GPIOD
)

85 
	`RCC_APB2PîùhRe£tCmd
(
RCC_APB2Pîùh_GPIOD
, 
ENABLE
);

86 
	`RCC_APB2PîùhRe£tCmd
(
RCC_APB2Pîùh_GPIOD
, 
DISABLE
);

88 i‡(
GPIOx
 =
GPIOE
)

90 
	`RCC_APB2PîùhRe£tCmd
(
RCC_APB2Pîùh_GPIOE
, 
ENABLE
);

91 
	`RCC_APB2PîùhRe£tCmd
(
RCC_APB2Pîùh_GPIOE
, 
DISABLE
);

93 i‡(
GPIOx
 =
GPIOF
)

95 
	`RCC_APB2PîùhRe£tCmd
(
RCC_APB2Pîùh_GPIOF
, 
ENABLE
);

96 
	`RCC_APB2PîùhRe£tCmd
(
RCC_APB2Pîùh_GPIOF
, 
DISABLE
);

100 i‡(
GPIOx
 =
GPIOG
)

102 
	`RCC_APB2PîùhRe£tCmd
(
RCC_APB2Pîùh_GPIOG
, 
ENABLE
);

103 
	`RCC_APB2PîùhRe£tCmd
(
RCC_APB2Pîùh_GPIOG
, 
DISABLE
);

106 
	}
}

113 
	$GPIO_AFIODeInô
()

115 
	`RCC_APB2PîùhRe£tCmd
(
RCC_APB2Pîùh_AFIO
, 
ENABLE
);

116 
	`RCC_APB2PîùhRe£tCmd
(
RCC_APB2Pîùh_AFIO
, 
DISABLE
);

117 
	}
}

125 
	$GPIO_Inô
(
GPIO_Ty≥Def
* 
GPIOx
, 
GPIO_InôTy≥Def
* 
GPIO_InôSåu˘
)

127 
uöt32_t
 
cuºítmode
 = 0x00, 
cuºíçö
 = 0x00, 
pöpos
 = 0x00, 
pos
 = 0x00;

128 
uöt32_t
 
tm¥eg
 = 0x00, 
pömask
 = 0x00;

130 
	`as£π_∑øm
(
	`IS_GPIO_ALL_PERIPH
(
GPIOx
));

131 
	`as£π_∑øm
(
	`IS_GPIO_MODE
(
GPIO_InôSåu˘
->
GPIO_Mode
));

132 
	`as£π_∑øm
(
	`IS_GPIO_PIN
(
GPIO_InôSåu˘
->
GPIO_Pö
));

135 
cuºítmode
 = ((
uöt32_t
)
GPIO_InôSåu˘
->
GPIO_Mode
) & ((uint32_t)0x0F);

136 i‡((((
uöt32_t
)
GPIO_InôSåu˘
->
GPIO_Mode
) & ((uint32_t)0x10)) != 0x00)

139 
	`as£π_∑øm
(
	`IS_GPIO_SPEED
(
GPIO_InôSåu˘
->
GPIO_S≥ed
));

141 
cuºítmode
 |(
uöt32_t
)
GPIO_InôSåu˘
->
GPIO_S≥ed
;

145 i‡(((
uöt32_t
)
GPIO_InôSåu˘
->
GPIO_Pö
 & ((uint32_t)0x00FF)) != 0x00)

147 
tm¥eg
 = 
GPIOx
->
CRL
;

148 
pöpos
 = 0x00;Öinpos < 0x08;Öinpos++)

150 
pos
 = ((
uöt32_t
)0x01Ë<< 
pöpos
;

152 
cuºíçö
 = (
GPIO_InôSåu˘
->
GPIO_Pö
Ë& 
pos
;

153 i‡(
cuºíçö
 =
pos
)

155 
pos
 = 
pöpos
 << 2;

157 
pömask
 = ((
uöt32_t
)0x0FË<< 
pos
;

158 
tm¥eg
 &~
pömask
;

160 
tm¥eg
 |(
cuºítmode
 << 
pos
);

162 i‡(
GPIO_InôSåu˘
->
GPIO_Mode
 =
GPIO_Mode_IPD
)

164 
GPIOx
->
BRR
 = (((
uöt32_t
)0x01Ë<< 
pöpos
);

169 i‡(
GPIO_InôSåu˘
->
GPIO_Mode
 =
GPIO_Mode_IPU
)

171 
GPIOx
->
BSRR
 = (((
uöt32_t
)0x01Ë<< 
pöpos
);

176 
GPIOx
->
CRL
 = 
tm¥eg
;

180 i‡(
GPIO_InôSåu˘
->
GPIO_Pö
 > 0x00FF)

182 
tm¥eg
 = 
GPIOx
->
CRH
;

183 
pöpos
 = 0x00;Öinpos < 0x08;Öinpos++)

185 
pos
 = (((
uöt32_t
)0x01Ë<< (
pöpos
 + 0x08));

187 
cuºíçö
 = ((
GPIO_InôSåu˘
->
GPIO_Pö
Ë& 
pos
);

188 i‡(
cuºíçö
 =
pos
)

190 
pos
 = 
pöpos
 << 2;

192 
pömask
 = ((
uöt32_t
)0x0FË<< 
pos
;

193 
tm¥eg
 &~
pömask
;

195 
tm¥eg
 |(
cuºítmode
 << 
pos
);

197 i‡(
GPIO_InôSåu˘
->
GPIO_Mode
 =
GPIO_Mode_IPD
)

199 
GPIOx
->
BRR
 = (((
uöt32_t
)0x01Ë<< (
pöpos
 + 0x08));

202 i‡(
GPIO_InôSåu˘
->
GPIO_Mode
 =
GPIO_Mode_IPU
)

204 
GPIOx
->
BSRR
 = (((
uöt32_t
)0x01Ë<< (
pöpos
 + 0x08));

208 
GPIOx
->
CRH
 = 
tm¥eg
;

210 
	}
}

217 
	$GPIO_Såu˘Inô
(
GPIO_InôTy≥Def
* 
GPIO_InôSåu˘
)

220 
GPIO_InôSåu˘
->
GPIO_Pö
 = 
GPIO_Pö_AŒ
;

221 
GPIO_InôSåu˘
->
GPIO_S≥ed
 = 
GPIO_S≥ed_2MHz
;

222 
GPIO_InôSåu˘
->
GPIO_Mode
 = 
GPIO_Mode_IN_FLOATING
;

223 
	}
}

232 
uöt8_t
 
	$GPIO_RódI≈utD©aBô
(
GPIO_Ty≥Def
* 
GPIOx
, 
uöt16_t
 
GPIO_Pö
)

234 
uöt8_t
 
bô°©us
 = 0x00;

237 
	`as£π_∑øm
(
	`IS_GPIO_ALL_PERIPH
(
GPIOx
));

238 
	`as£π_∑øm
(
	`IS_GET_GPIO_PIN
(
GPIO_Pö
));

240 i‡((
GPIOx
->
IDR
 & 
GPIO_Pö
Ë!(
uöt32_t
)
Bô_RESET
)

242 
bô°©us
 = (
uöt8_t
)
Bô_SET
;

246 
bô°©us
 = (
uöt8_t
)
Bô_RESET
;

248  
bô°©us
;

249 
	}
}

256 
uöt16_t
 
	$GPIO_RódI≈utD©a
(
GPIO_Ty≥Def
* 
GPIOx
)

259 
	`as£π_∑øm
(
	`IS_GPIO_ALL_PERIPH
(
GPIOx
));

261  ((
uöt16_t
)
GPIOx
->
IDR
);

262 
	}
}

271 
uöt8_t
 
	$GPIO_RódOuçutD©aBô
(
GPIO_Ty≥Def
* 
GPIOx
, 
uöt16_t
 
GPIO_Pö
)

273 
uöt8_t
 
bô°©us
 = 0x00;

275 
	`as£π_∑øm
(
	`IS_GPIO_ALL_PERIPH
(
GPIOx
));

276 
	`as£π_∑øm
(
	`IS_GET_GPIO_PIN
(
GPIO_Pö
));

278 i‡((
GPIOx
->
ODR
 & 
GPIO_Pö
Ë!(
uöt32_t
)
Bô_RESET
)

280 
bô°©us
 = (
uöt8_t
)
Bô_SET
;

284 
bô°©us
 = (
uöt8_t
)
Bô_RESET
;

286  
bô°©us
;

287 
	}
}

294 
uöt16_t
 
	$GPIO_RódOuçutD©a
(
GPIO_Ty≥Def
* 
GPIOx
)

297 
	`as£π_∑øm
(
	`IS_GPIO_ALL_PERIPH
(
GPIOx
));

299  ((
uöt16_t
)
GPIOx
->
ODR
);

300 
	}
}

309 
	$GPIO_SëBôs
(
GPIO_Ty≥Def
* 
GPIOx
, 
uöt16_t
 
GPIO_Pö
)

312 
	`as£π_∑øm
(
	`IS_GPIO_ALL_PERIPH
(
GPIOx
));

313 
	`as£π_∑øm
(
	`IS_GPIO_PIN
(
GPIO_Pö
));

315 
GPIOx
->
BSRR
 = 
GPIO_Pö
;

316 
	}
}

325 
	$GPIO_Re£tBôs
(
GPIO_Ty≥Def
* 
GPIOx
, 
uöt16_t
 
GPIO_Pö
)

328 
	`as£π_∑øm
(
	`IS_GPIO_ALL_PERIPH
(
GPIOx
));

329 
	`as£π_∑øm
(
	`IS_GPIO_PIN
(
GPIO_Pö
));

331 
GPIOx
->
BRR
 = 
GPIO_Pö
;

332 
	}
}

345 
	$GPIO_WrôeBô
(
GPIO_Ty≥Def
* 
GPIOx
, 
uöt16_t
 
GPIO_Pö
, 
BôA˘i⁄
 
BôVÆ
)

348 
	`as£π_∑øm
(
	`IS_GPIO_ALL_PERIPH
(
GPIOx
));

349 
	`as£π_∑øm
(
	`IS_GET_GPIO_PIN
(
GPIO_Pö
));

350 
	`as£π_∑øm
(
	`IS_GPIO_BIT_ACTION
(
BôVÆ
));

352 i‡(
BôVÆ
 !
Bô_RESET
)

354 
GPIOx
->
BSRR
 = 
GPIO_Pö
;

358 
GPIOx
->
BRR
 = 
GPIO_Pö
;

360 
	}
}

368 
	$GPIO_Wrôe
(
GPIO_Ty≥Def
* 
GPIOx
, 
uöt16_t
 
P‹tVÆ
)

371 
	`as£π_∑øm
(
	`IS_GPIO_ALL_PERIPH
(
GPIOx
));

373 
GPIOx
->
ODR
 = 
P‹tVÆ
;

374 
	}
}

383 
	$GPIO_PöLockC⁄fig
(
GPIO_Ty≥Def
* 
GPIOx
, 
uöt16_t
 
GPIO_Pö
)

385 
uöt32_t
 
tmp
 = 0x00010000;

388 
	`as£π_∑øm
(
	`IS_GPIO_ALL_PERIPH
(
GPIOx
));

389 
	`as£π_∑øm
(
	`IS_GPIO_PIN
(
GPIO_Pö
));

391 
tmp
 |
GPIO_Pö
;

393 
GPIOx
->
LCKR
 = 
tmp
;

395 
GPIOx
->
LCKR
 = 
GPIO_Pö
;

397 
GPIOx
->
LCKR
 = 
tmp
;

399 
tmp
 = 
GPIOx
->
LCKR
;

401 
tmp
 = 
GPIOx
->
LCKR
;

402 
	}
}

412 
	$GPIO_EvítOuçutC⁄fig
(
uöt8_t
 
GPIO_P‹tSour˚
, uöt8_à
GPIO_PöSour˚
)

414 
uöt32_t
 
tm¥eg
 = 0x00;

416 
	`as£π_∑øm
(
	`IS_GPIO_EVENTOUT_PORT_SOURCE
(
GPIO_P‹tSour˚
));

417 
	`as£π_∑øm
(
	`IS_GPIO_PIN_SOURCE
(
GPIO_PöSour˚
));

419 
tm¥eg
 = 
AFIO
->
EVCR
;

421 
tm¥eg
 &
EVCR_PORTPINCONFIG_MASK
;

422 
tm¥eg
 |(
uöt32_t
)
GPIO_P‹tSour˚
 << 0x04;

423 
tm¥eg
 |
GPIO_PöSour˚
;

424 
AFIO
->
EVCR
 = 
tm¥eg
;

425 
	}
}

433 
	$GPIO_EvítOuçutCmd
(
Fun˘i⁄ÆSèã
 
NewSèã
)

436 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

438 *(
__IO
 
uöt32_t
 *Ë
EVCR_EVOE_BB
 = (uöt32_t)
NewSèã
;

439 
	}
}

481 
	$GPIO_PöRem≠C⁄fig
(
uöt32_t
 
GPIO_Rem≠
, 
Fun˘i⁄ÆSèã
 
NewSèã
)

483 
uöt32_t
 
tmp
 = 0x00, 
tmp1
 = 0x00, 
tm¥eg
 = 0x00, 
tmpmask
 = 0x00;

486 
	`as£π_∑øm
(
	`IS_GPIO_REMAP
(
GPIO_Rem≠
));

487 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

489 
tm¥eg
 = 
AFIO
->
MAPR
;

491 
tmpmask
 = (
GPIO_Rem≠
 & 
DBGAFR_POSITION_MASK
) >> 0x10;

492 
tmp
 = 
GPIO_Rem≠
 & 
LSB_MASK
;

494 i‡((
GPIO_Rem≠
 & (
DBGAFR_LOCATION_MASK
 | 
DBGAFR_NUMBITS_MASK
)) == (DBGAFR_LOCATION_MASK | DBGAFR_NUMBITS_MASK))

496 
tm¥eg
 &
DBGAFR_SWJCFG_MASK
;

497 
AFIO
->
MAPR
 &
DBGAFR_SWJCFG_MASK
;

499 i‡((
GPIO_Rem≠
 & 
DBGAFR_NUMBITS_MASK
) == DBGAFR_NUMBITS_MASK)

501 
tmp1
 = ((
uöt32_t
)0x03Ë<< 
tmpmask
;

502 
tm¥eg
 &~
tmp1
;

503 
tm¥eg
 |~
DBGAFR_SWJCFG_MASK
;

507 
tm¥eg
 &~(
tmp
 << ((
GPIO_Rem≠
 >> 0x15)*0x10));

508 
tm¥eg
 |~
DBGAFR_SWJCFG_MASK
;

511 i‡(
NewSèã
 !
DISABLE
)

513 
tm¥eg
 |(
tmp
 << ((
GPIO_Rem≠
 >> 0x15)*0x10));

516 
AFIO
->
MAPR
 = 
tm¥eg
;

517 
	}
}

527 
	$GPIO_EXTILöeC⁄fig
(
uöt8_t
 
GPIO_P‹tSour˚
, uöt8_à
GPIO_PöSour˚
)

529 
uöt32_t
 
tmp
 = 0x00;

531 
	`as£π_∑øm
(
	`IS_GPIO_EXTI_PORT_SOURCE
(
GPIO_P‹tSour˚
));

532 
	`as£π_∑øm
(
	`IS_GPIO_PIN_SOURCE
(
GPIO_PöSour˚
));

534 
tmp
 = ((
uöt32_t
)0x0FË<< (0x04 * (
GPIO_PöSour˚
 & (
uöt8_t
)0x03));

535 
AFIO
->
EXTICR
[
GPIO_PöSour˚
 >> 0x02] &~
tmp
;

536 
AFIO
->
EXTICR
[
GPIO_PöSour˚
 >> 0x02] |(((
uöt32_t
)
GPIO_P‹tSour˚
Ë<< (0x04 * (GPIO_PöSour˚ & (
uöt8_t
)0x03)));

537 
	}
}

548 
	$GPIO_ETH_MedüI¡îÁ˚C⁄fig
(
uöt32_t
 
GPIO_ETH_MedüI¡îÁ˚
)

550 
	`as£π_∑øm
(
	`IS_GPIO_ETH_MEDIA_INTERFACE
(
GPIO_ETH_MedüI¡îÁ˚
));

553 *(
__IO
 
uöt32_t
 *Ë
MAPR_MII_RMII_SEL_BB
 = 
GPIO_ETH_MedüI¡îÁ˚
;

554 
	}
}

	@Source/STM32F10x_StdPeriph_Driver/src/stm32f10x_i2c.c

22 
	~"°m32f10x_i2c.h
"

23 
	~"°m32f10x_rcc.h
"

48 
	#CR1_PE_Së
 ((
uöt16_t
)0x0001)

	)

49 
	#CR1_PE_Re£t
 ((
uöt16_t
)0xFFFE)

	)

52 
	#CR1_START_Së
 ((
uöt16_t
)0x0100)

	)

53 
	#CR1_START_Re£t
 ((
uöt16_t
)0xFEFF)

	)

56 
	#CR1_STOP_Së
 ((
uöt16_t
)0x0200)

	)

57 
	#CR1_STOP_Re£t
 ((
uöt16_t
)0xFDFF)

	)

60 
	#CR1_ACK_Së
 ((
uöt16_t
)0x0400)

	)

61 
	#CR1_ACK_Re£t
 ((
uöt16_t
)0xFBFF)

	)

64 
	#CR1_ENGC_Së
 ((
uöt16_t
)0x0040)

	)

65 
	#CR1_ENGC_Re£t
 ((
uöt16_t
)0xFFBF)

	)

68 
	#CR1_SWRST_Së
 ((
uöt16_t
)0x8000)

	)

69 
	#CR1_SWRST_Re£t
 ((
uöt16_t
)0x7FFF)

	)

72 
	#CR1_PEC_Së
 ((
uöt16_t
)0x1000)

	)

73 
	#CR1_PEC_Re£t
 ((
uöt16_t
)0xEFFF)

	)

76 
	#CR1_ENPEC_Së
 ((
uöt16_t
)0x0020)

	)

77 
	#CR1_ENPEC_Re£t
 ((
uöt16_t
)0xFFDF)

	)

80 
	#CR1_ENARP_Së
 ((
uöt16_t
)0x0010)

	)

81 
	#CR1_ENARP_Re£t
 ((
uöt16_t
)0xFFEF)

	)

84 
	#CR1_NOSTRETCH_Së
 ((
uöt16_t
)0x0080)

	)

85 
	#CR1_NOSTRETCH_Re£t
 ((
uöt16_t
)0xFF7F)

	)

88 
	#CR1_CLEAR_Mask
 ((
uöt16_t
)0xFBF5)

	)

91 
	#CR2_DMAEN_Së
 ((
uöt16_t
)0x0800)

	)

92 
	#CR2_DMAEN_Re£t
 ((
uöt16_t
)0xF7FF)

	)

95 
	#CR2_LAST_Së
 ((
uöt16_t
)0x1000)

	)

96 
	#CR2_LAST_Re£t
 ((
uöt16_t
)0xEFFF)

	)

99 
	#CR2_FREQ_Re£t
 ((
uöt16_t
)0xFFC0)

	)

102 
	#OAR1_ADD0_Së
 ((
uöt16_t
)0x0001)

	)

103 
	#OAR1_ADD0_Re£t
 ((
uöt16_t
)0xFFFE)

	)

106 
	#OAR2_ENDUAL_Së
 ((
uöt16_t
)0x0001)

	)

107 
	#OAR2_ENDUAL_Re£t
 ((
uöt16_t
)0xFFFE)

	)

110 
	#OAR2_ADD2_Re£t
 ((
uöt16_t
)0xFF01)

	)

113 
	#CCR_FS_Së
 ((
uöt16_t
)0x8000)

	)

116 
	#CCR_CCR_Së
 ((
uöt16_t
)0x0FFF)

	)

119 
	#FLAG_Mask
 ((
uöt32_t
)0x00FFFFFF)

	)

122 
	#ITEN_Mask
 ((
uöt32_t
)0x07000000)

	)

161 
	$I2C_DeInô
(
I2C_Ty≥Def
* 
I2Cx
)

166 i‡(
I2Cx
 =
I2C1
)

169 
	`RCC_APB1PîùhRe£tCmd
(
RCC_APB1Pîùh_I2C1
, 
ENABLE
);

171 
	`RCC_APB1PîùhRe£tCmd
(
RCC_APB1Pîùh_I2C1
, 
DISABLE
);

176 
	`RCC_APB1PîùhRe£tCmd
(
RCC_APB1Pîùh_I2C2
, 
ENABLE
);

178 
	`RCC_APB1PîùhRe£tCmd
(
RCC_APB1Pîùh_I2C2
, 
DISABLE
);

180 
	}
}

190 
	$I2C_Inô
(
I2C_Ty≥Def
* 
I2Cx
, 
I2C_InôTy≥Def
* 
I2C_InôSåu˘
)

192 
uöt16_t
 
tm¥eg
 = 0, 
‰eqønge
 = 0;

193 
uöt16_t
 
ªsu…
 = 0x04;

194 
uöt32_t
 
p˛k1
 = 8000000;

195 
RCC_ClocksTy≥Def
 
rcc_˛ocks
;

207 
tm¥eg
 = 
I2Cx
->
CR2
;

209 
tm¥eg
 &
CR2_FREQ_Re£t
;

211 
	`RCC_GëClocksFªq
(&
rcc_˛ocks
);

212 
p˛k1
 = 
rcc_˛ocks
.
PCLK1_Fªquícy
;

214 
‰eqønge
 = (
uöt16_t
)(
p˛k1
 / 1000000);

215 
tm¥eg
 |
‰eqønge
;

217 
I2Cx
->
CR2
 = 
tm¥eg
;

221 
I2Cx
->
CR1
 &
CR1_PE_Re£t
;

224 
tm¥eg
 = 0;

227 i‡(
I2C_InôSåu˘
->
I2C_ClockS≥ed
 <= 100000)

230 
ªsu…
 = (
uöt16_t
)(
p˛k1
 / (
I2C_InôSåu˘
->
I2C_ClockS≥ed
 << 1));

232 i‡(
ªsu…
 < 0x04)

235 
ªsu…
 = 0x04;

238 
tm¥eg
 |
ªsu…
;

240 
I2Cx
->
TRISE
 = 
‰eqønge
 + 1;

245 i‡(
I2C_InôSåu˘
->
I2C_DutyCy˛e
 =
I2C_DutyCy˛e_2
)

248 
ªsu…
 = (
uöt16_t
)(
p˛k1
 / (
I2C_InôSåu˘
->
I2C_ClockS≥ed
 * 3));

253 
ªsu…
 = (
uöt16_t
)(
p˛k1
 / (
I2C_InôSåu˘
->
I2C_ClockS≥ed
 * 25));

255 
ªsu…
 |
I2C_DutyCy˛e_16_9
;

259 i‡((
ªsu…
 & 
CCR_CCR_Së
) == 0)

262 
ªsu…
 |(
uöt16_t
)0x0001;

265 
tm¥eg
 |(
uöt16_t
)(
ªsu…
 | 
CCR_FS_Së
);

267 
I2Cx
->
TRISE
 = (
uöt16_t
)(((
‰eqønge
 * (uint16_t)300) / (uint16_t)1000) + (uint16_t)1);

271 
I2Cx
->
CCR
 = 
tm¥eg
;

273 
I2Cx
->
CR1
 |
CR1_PE_Së
;

277 
tm¥eg
 = 
I2Cx
->
CR1
;

279 
tm¥eg
 &
CR1_CLEAR_Mask
;

283 
tm¥eg
 |(
uöt16_t
)((
uöt32_t
)
I2C_InôSåu˘
->
I2C_Mode
 | I2C_InôSåu˘->
I2C_Ack
);

285 
I2Cx
->
CR1
 = 
tm¥eg
;

289 
I2Cx
->
OAR1
 = (
I2C_InôSåu˘
->
I2C_AcknowÀdgedAddªss
 | I2C_InôSåu˘->
I2C_OwnAddªss1
);

290 
	}
}

297 
	$I2C_Såu˘Inô
(
I2C_InôTy≥Def
* 
I2C_InôSåu˘
)

301 
I2C_InôSåu˘
->
I2C_ClockS≥ed
 = 5000;

303 
I2C_InôSåu˘
->
I2C_Mode
 = 
I2C_Mode_I2C
;

305 
I2C_InôSåu˘
->
I2C_DutyCy˛e
 = 
I2C_DutyCy˛e_2
;

307 
I2C_InôSåu˘
->
I2C_OwnAddªss1
 = 0;

309 
I2C_InôSåu˘
->
I2C_Ack
 = 
I2C_Ack_DißbÀ
;

311 
I2C_InôSåu˘
->
I2C_AcknowÀdgedAddªss
 = 
I2C_AcknowÀdgedAddªss_7bô
;

312 
	}
}

321 
	$I2C_Cmd
(
I2C_Ty≥Def
* 
I2Cx
, 
Fun˘i⁄ÆSèã
 
NewSèã
)

326 i‡(
NewSèã
 !
DISABLE
)

329 
I2Cx
->
CR1
 |
CR1_PE_Së
;

334 
I2Cx
->
CR1
 &
CR1_PE_Re£t
;

336 
	}
}

345 
	$I2C_DMACmd
(
I2C_Ty≥Def
* 
I2Cx
, 
Fun˘i⁄ÆSèã
 
NewSèã
)

350 i‡(
NewSèã
 !
DISABLE
)

353 
I2Cx
->
CR2
 |
CR2_DMAEN_Së
;

358 
I2Cx
->
CR2
 &
CR2_DMAEN_Re£t
;

360 
	}
}

369 
	$I2C_DMALa°Tøns„rCmd
(
I2C_Ty≥Def
* 
I2Cx
, 
Fun˘i⁄ÆSèã
 
NewSèã
)

374 i‡(
NewSèã
 !
DISABLE
)

377 
I2Cx
->
CR2
 |
CR2_LAST_Së
;

382 
I2Cx
->
CR2
 &
CR2_LAST_Re£t
;

384 
	}
}

393 
	$I2C_Gíî©eSTART
(
I2C_Ty≥Def
* 
I2Cx
, 
Fun˘i⁄ÆSèã
 
NewSèã
)

398 i‡(
NewSèã
 !
DISABLE
)

401 
I2Cx
->
CR1
 |
CR1_START_Së
;

406 
I2Cx
->
CR1
 &
CR1_START_Re£t
;

408 
	}
}

417 
	$I2C_Gíî©eSTOP
(
I2C_Ty≥Def
* 
I2Cx
, 
Fun˘i⁄ÆSèã
 
NewSèã
)

422 i‡(
NewSèã
 !
DISABLE
)

425 
I2Cx
->
CR1
 |
CR1_STOP_Së
;

430 
I2Cx
->
CR1
 &
CR1_STOP_Re£t
;

432 
	}
}

441 
	$I2C_AcknowÀdgeC⁄fig
(
I2C_Ty≥Def
* 
I2Cx
, 
Fun˘i⁄ÆSèã
 
NewSèã
)

446 i‡(
NewSèã
 !
DISABLE
)

449 
I2Cx
->
CR1
 |
CR1_ACK_Së
;

454 
I2Cx
->
CR1
 &
CR1_ACK_Re£t
;

456 
	}
}

464 
	$I2C_OwnAddªss2C⁄fig
(
I2C_Ty≥Def
* 
I2Cx
, 
uöt8_t
 
Addªss
)

466 
uöt16_t
 
tm¥eg
 = 0;

472 
tm¥eg
 = 
I2Cx
->
OAR2
;

475 
tm¥eg
 &
OAR2_ADD2_Re£t
;

478 
tm¥eg
 |(
uöt16_t
)((uöt16_t)
Addªss
 & (uint16_t)0x00FE);

481 
I2Cx
->
OAR2
 = 
tm¥eg
;

482 
	}
}

491 
	$I2C_DuÆAddªssCmd
(
I2C_Ty≥Def
* 
I2Cx
, 
Fun˘i⁄ÆSèã
 
NewSèã
)

496 i‡(
NewSèã
 !
DISABLE
)

499 
I2Cx
->
OAR2
 |
OAR2_ENDUAL_Së
;

504 
I2Cx
->
OAR2
 &
OAR2_ENDUAL_Re£t
;

506 
	}
}

515 
	$I2C_GíîÆCÆlCmd
(
I2C_Ty≥Def
* 
I2Cx
, 
Fun˘i⁄ÆSèã
 
NewSèã
)

520 i‡(
NewSèã
 !
DISABLE
)

523 
I2Cx
->
CR1
 |
CR1_ENGC_Së
;

528 
I2Cx
->
CR1
 &
CR1_ENGC_Re£t
;

530 
	}
}

544 
	$I2C_ITC⁄fig
(
I2C_Ty≥Def
* 
I2Cx
, 
uöt16_t
 
I2C_IT
, 
Fun˘i⁄ÆSèã
 
NewSèã
)

551 i‡(
NewSèã
 !
DISABLE
)

554 
I2Cx
->
CR2
 |
I2C_IT
;

559 
I2Cx
->
CR2
 &(
uöt16_t
)~
I2C_IT
;

561 
	}
}

569 
	$I2C_SídD©a
(
I2C_Ty≥Def
* 
I2Cx
, 
uöt8_t
 
D©a
)

574 
I2Cx
->
DR
 = 
D©a
;

575 
	}
}

582 
uöt8_t
 
	$I2C_Re˚iveD©a
(
I2C_Ty≥Def
* 
I2Cx
)

587  (
uöt8_t
)
I2Cx
->
DR
;

588 
	}
}

600 
	$I2C_Síd7bôAddªss
(
I2C_Ty≥Def
* 
I2Cx
, 
uöt8_t
 
Addªss
, uöt8_à
I2C_Dúe˘i⁄
)

606 i‡(
I2C_Dúe˘i⁄
 !
I2C_Dúe˘i⁄_Tønsmôãr
)

609 
Addªss
 |
OAR1_ADD0_Së
;

614 
Addªss
 &
OAR1_ADD0_Re£t
;

617 
I2Cx
->
DR
 = 
Addªss
;

618 
	}
}

635 
uöt16_t
 
	$I2C_RódRegi°î
(
I2C_Ty≥Def
* 
I2Cx
, 
uöt8_t
 
I2C_Regi°î
)

637 
__IO
 
uöt32_t
 
tmp
 = 0;

643 
tmp
 = (
uöt32_t
Ë
I2Cx
;

644 
tmp
 +
I2C_Regi°î
;

647  (*(
__IO
 
uöt16_t
 *Ë
tmp
);

648 
	}
}

657 
	$I2C_So·w¨eRe£tCmd
(
I2C_Ty≥Def
* 
I2Cx
, 
Fun˘i⁄ÆSèã
 
NewSèã
)

662 i‡(
NewSèã
 !
DISABLE
)

665 
I2Cx
->
CR1
 |
CR1_SWRST_Së
;

670 
I2Cx
->
CR1
 &
CR1_SWRST_Re£t
;

672 
	}
}

683 
	$I2C_SMBusAÀπC⁄fig
(
I2C_Ty≥Def
* 
I2Cx
, 
uöt16_t
 
I2C_SMBusAÀπ
)

688 i‡(
I2C_SMBusAÀπ
 =
I2C_SMBusAÀπ_Low
)

691 
I2Cx
->
CR1
 |
I2C_SMBusAÀπ_Low
;

696 
I2Cx
->
CR1
 &
I2C_SMBusAÀπ_High
;

698 
	}
}

707 
	$I2C_TønsmôPEC
(
I2C_Ty≥Def
* 
I2Cx
, 
Fun˘i⁄ÆSèã
 
NewSèã
)

712 i‡(
NewSèã
 !
DISABLE
)

715 
I2Cx
->
CR1
 |
CR1_PEC_Së
;

720 
I2Cx
->
CR1
 &
CR1_PEC_Re£t
;

722 
	}
}

733 
	$I2C_PECPosôi⁄C⁄fig
(
I2C_Ty≥Def
* 
I2Cx
, 
uöt16_t
 
I2C_PECPosôi⁄
)

738 i‡(
I2C_PECPosôi⁄
 =
I2C_PECPosôi⁄_Next
)

741 
I2Cx
->
CR1
 |
I2C_PECPosôi⁄_Next
;

746 
I2Cx
->
CR1
 &
I2C_PECPosôi⁄_Cuºít
;

748 
	}
}

757 
	$I2C_CÆcuœãPEC
(
I2C_Ty≥Def
* 
I2Cx
, 
Fun˘i⁄ÆSèã
 
NewSèã
)

762 i‡(
NewSèã
 !
DISABLE
)

765 
I2Cx
->
CR1
 |
CR1_ENPEC_Së
;

770 
I2Cx
->
CR1
 &
CR1_ENPEC_Re£t
;

772 
	}
}

779 
uöt8_t
 
	$I2C_GëPEC
(
I2C_Ty≥Def
* 
I2Cx
)

784  ((
I2Cx
->
SR2
) >> 8);

785 
	}
}

794 
	$I2C_ARPCmd
(
I2C_Ty≥Def
* 
I2Cx
, 
Fun˘i⁄ÆSèã
 
NewSèã
)

799 i‡(
NewSèã
 !
DISABLE
)

802 
I2Cx
->
CR1
 |
CR1_ENARP_Së
;

807 
I2Cx
->
CR1
 &
CR1_ENARP_Re£t
;

809 
	}
}

818 
	$I2C_SåëchClockCmd
(
I2C_Ty≥Def
* 
I2Cx
, 
Fun˘i⁄ÆSèã
 
NewSèã
)

823 i‡(
NewSèã
 =
DISABLE
)

826 
I2Cx
->
CR1
 |
CR1_NOSTRETCH_Së
;

831 
I2Cx
->
CR1
 &
CR1_NOSTRETCH_Re£t
;

833 
	}
}

844 
	$I2C_Fa°ModeDutyCy˛eC⁄fig
(
I2C_Ty≥Def
* 
I2Cx
, 
uöt16_t
 
I2C_DutyCy˛e
)

849 i‡(
I2C_DutyCy˛e
 !
I2C_DutyCy˛e_16_9
)

852 
I2Cx
->
CCR
 &
I2C_DutyCy˛e_2
;

857 
I2Cx
->
CCR
 |
I2C_DutyCy˛e_16_9
;

859 
	}
}

866 
uöt32_t
 
	$I2C_GëLa°Evít
(
I2C_Ty≥Def
* 
I2Cx
)

868 
uöt32_t
 
œ°evít
 = 0;

869 
uöt32_t
 
Êag1
 = 0, 
Êag2
 = 0;

873 
Êag1
 = 
I2Cx
->
SR1
;

874 
Êag2
 = 
I2Cx
->
SR2
;

875 
Êag2
 = flag2 << 16;

877 
œ°evít
 = (
Êag1
 | 
Êag2
Ë& 
FLAG_Mask
;

879  
œ°evít
;

880 
	}
}

902 
Eº‹Sètus
 
	$I2C_CheckEvít
(
I2C_Ty≥Def
* 
I2Cx
, 
uöt32_t
 
I2C_EVENT
)

904 
uöt32_t
 
œ°evít
 = 0;

905 
uöt32_t
 
Êag1
 = 0, 
Êag2
 = 0;

906 
Eº‹Sètus
 
°©us
 = 
ERROR
;

911 
Êag1
 = 
I2Cx
->
SR1
;

912 
Êag2
 = 
I2Cx
->
SR2
;

913 
Êag2
 = flag2 << 16;

915 
œ°evít
 = (
Êag1
 | 
Êag2
Ë& 
FLAG_Mask
;

917 i‡(
œ°evít
 =
I2C_EVENT
 )

920 
°©us
 = 
SUCCESS
;

925 
°©us
 = 
ERROR
;

928  
°©us
;

929 
	}
}

960 
FœgSètus
 
	$I2C_GëFœgSètus
(
I2C_Ty≥Def
* 
I2Cx
, 
uöt32_t
 
I2C_FLAG
)

962 
FœgSètus
 
bô°©us
 = 
RESET
;

963 
__IO
 
uöt32_t
 
i2¸eg
 = 0, 
i2cxba£
 = 0;

970 
i2cxba£
 = (
uöt32_t
)
I2Cx
;

973 
i2¸eg
 = 
I2C_FLAG
 >> 28;

976 
I2C_FLAG
 &
FLAG_Mask
;

978 if(
i2¸eg
 != 0)

981 
i2cxba£
 += 0x14;

986 
I2C_FLAG
 = (
uöt32_t
)(I2C_FLAG >> 16);

988 
i2cxba£
 += 0x18;

991 if(((*(
__IO
 
uöt32_t
 *)
i2cxba£
Ë& 
I2C_FLAG
Ë!(uöt32_t)
RESET
)

994 
bô°©us
 = 
SET
;

999 
bô°©us
 = 
RESET
;

1003  
bô°©us
;

1004 
	}
}

1037 
	$I2C_CÀ¨Fœg
(
I2C_Ty≥Def
* 
I2Cx
, 
uöt32_t
 
I2C_FLAG
)

1039 
uöt32_t
 
Êagpos
 = 0;

1044 
Êagpos
 = 
I2C_FLAG
 & 
FLAG_Mask
;

1046 
I2Cx
->
SR1
 = (
uöt16_t
)~
Êagpos
;

1047 
	}
}

1071 
ITSètus
 
	$I2C_GëITSètus
(
I2C_Ty≥Def
* 
I2Cx
, 
uöt32_t
 
I2C_IT
)

1073 
ITSètus
 
bô°©us
 = 
RESET
;

1074 
uöt32_t
 
íabÀ°©us
 = 0;

1079 
íabÀ°©us
 = (
uöt32_t
)(((
I2C_IT
 & 
ITEN_Mask
Ë>> 16Ë& (
I2Cx
->
CR2
)) ;

1081 
I2C_IT
 &
FLAG_Mask
;

1083 i‡(((
I2Cx
->
SR1
 & 
I2C_IT
Ë!(
uöt32_t
)
RESET
Ë&& 
íabÀ°©us
)

1086 
bô°©us
 = 
SET
;

1091 
bô°©us
 = 
RESET
;

1094  
bô°©us
;

1095 
	}
}

1128 
	$I2C_CÀ¨ITPídögBô
(
I2C_Ty≥Def
* 
I2Cx
, 
uöt32_t
 
I2C_IT
)

1130 
uöt32_t
 
Êagpos
 = 0;

1135 
Êagpos
 = 
I2C_IT
 & 
FLAG_Mask
;

1137 
I2Cx
->
SR1
 = (
uöt16_t
)~
Êagpos
;

1138 
	}
}

	@Source/STM32F10x_StdPeriph_Driver/src/stm32f10x_iwdg.c

22 
	~"°m32f10x_iwdg.h
"

30 
	#KR_KEY_Rñﬂd
 ((
uöt16_t
)0xAAAA)

	)

31 
	#KR_KEY_E«bÀ
 ((
uöt16_t
)0xCCCC)

	)

47 
	$IWDG_WrôeAc˚ssCmd
(
uöt16_t
 
IWDG_WrôeAc˚ss
)

50 
	`as£π_∑øm
(
	`IS_IWDG_WRITE_ACCESS
(
IWDG_WrôeAc˚ss
));

51 
IWDG
->
KR
 = 
IWDG_WrôeAc˚ss
;

52 
	}
}

67 
	$IWDG_SëPªsˇÀr
(
uöt8_t
 
IWDG_PªsˇÀr
)

70 
	`as£π_∑øm
(
	`IS_IWDG_PRESCALER
(
IWDG_PªsˇÀr
));

71 
IWDG
->
PR
 = 
IWDG_PªsˇÀr
;

72 
	}
}

80 
	$IWDG_SëRñﬂd
(
uöt16_t
 
Rñﬂd
)

83 
	`as£π_∑øm
(
	`IS_IWDG_RELOAD
(
Rñﬂd
));

84 
IWDG
->
RLR
 = 
Rñﬂd
;

85 
	}
}

93 
	$IWDG_RñﬂdCou¡î
()

95 
IWDG
->
KR
 = 
KR_KEY_Rñﬂd
;

96 
	}
}

103 
	$IWDG_E«bÀ
()

105 
IWDG
->
KR
 = 
KR_KEY_E«bÀ
;

106 
	}
}

116 
FœgSètus
 
	$IWDG_GëFœgSètus
(
uöt16_t
 
IWDG_FLAG
)

118 
FœgSètus
 
bô°©us
 = 
RESET
;

120 
	`as£π_∑øm
(
	`IS_IWDG_FLAG
(
IWDG_FLAG
));

121 i‡((
IWDG
->
SR
 & 
IWDG_FLAG
Ë!(
uöt32_t
)
RESET
)

123 
bô°©us
 = 
SET
;

127 
bô°©us
 = 
RESET
;

130  
bô°©us
;

131 
	}
}

	@Source/STM32F10x_StdPeriph_Driver/src/stm32f10x_pwr.c

22 
	~"°m32f10x_pwr.h
"

23 
	~"°m32f10x_rcc.h
"

29 
	#PWR_OFFSET
 (
PWR_BASE
 - 
PERIPH_BASE
)

	)

34 
	#CR_OFFSET
 (
PWR_OFFSET
 + 0x00)

	)

35 
	#DBP_BôNumbî
 0x08

	)

36 
	#CR_DBP_BB
 (
PERIPH_BB_BASE
 + (
CR_OFFSET
 * 32Ë+ (
DBP_BôNumbî
 * 4))

	)

39 
	#PVDE_BôNumbî
 0x04

	)

40 
	#CR_PVDE_BB
 (
PERIPH_BB_BASE
 + (
CR_OFFSET
 * 32Ë+ (
PVDE_BôNumbî
 * 4))

	)

45 
	#CSR_OFFSET
 (
PWR_OFFSET
 + 0x04)

	)

46 
	#EWUP_BôNumbî
 0x08

	)

47 
	#CSR_EWUP_BB
 (
PERIPH_BB_BASE
 + (
CSR_OFFSET
 * 32Ë+ (
EWUP_BôNumbî
 * 4))

	)

52 
	#CR_PDDS_Së
 ((
uöt32_t
)0x00000002)

	)

53 
	#CR_DS_Mask
 ((
uöt32_t
)0xFFFFFFFC)

	)

54 
	#CR_CWUF_Së
 ((
uöt32_t
)0x00000004)

	)

55 
	#CR_PLS_Mask
 ((
uöt32_t
)0xFFFFFF1F)

	)

60 
	#SCB_SysCål
 ((
uöt32_t
)0xE000ED10)

	)

63 
	#SysCål_SLEEPDEEP_Së
 ((
uöt32_t
)0x00000004)

	)

75 
	$PWR_DeInô
()

77 
	`RCC_APB1PîùhRe£tCmd
(
RCC_APB1Pîùh_PWR
, 
ENABLE
);

78 
	`RCC_APB1PîùhRe£tCmd
(
RCC_APB1Pîùh_PWR
, 
DISABLE
);

79 
	}
}

87 
	$PWR_BackupAc˚ssCmd
(
Fun˘i⁄ÆSèã
 
NewSèã
)

90 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

91 *(
__IO
 
uöt32_t
 *Ë
CR_DBP_BB
 = (uöt32_t)
NewSèã
;

92 
	}
}

100 
	$PWR_PVDCmd
(
Fun˘i⁄ÆSèã
 
NewSèã
)

103 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

104 *(
__IO
 
uöt32_t
 *Ë
CR_PVDE_BB
 = (uöt32_t)
NewSèã
;

105 
	}
}

121 
	$PWR_PVDLevñC⁄fig
(
uöt32_t
 
PWR_PVDLevñ
)

123 
uöt32_t
 
tm¥eg
 = 0;

125 
	`as£π_∑øm
(
	`IS_PWR_PVD_LEVEL
(
PWR_PVDLevñ
));

126 
tm¥eg
 = 
PWR
->
CR
;

128 
tm¥eg
 &
CR_PLS_Mask
;

130 
tm¥eg
 |
PWR_PVDLevñ
;

132 
PWR
->
CR
 = 
tm¥eg
;

133 
	}
}

141 
	$PWR_WakeUpPöCmd
(
Fun˘i⁄ÆSèã
 
NewSèã
)

144 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

145 *(
__IO
 
uöt32_t
 *Ë
CSR_EWUP_BB
 = (uöt32_t)
NewSèã
;

146 
	}
}

160 
	$PWR_E¡îSTOPMode
(
uöt32_t
 
PWR_Reguœt‹
, 
uöt8_t
 
PWR_STOPE¡ry
)

162 
uöt32_t
 
tm¥eg
 = 0;

164 
	`as£π_∑øm
(
	`IS_PWR_REGULATOR
(
PWR_Reguœt‹
));

165 
	`as£π_∑øm
(
	`IS_PWR_STOP_ENTRY
(
PWR_STOPE¡ry
));

168 
tm¥eg
 = 
PWR
->
CR
;

170 
tm¥eg
 &
CR_DS_Mask
;

172 
tm¥eg
 |
PWR_Reguœt‹
;

174 
PWR
->
CR
 = 
tm¥eg
;

176 *(
__IO
 
uöt32_t
 *Ë
SCB_SysCål
 |
SysCål_SLEEPDEEP_Së
;

179 if(
PWR_STOPE¡ry
 =
PWR_STOPE¡ry_WFI
)

182 
	`__WFI
();

187 
	`__WFE
();

189 
	}
}

196 
	$PWR_E¡îSTANDBYMode
()

199 
PWR
->
CR
 |
CR_CWUF_Së
;

201 
PWR
->
CR
 |
CR_PDDS_Së
;

203 *(
__IO
 
uöt32_t
 *Ë
SCB_SysCål
 |
SysCål_SLEEPDEEP_Së
;

205 #i‡
	`deföed
 ( 
__CC_ARM
 )

206 
	`__f‹˚_°‹es
();

209 
	`__WFI
();

210 
	}
}

221 
FœgSètus
 
	$PWR_GëFœgSètus
(
uöt32_t
 
PWR_FLAG
)

223 
FœgSètus
 
bô°©us
 = 
RESET
;

225 
	`as£π_∑øm
(
	`IS_PWR_GET_FLAG
(
PWR_FLAG
));

227 i‡((
PWR
->
CSR
 & 
PWR_FLAG
Ë!(
uöt32_t
)
RESET
)

229 
bô°©us
 = 
SET
;

233 
bô°©us
 = 
RESET
;

236  
bô°©us
;

237 
	}
}

247 
	$PWR_CÀ¨Fœg
(
uöt32_t
 
PWR_FLAG
)

250 
	`as£π_∑øm
(
	`IS_PWR_CLEAR_FLAG
(
PWR_FLAG
));

252 
PWR
->
CR
 |
PWR_FLAG
 << 2;

253 
	}
}

	@Source/STM32F10x_StdPeriph_Driver/src/stm32f10x_rcc.c

22 
	~"°m32f10x_rcc.h
"

28 
	#RCC_OFFSET
 (
RCC_BASE
 - 
PERIPH_BASE
)

	)

33 
	#CR_OFFSET
 (
RCC_OFFSET
 + 0x00)

	)

34 
	#HSION_BôNumbî
 0x00

	)

35 
	#CR_HSION_BB
 (
PERIPH_BB_BASE
 + (
CR_OFFSET
 * 32Ë+ (
HSION_BôNumbî
 * 4))

	)

38 
	#PLLON_BôNumbî
 0x18

	)

39 
	#CR_PLLON_BB
 (
PERIPH_BB_BASE
 + (
CR_OFFSET
 * 32Ë+ (
PLLON_BôNumbî
 * 4))

	)

41 #ifde‡
STM32F10X_CL


43 
	#PLL2ON_BôNumbî
 0x1A

	)

44 
	#CR_PLL2ON_BB
 (
PERIPH_BB_BASE
 + (
CR_OFFSET
 * 32Ë+ (
PLL2ON_BôNumbî
 * 4))

	)

47 
	#PLL3ON_BôNumbî
 0x1C

	)

48 
	#CR_PLL3ON_BB
 (
PERIPH_BB_BASE
 + (
CR_OFFSET
 * 32Ë+ (
PLL3ON_BôNumbî
 * 4))

	)

52 
	#CSSON_BôNumbî
 0x13

	)

53 
	#CR_CSSON_BB
 (
PERIPH_BB_BASE
 + (
CR_OFFSET
 * 32Ë+ (
CSSON_BôNumbî
 * 4))

	)

58 
	#CFGR_OFFSET
 (
RCC_OFFSET
 + 0x04)

	)

60 #i‚de‡
STM32F10X_CL


61 
	#USBPRE_BôNumbî
 0x16

	)

62 
	#CFGR_USBPRE_BB
 (
PERIPH_BB_BASE
 + (
CFGR_OFFSET
 * 32Ë+ (
USBPRE_BôNumbî
 * 4))

	)

64 
	#OTGFSPRE_BôNumbî
 0x16

	)

65 
	#CFGR_OTGFSPRE_BB
 (
PERIPH_BB_BASE
 + (
CFGR_OFFSET
 * 32Ë+ (
OTGFSPRE_BôNumbî
 * 4))

	)

71 
	#BDCR_OFFSET
 (
RCC_OFFSET
 + 0x20)

	)

72 
	#RTCEN_BôNumbî
 0x0F

	)

73 
	#BDCR_RTCEN_BB
 (
PERIPH_BB_BASE
 + (
BDCR_OFFSET
 * 32Ë+ (
RTCEN_BôNumbî
 * 4))

	)

76 
	#BDRST_BôNumbî
 0x10

	)

77 
	#BDCR_BDRST_BB
 (
PERIPH_BB_BASE
 + (
BDCR_OFFSET
 * 32Ë+ (
BDRST_BôNumbî
 * 4))

	)

82 
	#CSR_OFFSET
 (
RCC_OFFSET
 + 0x24)

	)

83 
	#LSION_BôNumbî
 0x00

	)

84 
	#CSR_LSION_BB
 (
PERIPH_BB_BASE
 + (
CSR_OFFSET
 * 32Ë+ (
LSION_BôNumbî
 * 4))

	)

86 #ifde‡
STM32F10X_CL


90 
	#CFGR2_OFFSET
 (
RCC_OFFSET
 + 0x2C)

	)

91 
	#I2S2SRC_BôNumbî
 0x11

	)

92 
	#CFGR2_I2S2SRC_BB
 (
PERIPH_BB_BASE
 + (
CFGR2_OFFSET
 * 32Ë+ (
I2S2SRC_BôNumbî
 * 4))

	)

95 
	#I2S3SRC_BôNumbî
 0x12

	)

96 
	#CFGR2_I2S3SRC_BB
 (
PERIPH_BB_BASE
 + (
CFGR2_OFFSET
 * 32Ë+ (
I2S3SRC_BôNumbî
 * 4))

	)

102 
	#CR_HSEBYP_Re£t
 ((
uöt32_t
)0xFFFBFFFF)

	)

103 
	#CR_HSEBYP_Së
 ((
uöt32_t
)0x00040000)

	)

104 
	#CR_HSEON_Re£t
 ((
uöt32_t
)0xFFFEFFFF)

	)

105 
	#CR_HSEON_Së
 ((
uöt32_t
)0x00010000)

	)

106 
	#CR_HSITRIM_Mask
 ((
uöt32_t
)0xFFFFFF07)

	)

109 #i‚de‡
STM32F10X_CL


110 
	#CFGR_PLL_Mask
 ((
uöt32_t
)0xFFC0FFFF)

	)

112 
	#CFGR_PLL_Mask
 ((
uöt32_t
)0xFFC2FFFF)

	)

115 
	#CFGR_PLLMuŒ_Mask
 ((
uöt32_t
)0x003C0000)

	)

116 
	#CFGR_PLLSRC_Mask
 ((
uöt32_t
)0x00010000)

	)

117 
	#CFGR_PLLXTPRE_Mask
 ((
uöt32_t
)0x00020000)

	)

118 
	#CFGR_SWS_Mask
 ((
uöt32_t
)0x0000000C)

	)

119 
	#CFGR_SW_Mask
 ((
uöt32_t
)0xFFFFFFFC)

	)

120 
	#CFGR_HPRE_Re£t_Mask
 ((
uöt32_t
)0xFFFFFF0F)

	)

121 
	#CFGR_HPRE_Së_Mask
 ((
uöt32_t
)0x000000F0)

	)

122 
	#CFGR_PPRE1_Re£t_Mask
 ((
uöt32_t
)0xFFFFF8FF)

	)

123 
	#CFGR_PPRE1_Së_Mask
 ((
uöt32_t
)0x00000700)

	)

124 
	#CFGR_PPRE2_Re£t_Mask
 ((
uöt32_t
)0xFFFFC7FF)

	)

125 
	#CFGR_PPRE2_Së_Mask
 ((
uöt32_t
)0x00003800)

	)

126 
	#CFGR_ADCPRE_Re£t_Mask
 ((
uöt32_t
)0xFFFF3FFF)

	)

127 
	#CFGR_ADCPRE_Së_Mask
 ((
uöt32_t
)0x0000C000)

	)

130 
	#CSR_RMVF_Së
 ((
uöt32_t
)0x01000000)

	)

132 #ifde‡
STM32F10X_CL


134 
	#CFGR2_PREDIV1SRC
 ((
uöt32_t
)0x00010000)

	)

135 
	#CFGR2_PREDIV1
 ((
uöt32_t
)0x0000000F)

	)

136 
	#CFGR2_PREDIV2
 ((
uöt32_t
)0x000000F0)

	)

137 
	#CFGR2_PLL2MUL
 ((
uöt32_t
)0x00000F00)

	)

138 
	#CFGR2_PLL3MUL
 ((
uöt32_t
)0x0000F000)

	)

142 
	#FLAG_Mask
 ((
uöt8_t
)0x1F)

	)

144 #i‚de‡
HSI_VÆue


146 
	#HSI_VÆue
 ((
uöt32_t
)8000000)

	)

150 
	#CIR_BYTE2_ADDRESS
 ((
uöt32_t
)0x40021009)

	)

153 
	#CIR_BYTE3_ADDRESS
 ((
uöt32_t
)0x4002100A)

	)

156 
	#CFGR_BYTE4_ADDRESS
 ((
uöt32_t
)0x40021007)

	)

159 
	#BDCR_ADDRESS
 (
PERIPH_BASE
 + 
BDCR_OFFSET
)

	)

161 #i‚de‡
HSESèπUp_TimeOut


163 
	#HSESèπUp_TimeOut
 ((
uöt16_t
)0x0500)

	)

169 
__I
 
uöt8_t
 
	gAPBAHBPªscTabÀ
[16] = {0, 0, 0, 0, 1, 2, 3, 4, 1, 2, 3, 4, 6, 7, 8, 9};

170 
__I
 
uöt8_t
 
	gADCPªscTabÀ
[4] = {2, 4, 6, 8};

181 
	$RCC_DeInô
()

184 
RCC
->
CR
 |(
uöt32_t
)0x00000001;

189 #i‚de‡
STM32F10X_CL


190 
RCC
->
CFGR
 &(
uöt32_t
)0xF8FF0000;

192 
RCC
->
CFGR
 &(
uöt32_t
)0xF0FF0000;

196 
RCC
->
CR
 &(
uöt32_t
)0xFEF6FFFF;

199 
RCC
->
CR
 &(
uöt32_t
)0xFFFBFFFF;

203 
RCC
->
CFGR
 &(
uöt32_t
)0xFF80FFFF;

205 #i‚de‡
STM32F10X_CL


207 
RCC
->
CIR
 = 0x009F0000;

210 
RCC
->
CR
 &(
uöt32_t
)0xEBFFFFFF;

213 
RCC
->
CIR
 = 0x00FF0000;

216 
RCC
->
CFGR2
 = 0x00000000;

218 
	}
}

230 
	$RCC_HSEC⁄fig
(
uöt32_t
 
RCC_HSE
)

233 
	`as£π_∑øm
(
	`IS_RCC_HSE
(
RCC_HSE
));

236 
RCC
->
CR
 &
CR_HSEON_Re£t
;

238 
RCC
->
CR
 &
CR_HSEBYP_Re£t
;

240 
RCC_HSE
)

242 
RCC_HSE_ON
:

244 
RCC
->
CR
 |
CR_HSEON_Së
;

247 
RCC_HSE_By∑ss
:

249 
RCC
->
CR
 |
CR_HSEBYP_Së
 | 
CR_HSEON_Së
;

255 
	}
}

264 
Eº‹Sètus
 
	$RCC_WaôF‹HSESèπUp
()

266 
__IO
 
uöt32_t
 
SèπUpCou¡î
 = 0;

267 
Eº‹Sètus
 
°©us
 = 
ERROR
;

268 
FœgSètus
 
HSESètus
 = 
RESET
;

273 
HSESètus
 = 
	`RCC_GëFœgSètus
(
RCC_FLAG_HSERDY
);

274 
SèπUpCou¡î
++;

275 } (
SèπUpCou¡î
 !
HSESèπUp_TimeOut
Ë&& (
HSESètus
 =
RESET
));

277 i‡(
	`RCC_GëFœgSètus
(
RCC_FLAG_HSERDY
Ë!
RESET
)

279 
°©us
 = 
SUCCESS
;

283 
°©us
 = 
ERROR
;

285  (
°©us
);

286 
	}
}

293 
	$RCC_Adju°HSICÆibøti⁄VÆue
(
uöt8_t
 
HSICÆibøti⁄VÆue
)

295 
uöt32_t
 
tm¥eg
 = 0;

297 
	`as£π_∑øm
(
	`IS_RCC_CALIBRATION_VALUE
(
HSICÆibøti⁄VÆue
));

298 
tm¥eg
 = 
RCC
->
CR
;

300 
tm¥eg
 &
CR_HSITRIM_Mask
;

302 
tm¥eg
 |(
uöt32_t
)
HSICÆibøti⁄VÆue
 << 3;

304 
RCC
->
CR
 = 
tm¥eg
;

305 
	}
}

314 
	$RCC_HSICmd
(
Fun˘i⁄ÆSèã
 
NewSèã
)

317 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

318 *(
__IO
 
uöt32_t
 *Ë
CR_HSION_BB
 = (uöt32_t)
NewSèã
;

319 
	}
}

337 
	$RCC_PLLC⁄fig
(
uöt32_t
 
RCC_PLLSour˚
, uöt32_à
RCC_PLLMul
)

339 
uöt32_t
 
tm¥eg
 = 0;

342 
	`as£π_∑øm
(
	`IS_RCC_PLL_SOURCE
(
RCC_PLLSour˚
));

343 
	`as£π_∑øm
(
	`IS_RCC_PLL_MUL
(
RCC_PLLMul
));

345 
tm¥eg
 = 
RCC
->
CFGR
;

347 
tm¥eg
 &
CFGR_PLL_Mask
;

349 
tm¥eg
 |
RCC_PLLSour˚
 | 
RCC_PLLMul
;

351 
RCC
->
CFGR
 = 
tm¥eg
;

352 
	}
}

360 
	$RCC_PLLCmd
(
Fun˘i⁄ÆSèã
 
NewSèã
)

363 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

365 *(
__IO
 
uöt32_t
 *Ë
CR_PLLON_BB
 = (uöt32_t)
NewSèã
;

366 
	}
}

368 #ifde‡
STM32F10X_CL


382 
	$RCC_PREDIV1C⁄fig
(
uöt32_t
 
RCC_PREDIV1_Sour˚
, uöt32_à
RCC_PREDIV1_Div
)

384 
uöt32_t
 
tm¥eg
 = 0;

387 
	`as£π_∑øm
(
	`IS_RCC_PREDIV1_SOURCE
(
RCC_PREDIV1_Sour˚
));

388 
	`as£π_∑øm
(
	`IS_RCC_PREDIV1
(
RCC_PREDIV1_Div
));

390 
tm¥eg
 = 
RCC
->
CFGR2
;

392 
tm¥eg
 &~(
CFGR2_PREDIV1
 | 
CFGR2_PREDIV1SRC
);

394 
tm¥eg
 |
RCC_PREDIV1_Sour˚
 | 
RCC_PREDIV1_Div
 ;

396 
RCC
->
CFGR2
 = 
tm¥eg
;

397 
	}
}

409 
	$RCC_PREDIV2C⁄fig
(
uöt32_t
 
RCC_PREDIV2_Div
)

411 
uöt32_t
 
tm¥eg
 = 0;

414 
	`as£π_∑øm
(
	`IS_RCC_PREDIV2
(
RCC_PREDIV2_Div
));

416 
tm¥eg
 = 
RCC
->
CFGR2
;

418 
tm¥eg
 &~
CFGR2_PREDIV2
;

420 
tm¥eg
 |
RCC_PREDIV2_Div
;

422 
RCC
->
CFGR2
 = 
tm¥eg
;

423 
	}
}

434 
	$RCC_PLL2C⁄fig
(
uöt32_t
 
RCC_PLL2Mul
)

436 
uöt32_t
 
tm¥eg
 = 0;

439 
	`as£π_∑øm
(
	`IS_RCC_PLL2_MUL
(
RCC_PLL2Mul
));

441 
tm¥eg
 = 
RCC
->
CFGR2
;

443 
tm¥eg
 &~
CFGR2_PLL2MUL
;

445 
tm¥eg
 |
RCC_PLL2Mul
;

447 
RCC
->
CFGR2
 = 
tm¥eg
;

448 
	}
}

460 
	$RCC_PLL2Cmd
(
Fun˘i⁄ÆSèã
 
NewSèã
)

463 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

465 *(
__IO
 
uöt32_t
 *Ë
CR_PLL2ON_BB
 = (uöt32_t)
NewSèã
;

466 
	}
}

478 
	$RCC_PLL3C⁄fig
(
uöt32_t
 
RCC_PLL3Mul
)

480 
uöt32_t
 
tm¥eg
 = 0;

483 
	`as£π_∑øm
(
	`IS_RCC_PLL3_MUL
(
RCC_PLL3Mul
));

485 
tm¥eg
 = 
RCC
->
CFGR2
;

487 
tm¥eg
 &~
CFGR2_PLL3MUL
;

489 
tm¥eg
 |
RCC_PLL3Mul
;

491 
RCC
->
CFGR2
 = 
tm¥eg
;

492 
	}
}

501 
	$RCC_PLL3Cmd
(
Fun˘i⁄ÆSèã
 
NewSèã
)

505 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

506 *(
__IO
 
uöt32_t
 *Ë
CR_PLL3ON_BB
 = (uöt32_t)
NewSèã
;

507 
	}
}

519 
	$RCC_SYSCLKC⁄fig
(
uöt32_t
 
RCC_SYSCLKSour˚
)

521 
uöt32_t
 
tm¥eg
 = 0;

523 
	`as£π_∑øm
(
	`IS_RCC_SYSCLK_SOURCE
(
RCC_SYSCLKSour˚
));

524 
tm¥eg
 = 
RCC
->
CFGR
;

526 
tm¥eg
 &
CFGR_SW_Mask
;

528 
tm¥eg
 |
RCC_SYSCLKSour˚
;

530 
RCC
->
CFGR
 = 
tm¥eg
;

531 
	}
}

542 
uöt8_t
 
	$RCC_GëSYSCLKSour˚
()

544  ((
uöt8_t
)(
RCC
->
CFGR
 & 
CFGR_SWS_Mask
));

545 
	}
}

562 
	$RCC_HCLKC⁄fig
(
uöt32_t
 
RCC_SYSCLK
)

564 
uöt32_t
 
tm¥eg
 = 0;

566 
	`as£π_∑øm
(
	`IS_RCC_HCLK
(
RCC_SYSCLK
));

567 
tm¥eg
 = 
RCC
->
CFGR
;

569 
tm¥eg
 &
CFGR_HPRE_Re£t_Mask
;

571 
tm¥eg
 |
RCC_SYSCLK
;

573 
RCC
->
CFGR
 = 
tm¥eg
;

574 
	}
}

587 
	$RCC_PCLK1C⁄fig
(
uöt32_t
 
RCC_HCLK
)

589 
uöt32_t
 
tm¥eg
 = 0;

591 
	`as£π_∑øm
(
	`IS_RCC_PCLK
(
RCC_HCLK
));

592 
tm¥eg
 = 
RCC
->
CFGR
;

594 
tm¥eg
 &
CFGR_PPRE1_Re£t_Mask
;

596 
tm¥eg
 |
RCC_HCLK
;

598 
RCC
->
CFGR
 = 
tm¥eg
;

599 
	}
}

612 
	$RCC_PCLK2C⁄fig
(
uöt32_t
 
RCC_HCLK
)

614 
uöt32_t
 
tm¥eg
 = 0;

616 
	`as£π_∑øm
(
	`IS_RCC_PCLK
(
RCC_HCLK
));

617 
tm¥eg
 = 
RCC
->
CFGR
;

619 
tm¥eg
 &
CFGR_PPRE2_Re£t_Mask
;

621 
tm¥eg
 |
RCC_HCLK
 << 3;

623 
RCC
->
CFGR
 = 
tm¥eg
;

624 
	}
}

650 
	$RCC_ITC⁄fig
(
uöt8_t
 
RCC_IT
, 
Fun˘i⁄ÆSèã
 
NewSèã
)

653 
	`as£π_∑øm
(
	`IS_RCC_IT
(
RCC_IT
));

654 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

655 i‡(
NewSèã
 !
DISABLE
)

658 *(
__IO
 
uöt8_t
 *Ë
CIR_BYTE2_ADDRESS
 |
RCC_IT
;

663 *(
__IO
 
uöt8_t
 *Ë
CIR_BYTE2_ADDRESS
 &(uöt8_t)~
RCC_IT
;

665 
	}
}

667 #i‚de‡
STM32F10X_CL


676 
	$RCC_USBCLKC⁄fig
(
uöt32_t
 
RCC_USBCLKSour˚
)

679 
	`as£π_∑øm
(
	`IS_RCC_USBCLK_SOURCE
(
RCC_USBCLKSour˚
));

681 *(
__IO
 
uöt32_t
 *Ë
CFGR_USBPRE_BB
 = 
RCC_USBCLKSour˚
;

682 
	}
}

694 
	$RCC_OTGFSCLKC⁄fig
(
uöt32_t
 
RCC_OTGFSCLKSour˚
)

697 
	`as£π_∑øm
(
	`IS_RCC_OTGFSCLK_SOURCE
(
RCC_OTGFSCLKSour˚
));

699 *(
__IO
 
uöt32_t
 *Ë
CFGR_OTGFSPRE_BB
 = 
RCC_OTGFSCLKSour˚
;

700 
	}
}

713 
	$RCC_ADCCLKC⁄fig
(
uöt32_t
 
RCC_PCLK2
)

715 
uöt32_t
 
tm¥eg
 = 0;

717 
	`as£π_∑øm
(
	`IS_RCC_ADCCLK
(
RCC_PCLK2
));

718 
tm¥eg
 = 
RCC
->
CFGR
;

720 
tm¥eg
 &
CFGR_ADCPRE_Re£t_Mask
;

722 
tm¥eg
 |
RCC_PCLK2
;

724 
RCC
->
CFGR
 = 
tm¥eg
;

725 
	}
}

727 #ifde‡
STM32F10X_CL


739 
	$RCC_I2S2CLKC⁄fig
(
uöt32_t
 
RCC_I2S2CLKSour˚
)

742 
	`as£π_∑øm
(
	`IS_RCC_I2S2CLK_SOURCE
(
RCC_I2S2CLKSour˚
));

744 *(
__IO
 
uöt32_t
 *Ë
CFGR2_I2S2SRC_BB
 = 
RCC_I2S2CLKSour˚
;

745 
	}
}

758 
	$RCC_I2S3CLKC⁄fig
(
uöt32_t
 
RCC_I2S3CLKSour˚
)

761 
	`as£π_∑øm
(
	`IS_RCC_I2S3CLK_SOURCE
(
RCC_I2S3CLKSour˚
));

763 *(
__IO
 
uöt32_t
 *Ë
CFGR2_I2S3SRC_BB
 = 
RCC_I2S3CLKSour˚
;

764 
	}
}

776 
	$RCC_LSEC⁄fig
(
uöt8_t
 
RCC_LSE
)

779 
	`as£π_∑øm
(
	`IS_RCC_LSE
(
RCC_LSE
));

782 *(
__IO
 
uöt8_t
 *Ë
BDCR_ADDRESS
 = 
RCC_LSE_OFF
;

784 *(
__IO
 
uöt8_t
 *Ë
BDCR_ADDRESS
 = 
RCC_LSE_OFF
;

786 
RCC_LSE
)

788 
RCC_LSE_ON
:

790 *(
__IO
 
uöt8_t
 *Ë
BDCR_ADDRESS
 = 
RCC_LSE_ON
;

793 
RCC_LSE_By∑ss
:

795 *(
__IO
 
uöt8_t
 *Ë
BDCR_ADDRESS
 = 
RCC_LSE_By∑ss
 | 
RCC_LSE_ON
;

801 
	}
}

809 
	$RCC_LSICmd
(
Fun˘i⁄ÆSèã
 
NewSèã
)

812 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

813 *(
__IO
 
uöt32_t
 *Ë
CSR_LSION_BB
 = (uöt32_t)
NewSèã
;

814 
	}
}

826 
	$RCC_RTCCLKC⁄fig
(
uöt32_t
 
RCC_RTCCLKSour˚
)

829 
	`as£π_∑øm
(
	`IS_RCC_RTCCLK_SOURCE
(
RCC_RTCCLKSour˚
));

831 
RCC
->
BDCR
 |
RCC_RTCCLKSour˚
;

832 
	}
}

840 
	$RCC_RTCCLKCmd
(
Fun˘i⁄ÆSèã
 
NewSèã
)

843 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

844 *(
__IO
 
uöt32_t
 *Ë
BDCR_RTCEN_BB
 = (uöt32_t)
NewSèã
;

845 
	}
}

852 
	$RCC_GëClocksFªq
(
RCC_ClocksTy≥Def
* 
RCC_Clocks
)

854 
uöt32_t
 
tmp
 = 0, 
∂lmuŒ
 = 0, 
∂lsour˚
 = 0, 
¥esc
 = 0;

856 #ifde‡ 
STM32F10X_CL


857 
uöt32_t
 
¥ediv1sour˚
 = 0, 
¥ediv1Á˘‹
 = 0, 
¥ediv2Á˘‹
 = 0, 
∂l2muŒ
 = 0;

861 
tmp
 = 
RCC
->
CFGR
 & 
CFGR_SWS_Mask
;

863 
tmp
)

866 
RCC_Clocks
->
SYSCLK_Fªquícy
 = 
HSI_VÆue
;

869 
RCC_Clocks
->
SYSCLK_Fªquícy
 = 
HSE_VÆue
;

874 
∂lmuŒ
 = 
RCC
->
CFGR
 & 
CFGR_PLLMuŒ_Mask
;

875 
∂lsour˚
 = 
RCC
->
CFGR
 & 
CFGR_PLLSRC_Mask
;

877 #i‚de‡
STM32F10X_CL


878 
∂lmuŒ
 = (Öllmull >> 18) + 2;

880 i‡(
∂lsour˚
 == 0x00)

882 
RCC_Clocks
->
SYSCLK_Fªquícy
 = (
HSI_VÆue
 >> 1Ë* 
∂lmuŒ
;

886 i‡((
RCC
->
CFGR
 & 
CFGR_PLLXTPRE_Mask
Ë!(
uöt32_t
)
RESET
)

888 
RCC_Clocks
->
SYSCLK_Fªquícy
 = (
HSE_VÆue
 >> 1Ë* 
∂lmuŒ
;

892 
RCC_Clocks
->
SYSCLK_Fªquícy
 = 
HSE_VÆue
 * 
∂lmuŒ
;

896 
∂lmuŒ
 =Öllmull >> 18;

898 i‡(
∂lmuŒ
 != 0x0D)

900 
∂lmuŒ
 += 2;

904 
∂lmuŒ
 = 13 / 2;

907 i‡(
∂lsour˚
 == 0x00)

909 
RCC_Clocks
->
SYSCLK_Fªquícy
 = (
HSI_VÆue
 >> 1Ë* 
∂lmuŒ
;

915 
¥ediv1sour˚
 = 
RCC
->
CFGR2
 & 
CFGR2_PREDIV1SRC
;

916 
¥ediv1Á˘‹
 = (
RCC
->
CFGR2
 & 
CFGR2_PREDIV1
) + 1;

918 i‡(
¥ediv1sour˚
 == 0)

920 
RCC_Clocks
->
SYSCLK_Fªquícy
 = (
HSE_VÆue
 / 
¥ediv1Á˘‹
Ë* 
∂lmuŒ
;

926 
¥ediv2Á˘‹
 = ((
RCC
->
CFGR2
 & 
CFGR2_PREDIV2
) >> 4) + 1;

927 
∂l2muŒ
 = ((
RCC
->
CFGR2
 & 
CFGR2_PLL2MUL
) >> 8 ) + 2;

928 
RCC_Clocks
->
SYSCLK_Fªquícy
 = (((
HSE_VÆue
 / 
¥ediv2Á˘‹
Ë* 
∂l2muŒ
Ë/ 
¥ediv1Á˘‹
Ë* 
∂lmuŒ
;

935 
RCC_Clocks
->
SYSCLK_Fªquícy
 = 
HSI_VÆue
;

941 
tmp
 = 
RCC
->
CFGR
 & 
CFGR_HPRE_Së_Mask
;

942 
tmp
 =Åmp >> 4;

943 
¥esc
 = 
APBAHBPªscTabÀ
[
tmp
];

945 
RCC_Clocks
->
HCLK_Fªquícy
 = RCC_Clocks->
SYSCLK_Fªquícy
 >> 
¥esc
;

947 
tmp
 = 
RCC
->
CFGR
 & 
CFGR_PPRE1_Së_Mask
;

948 
tmp
 =Åmp >> 8;

949 
¥esc
 = 
APBAHBPªscTabÀ
[
tmp
];

951 
RCC_Clocks
->
PCLK1_Fªquícy
 = RCC_Clocks->
HCLK_Fªquícy
 >> 
¥esc
;

953 
tmp
 = 
RCC
->
CFGR
 & 
CFGR_PPRE2_Së_Mask
;

954 
tmp
 =Åmp >> 11;

955 
¥esc
 = 
APBAHBPªscTabÀ
[
tmp
];

957 
RCC_Clocks
->
PCLK2_Fªquícy
 = RCC_Clocks->
HCLK_Fªquícy
 >> 
¥esc
;

959 
tmp
 = 
RCC
->
CFGR
 & 
CFGR_ADCPRE_Së_Mask
;

960 
tmp
 =Åmp >> 14;

961 
¥esc
 = 
ADCPªscTabÀ
[
tmp
];

963 
RCC_Clocks
->
ADCCLK_Fªquícy
 = RCC_Clocks->
PCLK2_Fªquícy
 / 
¥esc
;

964 
	}
}

995 
	$RCC_AHBPîùhClockCmd
(
uöt32_t
 
RCC_AHBPîùh
, 
Fun˘i⁄ÆSèã
 
NewSèã
)

998 
	`as£π_∑øm
(
	`IS_RCC_AHB_PERIPH
(
RCC_AHBPîùh
));

999 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

1001 i‡(
NewSèã
 !
DISABLE
)

1003 
RCC
->
AHBENR
 |
RCC_AHBPîùh
;

1007 
RCC
->
AHBENR
 &~
RCC_AHBPîùh
;

1009 
	}
}

1024 
	$RCC_APB2PîùhClockCmd
(
uöt32_t
 
RCC_APB2Pîùh
, 
Fun˘i⁄ÆSèã
 
NewSèã
)

1027 
	`as£π_∑øm
(
	`IS_RCC_APB2_PERIPH
(
RCC_APB2Pîùh
));

1028 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

1029 i‡(
NewSèã
 !
DISABLE
)

1031 
RCC
->
APB2ENR
 |
RCC_APB2Pîùh
;

1035 
RCC
->
APB2ENR
 &~
RCC_APB2Pîùh
;

1037 
	}
}

1054 
	$RCC_APB1PîùhClockCmd
(
uöt32_t
 
RCC_APB1Pîùh
, 
Fun˘i⁄ÆSèã
 
NewSèã
)

1057 
	`as£π_∑øm
(
	`IS_RCC_APB1_PERIPH
(
RCC_APB1Pîùh
));

1058 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

1059 i‡(
NewSèã
 !
DISABLE
)

1061 
RCC
->
APB1ENR
 |
RCC_APB1Pîùh
;

1065 
RCC
->
APB1ENR
 &~
RCC_APB1Pîùh
;

1067 
	}
}

1069 #ifde‡
STM32F10X_CL


1081 
	$RCC_AHBPîùhRe£tCmd
(
uöt32_t
 
RCC_AHBPîùh
, 
Fun˘i⁄ÆSèã
 
NewSèã
)

1084 
	`as£π_∑øm
(
	`IS_RCC_AHB_PERIPH_RESET
(
RCC_AHBPîùh
));

1085 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

1087 i‡(
NewSèã
 !
DISABLE
)

1089 
RCC
->
AHBRSTR
 |
RCC_AHBPîùh
;

1093 
RCC
->
AHBRSTR
 &~
RCC_AHBPîùh
;

1095 
	}
}

1111 
	$RCC_APB2PîùhRe£tCmd
(
uöt32_t
 
RCC_APB2Pîùh
, 
Fun˘i⁄ÆSèã
 
NewSèã
)

1114 
	`as£π_∑øm
(
	`IS_RCC_APB2_PERIPH
(
RCC_APB2Pîùh
));

1115 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

1116 i‡(
NewSèã
 !
DISABLE
)

1118 
RCC
->
APB2RSTR
 |
RCC_APB2Pîùh
;

1122 
RCC
->
APB2RSTR
 &~
RCC_APB2Pîùh
;

1124 
	}
}

1141 
	$RCC_APB1PîùhRe£tCmd
(
uöt32_t
 
RCC_APB1Pîùh
, 
Fun˘i⁄ÆSèã
 
NewSèã
)

1144 
	`as£π_∑øm
(
	`IS_RCC_APB1_PERIPH
(
RCC_APB1Pîùh
));

1145 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

1146 i‡(
NewSèã
 !
DISABLE
)

1148 
RCC
->
APB1RSTR
 |
RCC_APB1Pîùh
;

1152 
RCC
->
APB1RSTR
 &~
RCC_APB1Pîùh
;

1154 
	}
}

1162 
	$RCC_BackupRe£tCmd
(
Fun˘i⁄ÆSèã
 
NewSèã
)

1165 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

1166 *(
__IO
 
uöt32_t
 *Ë
BDCR_BDRST_BB
 = (uöt32_t)
NewSèã
;

1167 
	}
}

1175 
	$RCC_ClockSecurôySy°emCmd
(
Fun˘i⁄ÆSèã
 
NewSèã
)

1178 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

1179 *(
__IO
 
uöt32_t
 *Ë
CR_CSSON_BB
 = (uöt32_t)
NewSèã
;

1180 
	}
}

1206 
	$RCC_MCOC⁄fig
(
uöt8_t
 
RCC_MCO
)

1209 
	`as£π_∑øm
(
	`IS_RCC_MCO
(
RCC_MCO
));

1212 *(
__IO
 
uöt8_t
 *Ë
CFGR_BYTE4_ADDRESS
 = 
RCC_MCO
;

1213 
	}
}

1249 
FœgSètus
 
	$RCC_GëFœgSètus
(
uöt8_t
 
RCC_FLAG
)

1251 
uöt32_t
 
tmp
 = 0;

1252 
uöt32_t
 
°©u§eg
 = 0;

1253 
FœgSètus
 
bô°©us
 = 
RESET
;

1255 
	`as£π_∑øm
(
	`IS_RCC_FLAG
(
RCC_FLAG
));

1258 
tmp
 = 
RCC_FLAG
 >> 5;

1259 i‡(
tmp
 == 1)

1261 
°©u§eg
 = 
RCC
->
CR
;

1263 i‡(
tmp
 == 2)

1265 
°©u§eg
 = 
RCC
->
BDCR
;

1269 
°©u§eg
 = 
RCC
->
CSR
;

1273 
tmp
 = 
RCC_FLAG
 & 
FLAG_Mask
;

1274 i‡((
°©u§eg
 & ((
uöt32_t
)1 << 
tmp
)Ë!(uöt32_t)
RESET
)

1276 
bô°©us
 = 
SET
;

1280 
bô°©us
 = 
RESET
;

1284  
bô°©us
;

1285 
	}
}

1294 
	$RCC_CÀ¨Fœg
()

1297 
RCC
->
CSR
 |
CSR_RMVF_Së
;

1298 
	}
}

1324 
ITSètus
 
	$RCC_GëITSètus
(
uöt8_t
 
RCC_IT
)

1326 
ITSètus
 
bô°©us
 = 
RESET
;

1328 
	`as£π_∑øm
(
	`IS_RCC_GET_IT
(
RCC_IT
));

1331 i‡((
RCC
->
CIR
 & 
RCC_IT
Ë!(
uöt32_t
)
RESET
)

1333 
bô°©us
 = 
SET
;

1337 
bô°©us
 = 
RESET
;

1341  
bô°©us
;

1342 
	}
}

1367 
	$RCC_CÀ¨ITPídögBô
(
uöt8_t
 
RCC_IT
)

1370 
	`as£π_∑øm
(
	`IS_RCC_CLEAR_IT
(
RCC_IT
));

1373 *(
__IO
 
uöt8_t
 *Ë
CIR_BYTE3_ADDRESS
 = 
RCC_IT
;

1374 
	}
}

	@Source/STM32F10x_StdPeriph_Driver/src/stm32f10x_rtc.c

21 
	~"°m32f10x_πc.h
"

25 
	#CRL_CNF_Së
 ((
uöt16_t
)0x0010Ë

	)

26 
	#CRL_CNF_Re£t
 ((
uöt16_t
)0xFFEFË

	)

27 
	#RTC_LSB_Mask
 ((
uöt32_t
)0x0000FFFFË

	)

28 
	#PRLH_MSB_Mask
 ((
uöt32_t
)0x000F0000Ë

	)

46 
	$RTC_ITC⁄fig
(
uöt16_t
 
RTC_IT
, 
Fun˘i⁄ÆSèã
 
NewSèã
)

49 
	`as£π_∑øm
(
	`IS_RTC_IT
(
RTC_IT
));

50 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

52 i‡(
NewSèã
 !
DISABLE
)

54 
RTC
->
CRH
 |
RTC_IT
;

58 
RTC
->
CRH
 &(
uöt16_t
)~
RTC_IT
;

60 
	}
}

67 
	$RTC_E¡îC⁄figMode
()

70 
RTC
->
CRL
 |
CRL_CNF_Së
;

71 
	}
}

78 
	$RTC_ExôC⁄figMode
()

81 
RTC
->
CRL
 &
CRL_CNF_Re£t
;

82 
	}
}

89 
uöt32_t
 
	$RTC_GëCou¡î
()

91 
uöt16_t
 
tmp
 = 0;

92 
tmp
 = 
RTC
->
CNTL
;

93  (((
uöt32_t
)
RTC
->
CNTH
 << 16 ) | 
tmp
) ;

94 
	}
}

101 
	$RTC_SëCou¡î
(
uöt32_t
 
Cou¡îVÆue
)

103 
	`RTC_E¡îC⁄figMode
();

105 
RTC
->
CNTH
 = 
Cou¡îVÆue
 >> 16;

107 
RTC
->
CNTL
 = (
Cou¡îVÆue
 & 
RTC_LSB_Mask
);

108 
	`RTC_ExôC⁄figMode
();

109 
	}
}

116 
	$RTC_SëPªsˇÀr
(
uöt32_t
 
PªsˇÀrVÆue
)

119 
	`as£π_∑øm
(
	`IS_RTC_PRESCALER
(
PªsˇÀrVÆue
));

121 
	`RTC_E¡îC⁄figMode
();

123 
RTC
->
PRLH
 = (
PªsˇÀrVÆue
 & 
PRLH_MSB_Mask
) >> 16;

125 
RTC
->
PRLL
 = (
PªsˇÀrVÆue
 & 
RTC_LSB_Mask
);

126 
	`RTC_ExôC⁄figMode
();

127 
	}
}

134 
	$RTC_SëAœrm
(
uöt32_t
 
AœrmVÆue
)

136 
	`RTC_E¡îC⁄figMode
();

138 
RTC
->
ALRH
 = 
AœrmVÆue
 >> 16;

140 
RTC
->
ALRL
 = (
AœrmVÆue
 & 
RTC_LSB_Mask
);

141 
	`RTC_ExôC⁄figMode
();

142 
	}
}

149 
uöt32_t
 
	$RTC_GëDividî
()

151 
uöt32_t
 
tmp
 = 0x00;

152 
tmp
 = ((
uöt32_t
)
RTC
->
DIVH
 & (uint32_t)0x000F) << 16;

153 
tmp
 |
RTC
->
DIVL
;

154  
tmp
;

155 
	}
}

163 
	$RTC_WaôF‹La°Task
()

166 (
RTC
->
CRL
 & 
RTC_FLAG_RTOFF
Ë=(
uöt16_t
)
RESET
)

169 
	}
}

177 
	$RTC_WaôF‹Synchro
()

180 
RTC
->
CRL
 &(
uöt16_t
)~
RTC_FLAG_RSF
;

182 (
RTC
->
CRL
 & 
RTC_FLAG_RSF
Ë=(
uöt16_t
)
RESET
)

185 
	}
}

198 
FœgSètus
 
	$RTC_GëFœgSètus
(
uöt16_t
 
RTC_FLAG
)

200 
FœgSètus
 
bô°©us
 = 
RESET
;

203 
	`as£π_∑øm
(
	`IS_RTC_GET_FLAG
(
RTC_FLAG
));

205 i‡((
RTC
->
CRL
 & 
RTC_FLAG
Ë!(
uöt16_t
)
RESET
)

207 
bô°©us
 = 
SET
;

211 
bô°©us
 = 
RESET
;

213  
bô°©us
;

214 
	}
}

226 
	$RTC_CÀ¨Fœg
(
uöt16_t
 
RTC_FLAG
)

229 
	`as£π_∑øm
(
	`IS_RTC_CLEAR_FLAG
(
RTC_FLAG
));

232 
RTC
->
CRL
 &(
uöt16_t
)~
RTC_FLAG
;

233 
	}
}

244 
ITSètus
 
	$RTC_GëITSètus
(
uöt16_t
 
RTC_IT
)

246 
ITSètus
 
bô°©us
 = 
RESET
;

248 
	`as£π_∑øm
(
	`IS_RTC_GET_IT
(
RTC_IT
));

250 
bô°©us
 = (
ITSètus
)(
RTC
->
CRL
 & 
RTC_IT
);

251 i‡(((
RTC
->
CRH
 & 
RTC_IT
Ë!(
uöt16_t
)
RESET
Ë&& (
bô°©us
 != (uint16_t)RESET))

253 
bô°©us
 = 
SET
;

257 
bô°©us
 = 
RESET
;

259  
bô°©us
;

260 
	}
}

271 
	$RTC_CÀ¨ITPídögBô
(
uöt16_t
 
RTC_IT
)

274 
	`as£π_∑øm
(
	`IS_RTC_IT
(
RTC_IT
));

277 
RTC
->
CRL
 &(
uöt16_t
)~
RTC_IT
;

278 
	}
}

	@Source/STM32F10x_StdPeriph_Driver/src/stm32f10x_sdio.c

22 
	~"°m32f10x_sdio.h
"

23 
	~"°m32f10x_rcc.h
"

39 
	#SDIO_OFFSET
 (
SDIO_BASE
 - 
PERIPH_BASE
)

	)

44 
	#CLKCR_OFFSET
 (
SDIO_OFFSET
 + 0x04)

	)

45 
	#CLKEN_BôNumbî
 0x08

	)

46 
	#CLKCR_CLKEN_BB
 (
PERIPH_BB_BASE
 + (
CLKCR_OFFSET
 * 32Ë+ (
CLKEN_BôNumbî
 * 4))

	)

51 
	#CMD_OFFSET
 (
SDIO_OFFSET
 + 0x0C)

	)

52 
	#SDIOSUSPEND_BôNumbî
 0x0B

	)

53 
	#CMD_SDIOSUSPEND_BB
 (
PERIPH_BB_BASE
 + (
CMD_OFFSET
 * 32Ë+ (
SDIOSUSPEND_BôNumbî
 * 4))

	)

56 
	#ENCMDCOMPL_BôNumbî
 0x0C

	)

57 
	#CMD_ENCMDCOMPL_BB
 (
PERIPH_BB_BASE
 + (
CMD_OFFSET
 * 32Ë+ (
ENCMDCOMPL_BôNumbî
 * 4))

	)

60 
	#NIEN_BôNumbî
 0x0D

	)

61 
	#CMD_NIEN_BB
 (
PERIPH_BB_BASE
 + (
CMD_OFFSET
 * 32Ë+ (
NIEN_BôNumbî
 * 4))

	)

64 
	#ATACMD_BôNumbî
 0x0E

	)

65 
	#CMD_ATACMD_BB
 (
PERIPH_BB_BASE
 + (
CMD_OFFSET
 * 32Ë+ (
ATACMD_BôNumbî
 * 4))

	)

70 
	#DCTRL_OFFSET
 (
SDIO_OFFSET
 + 0x2C)

	)

71 
	#DMAEN_BôNumbî
 0x03

	)

72 
	#DCTRL_DMAEN_BB
 (
PERIPH_BB_BASE
 + (
DCTRL_OFFSET
 * 32Ë+ (
DMAEN_BôNumbî
 * 4))

	)

75 
	#RWSTART_BôNumbî
 0x08

	)

76 
	#DCTRL_RWSTART_BB
 (
PERIPH_BB_BASE
 + (
DCTRL_OFFSET
 * 32Ë+ (
RWSTART_BôNumbî
 * 4))

	)

79 
	#RWSTOP_BôNumbî
 0x09

	)

80 
	#DCTRL_RWSTOP_BB
 (
PERIPH_BB_BASE
 + (
DCTRL_OFFSET
 * 32Ë+ (
RWSTOP_BôNumbî
 * 4))

	)

83 
	#RWMOD_BôNumbî
 0x0A

	)

84 
	#DCTRL_RWMOD_BB
 (
PERIPH_BB_BASE
 + (
DCTRL_OFFSET
 * 32Ë+ (
RWMOD_BôNumbî
 * 4))

	)

87 
	#SDIOEN_BôNumbî
 0x0B

	)

88 
	#DCTRL_SDIOEN_BB
 (
PERIPH_BB_BASE
 + (
DCTRL_OFFSET
 * 32Ë+ (
SDIOEN_BôNumbî
 * 4))

	)

95 
	#CLKCR_CLEAR_MASK
 ((
uöt32_t
)0xFFFF8100)

	)

100 
	#PWR_PWRCTRL_MASK
 ((
uöt32_t
)0xFFFFFFFC)

	)

105 
	#DCTRL_CLEAR_MASK
 ((
uöt32_t
)0xFFFFFF08)

	)

110 
	#CMD_CLEAR_MASK
 ((
uöt32_t
)0xFFFFF800)

	)

113 
	#SDIO_RESP_ADDR
 ((
uöt32_t
)(
SDIO_BASE
 + 0x14))

	)

160 
	$SDIO_DeInô
()

162 
SDIO
->
POWER
 = 0x00000000;

163 
SDIO
->
CLKCR
 = 0x00000000;

164 
SDIO
->
ARG
 = 0x00000000;

165 
SDIO
->
CMD
 = 0x00000000;

166 
SDIO
->
DTIMER
 = 0x00000000;

167 
SDIO
->
DLEN
 = 0x00000000;

168 
SDIO
->
DCTRL
 = 0x00000000;

169 
SDIO
->
ICR
 = 0x00C007FF;

170 
SDIO
->
MASK
 = 0x00000000;

171 
	}
}

180 
	$SDIO_Inô
(
SDIO_InôTy≥Def
* 
SDIO_InôSåu˘
)

182 
uöt32_t
 
tm¥eg
 = 0;

185 
	`as£π_∑øm
(
	`IS_SDIO_CLOCK_EDGE
(
SDIO_InôSåu˘
->
SDIO_ClockEdge
));

186 
	`as£π_∑øm
(
	`IS_SDIO_CLOCK_BYPASS
(
SDIO_InôSåu˘
->
SDIO_ClockBy∑ss
));

187 
	`as£π_∑øm
(
	`IS_SDIO_CLOCK_POWER_SAVE
(
SDIO_InôSåu˘
->
SDIO_ClockPowîSave
));

188 
	`as£π_∑øm
(
	`IS_SDIO_BUS_WIDE
(
SDIO_InôSåu˘
->
SDIO_BusWide
));

189 
	`as£π_∑øm
(
	`IS_SDIO_HARDWARE_FLOW_CONTROL
(
SDIO_InôSåu˘
->
SDIO_H¨dw¨eFlowC⁄åﬁ
));

193 
tm¥eg
 = 
SDIO
->
CLKCR
;

196 
tm¥eg
 &
CLKCR_CLEAR_MASK
;

204 
tm¥eg
 |(
SDIO_InôSåu˘
->
SDIO_ClockDiv
 | SDIO_InôSåu˘->
SDIO_ClockPowîSave
 |

205 
SDIO_InôSåu˘
->
SDIO_ClockBy∑ss
 | SDIO_InôSåu˘->
SDIO_BusWide
 |

206 
SDIO_InôSåu˘
->
SDIO_ClockEdge
 | SDIO_InôSåu˘->
SDIO_H¨dw¨eFlowC⁄åﬁ
);

209 
SDIO
->
CLKCR
 = 
tm¥eg
;

210 
	}
}

218 
	$SDIO_Såu˘Inô
(
SDIO_InôTy≥Def
* 
SDIO_InôSåu˘
)

221 
SDIO_InôSåu˘
->
SDIO_ClockDiv
 = 0x00;

222 
SDIO_InôSåu˘
->
SDIO_ClockEdge
 = 
SDIO_ClockEdge_Risög
;

223 
SDIO_InôSåu˘
->
SDIO_ClockBy∑ss
 = 
SDIO_ClockBy∑ss_DißbÀ
;

224 
SDIO_InôSåu˘
->
SDIO_ClockPowîSave
 = 
SDIO_ClockPowîSave_DißbÀ
;

225 
SDIO_InôSåu˘
->
SDIO_BusWide
 = 
SDIO_BusWide_1b
;

226 
SDIO_InôSåu˘
->
SDIO_H¨dw¨eFlowC⁄åﬁ
 = 
SDIO_H¨dw¨eFlowC⁄åﬁ_DißbÀ
;

227 
	}
}

234 
	$SDIO_ClockCmd
(
Fun˘i⁄ÆSèã
 
NewSèã
)

237 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

239 *(
__IO
 
uöt32_t
 *Ë
CLKCR_CLKEN_BB
 = (uöt32_t)
NewSèã
;

240 
	}
}

250 
	$SDIO_SëPowîSèã
(
uöt32_t
 
SDIO_PowîSèã
)

253 
	`as£π_∑øm
(
	`IS_SDIO_POWER_STATE
(
SDIO_PowîSèã
));

255 
SDIO
->
POWER
 &
PWR_PWRCTRL_MASK
;

256 
SDIO
->
POWER
 |
SDIO_PowîSèã
;

257 
	}
}

268 
uöt32_t
 
	$SDIO_GëPowîSèã
()

270  (
SDIO
->
POWER
 & (~
PWR_PWRCTRL_MASK
));

271 
	}
}

306 
	$SDIO_ITC⁄fig
(
uöt32_t
 
SDIO_IT
, 
Fun˘i⁄ÆSèã
 
NewSèã
)

309 
	`as£π_∑øm
(
	`IS_SDIO_IT
(
SDIO_IT
));

310 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

312 i‡(
NewSèã
 !
DISABLE
)

315 
SDIO
->
MASK
 |
SDIO_IT
;

320 
SDIO
->
MASK
 &~
SDIO_IT
;

322 
	}
}

330 
	$SDIO_DMACmd
(
Fun˘i⁄ÆSèã
 
NewSèã
)

333 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

335 *(
__IO
 
uöt32_t
 *Ë
DCTRL_DMAEN_BB
 = (uöt32_t)
NewSèã
;

336 
	}
}

345 
	$SDIO_SídComm™d
(
SDIO_CmdInôTy≥Def
 *
SDIO_CmdInôSåu˘
)

347 
uöt32_t
 
tm¥eg
 = 0;

350 
	`as£π_∑øm
(
	`IS_SDIO_CMD_INDEX
(
SDIO_CmdInôSåu˘
->
SDIO_CmdIndex
));

351 
	`as£π_∑øm
(
	`IS_SDIO_RESPONSE
(
SDIO_CmdInôSåu˘
->
SDIO_Re•⁄£
));

352 
	`as£π_∑øm
(
	`IS_SDIO_WAIT
(
SDIO_CmdInôSåu˘
->
SDIO_Waô
));

353 
	`as£π_∑øm
(
	`IS_SDIO_CPSM
(
SDIO_CmdInôSåu˘
->
SDIO_CPSM
));

357 
SDIO
->
ARG
 = 
SDIO_CmdInôSåu˘
->
SDIO_Argumít
;

361 
tm¥eg
 = 
SDIO
->
CMD
;

363 
tm¥eg
 &
CMD_CLEAR_MASK
;

368 
tm¥eg
 |(
uöt32_t
)
SDIO_CmdInôSåu˘
->
SDIO_CmdIndex
 | SDIO_CmdInôSåu˘->
SDIO_Re•⁄£


369 | 
SDIO_CmdInôSåu˘
->
SDIO_Waô
 | SDIO_CmdInôSåu˘->
SDIO_CPSM
;

372 
SDIO
->
CMD
 = 
tm¥eg
;

373 
	}
}

381 
	$SDIO_CmdSåu˘Inô
(
SDIO_CmdInôTy≥Def
* 
SDIO_CmdInôSåu˘
)

384 
SDIO_CmdInôSåu˘
->
SDIO_Argumít
 = 0x00;

385 
SDIO_CmdInôSåu˘
->
SDIO_CmdIndex
 = 0x00;

386 
SDIO_CmdInôSåu˘
->
SDIO_Re•⁄£
 = 
SDIO_Re•⁄£_No
;

387 
SDIO_CmdInôSåu˘
->
SDIO_Waô
 = 
SDIO_Waô_No
;

388 
SDIO_CmdInôSåu˘
->
SDIO_CPSM
 = 
SDIO_CPSM_DißbÀ
;

389 
	}
}

396 
uöt8_t
 
	$SDIO_GëComm™dRe•⁄£
()

398  (
uöt8_t
)(
SDIO
->
RESPCMD
);

399 
	}
}

411 
uöt32_t
 
	$SDIO_GëRe•⁄£
(
uöt32_t
 
SDIO_RESP
)

413 
__IO
 
uöt32_t
 
tmp
 = 0;

416 
	`as£π_∑øm
(
	`IS_SDIO_RESP
(
SDIO_RESP
));

418 
tmp
 = 
SDIO_RESP_ADDR
 + 
SDIO_RESP
;

420  (*(
__IO
 
uöt32_t
 *Ë
tmp
);

421 
	}
}

430 
	$SDIO_D©aC⁄fig
(
SDIO_D©aInôTy≥Def
* 
SDIO_D©aInôSåu˘
)

432 
uöt32_t
 
tm¥eg
 = 0;

435 
	`as£π_∑øm
(
	`IS_SDIO_DATA_LENGTH
(
SDIO_D©aInôSåu˘
->
SDIO_D©aLígth
));

436 
	`as£π_∑øm
(
	`IS_SDIO_BLOCK_SIZE
(
SDIO_D©aInôSåu˘
->
SDIO_D©aBlockSize
));

437 
	`as£π_∑øm
(
	`IS_SDIO_TRANSFER_DIR
(
SDIO_D©aInôSåu˘
->
SDIO_Tøns„rDú
));

438 
	`as£π_∑øm
(
	`IS_SDIO_TRANSFER_MODE
(
SDIO_D©aInôSåu˘
->
SDIO_Tøns„rMode
));

439 
	`as£π_∑øm
(
	`IS_SDIO_DPSM
(
SDIO_D©aInôSåu˘
->
SDIO_DPSM
));

443 
SDIO
->
DTIMER
 = 
SDIO_D©aInôSåu˘
->
SDIO_D©aTimeOut
;

447 
SDIO
->
DLEN
 = 
SDIO_D©aInôSåu˘
->
SDIO_D©aLígth
;

451 
tm¥eg
 = 
SDIO
->
DCTRL
;

453 
tm¥eg
 &
DCTRL_CLEAR_MASK
;

458 
tm¥eg
 |(
uöt32_t
)
SDIO_D©aInôSåu˘
->
SDIO_D©aBlockSize
 | SDIO_D©aInôSåu˘->
SDIO_Tøns„rDú


459 | 
SDIO_D©aInôSåu˘
->
SDIO_Tøns„rMode
 | SDIO_D©aInôSåu˘->
SDIO_DPSM
;

462 
SDIO
->
DCTRL
 = 
tm¥eg
;

463 
	}
}

471 
	$SDIO_D©aSåu˘Inô
(
SDIO_D©aInôTy≥Def
* 
SDIO_D©aInôSåu˘
)

474 
SDIO_D©aInôSåu˘
->
SDIO_D©aTimeOut
 = 0xFFFFFFFF;

475 
SDIO_D©aInôSåu˘
->
SDIO_D©aLígth
 = 0x00;

476 
SDIO_D©aInôSåu˘
->
SDIO_D©aBlockSize
 = 
SDIO_D©aBlockSize_1b
;

477 
SDIO_D©aInôSåu˘
->
SDIO_Tøns„rDú
 = 
SDIO_Tøns„rDú_ToC¨d
;

478 
SDIO_D©aInôSåu˘
->
SDIO_Tøns„rMode
 = 
SDIO_Tøns„rMode_Block
;

479 
SDIO_D©aInôSåu˘
->
SDIO_DPSM
 = 
SDIO_DPSM_DißbÀ
;

480 
	}
}

487 
uöt32_t
 
	$SDIO_GëD©aCou¡î
()

489  
SDIO
->
DCOUNT
;

490 
	}
}

497 
uöt32_t
 
	$SDIO_RódD©a
()

499  
SDIO
->
FIFO
;

500 
	}
}

507 
	$SDIO_WrôeD©a
(
uöt32_t
 
D©a
)

509 
SDIO
->
FIFO
 = 
D©a
;

510 
	}
}

517 
uöt32_t
 
	$SDIO_GëFIFOCou¡
()

519  
SDIO
->
FIFOCNT
;

520 
	}
}

528 
	$SDIO_SèπSDIORódWaô
(
Fun˘i⁄ÆSèã
 
NewSèã
)

531 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

533 *(
__IO
 
uöt32_t
 *Ë
DCTRL_RWSTART_BB
 = (uöt32_tË
NewSèã
;

534 
	}
}

542 
	$SDIO_St›SDIORódWaô
(
Fun˘i⁄ÆSèã
 
NewSèã
)

545 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

547 *(
__IO
 
uöt32_t
 *Ë
DCTRL_RWSTOP_BB
 = (uöt32_tË
NewSèã
;

548 
	}
}

558 
	$SDIO_SëSDIORódWaôMode
(
uöt32_t
 
SDIO_RódWaôMode
)

561 
	`as£π_∑øm
(
	`IS_SDIO_READWAIT_MODE
(
SDIO_RódWaôMode
));

563 *(
__IO
 
uöt32_t
 *Ë
DCTRL_RWMOD_BB
 = 
SDIO_RódWaôMode
;

564 
	}
}

572 
	$SDIO_SëSDIOO≥øti⁄
(
Fun˘i⁄ÆSèã
 
NewSèã
)

575 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

577 *(
__IO
 
uöt32_t
 *Ë
DCTRL_SDIOEN_BB
 = (uöt32_t)
NewSèã
;

578 
	}
}

586 
	$SDIO_SídSDIOSu•ídCmd
(
Fun˘i⁄ÆSèã
 
NewSèã
)

589 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

591 *(
__IO
 
uöt32_t
 *Ë
CMD_SDIOSUSPEND_BB
 = (uöt32_t)
NewSèã
;

592 
	}
}

600 
	$SDIO_Comm™dCom∂ëi⁄Cmd
(
Fun˘i⁄ÆSèã
 
NewSèã
)

603 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

605 *(
__IO
 
uöt32_t
 *Ë
CMD_ENCMDCOMPL_BB
 = (uöt32_t)
NewSèã
;

606 
	}
}

613 
	$SDIO_CEATAITCmd
(
Fun˘i⁄ÆSèã
 
NewSèã
)

616 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

618 *(
__IO
 
uöt32_t
 *Ë
CMD_NIEN_BB
 = (uöt32_t)((~((uöt32_t)
NewSèã
)) & ((uint32_t)0x1));

619 
	}
}

626 
	$SDIO_SídCEATACmd
(
Fun˘i⁄ÆSèã
 
NewSèã
)

629 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

631 *(
__IO
 
uöt32_t
 *Ë
CMD_ATACMD_BB
 = (uöt32_t)
NewSèã
;

632 
	}
}

665 
FœgSètus
 
	$SDIO_GëFœgSètus
(
uöt32_t
 
SDIO_FLAG
)

667 
FœgSètus
 
bô°©us
 = 
RESET
;

670 
	`as£π_∑øm
(
	`IS_SDIO_FLAG
(
SDIO_FLAG
));

672 i‡((
SDIO
->
STA
 & 
SDIO_FLAG
Ë!(
uöt32_t
)
RESET
)

674 
bô°©us
 = 
SET
;

678 
bô°©us
 = 
RESET
;

680  
bô°©us
;

681 
	}
}

703 
	$SDIO_CÀ¨Fœg
(
uöt32_t
 
SDIO_FLAG
)

706 
	`as£π_∑øm
(
	`IS_SDIO_CLEAR_FLAG
(
SDIO_FLAG
));

708 
SDIO
->
ICR
 = 
SDIO_FLAG
;

709 
	}
}

742 
ITSètus
 
	$SDIO_GëITSètus
(
uöt32_t
 
SDIO_IT
)

744 
ITSètus
 
bô°©us
 = 
RESET
;

747 
	`as£π_∑øm
(
	`IS_SDIO_GET_IT
(
SDIO_IT
));

748 i‡((
SDIO
->
STA
 & 
SDIO_IT
Ë!(
uöt32_t
)
RESET
)

750 
bô°©us
 = 
SET
;

754 
bô°©us
 = 
RESET
;

756  
bô°©us
;

757 
	}
}

778 
	$SDIO_CÀ¨ITPídögBô
(
uöt32_t
 
SDIO_IT
)

781 
	`as£π_∑øm
(
	`IS_SDIO_CLEAR_IT
(
SDIO_IT
));

783 
SDIO
->
ICR
 = 
SDIO_IT
;

784 
	}
}

	@Source/STM32F10x_StdPeriph_Driver/src/stm32f10x_spi.c

22 
	~"°m32f10x_•i.h
"

23 
	~"°m32f10x_rcc.h
"

29 
	#CR1_SPE_Së
 ((
uöt16_t
)0x0040)

	)

30 
	#CR1_SPE_Re£t
 ((
uöt16_t
)0xFFBF)

	)

33 
	#I2SCFGR_I2SE_Së
 ((
uöt16_t
)0x0400)

	)

34 
	#I2SCFGR_I2SE_Re£t
 ((
uöt16_t
)0xFBFF)

	)

37 
	#CR1_CRCNext_Së
 ((
uöt16_t
)0x1000)

	)

40 
	#CR1_CRCEN_Së
 ((
uöt16_t
)0x2000)

	)

41 
	#CR1_CRCEN_Re£t
 ((
uöt16_t
)0xDFFF)

	)

44 
	#CR2_SSOE_Së
 ((
uöt16_t
)0x0004)

	)

45 
	#CR2_SSOE_Re£t
 ((
uöt16_t
)0xFFFB)

	)

48 
	#CR1_CLEAR_Mask
 ((
uöt16_t
)0x3040)

	)

49 
	#I2SCFGR_CLEAR_Mask
 ((
uöt16_t
)0xF040)

	)

52 
	#SPI_Mode_Sñe˘
 ((
uöt16_t
)0xF7FF)

	)

53 
	#I2S_Mode_Sñe˘
 ((
uöt16_t
)0x0800)

	)

56 
	#I2S2_CLOCK_SRC
 ((
u32
)(0x00020000))

	)

57 
	#I2S3_CLOCK_SRC
 ((
u32
)(0x00040000))

	)

58 
	#I2S_MUL_MASK
 ((
u32
)(0x0000F000))

	)

59 
	#I2S_DIV_MASK
 ((
u32
)(0x000000F0))

	)

71 
	$SPI_I2S_DeInô
(
SPI_Ty≥Def
* 
SPIx
)

74 
	`as£π_∑øm
(
	`IS_SPI_ALL_PERIPH
(
SPIx
));

76 i‡(
SPIx
 =
SPI1
)

79 
	`RCC_APB2PîùhRe£tCmd
(
RCC_APB2Pîùh_SPI1
, 
ENABLE
);

81 
	`RCC_APB2PîùhRe£tCmd
(
RCC_APB2Pîùh_SPI1
, 
DISABLE
);

83 i‡(
SPIx
 =
SPI2
)

86 
	`RCC_APB1PîùhRe£tCmd
(
RCC_APB1Pîùh_SPI2
, 
ENABLE
);

88 
	`RCC_APB1PîùhRe£tCmd
(
RCC_APB1Pîùh_SPI2
, 
DISABLE
);

92 i‡(
SPIx
 =
SPI3
)

95 
	`RCC_APB1PîùhRe£tCmd
(
RCC_APB1Pîùh_SPI3
, 
ENABLE
);

97 
	`RCC_APB1PîùhRe£tCmd
(
RCC_APB1Pîùh_SPI3
, 
DISABLE
);

100 
	}
}

108 
	$SPI_Inô
(
SPI_Ty≥Def
* 
SPIx
, 
SPI_InôTy≥Def
* 
SPI_InôSåu˘
)

110 
uöt16_t
 
tm¥eg
 = 0;

113 
	`as£π_∑øm
(
	`IS_SPI_ALL_PERIPH
(
SPIx
));

116 
	`as£π_∑øm
(
	`IS_SPI_DIRECTION_MODE
(
SPI_InôSåu˘
->
SPI_Dúe˘i⁄
));

117 
	`as£π_∑øm
(
	`IS_SPI_MODE
(
SPI_InôSåu˘
->
SPI_Mode
));

118 
	`as£π_∑øm
(
	`IS_SPI_DATASIZE
(
SPI_InôSåu˘
->
SPI_D©aSize
));

119 
	`as£π_∑øm
(
	`IS_SPI_CPOL
(
SPI_InôSåu˘
->
SPI_CPOL
));

120 
	`as£π_∑øm
(
	`IS_SPI_CPHA
(
SPI_InôSåu˘
->
SPI_CPHA
));

121 
	`as£π_∑øm
(
	`IS_SPI_NSS
(
SPI_InôSåu˘
->
SPI_NSS
));

122 
	`as£π_∑øm
(
	`IS_SPI_BAUDRATE_PRESCALER
(
SPI_InôSåu˘
->
SPI_BaudR©ePªsˇÀr
));

123 
	`as£π_∑øm
(
	`IS_SPI_FIRST_BIT
(
SPI_InôSåu˘
->
SPI_Fú°Bô
));

124 
	`as£π_∑øm
(
	`IS_SPI_CRC_POLYNOMIAL
(
SPI_InôSåu˘
->
SPI_CRCPﬁynomül
));

128 
tm¥eg
 = 
SPIx
->
CR1
;

130 
tm¥eg
 &
CR1_CLEAR_Mask
;

139 
tm¥eg
 |(
uöt16_t
)((
uöt32_t
)
SPI_InôSåu˘
->
SPI_Dúe˘i⁄
 | SPI_InôSåu˘->
SPI_Mode
 |

140 
SPI_InôSåu˘
->
SPI_D©aSize
 | SPI_InôSåu˘->
SPI_CPOL
 |

141 
SPI_InôSåu˘
->
SPI_CPHA
 | SPI_InôSåu˘->
SPI_NSS
 |

142 
SPI_InôSåu˘
->
SPI_BaudR©ePªsˇÀr
 | SPI_InôSåu˘->
SPI_Fú°Bô
);

144 
SPIx
->
CR1
 = 
tm¥eg
;

147 
SPIx
->
I2SCFGR
 &
SPI_Mode_Sñe˘
;

151 
SPIx
->
CRCPR
 = 
SPI_InôSåu˘
->
SPI_CRCPﬁynomül
;

152 
	}
}

165 
	$I2S_Inô
(
SPI_Ty≥Def
* 
SPIx
, 
I2S_InôTy≥Def
* 
I2S_InôSåu˘
)

167 
uöt16_t
 
tm¥eg
 = 0, 
i2sdiv
 = 2, 
i2sodd
 = 0, 
∑ckëÀngth
 = 1;

168 
uöt32_t
 
tmp
 = 0;

169 
RCC_ClocksTy≥Def
 
RCC_Clocks
;

170 
uöt32_t
 
sour˚˛ock
 = 0;

173 
	`as£π_∑øm
(
	`IS_SPI_23_PERIPH
(
SPIx
));

174 
	`as£π_∑øm
(
	`IS_I2S_MODE
(
I2S_InôSåu˘
->
I2S_Mode
));

175 
	`as£π_∑øm
(
	`IS_I2S_STANDARD
(
I2S_InôSåu˘
->
I2S_Sènd¨d
));

176 
	`as£π_∑øm
(
	`IS_I2S_DATA_FORMAT
(
I2S_InôSåu˘
->
I2S_D©aF‹m©
));

177 
	`as£π_∑øm
(
	`IS_I2S_MCLK_OUTPUT
(
I2S_InôSåu˘
->
I2S_MCLKOuçut
));

178 
	`as£π_∑øm
(
	`IS_I2S_AUDIO_FREQ
(
I2S_InôSåu˘
->
I2S_AudioFªq
));

179 
	`as£π_∑øm
(
	`IS_I2S_CPOL
(
I2S_InôSåu˘
->
I2S_CPOL
));

183 
SPIx
->
I2SCFGR
 &
I2SCFGR_CLEAR_Mask
;

184 
SPIx
->
I2SPR
 = 0x0002;

187 
tm¥eg
 = 
SPIx
->
I2SCFGR
;

190 if(
I2S_InôSåu˘
->
I2S_AudioFªq
 =
I2S_AudioFªq_DeÁu…
)

192 
i2sodd
 = (
uöt16_t
)0;

193 
i2sdiv
 = (
uöt16_t
)2;

199 if(
I2S_InôSåu˘
->
I2S_D©aF‹m©
 =
I2S_D©aF‹m©_16b
)

202 
∑ckëÀngth
 = 1;

207 
∑ckëÀngth
 = 2;

211 if(((
uöt32_t
)
SPIx
Ë=
SPI2_BASE
)

214 
tmp
 = 
I2S2_CLOCK_SRC
;

219 
tmp
 = 
I2S3_CLOCK_SRC
;

223 #ifde‡
STM32F10X_CL


224 if((
RCC
->
CFGR2
 & 
tmp
) != 0)

227 
tmp
 = (
uöt32_t
)((
RCC
->
CFGR2
 & 
I2S_MUL_MASK
) >> 12);

230 if((
tmp
 > 5) && (tmp < 15))

233 
tmp
 += 2;

237 i‡(
tmp
 == 15)

240 
tmp
 = 20;

244 
sour˚˛ock
 = (
uöt32_t
)(((
RCC
->
CFGR2
 & 
I2S_DIV_MASK
) >> 4) + 1);

247 
sour˚˛ock
 = (
uöt32_t
Ë((
HSE_VÆue
 / sour˚˛ockË* 
tmp
 * 2);

252 
	`RCC_GëClocksFªq
(&
RCC_Clocks
);

255 
sour˚˛ock
 = 
RCC_Clocks
.
SYSCLK_Fªquícy
;

259 
	`RCC_GëClocksFªq
(&
RCC_Clocks
);

262 
sour˚˛ock
 = 
RCC_Clocks
.
SYSCLK_Fªquícy
;

266 if(
I2S_InôSåu˘
->
I2S_MCLKOuçut
 =
I2S_MCLKOuçut_E«bÀ
)

269 
tmp
 = (
uöt16_t
)(((((
sour˚˛ock
 / 256Ë* 10Ë/ 
I2S_InôSåu˘
->
I2S_AudioFªq
)) + 5);

274 
tmp
 = (
uöt16_t
)(((((
sour˚˛ock
 / (32 * 
∑ckëÀngth
)Ë*10 ) / 
I2S_InôSåu˘
->
I2S_AudioFªq
)) + 5);

278 
tmp
 =Åmp / 10;

281 
i2sodd
 = (
uöt16_t
)(
tmp
 & (
u16
)0x0001);

284 
i2sdiv
 = (
uöt16_t
)((
tmp
 - 
i2sodd
) / 2);

287 
i2sodd
 = (
uöt16_t
) (i2sodd << 8);

291 i‡((
i2sdiv
 < 2) || (i2sdiv > 0xFF))

294 
i2sdiv
 = 2;

295 
i2sodd
 = 0;

299 
SPIx
->
I2SPR
 = (
uöt16_t
)(
i2sdiv
 | (uöt16_t)(
i2sodd
 | (uöt16_t)
I2S_InôSåu˘
->
I2S_MCLKOuçut
));

302 
tm¥eg
 |(
uöt16_t
)(
I2S_Mode_Sñe˘
 | (uöt16_t)(
I2S_InôSåu˘
->
I2S_Mode
 | \

303 (
uöt16_t
)(
I2S_InôSåu˘
->
I2S_Sènd¨d
 | (uöt16_t)(I2S_InôSåu˘->
I2S_D©aF‹m©
 | \

304 (
uöt16_t
)
I2S_InôSåu˘
->
I2S_CPOL
))));

307 
SPIx
->
I2SCFGR
 = 
tm¥eg
;

308 
	}
}

315 
	$SPI_Såu˘Inô
(
SPI_InôTy≥Def
* 
SPI_InôSåu˘
)

319 
SPI_InôSåu˘
->
SPI_Dúe˘i⁄
 = 
SPI_Dúe˘i⁄_2Löes_FuŒDu∂ex
;

321 
SPI_InôSåu˘
->
SPI_Mode
 = 
SPI_Mode_Sœve
;

323 
SPI_InôSåu˘
->
SPI_D©aSize
 = 
SPI_D©aSize_8b
;

325 
SPI_InôSåu˘
->
SPI_CPOL
 = 
SPI_CPOL_Low
;

327 
SPI_InôSåu˘
->
SPI_CPHA
 = 
SPI_CPHA_1Edge
;

329 
SPI_InôSåu˘
->
SPI_NSS
 = 
SPI_NSS_H¨d
;

331 
SPI_InôSåu˘
->
SPI_BaudR©ePªsˇÀr
 = 
SPI_BaudR©ePªsˇÀr_2
;

333 
SPI_InôSåu˘
->
SPI_Fú°Bô
 = 
SPI_Fú°Bô_MSB
;

335 
SPI_InôSåu˘
->
SPI_CRCPﬁynomül
 = 7;

336 
	}
}

343 
	$I2S_Såu˘Inô
(
I2S_InôTy≥Def
* 
I2S_InôSåu˘
)

347 
I2S_InôSåu˘
->
I2S_Mode
 = 
I2S_Mode_SœveTx
;

350 
I2S_InôSåu˘
->
I2S_Sènd¨d
 = 
I2S_Sènd¨d_Phûlùs
;

353 
I2S_InôSåu˘
->
I2S_D©aF‹m©
 = 
I2S_D©aF‹m©_16b
;

356 
I2S_InôSåu˘
->
I2S_MCLKOuçut
 = 
I2S_MCLKOuçut_DißbÀ
;

359 
I2S_InôSåu˘
->
I2S_AudioFªq
 = 
I2S_AudioFªq_DeÁu…
;

362 
I2S_InôSåu˘
->
I2S_CPOL
 = 
I2S_CPOL_Low
;

363 
	}
}

372 
	$SPI_Cmd
(
SPI_Ty≥Def
* 
SPIx
, 
Fun˘i⁄ÆSèã
 
NewSèã
)

375 
	`as£π_∑øm
(
	`IS_SPI_ALL_PERIPH
(
SPIx
));

376 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

377 i‡(
NewSèã
 !
DISABLE
)

380 
SPIx
->
CR1
 |
CR1_SPE_Së
;

385 
SPIx
->
CR1
 &
CR1_SPE_Re£t
;

387 
	}
}

396 
	$I2S_Cmd
(
SPI_Ty≥Def
* 
SPIx
, 
Fun˘i⁄ÆSèã
 
NewSèã
)

399 
	`as£π_∑øm
(
	`IS_SPI_23_PERIPH
(
SPIx
));

400 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

401 i‡(
NewSèã
 !
DISABLE
)

404 
SPIx
->
I2SCFGR
 |
I2SCFGR_I2SE_Së
;

409 
SPIx
->
I2SCFGR
 &
I2SCFGR_I2SE_Re£t
;

411 
	}
}

427 
	$SPI_I2S_ITC⁄fig
(
SPI_Ty≥Def
* 
SPIx
, 
uöt8_t
 
SPI_I2S_IT
, 
Fun˘i⁄ÆSèã
 
NewSèã
)

429 
uöt16_t
 
ôpos
 = 0, 
ômask
 = 0 ;

431 
	`as£π_∑øm
(
	`IS_SPI_ALL_PERIPH
(
SPIx
));

432 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

433 
	`as£π_∑øm
(
	`IS_SPI_I2S_CONFIG_IT
(
SPI_I2S_IT
));

436 
ôpos
 = 
SPI_I2S_IT
 >> 4;

439 
ômask
 = (
uöt16_t
)1 << (uöt16_t)
ôpos
;

441 i‡(
NewSèã
 !
DISABLE
)

444 
SPIx
->
CR2
 |
ômask
;

449 
SPIx
->
CR2
 &(
uöt16_t
)~
ômask
;

451 
	}
}

466 
	$SPI_I2S_DMACmd
(
SPI_Ty≥Def
* 
SPIx
, 
uöt16_t
 
SPI_I2S_DMAReq
, 
Fun˘i⁄ÆSèã
 
NewSèã
)

469 
	`as£π_∑øm
(
	`IS_SPI_ALL_PERIPH
(
SPIx
));

470 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

471 
	`as£π_∑øm
(
	`IS_SPI_I2S_DMAREQ
(
SPI_I2S_DMAReq
));

472 i‡(
NewSèã
 !
DISABLE
)

475 
SPIx
->
CR2
 |
SPI_I2S_DMAReq
;

480 
SPIx
->
CR2
 &(
uöt16_t
)~
SPI_I2S_DMAReq
;

482 
	}
}

492 
	$SPI_I2S_SídD©a
(
SPI_Ty≥Def
* 
SPIx
, 
uöt16_t
 
D©a
)

495 
	`as£π_∑øm
(
	`IS_SPI_ALL_PERIPH
(
SPIx
));

498 
SPIx
->
DR
 = 
D©a
;

499 
	}
}

508 
uöt16_t
 
	$SPI_I2S_Re˚iveD©a
(
SPI_Ty≥Def
* 
SPIx
)

511 
	`as£π_∑øm
(
	`IS_SPI_ALL_PERIPH
(
SPIx
));

514  
SPIx
->
DR
;

515 
	}
}

526 
	$SPI_NSSI¡î«lSo·w¨eC⁄fig
(
SPI_Ty≥Def
* 
SPIx
, 
uöt16_t
 
SPI_NSSI¡î«lSo·
)

529 
	`as£π_∑øm
(
	`IS_SPI_ALL_PERIPH
(
SPIx
));

530 
	`as£π_∑øm
(
	`IS_SPI_NSS_INTERNAL
(
SPI_NSSI¡î«lSo·
));

531 i‡(
SPI_NSSI¡î«lSo·
 !
SPI_NSSI¡î«lSo·_Re£t
)

534 
SPIx
->
CR1
 |
SPI_NSSI¡î«lSo·_Së
;

539 
SPIx
->
CR1
 &
SPI_NSSI¡î«lSo·_Re£t
;

541 
	}
}

550 
	$SPI_SSOuçutCmd
(
SPI_Ty≥Def
* 
SPIx
, 
Fun˘i⁄ÆSèã
 
NewSèã
)

553 
	`as£π_∑øm
(
	`IS_SPI_ALL_PERIPH
(
SPIx
));

554 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

555 i‡(
NewSèã
 !
DISABLE
)

558 
SPIx
->
CR2
 |
CR2_SSOE_Së
;

563 
SPIx
->
CR2
 &
CR2_SSOE_Re£t
;

565 
	}
}

576 
	$SPI_D©aSizeC⁄fig
(
SPI_Ty≥Def
* 
SPIx
, 
uöt16_t
 
SPI_D©aSize
)

579 
	`as£π_∑øm
(
	`IS_SPI_ALL_PERIPH
(
SPIx
));

580 
	`as£π_∑øm
(
	`IS_SPI_DATASIZE
(
SPI_D©aSize
));

582 
SPIx
->
CR1
 &(
uöt16_t
)~
SPI_D©aSize_16b
;

584 
SPIx
->
CR1
 |
SPI_D©aSize
;

585 
	}
}

592 
	$SPI_TønsmôCRC
(
SPI_Ty≥Def
* 
SPIx
)

595 
	`as£π_∑øm
(
	`IS_SPI_ALL_PERIPH
(
SPIx
));

598 
SPIx
->
CR1
 |
CR1_CRCNext_Së
;

599 
	}
}

608 
	$SPI_CÆcuœãCRC
(
SPI_Ty≥Def
* 
SPIx
, 
Fun˘i⁄ÆSèã
 
NewSèã
)

611 
	`as£π_∑øm
(
	`IS_SPI_ALL_PERIPH
(
SPIx
));

612 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

613 i‡(
NewSèã
 !
DISABLE
)

616 
SPIx
->
CR1
 |
CR1_CRCEN_Së
;

621 
SPIx
->
CR1
 &
CR1_CRCEN_Re£t
;

623 
	}
}

634 
uöt16_t
 
	$SPI_GëCRC
(
SPI_Ty≥Def
* 
SPIx
, 
uöt8_t
 
SPI_CRC
)

636 
uöt16_t
 
¸¸eg
 = 0;

638 
	`as£π_∑øm
(
	`IS_SPI_ALL_PERIPH
(
SPIx
));

639 
	`as£π_∑øm
(
	`IS_SPI_CRC
(
SPI_CRC
));

640 i‡(
SPI_CRC
 !
SPI_CRC_Rx
)

643 
¸¸eg
 = 
SPIx
->
TXCRCR
;

648 
¸¸eg
 = 
SPIx
->
RXCRCR
;

651  
¸¸eg
;

652 
	}
}

659 
uöt16_t
 
	$SPI_GëCRCPﬁynomül
(
SPI_Ty≥Def
* 
SPIx
)

662 
	`as£π_∑øm
(
	`IS_SPI_ALL_PERIPH
(
SPIx
));

665  
SPIx
->
CRCPR
;

666 
	}
}

677 
	$SPI_BiDúe˘i⁄ÆLöeC⁄fig
(
SPI_Ty≥Def
* 
SPIx
, 
uöt16_t
 
SPI_Dúe˘i⁄
)

680 
	`as£π_∑øm
(
	`IS_SPI_ALL_PERIPH
(
SPIx
));

681 
	`as£π_∑øm
(
	`IS_SPI_DIRECTION
(
SPI_Dúe˘i⁄
));

682 i‡(
SPI_Dúe˘i⁄
 =
SPI_Dúe˘i⁄_Tx
)

685 
SPIx
->
CR1
 |
SPI_Dúe˘i⁄_Tx
;

690 
SPIx
->
CR1
 &
SPI_Dúe˘i⁄_Rx
;

692 
	}
}

711 
FœgSètus
 
	$SPI_I2S_GëFœgSètus
(
SPI_Ty≥Def
* 
SPIx
, 
uöt16_t
 
SPI_I2S_FLAG
)

713 
FœgSètus
 
bô°©us
 = 
RESET
;

715 
	`as£π_∑øm
(
	`IS_SPI_ALL_PERIPH
(
SPIx
));

716 
	`as£π_∑øm
(
	`IS_SPI_I2S_GET_FLAG
(
SPI_I2S_FLAG
));

718 i‡((
SPIx
->
SR
 & 
SPI_I2S_FLAG
Ë!(
uöt16_t
)
RESET
)

721 
bô°©us
 = 
SET
;

726 
bô°©us
 = 
RESET
;

729  
bô°©us
;

730 
	}
}

749 
	$SPI_I2S_CÀ¨Fœg
(
SPI_Ty≥Def
* 
SPIx
, 
uöt16_t
 
SPI_I2S_FLAG
)

752 
	`as£π_∑øm
(
	`IS_SPI_ALL_PERIPH
(
SPIx
));

753 
	`as£π_∑øm
(
	`IS_SPI_I2S_CLEAR_FLAG
(
SPI_I2S_FLAG
));

756 
SPIx
->
SR
 = (
uöt16_t
)~
SPI_I2S_FLAG
;

757 
	}
}

774 
ITSètus
 
	$SPI_I2S_GëITSètus
(
SPI_Ty≥Def
* 
SPIx
, 
uöt8_t
 
SPI_I2S_IT
)

776 
ITSètus
 
bô°©us
 = 
RESET
;

777 
uöt16_t
 
ôpos
 = 0, 
ômask
 = 0, 
íabÀ°©us
 = 0;

780 
	`as£π_∑øm
(
	`IS_SPI_ALL_PERIPH
(
SPIx
));

781 
	`as£π_∑øm
(
	`IS_SPI_I2S_GET_IT
(
SPI_I2S_IT
));

784 
ôpos
 = 0x01 << (
SPI_I2S_IT
 & 0x0F);

787 
ômask
 = 
SPI_I2S_IT
 >> 4;

790 
ômask
 = 0x01 << itmask;

793 
íabÀ°©us
 = (
SPIx
->
CR2
 & 
ômask
) ;

796 i‡(((
SPIx
->
SR
 & 
ôpos
Ë!(
uöt16_t
)
RESET
Ë&& 
íabÀ°©us
)

799 
bô°©us
 = 
SET
;

804 
bô°©us
 = 
RESET
;

807  
bô°©us
;

808 
	}
}

827 
	$SPI_I2S_CÀ¨ITPídögBô
(
SPI_Ty≥Def
* 
SPIx
, 
uöt8_t
 
SPI_I2S_IT
)

829 
uöt16_t
 
ôpos
 = 0;

831 
	`as£π_∑øm
(
	`IS_SPI_ALL_PERIPH
(
SPIx
));

832 
	`as£π_∑øm
(
	`IS_SPI_I2S_CLEAR_IT
(
SPI_I2S_IT
));

835 
ôpos
 = 0x01 << (
SPI_I2S_IT
 & 0x0F);

838 
SPIx
->
SR
 = (
uöt16_t
)~
ôpos
;

839 
	}
}

	@Source/STM32F10x_StdPeriph_Driver/src/stm32f10x_tim.c

22 
	~"°m32f10x_tim.h
"

23 
	~"°m32f10x_rcc.h
"

29 
	#CR1_CEN_Së
 ((
uöt16_t
)0x0001)

	)

30 
	#CR1_CEN_Re£t
 ((
uöt16_t
)0x03FE)

	)

31 
	#CR1_UDIS_Së
 ((
uöt16_t
)0x0002)

	)

32 
	#CR1_UDIS_Re£t
 ((
uöt16_t
)0x03FD)

	)

33 
	#CR1_URS_Së
 ((
uöt16_t
)0x0004)

	)

34 
	#CR1_URS_Re£t
 ((
uöt16_t
)0x03FB)

	)

35 
	#CR1_OPM_Re£t
 ((
uöt16_t
)0x03F7)

	)

36 
	#CR1_Cou¡îMode_Mask
 ((
uöt16_t
)0x038F)

	)

37 
	#CR1_ARPE_Së
 ((
uöt16_t
)0x0080)

	)

38 
	#CR1_ARPE_Re£t
 ((
uöt16_t
)0x037F)

	)

39 
	#CR1_CKD_Mask
 ((
uöt16_t
)0x00FF)

	)

40 
	#CR2_CCPC_Së
 ((
uöt16_t
)0x0001)

	)

41 
	#CR2_CCPC_Re£t
 ((
uöt16_t
)0xFFFE)

	)

42 
	#CR2_CCUS_Së
 ((
uöt16_t
)0x0004)

	)

43 
	#CR2_CCUS_Re£t
 ((
uöt16_t
)0xFFFB)

	)

44 
	#CR2_CCDS_Së
 ((
uöt16_t
)0x0008)

	)

45 
	#CR2_CCDS_Re£t
 ((
uöt16_t
)0xFFF7)

	)

46 
	#CR2_MMS_Mask
 ((
uöt16_t
)0xFF8F)

	)

47 
	#CR2_TI1S_Së
 ((
uöt16_t
)0x0080)

	)

48 
	#CR2_TI1S_Re£t
 ((
uöt16_t
)0xFF7F)

	)

49 
	#CR2_OIS1_Re£t
 ((
uöt16_t
)0x7EFF)

	)

50 
	#CR2_OIS1N_Re£t
 ((
uöt16_t
)0x7DFF)

	)

51 
	#CR2_OIS2_Re£t
 ((
uöt16_t
)0x7BFF)

	)

52 
	#CR2_OIS2N_Re£t
 ((
uöt16_t
)0x77FF)

	)

53 
	#CR2_OIS3_Re£t
 ((
uöt16_t
)0x6FFF)

	)

54 
	#CR2_OIS3N_Re£t
 ((
uöt16_t
)0x5FFF)

	)

55 
	#CR2_OIS4_Re£t
 ((
uöt16_t
)0x3FFF)

	)

56 
	#SMCR_SMS_Mask
 ((
uöt16_t
)0xFFF8)

	)

57 
	#SMCR_ETR_Mask
 ((
uöt16_t
)0x00FF)

	)

58 
	#SMCR_TS_Mask
 ((
uöt16_t
)0xFF8F)

	)

59 
	#SMCR_MSM_Re£t
 ((
uöt16_t
)0xFF7F)

	)

60 
	#SMCR_ECE_Së
 ((
uöt16_t
)0x4000)

	)

61 
	#CCMR_CC13S_Mask
 ((
uöt16_t
)0xFFFC)

	)

62 
	#CCMR_CC24S_Mask
 ((
uöt16_t
)0xFCFF)

	)

63 
	#CCMR_TI13Dúe˘_Së
 ((
uöt16_t
)0x0001)

	)

64 
	#CCMR_TI24Dúe˘_Së
 ((
uöt16_t
)0x0100)

	)

65 
	#CCMR_OC13FE_Re£t
 ((
uöt16_t
)0xFFFB)

	)

66 
	#CCMR_OC24FE_Re£t
 ((
uöt16_t
)0xFBFF)

	)

67 
	#CCMR_OC13PE_Re£t
 ((
uöt16_t
)0xFFF7)

	)

68 
	#CCMR_OC24PE_Re£t
 ((
uöt16_t
)0xF7FF)

	)

69 
	#CCMR_OC13M_Mask
 ((
uöt16_t
)0xFF8F)

	)

70 
	#CCMR_OC24M_Mask
 ((
uöt16_t
)0x8FFF)

	)

71 
	#CCMR_OC13CE_Re£t
 ((
uöt16_t
)0xFF7F)

	)

72 
	#CCMR_OC24CE_Re£t
 ((
uöt16_t
)0x7FFF)

	)

73 
	#CCMR_IC13PSC_Mask
 ((
uöt16_t
)0xFFF3)

	)

74 
	#CCMR_IC24PSC_Mask
 ((
uöt16_t
)0xF3FF)

	)

75 
	#CCMR_IC13F_Mask
 ((
uöt16_t
)0xFF0F)

	)

76 
	#CCMR_IC24F_Mask
 ((
uöt16_t
)0x0FFF)

	)

77 
	#CCMR_Off£t
 ((
uöt16_t
)0x0018)

	)

78 
	#CCER_CCE_Së
 ((
uöt16_t
)0x0001)

	)

79 
	#CCER_CCNE_Së
 ((
uöt16_t
)0x0004)

	)

80 
	#CCER_CC1P_Re£t
 ((
uöt16_t
)0xFFFD)

	)

81 
	#CCER_CC2P_Re£t
 ((
uöt16_t
)0xFFDF)

	)

82 
	#CCER_CC3P_Re£t
 ((
uöt16_t
)0xFDFF)

	)

83 
	#CCER_CC4P_Re£t
 ((
uöt16_t
)0xDFFF)

	)

84 
	#CCER_CC1NP_Re£t
 ((
uöt16_t
)0xFFF7)

	)

85 
	#CCER_CC2NP_Re£t
 ((
uöt16_t
)0xFF7F)

	)

86 
	#CCER_CC3NP_Re£t
 ((
uöt16_t
)0xF7FF)

	)

87 
	#CCER_CC1E_Së
 ((
uöt16_t
)0x0001)

	)

88 
	#CCER_CC1E_Re£t
 ((
uöt16_t
)0xFFFE)

	)

89 
	#CCER_CC1NE_Re£t
 ((
uöt16_t
)0xFFFB)

	)

90 
	#CCER_CC2E_Së
 ((
uöt16_t
)0x0010)

	)

91 
	#CCER_CC2E_Re£t
 ((
uöt16_t
)0xFFEF)

	)

92 
	#CCER_CC2NE_Re£t
 ((
uöt16_t
)0xFFBF)

	)

93 
	#CCER_CC3E_Së
 ((
uöt16_t
)0x0100)

	)

94 
	#CCER_CC3E_Re£t
 ((
uöt16_t
)0xFEFF)

	)

95 
	#CCER_CC3NE_Re£t
 ((
uöt16_t
)0xFBFF)

	)

96 
	#CCER_CC4E_Së
 ((
uöt16_t
)0x1000)

	)

97 
	#CCER_CC4E_Re£t
 ((
uöt16_t
)0xEFFF)

	)

98 
	#BDTR_MOE_Së
 ((
uöt16_t
)0x8000)

	)

99 
	#BDTR_MOE_Re£t
 ((
uöt16_t
)0x7FFF)

	)

105 
TI1_C⁄fig
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_ICPﬁ¨ôy
, uöt16_à
TIM_ICSñe˘i⁄
,

106 
uöt16_t
 
TIM_ICFûãr
);

107 
TI2_C⁄fig
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_ICPﬁ¨ôy
, uöt16_à
TIM_ICSñe˘i⁄
,

108 
uöt16_t
 
TIM_ICFûãr
);

109 
TI3_C⁄fig
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_ICPﬁ¨ôy
, uöt16_à
TIM_ICSñe˘i⁄
,

110 
uöt16_t
 
TIM_ICFûãr
);

111 
TI4_C⁄fig
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_ICPﬁ¨ôy
, uöt16_à
TIM_ICSñe˘i⁄
,

112 
uöt16_t
 
TIM_ICFûãr
);

121 
	$TIM_DeInô
(
TIM_Ty≥Def
* 
TIMx
)

124 
	`as£π_∑øm
(
	`IS_TIM_ALL_PERIPH
(
TIMx
));

126 i‡(
TIMx
 =
TIM1
)

128 
	`RCC_APB2PîùhRe£tCmd
(
RCC_APB2Pîùh_TIM1
, 
ENABLE
);

129 
	`RCC_APB2PîùhRe£tCmd
(
RCC_APB2Pîùh_TIM1
, 
DISABLE
);

131 i‡(
TIMx
 =
TIM2
)

133 
	`RCC_APB1PîùhRe£tCmd
(
RCC_APB1Pîùh_TIM2
, 
ENABLE
);

134 
	`RCC_APB1PîùhRe£tCmd
(
RCC_APB1Pîùh_TIM2
, 
DISABLE
);

136 i‡(
TIMx
 =
TIM3
)

138 
	`RCC_APB1PîùhRe£tCmd
(
RCC_APB1Pîùh_TIM3
, 
ENABLE
);

139 
	`RCC_APB1PîùhRe£tCmd
(
RCC_APB1Pîùh_TIM3
, 
DISABLE
);

141 i‡(
TIMx
 =
TIM4
)

143 
	`RCC_APB1PîùhRe£tCmd
(
RCC_APB1Pîùh_TIM4
, 
ENABLE
);

144 
	`RCC_APB1PîùhRe£tCmd
(
RCC_APB1Pîùh_TIM4
, 
DISABLE
);

146 i‡(
TIMx
 =
TIM5
)

148 
	`RCC_APB1PîùhRe£tCmd
(
RCC_APB1Pîùh_TIM5
, 
ENABLE
);

149 
	`RCC_APB1PîùhRe£tCmd
(
RCC_APB1Pîùh_TIM5
, 
DISABLE
);

151 i‡(
TIMx
 =
TIM6
)

153 
	`RCC_APB1PîùhRe£tCmd
(
RCC_APB1Pîùh_TIM6
, 
ENABLE
);

154 
	`RCC_APB1PîùhRe£tCmd
(
RCC_APB1Pîùh_TIM6
, 
DISABLE
);

156 i‡(
TIMx
 =
TIM7
)

158 
	`RCC_APB1PîùhRe£tCmd
(
RCC_APB1Pîùh_TIM7
, 
ENABLE
);

159 
	`RCC_APB1PîùhRe£tCmd
(
RCC_APB1Pîùh_TIM7
, 
DISABLE
);

163 i‡(
TIMx
 =
TIM8
)

165 
	`RCC_APB2PîùhRe£tCmd
(
RCC_APB2Pîùh_TIM8
, 
ENABLE
);

166 
	`RCC_APB2PîùhRe£tCmd
(
RCC_APB2Pîùh_TIM8
, 
DISABLE
);

169 
	}
}

177 
	$TIM_TimeBa£Inô
(
TIM_Ty≥Def
* 
TIMx
, 
TIM_TimeBa£InôTy≥Def
* 
TIM_TimeBa£InôSåu˘
)

180 
	`as£π_∑øm
(
	`IS_TIM_123458_PERIPH
(
TIMx
));

181 
	`as£π_∑øm
(
	`IS_TIM_COUNTER_MODE
(
TIM_TimeBa£InôSåu˘
->
TIM_Cou¡îMode
));

182 
	`as£π_∑øm
(
	`IS_TIM_CKD_DIV
(
TIM_TimeBa£InôSåu˘
->
TIM_ClockDivisi⁄
));

184 
TIMx
->
CR1
 &
CR1_CKD_Mask
 & 
CR1_Cou¡îMode_Mask
;

185 
TIMx
->
CR1
 |(
uöt32_t
)
TIM_TimeBa£InôSåu˘
->
TIM_ClockDivisi⁄
 |

186 
TIM_TimeBa£InôSåu˘
->
TIM_Cou¡îMode
;

189 
TIMx
->
ARR
 = 
TIM_TimeBa£InôSåu˘
->
TIM_Pîiod
 ;

192 
TIMx
->
PSC
 = 
TIM_TimeBa£InôSåu˘
->
TIM_PªsˇÀr
;

194 i‡((((
uöt32_t
Ë
TIMx
Ë=
TIM1_BASE
Ë|| (((uöt32_tËTIMxË=
TIM8_BASE
))

197 
TIMx
->
RCR
 = 
TIM_TimeBa£InôSåu˘
->
TIM_Rïëôi⁄Cou¡î
;

201 
TIMx
->
EGR
 = 
TIM_PSCRñﬂdMode_Immedüã
;

202 
	}
}

210 
	$TIM_OC1Inô
(
TIM_Ty≥Def
* 
TIMx
, 
TIM_OCInôTy≥Def
* 
TIM_OCInôSåu˘
)

212 
uöt16_t
 
tmpccmrx
 = 0, 
tmpc˚r
 = 0, 
tmp¸2
 = 0;

215 
	`as£π_∑øm
(
	`IS_TIM_123458_PERIPH
(
TIMx
));

216 
	`as£π_∑øm
(
	`IS_TIM_OC_MODE
(
TIM_OCInôSåu˘
->
TIM_OCMode
));

217 
	`as£π_∑øm
(
	`IS_TIM_OUTPUT_STATE
(
TIM_OCInôSåu˘
->
TIM_OuçutSèã
));

218 
	`as£π_∑øm
(
	`IS_TIM_OC_POLARITY
(
TIM_OCInôSåu˘
->
TIM_OCPﬁ¨ôy
));

220 
TIMx
->
CCER
 &
CCER_CC1E_Re£t
;

223 
tmpc˚r
 = 
TIMx
->
CCER
;

225 
tmp¸2
 = 
TIMx
->
CR2
;

228 
tmpccmrx
 = 
TIMx
->
CCMR1
;

231 
tmpccmrx
 &
CCMR_OC13M_Mask
;

234 
tmpccmrx
 |
TIM_OCInôSåu˘
->
TIM_OCMode
;

237 
tmpc˚r
 &
CCER_CC1P_Re£t
;

239 
tmpc˚r
 |
TIM_OCInôSåu˘
->
TIM_OCPﬁ¨ôy
;

242 
tmpc˚r
 |
TIM_OCInôSåu˘
->
TIM_OuçutSèã
;

245 
TIMx
->
CCR1
 = 
TIM_OCInôSåu˘
->
TIM_Pul£
;

247 if(((
uöt32_t
Ë
TIMx
 =
TIM1_BASE
Ë|| ((uöt32_tËTIMx =
TIM8_BASE
))

249 
	`as£π_∑øm
(
	`IS_TIM_OUTPUTN_STATE
(
TIM_OCInôSåu˘
->
TIM_OuçutNSèã
));

250 
	`as£π_∑øm
(
	`IS_TIM_OCN_POLARITY
(
TIM_OCInôSåu˘
->
TIM_OCNPﬁ¨ôy
));

251 
	`as£π_∑øm
(
	`IS_TIM_OCNIDLE_STATE
(
TIM_OCInôSåu˘
->
TIM_OCNIdÀSèã
));

252 
	`as£π_∑øm
(
	`IS_TIM_OCIDLE_STATE
(
TIM_OCInôSåu˘
->
TIM_OCIdÀSèã
));

255 
tmpc˚r
 &
CCER_CC1NP_Re£t
;

257 
tmpc˚r
 |
TIM_OCInôSåu˘
->
TIM_OCNPﬁ¨ôy
;

259 
tmpc˚r
 &
CCER_CC1NE_Re£t
;

262 
tmpc˚r
 |
TIM_OCInôSåu˘
->
TIM_OuçutNSèã
;

264 
tmp¸2
 &
CR2_OIS1_Re£t
;

265 
tmp¸2
 &
CR2_OIS1N_Re£t
;

267 
tmp¸2
 |
TIM_OCInôSåu˘
->
TIM_OCIdÀSèã
;

269 
tmp¸2
 |
TIM_OCInôSåu˘
->
TIM_OCNIdÀSèã
;

272 
TIMx
->
CR2
 = 
tmp¸2
;

275 
TIMx
->
CCMR1
 = 
tmpccmrx
;

278 
TIMx
->
CCER
 = 
tmpc˚r
;

279 
	}
}

287 
	$TIM_OC2Inô
(
TIM_Ty≥Def
* 
TIMx
, 
TIM_OCInôTy≥Def
* 
TIM_OCInôSåu˘
)

289 
uöt16_t
 
tmpccmrx
 = 0, 
tmpc˚r
 = 0, 
tmp¸2
 = 0;

292 
	`as£π_∑øm
(
	`IS_TIM_123458_PERIPH
(
TIMx
));

293 
	`as£π_∑øm
(
	`IS_TIM_OC_MODE
(
TIM_OCInôSåu˘
->
TIM_OCMode
));

294 
	`as£π_∑øm
(
	`IS_TIM_OUTPUT_STATE
(
TIM_OCInôSåu˘
->
TIM_OuçutSèã
));

295 
	`as£π_∑øm
(
	`IS_TIM_OC_POLARITY
(
TIM_OCInôSåu˘
->
TIM_OCPﬁ¨ôy
));

297 
TIMx
->
CCER
 &
CCER_CC2E_Re£t
;

300 
tmpc˚r
 = 
TIMx
->
CCER
;

302 
tmp¸2
 = 
TIMx
->
CR2
;

305 
tmpccmrx
 = 
TIMx
->
CCMR1
;

308 
tmpccmrx
 &
CCMR_OC24M_Mask
;

311 
tmpccmrx
 |(
uöt16_t
)(
TIM_OCInôSåu˘
->
TIM_OCMode
 << 8);

314 
tmpc˚r
 &
CCER_CC2P_Re£t
;

316 
tmpc˚r
 |(
uöt16_t
)(
TIM_OCInôSåu˘
->
TIM_OCPﬁ¨ôy
 << 4);

319 
tmpc˚r
 |(
uöt16_t
)(
TIM_OCInôSåu˘
->
TIM_OuçutSèã
 << 4);

322 
TIMx
->
CCR2
 = 
TIM_OCInôSåu˘
->
TIM_Pul£
;

324 if(((
uöt32_t
Ë
TIMx
 =
TIM1_BASE
Ë|| ((uöt32_tËTIMx =
TIM8_BASE
))

326 
	`as£π_∑øm
(
	`IS_TIM_OUTPUTN_STATE
(
TIM_OCInôSåu˘
->
TIM_OuçutNSèã
));

327 
	`as£π_∑øm
(
	`IS_TIM_OCN_POLARITY
(
TIM_OCInôSåu˘
->
TIM_OCNPﬁ¨ôy
));

328 
	`as£π_∑øm
(
	`IS_TIM_OCNIDLE_STATE
(
TIM_OCInôSåu˘
->
TIM_OCNIdÀSèã
));

329 
	`as£π_∑øm
(
	`IS_TIM_OCIDLE_STATE
(
TIM_OCInôSåu˘
->
TIM_OCIdÀSèã
));

332 
tmpc˚r
 &
CCER_CC2NP_Re£t
;

334 
tmpc˚r
 |(
uöt16_t
)(
TIM_OCInôSåu˘
->
TIM_OCNPﬁ¨ôy
 << 4);

336 
tmpc˚r
 &
CCER_CC2NE_Re£t
;

339 
tmpc˚r
 |(
uöt16_t
)(
TIM_OCInôSåu˘
->
TIM_OuçutNSèã
 << 4);

341 
tmp¸2
 &
CR2_OIS2_Re£t
;

342 
tmp¸2
 &
CR2_OIS2N_Re£t
;

344 
tmp¸2
 |(
uöt16_t
)(
TIM_OCInôSåu˘
->
TIM_OCIdÀSèã
 << 2);

346 
tmp¸2
 |(
uöt16_t
)(
TIM_OCInôSåu˘
->
TIM_OCNIdÀSèã
 << 2);

349 
TIMx
->
CR2
 = 
tmp¸2
;

352 
TIMx
->
CCMR1
 = 
tmpccmrx
;

355 
TIMx
->
CCER
 = 
tmpc˚r
;

356 
	}
}

364 
	$TIM_OC3Inô
(
TIM_Ty≥Def
* 
TIMx
, 
TIM_OCInôTy≥Def
* 
TIM_OCInôSåu˘
)

366 
uöt16_t
 
tmpccmrx
 = 0, 
tmpc˚r
 = 0, 
tmp¸2
 = 0;

369 
	`as£π_∑øm
(
	`IS_TIM_123458_PERIPH
(
TIMx
));

370 
	`as£π_∑øm
(
	`IS_TIM_OC_MODE
(
TIM_OCInôSåu˘
->
TIM_OCMode
));

371 
	`as£π_∑øm
(
	`IS_TIM_OUTPUT_STATE
(
TIM_OCInôSåu˘
->
TIM_OuçutSèã
));

372 
	`as£π_∑øm
(
	`IS_TIM_OC_POLARITY
(
TIM_OCInôSåu˘
->
TIM_OCPﬁ¨ôy
));

374 
TIMx
->
CCER
 &
CCER_CC3E_Re£t
;

377 
tmpc˚r
 = 
TIMx
->
CCER
;

379 
tmp¸2
 = 
TIMx
->
CR2
;

382 
tmpccmrx
 = 
TIMx
->
CCMR2
;

385 
tmpccmrx
 &
CCMR_OC13M_Mask
;

388 
tmpccmrx
 |
TIM_OCInôSåu˘
->
TIM_OCMode
;

391 
tmpc˚r
 &
CCER_CC3P_Re£t
;

393 
tmpc˚r
 |(
uöt16_t
)(
TIM_OCInôSåu˘
->
TIM_OCPﬁ¨ôy
 << 8);

396 
tmpc˚r
 |(
uöt16_t
)(
TIM_OCInôSåu˘
->
TIM_OuçutSèã
 << 8);

399 
TIMx
->
CCR3
 = 
TIM_OCInôSåu˘
->
TIM_Pul£
;

401 if(((
uöt32_t
Ë
TIMx
 =
TIM1_BASE
Ë|| ((uöt32_tËTIMx =
TIM8_BASE
))

403 
	`as£π_∑øm
(
	`IS_TIM_OUTPUTN_STATE
(
TIM_OCInôSåu˘
->
TIM_OuçutNSèã
));

404 
	`as£π_∑øm
(
	`IS_TIM_OCN_POLARITY
(
TIM_OCInôSåu˘
->
TIM_OCNPﬁ¨ôy
));

405 
	`as£π_∑øm
(
	`IS_TIM_OCNIDLE_STATE
(
TIM_OCInôSåu˘
->
TIM_OCNIdÀSèã
));

406 
	`as£π_∑øm
(
	`IS_TIM_OCIDLE_STATE
(
TIM_OCInôSåu˘
->
TIM_OCIdÀSèã
));

409 
tmpc˚r
 &
CCER_CC3NP_Re£t
;

411 
tmpc˚r
 |(
uöt16_t
)(
TIM_OCInôSåu˘
->
TIM_OCNPﬁ¨ôy
 << 8);

413 
tmpc˚r
 &
CCER_CC3NE_Re£t
;

416 
tmpc˚r
 |(
uöt16_t
)(
TIM_OCInôSåu˘
->
TIM_OuçutNSèã
 << 8);

418 
tmp¸2
 &
CR2_OIS3_Re£t
;

419 
tmp¸2
 &
CR2_OIS3N_Re£t
;

421 
tmp¸2
 |(
uöt16_t
)(
TIM_OCInôSåu˘
->
TIM_OCIdÀSèã
 << 4);

423 
tmp¸2
 |(
uöt16_t
)(
TIM_OCInôSåu˘
->
TIM_OCNIdÀSèã
 << 4);

426 
TIMx
->
CR2
 = 
tmp¸2
;

429 
TIMx
->
CCMR2
 = 
tmpccmrx
;

432 
TIMx
->
CCER
 = 
tmpc˚r
;

433 
	}
}

441 
	$TIM_OC4Inô
(
TIM_Ty≥Def
* 
TIMx
, 
TIM_OCInôTy≥Def
* 
TIM_OCInôSåu˘
)

443 
uöt16_t
 
tmpccmrx
 = 0, 
tmpc˚r
 = 0, 
tmp¸2
 = 0;

446 
	`as£π_∑øm
(
	`IS_TIM_123458_PERIPH
(
TIMx
));

447 
	`as£π_∑øm
(
	`IS_TIM_OC_MODE
(
TIM_OCInôSåu˘
->
TIM_OCMode
));

448 
	`as£π_∑øm
(
	`IS_TIM_OUTPUT_STATE
(
TIM_OCInôSåu˘
->
TIM_OuçutSèã
));

449 
	`as£π_∑øm
(
	`IS_TIM_OC_POLARITY
(
TIM_OCInôSåu˘
->
TIM_OCPﬁ¨ôy
));

451 
TIMx
->
CCER
 &
CCER_CC4E_Re£t
;

454 
tmpc˚r
 = 
TIMx
->
CCER
;

456 
tmp¸2
 = 
TIMx
->
CR2
;

459 
tmpccmrx
 = 
TIMx
->
CCMR2
;

462 
tmpccmrx
 &
CCMR_OC24M_Mask
;

465 
tmpccmrx
 |(
uöt16_t
)(
TIM_OCInôSåu˘
->
TIM_OCMode
 << 8);

468 
tmpc˚r
 &
CCER_CC4P_Re£t
;

470 
tmpc˚r
 |(
uöt16_t
)(
TIM_OCInôSåu˘
->
TIM_OCPﬁ¨ôy
 << 12);

473 
tmpc˚r
 |(
uöt16_t
)(
TIM_OCInôSåu˘
->
TIM_OuçutSèã
 << 12);

476 
TIMx
->
CCR4
 = 
TIM_OCInôSåu˘
->
TIM_Pul£
;

478 if(((
uöt32_t
Ë
TIMx
 =
TIM1_BASE
Ë|| ((uöt32_tËTIMx =
TIM8_BASE
))

480 
	`as£π_∑øm
(
	`IS_TIM_OCIDLE_STATE
(
TIM_OCInôSåu˘
->
TIM_OCIdÀSèã
));

482 
tmp¸2
 &
CR2_OIS4_Re£t
;

484 
tmp¸2
 |(
uöt16_t
)(
TIM_OCInôSåu˘
->
TIM_OCIdÀSèã
 << 6);

487 
TIMx
->
CR2
 = 
tmp¸2
;

490 
TIMx
->
CCMR2
 = 
tmpccmrx
;

493 
TIMx
->
CCER
 = 
tmpc˚r
;

494 
	}
}

502 
	$TIM_ICInô
(
TIM_Ty≥Def
* 
TIMx
, 
TIM_ICInôTy≥Def
* 
TIM_ICInôSåu˘
)

505 
	`as£π_∑øm
(
	`IS_TIM_123458_PERIPH
(
TIMx
));

506 
	`as£π_∑øm
(
	`IS_TIM_CHANNEL
(
TIM_ICInôSåu˘
->
TIM_Ch™√l
));

507 
	`as£π_∑øm
(
	`IS_TIM_IC_POLARITY
(
TIM_ICInôSåu˘
->
TIM_ICPﬁ¨ôy
));

508 
	`as£π_∑øm
(
	`IS_TIM_IC_SELECTION
(
TIM_ICInôSåu˘
->
TIM_ICSñe˘i⁄
));

509 
	`as£π_∑øm
(
	`IS_TIM_IC_PRESCALER
(
TIM_ICInôSåu˘
->
TIM_ICPªsˇÀr
));

510 
	`as£π_∑øm
(
	`IS_TIM_IC_FILTER
(
TIM_ICInôSåu˘
->
TIM_ICFûãr
));

512 i‡(
TIM_ICInôSåu˘
->
TIM_Ch™√l
 =
TIM_Ch™√l_1
)

515 
	`TI1_C⁄fig
(
TIMx
, 
TIM_ICInôSåu˘
->
TIM_ICPﬁ¨ôy
,

516 
TIM_ICInôSåu˘
->
TIM_ICSñe˘i⁄
,

517 
TIM_ICInôSåu˘
->
TIM_ICFûãr
);

519 
	`TIM_SëIC1PªsˇÀr
(
TIMx
, 
TIM_ICInôSåu˘
->
TIM_ICPªsˇÀr
);

521 i‡(
TIM_ICInôSåu˘
->
TIM_Ch™√l
 =
TIM_Ch™√l_2
)

524 
	`TI2_C⁄fig
(
TIMx
, 
TIM_ICInôSåu˘
->
TIM_ICPﬁ¨ôy
,

525 
TIM_ICInôSåu˘
->
TIM_ICSñe˘i⁄
,

526 
TIM_ICInôSåu˘
->
TIM_ICFûãr
);

528 
	`TIM_SëIC2PªsˇÀr
(
TIMx
, 
TIM_ICInôSåu˘
->
TIM_ICPªsˇÀr
);

530 i‡(
TIM_ICInôSåu˘
->
TIM_Ch™√l
 =
TIM_Ch™√l_3
)

533 
	`TI3_C⁄fig
(
TIMx
, 
TIM_ICInôSåu˘
->
TIM_ICPﬁ¨ôy
,

534 
TIM_ICInôSåu˘
->
TIM_ICSñe˘i⁄
,

535 
TIM_ICInôSåu˘
->
TIM_ICFûãr
);

537 
	`TIM_SëIC3PªsˇÀr
(
TIMx
, 
TIM_ICInôSåu˘
->
TIM_ICPªsˇÀr
);

542 
	`TI4_C⁄fig
(
TIMx
, 
TIM_ICInôSåu˘
->
TIM_ICPﬁ¨ôy
,

543 
TIM_ICInôSåu˘
->
TIM_ICSñe˘i⁄
,

544 
TIM_ICInôSåu˘
->
TIM_ICFûãr
);

546 
	`TIM_SëIC4PªsˇÀr
(
TIMx
, 
TIM_ICInôSåu˘
->
TIM_ICPªsˇÀr
);

548 
	}
}

556 
	$TIM_PWMIC⁄fig
(
TIM_Ty≥Def
* 
TIMx
, 
TIM_ICInôTy≥Def
* 
TIM_ICInôSåu˘
)

558 
uöt16_t
 
ic›posôïﬁ¨ôy
 = 
TIM_ICPﬁ¨ôy_Risög
;

559 
uöt16_t
 
ic›posôe£À˘i⁄
 = 
TIM_ICSñe˘i⁄_Dúe˘TI
;

561 
	`as£π_∑øm
(
	`IS_TIM_123458_PERIPH
(
TIMx
));

563 i‡(
TIM_ICInôSåu˘
->
TIM_ICPﬁ¨ôy
 =
TIM_ICPﬁ¨ôy_Risög
)

565 
ic›posôïﬁ¨ôy
 = 
TIM_ICPﬁ¨ôy_FÆlög
;

569 
ic›posôïﬁ¨ôy
 = 
TIM_ICPﬁ¨ôy_Risög
;

572 i‡(
TIM_ICInôSåu˘
->
TIM_ICSñe˘i⁄
 =
TIM_ICSñe˘i⁄_Dúe˘TI
)

574 
ic›posôe£À˘i⁄
 = 
TIM_ICSñe˘i⁄_Indúe˘TI
;

578 
ic›posôe£À˘i⁄
 = 
TIM_ICSñe˘i⁄_Dúe˘TI
;

580 i‡(
TIM_ICInôSåu˘
->
TIM_Ch™√l
 =
TIM_Ch™√l_1
)

583 
	`TI1_C⁄fig
(
TIMx
, 
TIM_ICInôSåu˘
->
TIM_ICPﬁ¨ôy
, TIM_ICInôSåu˘->
TIM_ICSñe˘i⁄
,

584 
TIM_ICInôSåu˘
->
TIM_ICFûãr
);

586 
	`TIM_SëIC1PªsˇÀr
(
TIMx
, 
TIM_ICInôSåu˘
->
TIM_ICPªsˇÀr
);

588 
	`TI2_C⁄fig
(
TIMx
, 
ic›posôïﬁ¨ôy
, 
ic›posôe£À˘i⁄
, 
TIM_ICInôSåu˘
->
TIM_ICFûãr
);

590 
	`TIM_SëIC2PªsˇÀr
(
TIMx
, 
TIM_ICInôSåu˘
->
TIM_ICPªsˇÀr
);

595 
	`TI2_C⁄fig
(
TIMx
, 
TIM_ICInôSåu˘
->
TIM_ICPﬁ¨ôy
, TIM_ICInôSåu˘->
TIM_ICSñe˘i⁄
,

596 
TIM_ICInôSåu˘
->
TIM_ICFûãr
);

598 
	`TIM_SëIC2PªsˇÀr
(
TIMx
, 
TIM_ICInôSåu˘
->
TIM_ICPªsˇÀr
);

600 
	`TI1_C⁄fig
(
TIMx
, 
ic›posôïﬁ¨ôy
, 
ic›posôe£À˘i⁄
, 
TIM_ICInôSåu˘
->
TIM_ICFûãr
);

602 
	`TIM_SëIC1PªsˇÀr
(
TIMx
, 
TIM_ICInôSåu˘
->
TIM_ICPªsˇÀr
);

604 
	}
}

612 
	$TIM_BDTRC⁄fig
(
TIM_Ty≥Def
* 
TIMx
, 
TIM_BDTRInôTy≥Def
 *
TIM_BDTRInôSåu˘
)

615 
	`as£π_∑øm
(
	`IS_TIM_18_PERIPH
(
TIMx
));

616 
	`as£π_∑øm
(
	`IS_TIM_OSSR_STATE
(
TIM_BDTRInôSåu˘
->
TIM_OSSRSèã
));

617 
	`as£π_∑øm
(
	`IS_TIM_OSSI_STATE
(
TIM_BDTRInôSåu˘
->
TIM_OSSISèã
));

618 
	`as£π_∑øm
(
	`IS_TIM_LOCK_LEVEL
(
TIM_BDTRInôSåu˘
->
TIM_LOCKLevñ
));

619 
	`as£π_∑øm
(
	`IS_TIM_BREAK_STATE
(
TIM_BDTRInôSåu˘
->
TIM_Bªak
));

620 
	`as£π_∑øm
(
	`IS_TIM_BREAK_POLARITY
(
TIM_BDTRInôSåu˘
->
TIM_BªakPﬁ¨ôy
));

621 
	`as£π_∑øm
(
	`IS_TIM_AUTOMATIC_OUTPUT_STATE
(
TIM_BDTRInôSåu˘
->
TIM_Autom©icOuçut
));

623 
TIMx
->
BDTR
 = (
uöt32_t
)
TIM_BDTRInôSåu˘
->
TIM_OSSRSèã
 | TIM_BDTRInôSåu˘->
TIM_OSSISèã
 |

624 
TIM_BDTRInôSåu˘
->
TIM_LOCKLevñ
 | TIM_BDTRInôSåu˘->
TIM_DódTime
 |

625 
TIM_BDTRInôSåu˘
->
TIM_Bªak
 | TIM_BDTRInôSåu˘->
TIM_BªakPﬁ¨ôy
 |

626 
TIM_BDTRInôSåu˘
->
TIM_Autom©icOuçut
;

627 
	}
}

634 
	$TIM_TimeBa£Såu˘Inô
(
TIM_TimeBa£InôTy≥Def
* 
TIM_TimeBa£InôSåu˘
)

637 
TIM_TimeBa£InôSåu˘
->
TIM_Pîiod
 = 0xFFFF;

638 
TIM_TimeBa£InôSåu˘
->
TIM_PªsˇÀr
 = 0x0000;

639 
TIM_TimeBa£InôSåu˘
->
TIM_ClockDivisi⁄
 = 
TIM_CKD_DIV1
;

640 
TIM_TimeBa£InôSåu˘
->
TIM_Cou¡îMode
 = 
TIM_Cou¡îMode_Up
;

641 
TIM_TimeBa£InôSåu˘
->
TIM_Rïëôi⁄Cou¡î
 = 0x0000;

642 
	}
}

649 
	$TIM_OCSåu˘Inô
(
TIM_OCInôTy≥Def
* 
TIM_OCInôSåu˘
)

652 
TIM_OCInôSåu˘
->
TIM_OCMode
 = 
TIM_OCMode_Timög
;

653 
TIM_OCInôSåu˘
->
TIM_OuçutSèã
 = 
TIM_OuçutSèã_DißbÀ
;

654 
TIM_OCInôSåu˘
->
TIM_OuçutNSèã
 = 
TIM_OuçutNSèã_DißbÀ
;

655 
TIM_OCInôSåu˘
->
TIM_Pul£
 = 0x0000;

656 
TIM_OCInôSåu˘
->
TIM_OCPﬁ¨ôy
 = 
TIM_OCPﬁ¨ôy_High
;

657 
TIM_OCInôSåu˘
->
TIM_OCNPﬁ¨ôy
 = 
TIM_OCPﬁ¨ôy_High
;

658 
TIM_OCInôSåu˘
->
TIM_OCIdÀSèã
 = 
TIM_OCIdÀSèã_Re£t
;

659 
TIM_OCInôSåu˘
->
TIM_OCNIdÀSèã
 = 
TIM_OCNIdÀSèã_Re£t
;

660 
	}
}

667 
	$TIM_ICSåu˘Inô
(
TIM_ICInôTy≥Def
* 
TIM_ICInôSåu˘
)

670 
TIM_ICInôSåu˘
->
TIM_Ch™√l
 = 
TIM_Ch™√l_1
;

671 
TIM_ICInôSåu˘
->
TIM_ICPﬁ¨ôy
 = 
TIM_ICPﬁ¨ôy_Risög
;

672 
TIM_ICInôSåu˘
->
TIM_ICSñe˘i⁄
 = 
TIM_ICSñe˘i⁄_Dúe˘TI
;

673 
TIM_ICInôSåu˘
->
TIM_ICPªsˇÀr
 = 
TIM_ICPSC_DIV1
;

674 
TIM_ICInôSåu˘
->
TIM_ICFûãr
 = 0x00;

675 
	}
}

682 
	$TIM_BDTRSåu˘Inô
(
TIM_BDTRInôTy≥Def
* 
TIM_BDTRInôSåu˘
)

685 
TIM_BDTRInôSåu˘
->
TIM_OSSRSèã
 = 
TIM_OSSRSèã_DißbÀ
;

686 
TIM_BDTRInôSåu˘
->
TIM_OSSISèã
 = 
TIM_OSSISèã_DißbÀ
;

687 
TIM_BDTRInôSåu˘
->
TIM_LOCKLevñ
 = 
TIM_LOCKLevñ_OFF
;

688 
TIM_BDTRInôSåu˘
->
TIM_DódTime
 = 0x00;

689 
TIM_BDTRInôSåu˘
->
TIM_Bªak
 = 
TIM_Bªak_DißbÀ
;

690 
TIM_BDTRInôSåu˘
->
TIM_BªakPﬁ¨ôy
 = 
TIM_BªakPﬁ¨ôy_Low
;

691 
TIM_BDTRInôSåu˘
->
TIM_Autom©icOuçut
 = 
TIM_Autom©icOuçut_DißbÀ
;

692 
	}
}

701 
	$TIM_Cmd
(
TIM_Ty≥Def
* 
TIMx
, 
Fun˘i⁄ÆSèã
 
NewSèã
)

704 
	`as£π_∑øm
(
	`IS_TIM_ALL_PERIPH
(
TIMx
));

705 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

707 i‡(
NewSèã
 !
DISABLE
)

710 
TIMx
->
CR1
 |
CR1_CEN_Së
;

715 
TIMx
->
CR1
 &
CR1_CEN_Re£t
;

717 
	}
}

726 
	$TIM_CålPWMOuçuts
(
TIM_Ty≥Def
* 
TIMx
, 
Fun˘i⁄ÆSèã
 
NewSèã
)

729 
	`as£π_∑øm
(
	`IS_TIM_18_PERIPH
(
TIMx
));

730 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

731 i‡(
NewSèã
 !
DISABLE
)

734 
TIMx
->
BDTR
 |
BDTR_MOE_Së
;

739 
TIMx
->
BDTR
 &
BDTR_MOE_Re£t
;

741 
	}
}

763 
	$TIM_ITC⁄fig
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_IT
, 
Fun˘i⁄ÆSèã
 
NewSèã
)

766 
	`as£π_∑øm
(
	`IS_TIM_ALL_PERIPH
(
TIMx
));

767 
	`as£π_∑øm
(
	`IS_TIM_IT
(
TIM_IT
));

768 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

770 i‡(
NewSèã
 !
DISABLE
)

773 
TIMx
->
DIER
 |
TIM_IT
;

778 
TIMx
->
DIER
 &(
uöt16_t
)~
TIM_IT
;

780 
	}
}

800 
	$TIM_Gíî©eEvít
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_EvítSour˚
)

803 
	`as£π_∑øm
(
	`IS_TIM_ALL_PERIPH
(
TIMx
));

804 
	`as£π_∑øm
(
	`IS_TIM_EVENT_SOURCE
(
TIM_EvítSour˚
));

807 
TIMx
->
EGR
 = 
TIM_EvítSour˚
;

808 
	}
}

827 
	$TIM_DMAC⁄fig
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_DMABa£
, uöt16_à
TIM_DMABur°Lígth
)

830 
	`as£π_∑øm
(
	`IS_TIM_123458_PERIPH
(
TIMx
));

831 
	`as£π_∑øm
(
	`IS_TIM_DMA_BASE
(
TIM_DMABa£
));

832 
	`as£π_∑øm
(
	`IS_TIM_DMA_LENGTH
(
TIM_DMABur°Lígth
));

834 
TIMx
->
DCR
 = 
TIM_DMABa£
 | 
TIM_DMABur°Lígth
;

835 
	}
}

853 
	$TIM_DMACmd
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_DMASour˚
, 
Fun˘i⁄ÆSèã
 
NewSèã
)

856 
	`as£π_∑øm
(
	`IS_TIM_ALL_PERIPH
(
TIMx
));

857 
	`as£π_∑øm
(
	`IS_TIM_DMA_SOURCE
(
TIM_DMASour˚
));

858 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

860 i‡(
NewSèã
 !
DISABLE
)

863 
TIMx
->
DIER
 |
TIM_DMASour˚
;

868 
TIMx
->
DIER
 &(
uöt16_t
)~
TIM_DMASour˚
;

870 
	}
}

877 
	$TIM_I¡î«lClockC⁄fig
(
TIM_Ty≥Def
* 
TIMx
)

880 
	`as£π_∑øm
(
	`IS_TIM_123458_PERIPH
(
TIMx
));

882 
TIMx
->
SMCR
 &
SMCR_SMS_Mask
;

883 
	}
}

896 
	$TIM_ITRxExã∫ÆClockC⁄fig
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_I≈utTriggîSour˚
)

899 
	`as£π_∑øm
(
	`IS_TIM_123458_PERIPH
(
TIMx
));

900 
	`as£π_∑øm
(
	`IS_TIM_INTERNAL_TRIGGER_SELECTION
(
TIM_I≈utTriggîSour˚
));

902 
	`TIM_Sñe˘I≈utTriggî
(
TIMx
, 
TIM_I≈utTriggîSour˚
);

904 
TIMx
->
SMCR
 |
TIM_SœveMode_Exã∫Æ1
;

905 
	}
}

923 
	$TIM_TIxExã∫ÆClockC⁄fig
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_TIxExã∫ÆCLKSour˚
,

924 
uöt16_t
 
TIM_ICPﬁ¨ôy
, uöt16_à
ICFûãr
)

927 
	`as£π_∑øm
(
	`IS_TIM_123458_PERIPH
(
TIMx
));

928 
	`as£π_∑øm
(
	`IS_TIM_TIXCLK_SOURCE
(
TIM_TIxExã∫ÆCLKSour˚
));

929 
	`as£π_∑øm
(
	`IS_TIM_IC_POLARITY
(
TIM_ICPﬁ¨ôy
));

930 
	`as£π_∑øm
(
	`IS_TIM_IC_FILTER
(
ICFûãr
));

932 i‡(
TIM_TIxExã∫ÆCLKSour˚
 =
TIM_TIxExã∫ÆCLK1Sour˚_TI2
)

934 
	`TI2_C⁄fig
(
TIMx
, 
TIM_ICPﬁ¨ôy
, 
TIM_ICSñe˘i⁄_Dúe˘TI
, 
ICFûãr
);

938 
	`TI1_C⁄fig
(
TIMx
, 
TIM_ICPﬁ¨ôy
, 
TIM_ICSñe˘i⁄_Dúe˘TI
, 
ICFûãr
);

941 
	`TIM_Sñe˘I≈utTriggî
(
TIMx
, 
TIM_TIxExã∫ÆCLKSour˚
);

943 
TIMx
->
SMCR
 |
TIM_SœveMode_Exã∫Æ1
;

944 
	}
}

963 
	$TIM_ETRClockMode1C⁄fig
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_ExtTRGPªsˇÀr
, uöt16_à
TIM_ExtTRGPﬁ¨ôy
,

964 
uöt16_t
 
ExtTRGFûãr
)

966 
uöt16_t
 
tmpsm¸
 = 0;

968 
	`as£π_∑øm
(
	`IS_TIM_123458_PERIPH
(
TIMx
));

969 
	`as£π_∑øm
(
	`IS_TIM_EXT_PRESCALER
(
TIM_ExtTRGPªsˇÀr
));

970 
	`as£π_∑øm
(
	`IS_TIM_EXT_POLARITY
(
TIM_ExtTRGPﬁ¨ôy
));

971 
	`as£π_∑øm
(
	`IS_TIM_EXT_FILTER
(
ExtTRGFûãr
));

973 
	`TIM_ETRC⁄fig
(
TIMx
, 
TIM_ExtTRGPªsˇÀr
, 
TIM_ExtTRGPﬁ¨ôy
, 
ExtTRGFûãr
);

976 
tmpsm¸
 = 
TIMx
->
SMCR
;

978 
tmpsm¸
 &
SMCR_SMS_Mask
;

980 
tmpsm¸
 |
TIM_SœveMode_Exã∫Æ1
;

982 
tmpsm¸
 &
SMCR_TS_Mask
;

983 
tmpsm¸
 |
TIM_TS_ETRF
;

985 
TIMx
->
SMCR
 = 
tmpsm¸
;

986 
	}
}

1005 
	$TIM_ETRClockMode2C⁄fig
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_ExtTRGPªsˇÀr
,

1006 
uöt16_t
 
TIM_ExtTRGPﬁ¨ôy
, uöt16_à
ExtTRGFûãr
)

1009 
	`as£π_∑øm
(
	`IS_TIM_123458_PERIPH
(
TIMx
));

1010 
	`as£π_∑øm
(
	`IS_TIM_EXT_PRESCALER
(
TIM_ExtTRGPªsˇÀr
));

1011 
	`as£π_∑øm
(
	`IS_TIM_EXT_POLARITY
(
TIM_ExtTRGPﬁ¨ôy
));

1012 
	`as£π_∑øm
(
	`IS_TIM_EXT_FILTER
(
ExtTRGFûãr
));

1014 
	`TIM_ETRC⁄fig
(
TIMx
, 
TIM_ExtTRGPªsˇÀr
, 
TIM_ExtTRGPﬁ¨ôy
, 
ExtTRGFûãr
);

1016 
TIMx
->
SMCR
 |
SMCR_ECE_Së
;

1017 
	}
}

1036 
	$TIM_ETRC⁄fig
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_ExtTRGPªsˇÀr
, uöt16_à
TIM_ExtTRGPﬁ¨ôy
,

1037 
uöt16_t
 
ExtTRGFûãr
)

1039 
uöt16_t
 
tmpsm¸
 = 0;

1041 
	`as£π_∑øm
(
	`IS_TIM_123458_PERIPH
(
TIMx
));

1042 
	`as£π_∑øm
(
	`IS_TIM_EXT_PRESCALER
(
TIM_ExtTRGPªsˇÀr
));

1043 
	`as£π_∑øm
(
	`IS_TIM_EXT_POLARITY
(
TIM_ExtTRGPﬁ¨ôy
));

1044 
	`as£π_∑øm
(
	`IS_TIM_EXT_FILTER
(
ExtTRGFûãr
));

1045 
tmpsm¸
 = 
TIMx
->
SMCR
;

1047 
tmpsm¸
 &
SMCR_ETR_Mask
;

1049 
tmpsm¸
 |(
uöt16_t
)(
TIM_ExtTRGPªsˇÀr
 | (uöt16_t)(
TIM_ExtTRGPﬁ¨ôy
 | (uöt16_t)(
ExtTRGFûãr
 << (uint16_t)8)));

1051 
TIMx
->
SMCR
 = 
tmpsm¸
;

1052 
	}
}

1064 
	$TIM_PªsˇÀrC⁄fig
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
PªsˇÀr
, uöt16_à
TIM_PSCRñﬂdMode
)

1067 
	`as£π_∑øm
(
	`IS_TIM_ALL_PERIPH
(
TIMx
));

1068 
	`as£π_∑øm
(
	`IS_TIM_PRESCALER_RELOAD
(
TIM_PSCRñﬂdMode
));

1070 
TIMx
->
PSC
 = 
PªsˇÀr
;

1072 
TIMx
->
EGR
 = 
TIM_PSCRñﬂdMode
;

1073 
	}
}

1087 
	$TIM_Cou¡îModeC⁄fig
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_Cou¡îMode
)

1089 
uöt16_t
 
tmp¸1
 = 0;

1091 
	`as£π_∑øm
(
	`IS_TIM_123458_PERIPH
(
TIMx
));

1092 
	`as£π_∑øm
(
	`IS_TIM_COUNTER_MODE
(
TIM_Cou¡îMode
));

1093 
tmp¸1
 = 
TIMx
->
CR1
;

1095 
tmp¸1
 &
CR1_Cou¡îMode_Mask
;

1097 
tmp¸1
 |
TIM_Cou¡îMode
;

1099 
TIMx
->
CR1
 = 
tmp¸1
;

1100 
	}
}

1117 
	$TIM_Sñe˘I≈utTriggî
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_I≈utTriggîSour˚
)

1119 
uöt16_t
 
tmpsm¸
 = 0;

1121 
	`as£π_∑øm
(
	`IS_TIM_123458_PERIPH
(
TIMx
));

1122 
	`as£π_∑øm
(
	`IS_TIM_TRIGGER_SELECTION
(
TIM_I≈utTriggîSour˚
));

1124 
tmpsm¸
 = 
TIMx
->
SMCR
;

1126 
tmpsm¸
 &
SMCR_TS_Mask
;

1128 
tmpsm¸
 |
TIM_I≈utTriggîSour˚
;

1130 
TIMx
->
SMCR
 = 
tmpsm¸
;

1131 
	}
}

1151 
	$TIM_EncodîI¡îÁ˚C⁄fig
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_EncodîMode
,

1152 
uöt16_t
 
TIM_IC1Pﬁ¨ôy
, uöt16_à
TIM_IC2Pﬁ¨ôy
)

1154 
uöt16_t
 
tmpsm¸
 = 0;

1155 
uöt16_t
 
tmpccmr1
 = 0;

1156 
uöt16_t
 
tmpc˚r
 = 0;

1159 
	`as£π_∑øm
(
	`IS_TIM_123458_PERIPH
(
TIMx
));

1160 
	`as£π_∑øm
(
	`IS_TIM_ENCODER_MODE
(
TIM_EncodîMode
));

1161 
	`as£π_∑øm
(
	`IS_TIM_IC_POLARITY
(
TIM_IC1Pﬁ¨ôy
));

1162 
	`as£π_∑øm
(
	`IS_TIM_IC_POLARITY
(
TIM_IC2Pﬁ¨ôy
));

1165 
tmpsm¸
 = 
TIMx
->
SMCR
;

1168 
tmpccmr1
 = 
TIMx
->
CCMR1
;

1171 
tmpc˚r
 = 
TIMx
->
CCER
;

1174 
tmpsm¸
 &
SMCR_SMS_Mask
;

1175 
tmpsm¸
 |
TIM_EncodîMode
;

1178 
tmpccmr1
 &
CCMR_CC13S_Mask
 & 
CCMR_CC24S_Mask
;

1179 
tmpccmr1
 |
CCMR_TI13Dúe˘_Së
 | 
CCMR_TI24Dúe˘_Së
;

1182 
tmpc˚r
 &
CCER_CC1P_Re£t
 & 
CCER_CC2P_Re£t
;

1183 
tmpc˚r
 |(
uöt16_t
)(
TIM_IC1Pﬁ¨ôy
 | (uöt16_t)(
TIM_IC2Pﬁ¨ôy
 << (uint16_t)4));

1186 
TIMx
->
SMCR
 = 
tmpsm¸
;

1189 
TIMx
->
CCMR1
 = 
tmpccmr1
;

1192 
TIMx
->
CCER
 = 
tmpc˚r
;

1193 
	}
}

1204 
	$TIM_F‹˚dOC1C⁄fig
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_F‹˚dA˘i⁄
)

1206 
uöt16_t
 
tmpccmr1
 = 0;

1208 
	`as£π_∑øm
(
	`IS_TIM_123458_PERIPH
(
TIMx
));

1209 
	`as£π_∑øm
(
	`IS_TIM_FORCED_ACTION
(
TIM_F‹˚dA˘i⁄
));

1210 
tmpccmr1
 = 
TIMx
->
CCMR1
;

1212 
tmpccmr1
 &
CCMR_OC13M_Mask
;

1214 
tmpccmr1
 |
TIM_F‹˚dA˘i⁄
;

1216 
TIMx
->
CCMR1
 = 
tmpccmr1
;

1217 
	}
}

1228 
	$TIM_F‹˚dOC2C⁄fig
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_F‹˚dA˘i⁄
)

1230 
uöt16_t
 
tmpccmr1
 = 0;

1232 
	`as£π_∑øm
(
	`IS_TIM_123458_PERIPH
(
TIMx
));

1233 
	`as£π_∑øm
(
	`IS_TIM_FORCED_ACTION
(
TIM_F‹˚dA˘i⁄
));

1234 
tmpccmr1
 = 
TIMx
->
CCMR1
;

1236 
tmpccmr1
 &
CCMR_OC24M_Mask
;

1238 
tmpccmr1
 |(
uöt16_t
)(
TIM_F‹˚dA˘i⁄
 << 8);

1240 
TIMx
->
CCMR1
 = 
tmpccmr1
;

1241 
	}
}

1252 
	$TIM_F‹˚dOC3C⁄fig
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_F‹˚dA˘i⁄
)

1254 
uöt16_t
 
tmpccmr2
 = 0;

1256 
	`as£π_∑øm
(
	`IS_TIM_123458_PERIPH
(
TIMx
));

1257 
	`as£π_∑øm
(
	`IS_TIM_FORCED_ACTION
(
TIM_F‹˚dA˘i⁄
));

1258 
tmpccmr2
 = 
TIMx
->
CCMR2
;

1260 
tmpccmr2
 &
CCMR_OC13M_Mask
;

1262 
tmpccmr2
 |
TIM_F‹˚dA˘i⁄
;

1264 
TIMx
->
CCMR2
 = 
tmpccmr2
;

1265 
	}
}

1276 
	$TIM_F‹˚dOC4C⁄fig
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_F‹˚dA˘i⁄
)

1278 
uöt16_t
 
tmpccmr2
 = 0;

1280 
	`as£π_∑øm
(
	`IS_TIM_123458_PERIPH
(
TIMx
));

1281 
	`as£π_∑øm
(
	`IS_TIM_FORCED_ACTION
(
TIM_F‹˚dA˘i⁄
));

1282 
tmpccmr2
 = 
TIMx
->
CCMR2
;

1284 
tmpccmr2
 &
CCMR_OC24M_Mask
;

1286 
tmpccmr2
 |(
uöt16_t
)(
TIM_F‹˚dA˘i⁄
 << 8);

1288 
TIMx
->
CCMR2
 = 
tmpccmr2
;

1289 
	}
}

1298 
	$TIM_ARRPªlﬂdC⁄fig
(
TIM_Ty≥Def
* 
TIMx
, 
Fun˘i⁄ÆSèã
 
NewSèã
)

1301 
	`as£π_∑øm
(
	`IS_TIM_ALL_PERIPH
(
TIMx
));

1302 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

1303 i‡(
NewSèã
 !
DISABLE
)

1306 
TIMx
->
CR1
 |
CR1_ARPE_Së
;

1311 
TIMx
->
CR1
 &
CR1_ARPE_Re£t
;

1313 
	}
}

1322 
	$TIM_Sñe˘COM
(
TIM_Ty≥Def
* 
TIMx
, 
Fun˘i⁄ÆSèã
 
NewSèã
)

1325 
	`as£π_∑øm
(
	`IS_TIM_18_PERIPH
(
TIMx
));

1326 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

1327 i‡(
NewSèã
 !
DISABLE
)

1330 
TIMx
->
CR2
 |
CR2_CCUS_Së
;

1335 
TIMx
->
CR2
 &
CR2_CCUS_Re£t
;

1337 
	}
}

1346 
	$TIM_Sñe˘CCDMA
(
TIM_Ty≥Def
* 
TIMx
, 
Fun˘i⁄ÆSèã
 
NewSèã
)

1349 
	`as£π_∑øm
(
	`IS_TIM_123458_PERIPH
(
TIMx
));

1350 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

1351 i‡(
NewSèã
 !
DISABLE
)

1354 
TIMx
->
CR2
 |
CR2_CCDS_Së
;

1359 
TIMx
->
CR2
 &
CR2_CCDS_Re£t
;

1361 
	}
}

1370 
	$TIM_CCPªlﬂdC⁄åﬁ
(
TIM_Ty≥Def
* 
TIMx
, 
Fun˘i⁄ÆSèã
 
NewSèã
)

1373 
	`as£π_∑øm
(
	`IS_TIM_18_PERIPH
(
TIMx
));

1374 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

1375 i‡(
NewSèã
 !
DISABLE
)

1378 
TIMx
->
CR2
 |
CR2_CCPC_Së
;

1383 
TIMx
->
CR2
 &
CR2_CCPC_Re£t
;

1385 
	}
}

1396 
	$TIM_OC1PªlﬂdC⁄fig
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_OCPªlﬂd
)

1398 
uöt16_t
 
tmpccmr1
 = 0;

1400 
	`as£π_∑øm
(
	`IS_TIM_123458_PERIPH
(
TIMx
));

1401 
	`as£π_∑øm
(
	`IS_TIM_OCPRELOAD_STATE
(
TIM_OCPªlﬂd
));

1402 
tmpccmr1
 = 
TIMx
->
CCMR1
;

1404 
tmpccmr1
 &
CCMR_OC13PE_Re£t
;

1406 
tmpccmr1
 |
TIM_OCPªlﬂd
;

1408 
TIMx
->
CCMR1
 = 
tmpccmr1
;

1409 
	}
}

1420 
	$TIM_OC2PªlﬂdC⁄fig
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_OCPªlﬂd
)

1422 
uöt16_t
 
tmpccmr1
 = 0;

1424 
	`as£π_∑øm
(
	`IS_TIM_123458_PERIPH
(
TIMx
));

1425 
	`as£π_∑øm
(
	`IS_TIM_OCPRELOAD_STATE
(
TIM_OCPªlﬂd
));

1426 
tmpccmr1
 = 
TIMx
->
CCMR1
;

1428 
tmpccmr1
 &
CCMR_OC24PE_Re£t
;

1430 
tmpccmr1
 |(
uöt16_t
)(
TIM_OCPªlﬂd
 << 8);

1432 
TIMx
->
CCMR1
 = 
tmpccmr1
;

1433 
	}
}

1444 
	$TIM_OC3PªlﬂdC⁄fig
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_OCPªlﬂd
)

1446 
uöt16_t
 
tmpccmr2
 = 0;

1448 
	`as£π_∑øm
(
	`IS_TIM_123458_PERIPH
(
TIMx
));

1449 
	`as£π_∑øm
(
	`IS_TIM_OCPRELOAD_STATE
(
TIM_OCPªlﬂd
));

1450 
tmpccmr2
 = 
TIMx
->
CCMR2
;

1452 
tmpccmr2
 &
CCMR_OC13PE_Re£t
;

1454 
tmpccmr2
 |
TIM_OCPªlﬂd
;

1456 
TIMx
->
CCMR2
 = 
tmpccmr2
;

1457 
	}
}

1468 
	$TIM_OC4PªlﬂdC⁄fig
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_OCPªlﬂd
)

1470 
uöt16_t
 
tmpccmr2
 = 0;

1472 
	`as£π_∑øm
(
	`IS_TIM_123458_PERIPH
(
TIMx
));

1473 
	`as£π_∑øm
(
	`IS_TIM_OCPRELOAD_STATE
(
TIM_OCPªlﬂd
));

1474 
tmpccmr2
 = 
TIMx
->
CCMR2
;

1476 
tmpccmr2
 &
CCMR_OC24PE_Re£t
;

1478 
tmpccmr2
 |(
uöt16_t
)(
TIM_OCPªlﬂd
 << 8);

1480 
TIMx
->
CCMR2
 = 
tmpccmr2
;

1481 
	}
}

1492 
	$TIM_OC1Fa°C⁄fig
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_OCFa°
)

1494 
uöt16_t
 
tmpccmr1
 = 0;

1496 
	`as£π_∑øm
(
	`IS_TIM_123458_PERIPH
(
TIMx
));

1497 
	`as£π_∑øm
(
	`IS_TIM_OCFAST_STATE
(
TIM_OCFa°
));

1499 
tmpccmr1
 = 
TIMx
->
CCMR1
;

1501 
tmpccmr1
 &
CCMR_OC13FE_Re£t
;

1503 
tmpccmr1
 |
TIM_OCFa°
;

1505 
TIMx
->
CCMR1
 = 
tmpccmr1
;

1506 
	}
}

1517 
	$TIM_OC2Fa°C⁄fig
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_OCFa°
)

1519 
uöt16_t
 
tmpccmr1
 = 0;

1521 
	`as£π_∑øm
(
	`IS_TIM_123458_PERIPH
(
TIMx
));

1522 
	`as£π_∑øm
(
	`IS_TIM_OCFAST_STATE
(
TIM_OCFa°
));

1524 
tmpccmr1
 = 
TIMx
->
CCMR1
;

1526 
tmpccmr1
 &
CCMR_OC24FE_Re£t
;

1528 
tmpccmr1
 |(
uöt16_t
)(
TIM_OCFa°
 << 8);

1530 
TIMx
->
CCMR1
 = 
tmpccmr1
;

1531 
	}
}

1542 
	$TIM_OC3Fa°C⁄fig
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_OCFa°
)

1544 
uöt16_t
 
tmpccmr2
 = 0;

1546 
	`as£π_∑øm
(
	`IS_TIM_123458_PERIPH
(
TIMx
));

1547 
	`as£π_∑øm
(
	`IS_TIM_OCFAST_STATE
(
TIM_OCFa°
));

1549 
tmpccmr2
 = 
TIMx
->
CCMR2
;

1551 
tmpccmr2
 &
CCMR_OC13FE_Re£t
;

1553 
tmpccmr2
 |
TIM_OCFa°
;

1555 
TIMx
->
CCMR2
 = 
tmpccmr2
;

1556 
	}
}

1567 
	$TIM_OC4Fa°C⁄fig
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_OCFa°
)

1569 
uöt16_t
 
tmpccmr2
 = 0;

1571 
	`as£π_∑øm
(
	`IS_TIM_123458_PERIPH
(
TIMx
));

1572 
	`as£π_∑øm
(
	`IS_TIM_OCFAST_STATE
(
TIM_OCFa°
));

1574 
tmpccmr2
 = 
TIMx
->
CCMR2
;

1576 
tmpccmr2
 &
CCMR_OC24FE_Re£t
;

1578 
tmpccmr2
 |(
uöt16_t
)(
TIM_OCFa°
 << 8);

1580 
TIMx
->
CCMR2
 = 
tmpccmr2
;

1581 
	}
}

1592 
	$TIM_CÀ¨OC1Ref
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_OCCÀ¨
)

1594 
uöt16_t
 
tmpccmr1
 = 0;

1596 
	`as£π_∑øm
(
	`IS_TIM_123458_PERIPH
(
TIMx
));

1597 
	`as£π_∑øm
(
	`IS_TIM_OCCLEAR_STATE
(
TIM_OCCÀ¨
));

1598 
tmpccmr1
 = 
TIMx
->
CCMR1
;

1600 
tmpccmr1
 &
CCMR_OC13CE_Re£t
;

1602 
tmpccmr1
 |
TIM_OCCÀ¨
;

1604 
TIMx
->
CCMR1
 = 
tmpccmr1
;

1605 
	}
}

1616 
	$TIM_CÀ¨OC2Ref
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_OCCÀ¨
)

1618 
uöt16_t
 
tmpccmr1
 = 0;

1620 
	`as£π_∑øm
(
	`IS_TIM_123458_PERIPH
(
TIMx
));

1621 
	`as£π_∑øm
(
	`IS_TIM_OCCLEAR_STATE
(
TIM_OCCÀ¨
));

1622 
tmpccmr1
 = 
TIMx
->
CCMR1
;

1624 
tmpccmr1
 &
CCMR_OC24CE_Re£t
;

1626 
tmpccmr1
 |(
uöt16_t
)(
TIM_OCCÀ¨
 << 8);

1628 
TIMx
->
CCMR1
 = 
tmpccmr1
;

1629 
	}
}

1640 
	$TIM_CÀ¨OC3Ref
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_OCCÀ¨
)

1642 
uöt16_t
 
tmpccmr2
 = 0;

1644 
	`as£π_∑øm
(
	`IS_TIM_123458_PERIPH
(
TIMx
));

1645 
	`as£π_∑øm
(
	`IS_TIM_OCCLEAR_STATE
(
TIM_OCCÀ¨
));

1646 
tmpccmr2
 = 
TIMx
->
CCMR2
;

1648 
tmpccmr2
 &
CCMR_OC13CE_Re£t
;

1650 
tmpccmr2
 |
TIM_OCCÀ¨
;

1652 
TIMx
->
CCMR2
 = 
tmpccmr2
;

1653 
	}
}

1664 
	$TIM_CÀ¨OC4Ref
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_OCCÀ¨
)

1666 
uöt16_t
 
tmpccmr2
 = 0;

1668 
	`as£π_∑øm
(
	`IS_TIM_123458_PERIPH
(
TIMx
));

1669 
	`as£π_∑øm
(
	`IS_TIM_OCCLEAR_STATE
(
TIM_OCCÀ¨
));

1670 
tmpccmr2
 = 
TIMx
->
CCMR2
;

1672 
tmpccmr2
 &
CCMR_OC24CE_Re£t
;

1674 
tmpccmr2
 |(
uöt16_t
)(
TIM_OCCÀ¨
 << 8);

1676 
TIMx
->
CCMR2
 = 
tmpccmr2
;

1677 
	}
}

1688 
	$TIM_OC1Pﬁ¨ôyC⁄fig
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_OCPﬁ¨ôy
)

1690 
uöt16_t
 
tmpc˚r
 = 0;

1692 
	`as£π_∑øm
(
	`IS_TIM_123458_PERIPH
(
TIMx
));

1693 
	`as£π_∑øm
(
	`IS_TIM_OC_POLARITY
(
TIM_OCPﬁ¨ôy
));

1694 
tmpc˚r
 = 
TIMx
->
CCER
;

1696 
tmpc˚r
 &
CCER_CC1P_Re£t
;

1697 
tmpc˚r
 |
TIM_OCPﬁ¨ôy
;

1699 
TIMx
->
CCER
 = 
tmpc˚r
;

1700 
	}
}

1711 
	$TIM_OC1NPﬁ¨ôyC⁄fig
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_OCNPﬁ¨ôy
)

1713 
uöt16_t
 
tmpc˚r
 = 0;

1715 
	`as£π_∑øm
(
	`IS_TIM_18_PERIPH
(
TIMx
));

1716 
	`as£π_∑øm
(
	`IS_TIM_OCN_POLARITY
(
TIM_OCNPﬁ¨ôy
));

1718 
tmpc˚r
 = 
TIMx
->
CCER
;

1720 
tmpc˚r
 &
CCER_CC1NP_Re£t
;

1721 
tmpc˚r
 |
TIM_OCNPﬁ¨ôy
;

1723 
TIMx
->
CCER
 = 
tmpc˚r
;

1724 
	}
}

1735 
	$TIM_OC2Pﬁ¨ôyC⁄fig
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_OCPﬁ¨ôy
)

1737 
uöt16_t
 
tmpc˚r
 = 0;

1739 
	`as£π_∑øm
(
	`IS_TIM_123458_PERIPH
(
TIMx
));

1740 
	`as£π_∑øm
(
	`IS_TIM_OC_POLARITY
(
TIM_OCPﬁ¨ôy
));

1741 
tmpc˚r
 = 
TIMx
->
CCER
;

1743 
tmpc˚r
 &
CCER_CC2P_Re£t
;

1744 
tmpc˚r
 |(
uöt16_t
)(
TIM_OCPﬁ¨ôy
 << 4);

1746 
TIMx
->
CCER
 = 
tmpc˚r
;

1747 
	}
}

1758 
	$TIM_OC2NPﬁ¨ôyC⁄fig
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_OCNPﬁ¨ôy
)

1760 
uöt16_t
 
tmpc˚r
 = 0;

1762 
	`as£π_∑øm
(
	`IS_TIM_18_PERIPH
(
TIMx
));

1763 
	`as£π_∑øm
(
	`IS_TIM_OCN_POLARITY
(
TIM_OCNPﬁ¨ôy
));

1765 
tmpc˚r
 = 
TIMx
->
CCER
;

1767 
tmpc˚r
 &
CCER_CC2NP_Re£t
;

1768 
tmpc˚r
 |(
uöt16_t
)(
TIM_OCNPﬁ¨ôy
 << 4);

1770 
TIMx
->
CCER
 = 
tmpc˚r
;

1771 
	}
}

1782 
	$TIM_OC3Pﬁ¨ôyC⁄fig
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_OCPﬁ¨ôy
)

1784 
uöt16_t
 
tmpc˚r
 = 0;

1786 
	`as£π_∑øm
(
	`IS_TIM_123458_PERIPH
(
TIMx
));

1787 
	`as£π_∑øm
(
	`IS_TIM_OC_POLARITY
(
TIM_OCPﬁ¨ôy
));

1788 
tmpc˚r
 = 
TIMx
->
CCER
;

1790 
tmpc˚r
 &
CCER_CC3P_Re£t
;

1791 
tmpc˚r
 |(
uöt16_t
)(
TIM_OCPﬁ¨ôy
 << 8);

1793 
TIMx
->
CCER
 = 
tmpc˚r
;

1794 
	}
}

1805 
	$TIM_OC3NPﬁ¨ôyC⁄fig
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_OCNPﬁ¨ôy
)

1807 
uöt16_t
 
tmpc˚r
 = 0;

1810 
	`as£π_∑øm
(
	`IS_TIM_18_PERIPH
(
TIMx
));

1811 
	`as£π_∑øm
(
	`IS_TIM_OCN_POLARITY
(
TIM_OCNPﬁ¨ôy
));

1813 
tmpc˚r
 = 
TIMx
->
CCER
;

1815 
tmpc˚r
 &
CCER_CC3NP_Re£t
;

1816 
tmpc˚r
 |(
uöt16_t
)(
TIM_OCNPﬁ¨ôy
 << 8);

1818 
TIMx
->
CCER
 = 
tmpc˚r
;

1819 
	}
}

1830 
	$TIM_OC4Pﬁ¨ôyC⁄fig
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_OCPﬁ¨ôy
)

1832 
uöt16_t
 
tmpc˚r
 = 0;

1834 
	`as£π_∑øm
(
	`IS_TIM_123458_PERIPH
(
TIMx
));

1835 
	`as£π_∑øm
(
	`IS_TIM_OC_POLARITY
(
TIM_OCPﬁ¨ôy
));

1836 
tmpc˚r
 = 
TIMx
->
CCER
;

1838 
tmpc˚r
 &
CCER_CC4P_Re£t
;

1839 
tmpc˚r
 |(
uöt16_t
)(
TIM_OCPﬁ¨ôy
 << 12);

1841 
TIMx
->
CCER
 = 
tmpc˚r
;

1842 
	}
}

1857 
	$TIM_CCxCmd
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_Ch™√l
, uöt16_à
TIM_CCx
)

1859 
uöt16_t
 
tmp
 = 0;

1862 
	`as£π_∑øm
(
	`IS_TIM_123458_PERIPH
(
TIMx
));

1863 
	`as£π_∑øm
(
	`IS_TIM_CHANNEL
(
TIM_Ch™√l
));

1864 
	`as£π_∑øm
(
	`IS_TIM_CCX
(
TIM_CCx
));

1866 
tmp
 = 
CCER_CCE_Së
 << 
TIM_Ch™√l
;

1869 
TIMx
->
CCER
 &(
uöt16_t
)~ 
tmp
;

1872 
TIMx
->
CCER
 |(
uöt16_t
)(
TIM_CCx
 << 
TIM_Ch™√l
);

1873 
	}
}

1887 
	$TIM_CCxNCmd
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_Ch™√l
, uöt16_à
TIM_CCxN
)

1889 
uöt16_t
 
tmp
 = 0;

1892 
	`as£π_∑øm
(
	`IS_TIM_18_PERIPH
(
TIMx
));

1893 
	`as£π_∑øm
(
	`IS_TIM_COMPLEMENTARY_CHANNEL
(
TIM_Ch™√l
));

1894 
	`as£π_∑øm
(
	`IS_TIM_CCXN
(
TIM_CCxN
));

1896 
tmp
 = 
CCER_CCNE_Së
 << 
TIM_Ch™√l
;

1899 
TIMx
->
CCER
 &(
uöt16_t
Ë~
tmp
;

1902 
TIMx
->
CCER
 |(
uöt16_t
)(
TIM_CCxN
 << 
TIM_Ch™√l
);

1903 
	}
}

1927 
	$TIM_Sñe˘OCxM
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_Ch™√l
, uöt16_à
TIM_OCMode
)

1929 
uöt32_t
 
tmp
 = 0;

1930 
uöt16_t
 
tmp1
 = 0;

1933 
	`as£π_∑øm
(
	`IS_TIM_123458_PERIPH
(
TIMx
));

1934 
	`as£π_∑øm
(
	`IS_TIM_CHANNEL
(
TIM_Ch™√l
));

1935 
	`as£π_∑øm
(
	`IS_TIM_OCM
(
TIM_OCMode
));

1937 
tmp
 = (
uöt32_t
Ë
TIMx
;

1938 
tmp
 +
CCMR_Off£t
;

1940 
tmp1
 = 
CCER_CCE_Së
 << (
uöt16_t
)
TIM_Ch™√l
;

1943 
TIMx
->
CCER
 &(
uöt16_t
Ë~
tmp1
;

1945 if((
TIM_Ch™√l
 =
TIM_Ch™√l_1
Ë||(TIM_Ch™√»=
TIM_Ch™√l_3
))

1947 
tmp
 +(
TIM_Ch™√l
>>1);

1950 *(
__IO
 
uöt32_t
 *Ë
tmp
 &
CCMR_OC13M_Mask
;

1953 *(
__IO
 
uöt32_t
 *Ë
tmp
 |
TIM_OCMode
;

1957 
tmp
 +(
uöt16_t
)(
TIM_Ch™√l
 - (uint16_t)4)>> (uint16_t)1;

1960 *(
__IO
 
uöt32_t
 *Ë
tmp
 &
CCMR_OC24M_Mask
;

1963 *(
__IO
 
uöt32_t
 *Ë
tmp
 |(
uöt16_t
)(
TIM_OCMode
 << 8);

1965 
	}
}

1974 
	$TIM_Upd©eDißbÀC⁄fig
(
TIM_Ty≥Def
* 
TIMx
, 
Fun˘i⁄ÆSèã
 
NewSèã
)

1977 
	`as£π_∑øm
(
	`IS_TIM_ALL_PERIPH
(
TIMx
));

1978 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

1979 i‡(
NewSèã
 !
DISABLE
)

1982 
TIMx
->
CR1
 |
CR1_UDIS_Së
;

1987 
TIMx
->
CR1
 &
CR1_UDIS_Re£t
;

1989 
	}
}

2000 
	$TIM_Upd©eReque°C⁄fig
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_Upd©eSour˚
)

2003 
	`as£π_∑øm
(
	`IS_TIM_ALL_PERIPH
(
TIMx
));

2004 
	`as£π_∑øm
(
	`IS_TIM_UPDATE_SOURCE
(
TIM_Upd©eSour˚
));

2005 i‡(
TIM_Upd©eSour˚
 !
TIM_Upd©eSour˚_GlobÆ
)

2008 
TIMx
->
CR1
 |
CR1_URS_Së
;

2013 
TIMx
->
CR1
 &
CR1_URS_Re£t
;

2015 
	}
}

2024 
	$TIM_Sñe˘HÆlSís‹
(
TIM_Ty≥Def
* 
TIMx
, 
Fun˘i⁄ÆSèã
 
NewSèã
)

2027 
	`as£π_∑øm
(
	`IS_TIM_123458_PERIPH
(
TIMx
));

2028 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

2029 i‡(
NewSèã
 !
DISABLE
)

2032 
TIMx
->
CR2
 |
CR2_TI1S_Së
;

2037 
TIMx
->
CR2
 &
CR2_TI1S_Re£t
;

2039 
	}
}

2050 
	$TIM_Sñe˘O√Pul£Mode
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_OPMode
)

2053 
	`as£π_∑øm
(
	`IS_TIM_ALL_PERIPH
(
TIMx
));

2054 
	`as£π_∑øm
(
	`IS_TIM_OPM_MODE
(
TIM_OPMode
));

2056 
TIMx
->
CR1
 &
CR1_OPM_Re£t
;

2058 
TIMx
->
CR1
 |
TIM_OPMode
;

2059 
	}
}

2081 
	$TIM_Sñe˘OuçutTriggî
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_TRGOSour˚
)

2084 
	`as£π_∑øm
(
	`IS_TIM_ALL_PERIPH
(
TIMx
));

2085 
	`as£π_∑øm
(
	`IS_TIM_TRGO_SOURCE
(
TIM_TRGOSour˚
));

2087 
TIMx
->
CR2
 &
CR2_MMS_Mask
;

2089 
TIMx
->
CR2
 |
TIM_TRGOSour˚
;

2090 
	}
}

2103 
	$TIM_Sñe˘SœveMode
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_SœveMode
)

2106 
	`as£π_∑øm
(
	`IS_TIM_123458_PERIPH
(
TIMx
));

2107 
	`as£π_∑øm
(
	`IS_TIM_SLAVE_MODE
(
TIM_SœveMode
));

2109 
TIMx
->
SMCR
 &
SMCR_SMS_Mask
;

2111 
TIMx
->
SMCR
 |
TIM_SœveMode
;

2112 
	}
}

2123 
	$TIM_Sñe˘Ma°îSœveMode
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_Ma°îSœveMode
)

2126 
	`as£π_∑øm
(
	`IS_TIM_123458_PERIPH
(
TIMx
));

2127 
	`as£π_∑øm
(
	`IS_TIM_MSM_STATE
(
TIM_Ma°îSœveMode
));

2129 
TIMx
->
SMCR
 &
SMCR_MSM_Re£t
;

2132 
TIMx
->
SMCR
 |
TIM_Ma°îSœveMode
;

2133 
	}
}

2141 
	$TIM_SëCou¡î
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
Cou¡î
)

2144 
	`as£π_∑øm
(
	`IS_TIM_ALL_PERIPH
(
TIMx
));

2146 
TIMx
->
CNT
 = 
Cou¡î
;

2147 
	}
}

2155 
	$TIM_SëAut‹ñﬂd
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
Aut‹ñﬂd
)

2158 
	`as£π_∑øm
(
	`IS_TIM_ALL_PERIPH
(
TIMx
));

2160 
TIMx
->
ARR
 = 
Aut‹ñﬂd
;

2161 
	}
}

2169 
	$TIM_SëCom∑ª1
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
Com∑ª1
)

2172 
	`as£π_∑øm
(
	`IS_TIM_123458_PERIPH
(
TIMx
));

2174 
TIMx
->
CCR1
 = 
Com∑ª1
;

2175 
	}
}

2183 
	$TIM_SëCom∑ª2
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
Com∑ª2
)

2186 
	`as£π_∑øm
(
	`IS_TIM_123458_PERIPH
(
TIMx
));

2188 
TIMx
->
CCR2
 = 
Com∑ª2
;

2189 
	}
}

2197 
	$TIM_SëCom∑ª3
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
Com∑ª3
)

2200 
	`as£π_∑øm
(
	`IS_TIM_123458_PERIPH
(
TIMx
));

2202 
TIMx
->
CCR3
 = 
Com∑ª3
;

2203 
	}
}

2211 
	$TIM_SëCom∑ª4
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
Com∑ª4
)

2214 
	`as£π_∑øm
(
	`IS_TIM_123458_PERIPH
(
TIMx
));

2216 
TIMx
->
CCR4
 = 
Com∑ª4
;

2217 
	}
}

2230 
	$TIM_SëIC1PªsˇÀr
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_ICPSC
)

2233 
	`as£π_∑øm
(
	`IS_TIM_123458_PERIPH
(
TIMx
));

2234 
	`as£π_∑øm
(
	`IS_TIM_IC_PRESCALER
(
TIM_ICPSC
));

2236 
TIMx
->
CCMR1
 &
CCMR_IC13PSC_Mask
;

2238 
TIMx
->
CCMR1
 |
TIM_ICPSC
;

2239 
	}
}

2252 
	$TIM_SëIC2PªsˇÀr
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_ICPSC
)

2255 
	`as£π_∑øm
(
	`IS_TIM_123458_PERIPH
(
TIMx
));

2256 
	`as£π_∑øm
(
	`IS_TIM_IC_PRESCALER
(
TIM_ICPSC
));

2258 
TIMx
->
CCMR1
 &
CCMR_IC24PSC_Mask
;

2260 
TIMx
->
CCMR1
 |(
uöt16_t
)(
TIM_ICPSC
 << 8);

2261 
	}
}

2274 
	$TIM_SëIC3PªsˇÀr
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_ICPSC
)

2277 
	`as£π_∑øm
(
	`IS_TIM_123458_PERIPH
(
TIMx
));

2278 
	`as£π_∑øm
(
	`IS_TIM_IC_PRESCALER
(
TIM_ICPSC
));

2280 
TIMx
->
CCMR2
 &
CCMR_IC13PSC_Mask
;

2282 
TIMx
->
CCMR2
 |
TIM_ICPSC
;

2283 
	}
}

2296 
	$TIM_SëIC4PªsˇÀr
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_ICPSC
)

2299 
	`as£π_∑øm
(
	`IS_TIM_123458_PERIPH
(
TIMx
));

2300 
	`as£π_∑øm
(
	`IS_TIM_IC_PRESCALER
(
TIM_ICPSC
));

2302 
TIMx
->
CCMR2
 &
CCMR_IC24PSC_Mask
;

2304 
TIMx
->
CCMR2
 |(
uöt16_t
)(
TIM_ICPSC
 << 8);

2305 
	}
}

2317 
	$TIM_SëClockDivisi⁄
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_CKD
)

2320 
	`as£π_∑øm
(
	`IS_TIM_123458_PERIPH
(
TIMx
));

2321 
	`as£π_∑øm
(
	`IS_TIM_CKD_DIV
(
TIM_CKD
));

2323 
TIMx
->
CR1
 &
CR1_CKD_Mask
;

2325 
TIMx
->
CR1
 |
TIM_CKD
;

2326 
	}
}

2333 
uöt16_t
 
	$TIM_GëC≠tuª1
(
TIM_Ty≥Def
* 
TIMx
)

2336 
	`as£π_∑øm
(
	`IS_TIM_123458_PERIPH
(
TIMx
));

2338  
TIMx
->
CCR1
;

2339 
	}
}

2346 
uöt16_t
 
	$TIM_GëC≠tuª2
(
TIM_Ty≥Def
* 
TIMx
)

2349 
	`as£π_∑øm
(
	`IS_TIM_123458_PERIPH
(
TIMx
));

2351  
TIMx
->
CCR2
;

2352 
	}
}

2359 
uöt16_t
 
	$TIM_GëC≠tuª3
(
TIM_Ty≥Def
* 
TIMx
)

2362 
	`as£π_∑øm
(
	`IS_TIM_123458_PERIPH
(
TIMx
));

2364  
TIMx
->
CCR3
;

2365 
	}
}

2372 
uöt16_t
 
	$TIM_GëC≠tuª4
(
TIM_Ty≥Def
* 
TIMx
)

2375 
	`as£π_∑øm
(
	`IS_TIM_123458_PERIPH
(
TIMx
));

2377  
TIMx
->
CCR4
;

2378 
	}
}

2385 
uöt16_t
 
	$TIM_GëCou¡î
(
TIM_Ty≥Def
* 
TIMx
)

2388 
	`as£π_∑øm
(
	`IS_TIM_ALL_PERIPH
(
TIMx
));

2390  
TIMx
->
CNT
;

2391 
	}
}

2398 
uöt16_t
 
	$TIM_GëPªsˇÀr
(
TIM_Ty≥Def
* 
TIMx
)

2401 
	`as£π_∑øm
(
	`IS_TIM_ALL_PERIPH
(
TIMx
));

2403  
TIMx
->
PSC
;

2404 
	}
}

2428 
FœgSètus
 
	$TIM_GëFœgSètus
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_FLAG
)

2430 
ITSètus
 
bô°©us
 = 
RESET
;

2432 
	`as£π_∑øm
(
	`IS_TIM_ALL_PERIPH
(
TIMx
));

2433 
	`as£π_∑øm
(
	`IS_TIM_GET_FLAG
(
TIM_FLAG
));

2435 i‡((
TIMx
->
SR
 & 
TIM_FLAG
Ë!(
uöt16_t
)
RESET
)

2437 
bô°©us
 = 
SET
;

2441 
bô°©us
 = 
RESET
;

2443  
bô°©us
;

2444 
	}
}

2468 
	$TIM_CÀ¨Fœg
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_FLAG
)

2471 
	`as£π_∑øm
(
	`IS_TIM_ALL_PERIPH
(
TIMx
));

2472 
	`as£π_∑øm
(
	`IS_TIM_CLEAR_FLAG
(
TIM_FLAG
));

2475 
TIMx
->
SR
 = (
uöt16_t
)~
TIM_FLAG
;

2476 
	}
}

2496 
ITSètus
 
	$TIM_GëITSètus
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_IT
)

2498 
ITSètus
 
bô°©us
 = 
RESET
;

2499 
uöt16_t
 
ô°©us
 = 0x0, 
ôíabÀ
 = 0x0;

2501 
	`as£π_∑øm
(
	`IS_TIM_ALL_PERIPH
(
TIMx
));

2502 
	`as£π_∑øm
(
	`IS_TIM_GET_IT
(
TIM_IT
));

2504 
ô°©us
 = 
TIMx
->
SR
 & 
TIM_IT
;

2506 
ôíabÀ
 = 
TIMx
->
DIER
 & 
TIM_IT
;

2507 i‡((
ô°©us
 !(
uöt16_t
)
RESET
Ë&& (
ôíabÀ
 != (uint16_t)RESET))

2509 
bô°©us
 = 
SET
;

2513 
bô°©us
 = 
RESET
;

2515  
bô°©us
;

2516 
	}
}

2536 
	$TIM_CÀ¨ITPídögBô
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_IT
)

2539 
	`as£π_∑øm
(
	`IS_TIM_ALL_PERIPH
(
TIMx
));

2540 
	`as£π_∑øm
(
	`IS_TIM_IT
(
TIM_IT
));

2542 
TIMx
->
SR
 = (
uöt16_t
)~
TIM_IT
;

2543 
	}
}

2561 
	$TI1_C⁄fig
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_ICPﬁ¨ôy
, uöt16_à
TIM_ICSñe˘i⁄
,

2562 
uöt16_t
 
TIM_ICFûãr
)

2564 
uöt16_t
 
tmpccmr1
 = 0, 
tmpc˚r
 = 0;

2566 
TIMx
->
CCER
 &
CCER_CC1E_Re£t
;

2567 
tmpccmr1
 = 
TIMx
->
CCMR1
;

2568 
tmpc˚r
 = 
TIMx
->
CCER
;

2570 
tmpccmr1
 &
CCMR_CC13S_Mask
 & 
CCMR_IC13F_Mask
;

2571 
tmpccmr1
 |(
uöt16_t
)(
TIM_ICSñe˘i⁄
 | (uöt16_t)(
TIM_ICFûãr
 << (uint16_t)4));

2573 
tmpc˚r
 &
CCER_CC1P_Re£t
;

2574 
tmpc˚r
 |(
uöt16_t
)(
TIM_ICPﬁ¨ôy
 | (uöt16_t)
CCER_CC1E_Së
);

2576 
TIMx
->
CCMR1
 = 
tmpccmr1
;

2577 
TIMx
->
CCER
 = 
tmpc˚r
;

2578 
	}
}

2596 
	$TI2_C⁄fig
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_ICPﬁ¨ôy
, uöt16_à
TIM_ICSñe˘i⁄
,

2597 
uöt16_t
 
TIM_ICFûãr
)

2599 
uöt16_t
 
tmpccmr1
 = 0, 
tmpc˚r
 = 0, 
tmp
 = 0;

2601 
TIMx
->
CCER
 &
CCER_CC2E_Re£t
;

2602 
tmpccmr1
 = 
TIMx
->
CCMR1
;

2603 
tmpc˚r
 = 
TIMx
->
CCER
;

2604 
tmp
 = (
uöt16_t
)(
TIM_ICPﬁ¨ôy
 << 4);

2606 
tmpccmr1
 &
CCMR_CC24S_Mask
 & 
CCMR_IC24F_Mask
;

2607 
tmpccmr1
 |(
uöt16_t
)(
TIM_ICFûãr
 << 12);

2608 
tmpccmr1
 |(
uöt16_t
)(
TIM_ICSñe˘i⁄
 << 8);

2610 
tmpc˚r
 &
CCER_CC2P_Re£t
;

2611 
tmpc˚r
 |(
uöt16_t
)(
tmp
 | (uöt16_t)
CCER_CC2E_Së
);

2613 
TIMx
->
CCMR1
 = 
tmpccmr1
 ;

2614 
TIMx
->
CCER
 = 
tmpc˚r
;

2615 
	}
}

2633 
	$TI3_C⁄fig
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_ICPﬁ¨ôy
, uöt16_à
TIM_ICSñe˘i⁄
,

2634 
uöt16_t
 
TIM_ICFûãr
)

2636 
uöt16_t
 
tmpccmr2
 = 0, 
tmpc˚r
 = 0, 
tmp
 = 0;

2638 
TIMx
->
CCER
 &
CCER_CC3E_Re£t
;

2639 
tmpccmr2
 = 
TIMx
->
CCMR2
;

2640 
tmpc˚r
 = 
TIMx
->
CCER
;

2641 
tmp
 = (
uöt16_t
)(
TIM_ICPﬁ¨ôy
 << 8);

2643 
tmpccmr2
 &
CCMR_CC13S_Mask
 & 
CCMR_IC13F_Mask
;

2644 
tmpccmr2
 |(
uöt16_t
)(
TIM_ICSñe˘i⁄
 | (uöt16_t)(
TIM_ICFûãr
 << (uint16_t)4));

2646 
tmpc˚r
 &
CCER_CC3P_Re£t
;

2647 
tmpc˚r
 |(
uöt16_t
)(
tmp
 | (uöt16_t)
CCER_CC3E_Së
);

2649 
TIMx
->
CCMR2
 = 
tmpccmr2
;

2650 
TIMx
->
CCER
 = 
tmpc˚r
;

2651 
	}
}

2669 
	$TI4_C⁄fig
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_ICPﬁ¨ôy
, uöt16_à
TIM_ICSñe˘i⁄
,

2670 
uöt16_t
 
TIM_ICFûãr
)

2672 
uöt16_t
 
tmpccmr2
 = 0, 
tmpc˚r
 = 0, 
tmp
 = 0;

2675 
TIMx
->
CCER
 &
CCER_CC4E_Re£t
;

2676 
tmpccmr2
 = 
TIMx
->
CCMR2
;

2677 
tmpc˚r
 = 
TIMx
->
CCER
;

2678 
tmp
 = (
uöt16_t
)(
TIM_ICPﬁ¨ôy
 << 12);

2681 
tmpccmr2
 &
CCMR_CC24S_Mask
 & 
CCMR_IC24F_Mask
;

2682 
tmpccmr2
 |(
uöt16_t
)(
TIM_ICSñe˘i⁄
 << 8);

2683 
tmpccmr2
 |(
uöt16_t
)(
TIM_ICFûãr
 << 12);

2686 
tmpc˚r
 &
CCER_CC4P_Re£t
;

2687 
tmpc˚r
 |(
uöt16_t
)(
tmp
 | (uöt16_t)
CCER_CC4E_Së
);

2689 
TIMx
->
CCMR2
 = 
tmpccmr2
;

2690 
TIMx
->
CCER
 = 
tmpc˚r
 ;

2691 
	}
}

	@Source/STM32F10x_StdPeriph_Driver/src/stm32f10x_usart.c

22 
	~"°m32f10x_ußπ.h
"

23 
	~"°m32f10x_rcc.h
"

28 
	#CR1_UE_Së
 ((
uöt16_t
)0x2000Ë

	)

29 
	#CR1_UE_Re£t
 ((
uöt16_t
)0xDFFFË

	)

31 
	#CR1_WAKE_Mask
 ((
uöt16_t
)0xF7FFË

	)

33 
	#CR1_RWU_Së
 ((
uöt16_t
)0x0002Ë

	)

34 
	#CR1_RWU_Re£t
 ((
uöt16_t
)0xFFFDË

	)

35 
	#CR1_SBK_Së
 ((
uöt16_t
)0x0001Ë

	)

36 
	#CR1_CLEAR_Mask
 ((
uöt16_t
)0xE9F3Ë

	)

37 
	#CR2_Addªss_Mask
 ((
uöt16_t
)0xFFF0Ë

	)

39 
	#CR2_LINEN_Së
 ((
uöt16_t
)0x4000Ë

	)

40 
	#CR2_LINEN_Re£t
 ((
uöt16_t
)0xBFFFË

	)

42 
	#CR2_LBDL_Mask
 ((
uöt16_t
)0xFFDFË

	)

43 
	#CR2_STOP_CLEAR_Mask
 ((
uöt16_t
)0xCFFFË

	)

44 
	#CR2_CLOCK_CLEAR_Mask
 ((
uöt16_t
)0xF0FFË

	)

46 
	#CR3_SCEN_Së
 ((
uöt16_t
)0x0020Ë

	)

47 
	#CR3_SCEN_Re£t
 ((
uöt16_t
)0xFFDFË

	)

49 
	#CR3_NACK_Së
 ((
uöt16_t
)0x0010Ë

	)

50 
	#CR3_NACK_Re£t
 ((
uöt16_t
)0xFFEFË

	)

52 
	#CR3_HDSEL_Së
 ((
uöt16_t
)0x0008Ë

	)

53 
	#CR3_HDSEL_Re£t
 ((
uöt16_t
)0xFFF7Ë

	)

55 
	#CR3_IRLP_Mask
 ((
uöt16_t
)0xFFFBË

	)

56 
	#CR3_CLEAR_Mask
 ((
uöt16_t
)0xFCFFË

	)

58 
	#CR3_IREN_Së
 ((
uöt16_t
)0x0002Ë

	)

59 
	#CR3_IREN_Re£t
 ((
uöt16_t
)0xFFFDË

	)

60 
	#GTPR_LSB_Mask
 ((
uöt16_t
)0x00FFË

	)

61 
	#GTPR_MSB_Mask
 ((
uöt16_t
)0xFF00Ë

	)

62 
	#IT_Mask
 ((
uöt16_t
)0x001FË

	)

75 
	$USART_DeInô
(
USART_Ty≥Def
* 
USARTx
)

78 
	`as£π_∑øm
(
	`IS_USART_ALL_PERIPH
(
USARTx
));

80 i‡(
USARTx
 =
USART1
)

82 
	`RCC_APB2PîùhRe£tCmd
(
RCC_APB2Pîùh_USART1
, 
ENABLE
);

83 
	`RCC_APB2PîùhRe£tCmd
(
RCC_APB2Pîùh_USART1
, 
DISABLE
);

85 i‡(
USARTx
 =
USART2
)

87 
	`RCC_APB1PîùhRe£tCmd
(
RCC_APB1Pîùh_USART2
, 
ENABLE
);

88 
	`RCC_APB1PîùhRe£tCmd
(
RCC_APB1Pîùh_USART2
, 
DISABLE
);

90 i‡(
USARTx
 =
USART3
)

92 
	`RCC_APB1PîùhRe£tCmd
(
RCC_APB1Pîùh_USART3
, 
ENABLE
);

93 
	`RCC_APB1PîùhRe£tCmd
(
RCC_APB1Pîùh_USART3
, 
DISABLE
);

95 i‡(
USARTx
 =
UART4
)

97 
	`RCC_APB1PîùhRe£tCmd
(
RCC_APB1Pîùh_UART4
, 
ENABLE
);

98 
	`RCC_APB1PîùhRe£tCmd
(
RCC_APB1Pîùh_UART4
, 
DISABLE
);

102 i‡(
USARTx
 =
UART5
)

104 
	`RCC_APB1PîùhRe£tCmd
(
RCC_APB1Pîùh_UART5
, 
ENABLE
);

105 
	`RCC_APB1PîùhRe£tCmd
(
RCC_APB1Pîùh_UART5
, 
DISABLE
);

108 
	}
}

117 
	$USART_Inô
(
USART_Ty≥Def
* 
USARTx
, 
USART_InôTy≥Def
* 
USART_InôSåu˘
)

119 
uöt32_t
 
tm¥eg
 = 0x00, 
≠b˛ock
 = 0x00;

120 
uöt32_t
 
öãgîdividî
 = 0x00;

121 
uöt32_t
 
‰a˘i⁄Ædividî
 = 0x00;

122 
uöt32_t
 
ußπxba£
 = 0;

123 
RCC_ClocksTy≥Def
 
RCC_ClocksSètus
;

125 
	`as£π_∑øm
(
	`IS_USART_ALL_PERIPH
(
USARTx
));

126 
	`as£π_∑øm
(
	`IS_USART_BAUDRATE
(
USART_InôSåu˘
->
USART_BaudR©e
));

127 
	`as£π_∑øm
(
	`IS_USART_WORD_LENGTH
(
USART_InôSåu˘
->
USART_W‹dLígth
));

128 
	`as£π_∑øm
(
	`IS_USART_STOPBITS
(
USART_InôSåu˘
->
USART_St›Bôs
));

129 
	`as£π_∑øm
(
	`IS_USART_PARITY
(
USART_InôSåu˘
->
USART_P¨ôy
));

130 
	`as£π_∑øm
(
	`IS_USART_MODE
(
USART_InôSåu˘
->
USART_Mode
));

131 
	`as£π_∑øm
(
	`IS_USART_HARDWARE_FLOW_CONTROL
(
USART_InôSåu˘
->
USART_H¨dw¨eFlowC⁄åﬁ
));

133 i‡(
USART_InôSåu˘
->
USART_H¨dw¨eFlowC⁄åﬁ
 !
USART_H¨dw¨eFlowC⁄åﬁ_N⁄e
)

135 
	`as£π_∑øm
(
	`IS_USART_123_PERIPH
(
USARTx
));

138 
ußπxba£
 = (
uöt32_t
)
USARTx
;

141 
tm¥eg
 = 
USARTx
->
CR2
;

143 
tm¥eg
 &
CR2_STOP_CLEAR_Mask
;

146 
tm¥eg
 |(
uöt32_t
)
USART_InôSåu˘
->
USART_St›Bôs
;

149 
USARTx
->
CR2
 = (
uöt16_t
)
tm¥eg
;

152 
tm¥eg
 = 
USARTx
->
CR1
;

154 
tm¥eg
 &
CR1_CLEAR_Mask
;

159 
tm¥eg
 |(
uöt32_t
)
USART_InôSåu˘
->
USART_W‹dLígth
 | USART_InôSåu˘->
USART_P¨ôy
 |

160 
USART_InôSåu˘
->
USART_Mode
;

162 
USARTx
->
CR1
 = (
uöt16_t
)
tm¥eg
;

165 
tm¥eg
 = 
USARTx
->
CR3
;

167 
tm¥eg
 &
CR3_CLEAR_Mask
;

170 
tm¥eg
 |
USART_InôSåu˘
->
USART_H¨dw¨eFlowC⁄åﬁ
;

172 
USARTx
->
CR3
 = (
uöt16_t
)
tm¥eg
;

176 
	`RCC_GëClocksFªq
(&
RCC_ClocksSètus
);

177 i‡(
ußπxba£
 =
USART1_BASE
)

179 
≠b˛ock
 = 
RCC_ClocksSètus
.
PCLK2_Fªquícy
;

183 
≠b˛ock
 = 
RCC_ClocksSètus
.
PCLK1_Fªquícy
;

186 
öãgîdividî
 = ((0x19 * 
≠b˛ock
Ë/ (0x04 * (
USART_InôSåu˘
->
USART_BaudR©e
)));

187 
tm¥eg
 = (
öãgîdividî
 / 0x64) << 0x04;

189 
‰a˘i⁄Ædividî
 = 
öãgîdividî
 - (0x64 * (
tm¥eg
 >> 0x04));

190 
tm¥eg
 |((((
‰a˘i⁄Ædividî
 * 0x10Ë+ 0x32Ë/ 0x64)Ë& ((
uöt8_t
)0x0F);

192 
USARTx
->
BRR
 = (
uöt16_t
)
tm¥eg
;

193 
	}
}

200 
	$USART_Såu˘Inô
(
USART_InôTy≥Def
* 
USART_InôSåu˘
)

203 
USART_InôSåu˘
->
USART_BaudR©e
 = 9600;

204 
USART_InôSåu˘
->
USART_W‹dLígth
 = 
USART_W‹dLígth_8b
;

205 
USART_InôSåu˘
->
USART_St›Bôs
 = 
USART_St›Bôs_1
;

206 
USART_InôSåu˘
->
USART_P¨ôy
 = 
USART_P¨ôy_No
 ;

207 
USART_InôSåu˘
->
USART_Mode
 = 
USART_Mode_Rx
 | 
USART_Mode_Tx
;

208 
USART_InôSåu˘
->
USART_H¨dw¨eFlowC⁄åﬁ
 = 
USART_H¨dw¨eFlowC⁄åﬁ_N⁄e
;

209 
	}
}

218 
	$USART_ClockInô
(
USART_Ty≥Def
* 
USARTx
, 
USART_ClockInôTy≥Def
* 
USART_ClockInôSåu˘
)

220 
uöt32_t
 
tm¥eg
 = 0x00;

222 
	`as£π_∑øm
(
	`IS_USART_123_PERIPH
(
USARTx
));

223 
	`as£π_∑øm
(
	`IS_USART_CLOCK
(
USART_ClockInôSåu˘
->
USART_Clock
));

224 
	`as£π_∑øm
(
	`IS_USART_CPOL
(
USART_ClockInôSåu˘
->
USART_CPOL
));

225 
	`as£π_∑øm
(
	`IS_USART_CPHA
(
USART_ClockInôSåu˘
->
USART_CPHA
));

226 
	`as£π_∑øm
(
	`IS_USART_LASTBIT
(
USART_ClockInôSåu˘
->
USART_La°Bô
));

229 
tm¥eg
 = 
USARTx
->
CR2
;

231 
tm¥eg
 &
CR2_CLOCK_CLEAR_Mask
;

237 
tm¥eg
 |(
uöt32_t
)
USART_ClockInôSåu˘
->
USART_Clock
 | USART_ClockInôSåu˘->
USART_CPOL
 |

238 
USART_ClockInôSåu˘
->
USART_CPHA
 | USART_ClockInôSåu˘->
USART_La°Bô
;

240 
USARTx
->
CR2
 = (
uöt16_t
)
tm¥eg
;

241 
	}
}

248 
	$USART_ClockSåu˘Inô
(
USART_ClockInôTy≥Def
* 
USART_ClockInôSåu˘
)

251 
USART_ClockInôSåu˘
->
USART_Clock
 = 
USART_Clock_DißbÀ
;

252 
USART_ClockInôSåu˘
->
USART_CPOL
 = 
USART_CPOL_Low
;

253 
USART_ClockInôSåu˘
->
USART_CPHA
 = 
USART_CPHA_1Edge
;

254 
USART_ClockInôSåu˘
->
USART_La°Bô
 = 
USART_La°Bô_DißbÀ
;

255 
	}
}

265 
	$USART_Cmd
(
USART_Ty≥Def
* 
USARTx
, 
Fun˘i⁄ÆSèã
 
NewSèã
)

268 
	`as£π_∑øm
(
	`IS_USART_ALL_PERIPH
(
USARTx
));

269 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

271 i‡(
NewSèã
 !
DISABLE
)

274 
USARTx
->
CR1
 |
CR1_UE_Së
;

279 
USARTx
->
CR1
 &
CR1_UE_Re£t
;

281 
	}
}

301 
	$USART_ITC⁄fig
(
USART_Ty≥Def
* 
USARTx
, 
uöt16_t
 
USART_IT
, 
Fun˘i⁄ÆSèã
 
NewSèã
)

303 
uöt32_t
 
ußπªg
 = 0x00, 
ôpos
 = 0x00, 
ômask
 = 0x00;

304 
uöt32_t
 
ußπxba£
 = 0x00;

306 
	`as£π_∑øm
(
	`IS_USART_ALL_PERIPH
(
USARTx
));

307 
	`as£π_∑øm
(
	`IS_USART_CONFIG_IT
(
USART_IT
));

308 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

310 i‡(
USART_IT
 =
USART_IT_CTS
)

312 
	`as£π_∑øm
(
	`IS_USART_123_PERIPH
(
USARTx
));

315 
ußπxba£
 = (
uöt32_t
)
USARTx
;

318 
ußπªg
 = (((
uöt8_t
)
USART_IT
) >> 0x05);

321 
ôpos
 = 
USART_IT
 & 
IT_Mask
;

322 
ômask
 = (((
uöt32_t
)0x01Ë<< 
ôpos
);

324 i‡(
ußπªg
 == 0x01)

326 
ußπxba£
 += 0x0C;

328 i‡(
ußπªg
 == 0x02)

330 
ußπxba£
 += 0x10;

334 
ußπxba£
 += 0x14;

336 i‡(
NewSèã
 !
DISABLE
)

338 *(
__IO
 
uöt32_t
*)
ußπxba£
 |
ômask
;

342 *(
__IO
 
uöt32_t
*)
ußπxba£
 &~
ômask
;

344 
	}
}

359 
	$USART_DMACmd
(
USART_Ty≥Def
* 
USARTx
, 
uöt16_t
 
USART_DMAReq
, 
Fun˘i⁄ÆSèã
 
NewSèã
)

362 
	`as£π_∑øm
(
	`IS_USART_1234_PERIPH
(
USARTx
));

363 
	`as£π_∑øm
(
	`IS_USART_DMAREQ
(
USART_DMAReq
));

364 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

365 i‡(
NewSèã
 !
DISABLE
)

368 
USARTx
->
CR3
 |
USART_DMAReq
;

373 
USARTx
->
CR3
 &(
uöt16_t
)~
USART_DMAReq
;

375 
	}
}

384 
	$USART_SëAddªss
(
USART_Ty≥Def
* 
USARTx
, 
uöt8_t
 
USART_Addªss
)

387 
	`as£π_∑øm
(
	`IS_USART_ALL_PERIPH
(
USARTx
));

388 
	`as£π_∑øm
(
	`IS_USART_ADDRESS
(
USART_Addªss
));

391 
USARTx
->
CR2
 &
CR2_Addªss_Mask
;

393 
USARTx
->
CR2
 |
USART_Addªss
;

394 
	}
}

406 
	$USART_WakeUpC⁄fig
(
USART_Ty≥Def
* 
USARTx
, 
uöt16_t
 
USART_WakeUp
)

409 
	`as£π_∑øm
(
	`IS_USART_ALL_PERIPH
(
USARTx
));

410 
	`as£π_∑øm
(
	`IS_USART_WAKEUP
(
USART_WakeUp
));

412 
USARTx
->
CR1
 &
CR1_WAKE_Mask
;

413 
USARTx
->
CR1
 |
USART_WakeUp
;

414 
	}
}

424 
	$USART_Re˚ivîWakeUpCmd
(
USART_Ty≥Def
* 
USARTx
, 
Fun˘i⁄ÆSèã
 
NewSèã
)

427 
	`as£π_∑øm
(
	`IS_USART_ALL_PERIPH
(
USARTx
));

428 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

430 i‡(
NewSèã
 !
DISABLE
)

433 
USARTx
->
CR1
 |
CR1_RWU_Së
;

438 
USARTx
->
CR1
 &
CR1_RWU_Re£t
;

440 
	}
}

452 
	$USART_LINBªakDëe˘LígthC⁄fig
(
USART_Ty≥Def
* 
USARTx
, 
uöt16_t
 
USART_LINBªakDëe˘Lígth
)

455 
	`as£π_∑øm
(
	`IS_USART_ALL_PERIPH
(
USARTx
));

456 
	`as£π_∑øm
(
	`IS_USART_LIN_BREAK_DETECT_LENGTH
(
USART_LINBªakDëe˘Lígth
));

458 
USARTx
->
CR2
 &
CR2_LBDL_Mask
;

459 
USARTx
->
CR2
 |
USART_LINBªakDëe˘Lígth
;

460 
	}
}

470 
	$USART_LINCmd
(
USART_Ty≥Def
* 
USARTx
, 
Fun˘i⁄ÆSèã
 
NewSèã
)

473 
	`as£π_∑øm
(
	`IS_USART_ALL_PERIPH
(
USARTx
));

474 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

476 i‡(
NewSèã
 !
DISABLE
)

479 
USARTx
->
CR2
 |
CR2_LINEN_Së
;

484 
USARTx
->
CR2
 &
CR2_LINEN_Re£t
;

486 
	}
}

495 
	$USART_SídD©a
(
USART_Ty≥Def
* 
USARTx
, 
uöt16_t
 
D©a
)

498 
	`as£π_∑øm
(
	`IS_USART_ALL_PERIPH
(
USARTx
));

499 
	`as£π_∑øm
(
	`IS_USART_DATA
(
D©a
));

502 
USARTx
->
DR
 = (
D©a
 & (
uöt16_t
)0x01FF);

503 
	}
}

511 
uöt16_t
 
	$USART_Re˚iveD©a
(
USART_Ty≥Def
* 
USARTx
)

514 
	`as£π_∑øm
(
	`IS_USART_ALL_PERIPH
(
USARTx
));

517  (
uöt16_t
)(
USARTx
->
DR
 & (uint16_t)0x01FF);

518 
	}
}

526 
	$USART_SídBªak
(
USART_Ty≥Def
* 
USARTx
)

529 
	`as£π_∑øm
(
	`IS_USART_ALL_PERIPH
(
USARTx
));

532 
USARTx
->
CR1
 |
CR1_SBK_Së
;

533 
	}
}

542 
	$USART_SëGu¨dTime
(
USART_Ty≥Def
* 
USARTx
, 
uöt8_t
 
USART_Gu¨dTime
)

545 
	`as£π_∑øm
(
	`IS_USART_123_PERIPH
(
USARTx
));

548 
USARTx
->
GTPR
 &
GTPR_LSB_Mask
;

550 
USARTx
->
GTPR
 |(
uöt16_t
)((uöt16_t)
USART_Gu¨dTime
 << 0x08);

551 
	}
}

561 
	$USART_SëPªsˇÀr
(
USART_Ty≥Def
* 
USARTx
, 
uöt8_t
 
USART_PªsˇÀr
)

564 
	`as£π_∑øm
(
	`IS_USART_ALL_PERIPH
(
USARTx
));

567 
USARTx
->
GTPR
 &
GTPR_MSB_Mask
;

569 
USARTx
->
GTPR
 |
USART_PªsˇÀr
;

570 
	}
}

580 
	$USART_Sm¨tC¨dCmd
(
USART_Ty≥Def
* 
USARTx
, 
Fun˘i⁄ÆSèã
 
NewSèã
)

583 
	`as£π_∑øm
(
	`IS_USART_123_PERIPH
(
USARTx
));

584 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

585 i‡(
NewSèã
 !
DISABLE
)

588 
USARTx
->
CR3
 |
CR3_SCEN_Së
;

593 
USARTx
->
CR3
 &
CR3_SCEN_Re£t
;

595 
	}
}

605 
	$USART_Sm¨tC¨dNACKCmd
(
USART_Ty≥Def
* 
USARTx
, 
Fun˘i⁄ÆSèã
 
NewSèã
)

608 
	`as£π_∑øm
(
	`IS_USART_123_PERIPH
(
USARTx
));

609 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

610 i‡(
NewSèã
 !
DISABLE
)

613 
USARTx
->
CR3
 |
CR3_NACK_Së
;

618 
USARTx
->
CR3
 &
CR3_NACK_Re£t
;

620 
	}
}

630 
	$USART_HÆfDu∂exCmd
(
USART_Ty≥Def
* 
USARTx
, 
Fun˘i⁄ÆSèã
 
NewSèã
)

633 
	`as£π_∑øm
(
	`IS_USART_ALL_PERIPH
(
USARTx
));

634 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

636 i‡(
NewSèã
 !
DISABLE
)

639 
USARTx
->
CR3
 |
CR3_HDSEL_Së
;

644 
USARTx
->
CR3
 &
CR3_HDSEL_Re£t
;

646 
	}
}

658 
	$USART_IrDAC⁄fig
(
USART_Ty≥Def
* 
USARTx
, 
uöt16_t
 
USART_IrDAMode
)

661 
	`as£π_∑øm
(
	`IS_USART_ALL_PERIPH
(
USARTx
));

662 
	`as£π_∑øm
(
	`IS_USART_IRDA_MODE
(
USART_IrDAMode
));

664 
USARTx
->
CR3
 &
CR3_IRLP_Mask
;

665 
USARTx
->
CR3
 |
USART_IrDAMode
;

666 
	}
}

676 
	$USART_IrDACmd
(
USART_Ty≥Def
* 
USARTx
, 
Fun˘i⁄ÆSèã
 
NewSèã
)

679 
	`as£π_∑øm
(
	`IS_USART_ALL_PERIPH
(
USARTx
));

680 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

682 i‡(
NewSèã
 !
DISABLE
)

685 
USARTx
->
CR3
 |
CR3_IREN_Së
;

690 
USARTx
->
CR3
 &
CR3_IREN_Re£t
;

692 
	}
}

712 
FœgSètus
 
	$USART_GëFœgSètus
(
USART_Ty≥Def
* 
USARTx
, 
uöt16_t
 
USART_FLAG
)

714 
FœgSètus
 
bô°©us
 = 
RESET
;

716 
	`as£π_∑øm
(
	`IS_USART_ALL_PERIPH
(
USARTx
));

717 
	`as£π_∑øm
(
	`IS_USART_FLAG
(
USART_FLAG
));

719 i‡(
USART_FLAG
 =
USART_FLAG_CTS
)

721 
	`as£π_∑øm
(
	`IS_USART_123_PERIPH
(
USARTx
));

724 i‡((
USARTx
->
SR
 & 
USART_FLAG
Ë!(
uöt16_t
)
RESET
)

726 
bô°©us
 = 
SET
;

730 
bô°©us
 = 
RESET
;

732  
bô°©us
;

733 
	}
}

757 
	$USART_CÀ¨Fœg
(
USART_Ty≥Def
* 
USARTx
, 
uöt16_t
 
USART_FLAG
)

760 
	`as£π_∑øm
(
	`IS_USART_ALL_PERIPH
(
USARTx
));

761 
	`as£π_∑øm
(
	`IS_USART_CLEAR_FLAG
(
USART_FLAG
));

763 i‡((
USART_FLAG
 & 
USART_FLAG_CTS
) == USART_FLAG_CTS)

765 
	`as£π_∑øm
(
	`IS_USART_123_PERIPH
(
USARTx
));

768 
USARTx
->
SR
 = (
uöt16_t
)~
USART_FLAG
;

769 
	}
}

789 
ITSètus
 
	$USART_GëITSètus
(
USART_Ty≥Def
* 
USARTx
, 
uöt16_t
 
USART_IT
)

791 
uöt32_t
 
bôpos
 = 0x00, 
ômask
 = 0x00, 
ußπªg
 = 0x00;

792 
ITSètus
 
bô°©us
 = 
RESET
;

794 
	`as£π_∑øm
(
	`IS_USART_ALL_PERIPH
(
USARTx
));

795 
	`as£π_∑øm
(
	`IS_USART_GET_IT
(
USART_IT
));

797 i‡(
USART_IT
 =
USART_IT_CTS
)

799 
	`as£π_∑øm
(
	`IS_USART_123_PERIPH
(
USARTx
));

803 
ußπªg
 = (((
uöt8_t
)
USART_IT
) >> 0x05);

805 
ômask
 = 
USART_IT
 & 
IT_Mask
;

806 
ômask
 = (
uöt32_t
)0x01 << itmask;

808 i‡(
ußπªg
 == 0x01)

810 
ômask
 &
USARTx
->
CR1
;

812 i‡(
ußπªg
 == 0x02)

814 
ômask
 &
USARTx
->
CR2
;

818 
ômask
 &
USARTx
->
CR3
;

821 
bôpos
 = 
USART_IT
 >> 0x08;

822 
bôpos
 = (
uöt32_t
)0x01 << bitpos;

823 
bôpos
 &
USARTx
->
SR
;

824 i‡((
ômask
 !(
uöt16_t
)
RESET
)&&(
bôpos
 != (uint16_t)RESET))

826 
bô°©us
 = 
SET
;

830 
bô°©us
 = 
RESET
;

833  
bô°©us
;

834 
	}
}

858 
	$USART_CÀ¨ITPídögBô
(
USART_Ty≥Def
* 
USARTx
, 
uöt16_t
 
USART_IT
)

860 
uöt16_t
 
bôpos
 = 0x00, 
ômask
 = 0x00;

862 
	`as£π_∑øm
(
	`IS_USART_ALL_PERIPH
(
USARTx
));

863 
	`as£π_∑øm
(
	`IS_USART_CLEAR_IT
(
USART_IT
));

865 i‡(
USART_IT
 =
USART_IT_CTS
)

867 
	`as£π_∑øm
(
	`IS_USART_123_PERIPH
(
USARTx
));

870 
bôpos
 = 
USART_IT
 >> 0x08;

871 
ômask
 = ((
uöt16_t
)0x01 << (uöt16_t)
bôpos
);

872 
USARTx
->
SR
 = (
uöt16_t
)~
ômask
;

873 
	}
}

	@Source/STM32F10x_StdPeriph_Driver/src/stm32f10x_wwdg.c

22 
	~"°m32f10x_wwdg.h
"

23 
	~"°m32f10x_rcc.h
"

29 
	#WWDG_OFFSET
 (
WWDG_BASE
 - 
PERIPH_BASE
)

	)

32 
	#CFR_OFFSET
 (
WWDG_OFFSET
 + 0x04)

	)

33 
	#EWI_BôNumbî
 0x09

	)

34 
	#CFR_EWI_BB
 (
PERIPH_BB_BASE
 + (
CFR_OFFSET
 * 32Ë+ (
EWI_BôNumbî
 * 4))

	)

39 
	#CR_WDGA_Së
 ((
uöt32_t
)0x00000080)

	)

42 
	#CFR_WDGTB_Mask
 ((
uöt32_t
)0xFFFFFE7F)

	)

43 
	#CFR_W_Mask
 ((
uöt32_t
)0xFFFFFF80)

	)

44 
	#BIT_Mask
 ((
uöt8_t
)0x7F)

	)

56 
	$WWDG_DeInô
()

58 
	`RCC_APB1PîùhRe£tCmd
(
RCC_APB1Pîùh_WWDG
, 
ENABLE
);

59 
	`RCC_APB1PîùhRe£tCmd
(
RCC_APB1Pîùh_WWDG
, 
DISABLE
);

60 
	}
}

72 
	$WWDG_SëPªsˇÀr
(
uöt32_t
 
WWDG_PªsˇÀr
)

74 
uöt32_t
 
tm¥eg
 = 0;

76 
	`as£π_∑øm
(
	`IS_WWDG_PRESCALER
(
WWDG_PªsˇÀr
));

78 
tm¥eg
 = 
WWDG
->
CFR
 & 
CFR_WDGTB_Mask
;

80 
tm¥eg
 |
WWDG_PªsˇÀr
;

82 
WWDG
->
CFR
 = 
tm¥eg
;

83 
	}
}

91 
	$WWDG_SëWödowVÆue
(
uöt8_t
 
WödowVÆue
)

93 
__IO
 
uöt32_t
 
tm¥eg
 = 0;

96 
	`as£π_∑øm
(
	`IS_WWDG_WINDOW_VALUE
(
WödowVÆue
));

99 
tm¥eg
 = 
WWDG
->
CFR
 & 
CFR_W_Mask
;

102 
tm¥eg
 |
WödowVÆue
 & (
uöt32_t
Ë
BIT_Mask
;

105 
WWDG
->
CFR
 = 
tm¥eg
;

106 
	}
}

113 
	$WWDG_E«bÀIT
()

115 *(
__IO
 
uöt32_t
 *Ë
CFR_EWI_BB
 = (uöt32_t)
ENABLE
;

116 
	}
}

124 
	$WWDG_SëCou¡î
(
uöt8_t
 
Cou¡î
)

127 
	`as£π_∑øm
(
	`IS_WWDG_COUNTER
(
Cou¡î
));

129 
WWDG
->
CR
 = 
Cou¡î
 & 
BIT_Mask
;

130 
	}
}

138 
	$WWDG_E«bÀ
(
uöt8_t
 
Cou¡î
)

141 
	`as£π_∑øm
(
	`IS_WWDG_COUNTER
(
Cou¡î
));

142 
WWDG
->
CR
 = 
CR_WDGA_Së
 | 
Cou¡î
;

143 
	}
}

150 
FœgSètus
 
	$WWDG_GëFœgSètus
()

152  (
FœgSètus
)(
WWDG
->
SR
);

153 
	}
}

160 
	$WWDG_CÀ¨Fœg
()

162 
WWDG
->
SR
 = (
uöt32_t
)
RESET
;

163 
	}
}

	@Source/User/Button.C

3 
	~"°m32f10x.h
"

4 
	~"Gøphics.h
"

5 
	~"buâ⁄.h
"

12 
	$Di•œyBuâ⁄Up
(
u16
 
x1
,u16 
y1
,u16 
x2
,u16 
y2
)

14 
	`LcdPrötH‹z
(
x1
, 
y1
, 
x2
 - x1+1, 
GRAY2
);

15 
	`LcdPrötH‹z
(
x1
+1,
y1
+1,
x2
 - x1-1, 
GRAY1
);

16 
	`LcdPrötVît
(
x1
, 
y1
, 
y2
 - y1+1, 
GRAY2
);

17 
	`LcdPrötVît
(
x1
+1,
y1
+1,
y2
 - y1-1, 
GRAY1
);

18 
	`LcdPrötH‹z
(
x1
, 
y2
, 
x2
 - x1+1, 
WHITE
);

19 
	`LcdPrötVît
(
x2
, 
y1
, 
y2
 - y1+1, 
WHITE
);

20 
	}
}

27 
	$Di•œyBuâ⁄Down
(
u16
 
x1
,u16 
y1
,u16 
x2
,u16 
y2
)

29 
	`LcdPrötH‹z
(
x1
, 
y1
, 
x2
 - x1+1, 
WHITE
);

30 
	`LcdPrötVît
(
x1
, 
y1
, 
y2
 - y1+1, 
WHITE
);

32 
	`LcdPrötH‹z
(
x1
+1,
y2
-1,
x2
 - x1-1, 
GRAY1
);

33 
	`LcdPrötH‹z
(
x1
, 
y2
, 
x2
 - x1+1, 
GRAY2
);

34 
	`LcdPrötVît
(
x2
-1,
y1
+1,
y2
 - y1-1, 
GRAY1
);

35 
	`LcdPrötVît
(
x2
 ,
y1
 ,
y2
 - y1+1, 
GRAY2
);

36 
	}
}

38 
	$Di•œyBuâ⁄DownCﬁ‹
(
u16
 
x1
,u16 
y1
,u16 
x2
,u16 
y2
,u16 
cﬁ‹
)

40 
	`LcdPrötH‹z
(
x1
, 
y1
, 
x2
 - x1+1, 
WHITE
);

41 
	`LcdPrötVît
(
x1
, 
y1
, 
y2
 - y1+1, 
WHITE
);

43 
	`LcdPrötH‹z
(
x1
+1,
y2
-1,
x2
 - x1-1, 
GRAY1
);

44 
	`LcdPrötH‹z
(
x1
, 
y2
, 
x2
 - x1+1, 
GRAY2
);

45 
	`LcdPrötVît
(
x2
-1,
y1
+1,
y2
 - y1-1, 
GRAY1
);

46 
	`LcdPrötVît
(
x2
 ,
y1
 ,
y2
 - y1+1, 
GRAY2
);

47 
	`LcdFûlRec
(
x1
+1,
y1
+1,
x2
-2,
y2
-2,
cﬁ‹
);

48 
	}
}

56 
	$Di•Buâ⁄
–
BUTTONDEFINE
 *
buâ⁄s
 )

58 
u16
 
i
=0;

59 
buâ⁄s
[
i
].
id
)

61 if(
buâ⁄s
[
i
].
ty≥s
)

63 if(
buâ⁄s
[
i
].
íabÀ
)

65 
	`LcdFûlRec
(
buâ⁄s
[
i
].
x1
,buâ⁄s[i].
y1
,buâ⁄s[i].
x2
,buâ⁄s[i].
y2
,
GRAY0
);

66 
	`Di•œyBuâ⁄Down
(
buâ⁄s
[
i
].
x1
,buâ⁄s[i].
y1
,buâ⁄s[i].
x2
,buâ⁄s[i].
y2
 );

67 
	`LcdPrötSå
(
buâ⁄s
[
i
].
°r
,buâ⁄s[i].
x1
+ buâ⁄s[i].
À·
,buâ⁄s[i].
y1
+buâ⁄s[i].
t›
,
BLACK
,
GRAY0
);

71 
	`LcdFûlRec
(
buâ⁄s
[
i
].
x1
,buâ⁄s[i].
y1
,buâ⁄s[i].
x2
,buâ⁄s[i].
y2
,
GRAY0
);

72 
	`Di•œyBuâ⁄Down
(
buâ⁄s
[
i
].
x1
,buâ⁄s[i].
y1
,buâ⁄s[i].
x2
,buâ⁄s[i].
y2
 );

73 
	`LcdPrötSå
(
buâ⁄s
[
i
].
°r
,buâ⁄s[i].
x1
+ buâ⁄s[i].
À·
,buâ⁄s[i].
y1
+buâ⁄s[i].
t›
,
GRAY1
,
GRAY0
);

76 
i
++;

78 
	}
}

	@Source/User/Button.H

2 #i‚de‡
__BUTTON_H__


3 
	#__BUTTON_H__


	)

5 
	~"°m32f10x.h
"

8 
	#BLACK
 0x0000

9 
	#BLUE
 0xF800

10 
	#RED
 0x001F

11 
	#GRAY0
 0xCE9A

12 
	#GRAY1
 0x8410

13 
	#GRAY2
 0x4208

14 
	#WHITE
 0xFFFF

15 

	)

16 
	#YELLOW
 0xF800

17 

	)

19 
	sBUTTONDEFINE


21 
u8
 
	mid
;

22 
u16
 
	mx1
, 
	my1
;

23 
u16
 
	mx2
, 
	my2
;

24 
u8
 
	mÀ·
;

25 
u8
 
	mt›
;

26 
u8
 
	mty≥s
;

27 
u8
 
	míabÀ
;

28 *
	m°r
;

30 
Di•œyBuâ⁄Up
(
u16
 
x1
,u16 
y1
,u16 
x2
,u16 
y2
);

31 
Di•œyBuâ⁄Down
(
u16
 
x1
,u16 
y1
,u16 
x2
,u16 
y2
);

32 
Di•Buâ⁄
(
BUTTONDEFINE
 *
buâ⁄s
);

33 
Di•œyBuâ⁄DownCﬁ‹
(
u16
 
x1
,u16 
y1
,u16 
x2
,u16 
y2
,u16 
cﬁ‹
);

	@Source/User/DEBUG/debug_stm32.c

2 
	~"debug_STM32.h
"

5 
	~<°dio.h
>

6 
	~<°d¨g.h
>

8 
	$UART3_Inô
(
u32
 
Baud
)

10 
USART_InôTy≥Def
 
USART_InôSåu˘uª
;

11 
GPIO_InôTy≥Def
 
GPIO_InôSåu˘uª
;

13 
USART_InôSåu˘uª
.
USART_BaudR©e
 = 
Baud
;

14 
USART_InôSåu˘uª
.
USART_W‹dLígth
 = 
USART_W‹dLígth_8b
;

15 
USART_InôSåu˘uª
.
USART_St›Bôs
 = 
USART_St›Bôs_1
;

16 
USART_InôSåu˘uª
.
USART_P¨ôy
 = 
USART_P¨ôy_No
;

17 
USART_InôSåu˘uª
.
USART_H¨dw¨eFlowC⁄åﬁ
 = 
USART_H¨dw¨eFlowC⁄åﬁ_N⁄e
;

18 
USART_InôSåu˘uª
.
USART_Mode
 = 
USART_Mode_Rx
 | 
USART_Mode_Tx
;

21 
	`RCC_APB1PîùhClockCmd
(
RCC_APB1Pîùh_USART3
, 
ENABLE
);

24 
GPIO_InôSåu˘uª
.
GPIO_Pö
 = 
GPIO_Pö_10
;

25 
GPIO_InôSåu˘uª
.
GPIO_Mode
 = 
GPIO_Mode_AF_PP
;

26 
GPIO_InôSåu˘uª
.
GPIO_S≥ed
 = 
GPIO_S≥ed_50MHz
;

27 
	`GPIO_Inô
(
GPIOB
, &
GPIO_InôSåu˘uª
);

30 
GPIO_InôSåu˘uª
.
GPIO_Pö
 = 
GPIO_Pö_11
;

31 
GPIO_InôSåu˘uª
.
GPIO_Mode
 = 
GPIO_Mode_IN_FLOATING
;

32 
	`GPIO_Inô
(
GPIOB
, &
GPIO_InôSåu˘uª
);

34 
	`USART_Inô
(
USART3
, &
USART_InôSåu˘uª
);

35 
	`USART_Cmd
(
USART3
, 
ENABLE
);

36 
	}
}

38 
	$UART3_SídByã
 (
u8
 
d©a
)

40 
	`USART_SídD©a
(
USART3
, 
d©a
);

41 
	`USART_GëFœgSètus
(
USART3
, 
USART_FLAG_TC
Ë=
RESET
);

42 
	}
}

44 
	$PrötSå
(*
buf„r
)

46 *
buf„r
 != '\0')

48 
	`UART3_SídByã
(*
buf„r
++);

50 
	}
}

52 
	$Prötf
(*
fmt
,...)

54 
va_li°
 
≠
;

55 
°rög
[256];

57 
	`va_°¨t
(
≠
,
fmt
);

58 
	`v•rötf
(
°rög
,
fmt
,
≠
);

59 
	`PrötSå
(
°rög
);

60 
	`va_íd
(
≠
);

61 
	}
}

63 
	$PrötBuff
(*
buf„r
,
Àn
)

65 
Àn
--)

67 
	`UART3_SídByã
(*
buf„r
++);

69 
	}
}

	@Source/User/DEBUG/debug_stm32.h

1 #i‚de‡
_DEBUG_STM32_


2 
	#_DEBUG_STM32_


	)

4 
	~"°m32f10x.h
"

6 
UART1_SídByã
 (
u8
 
d©a
);

7 
PrötSå
(*
buf„r
);

8 
Prötf
(*
fmt
,...);

9 
PrötBuff
(*
buf„r
,
Àn
);

10 
UART3_Inô
(
u32
 
Baud
);

	@Source/User/Graphics.C

2 
	~<°dio.h
>

3 
	~<°d¨g.h
>

4 
	~"°m32f10x.h
"

5 
	~"SSD1963.h
"

6 
	~"SYS_ZK.H
"

8 
	#LCDBUFSIZE
 800*480

	)

10 
DñayMs
(
u32
 
nMs
);

11 c⁄° 
__ASC_ZK
 
sysEnzk
[];

12 c⁄° 
__HZK_ZK
 
sysHzzk
[];

16 
u16
 
	gf⁄tbuf
[256];

23 
	$LcdSëAªa
(
u16
 
x1
, u16 
y1
, u16 
x2
, u16 
y2
)

25 
	`WrôeComm™d
(0x2A);

26 
	`WrôeD©a
(
x1
>>8);

27 
	`WrôeD©a
(
x1
);

28 
	`WrôeD©a
(
x2
>>8);

29 
	`WrôeD©a
(
x2
);

30 
	`WrôeComm™d
(0x2B);

31 
	`WrôeD©a
(
y1
>>8);

32 
	`WrôeD©a
(
y1
);

33 
	`WrôeD©a
(
y2
>>8);

34 
	`WrôeD©a
(
y2
);

35 
	}
}

42 
	$LcdPrötDŸ
(
u16
 
x
, u16 
y
, u16 
cﬁ‹
)

44 
	`LcdSëAªa
(
x
,
y
,x,y);

45 
	`WrôeComm™d
(0x2C);

46 
	`WrôeD©a
(
cﬁ‹
);

47 
	}
}

57 
	$LcdPrötH‹z
(
u16
 
x
, u16 
y
, u16 
width
, u16 
cﬁ‹
)

59 
	`LcdSëAªa
(
x
,
y
,x+
width
-1,y);

60 
	`WrôeComm™d
(0x2C);

62 
width
--)

63 
	`WrôeD©a
(
cﬁ‹
);

64 
	}
}

74 
	$LcdPrötVît
(
u16
 
x
, u16 
y
, u16 
height
, u16 
cﬁ‹
)

76 
	`LcdSëAªa
(
x
,
y
,x,y+
height
-1);

77 
	`WrôeComm™d
(0x2C);

79 
height
--)

80 
	`WrôeD©a
(
cﬁ‹
);

81 
	}
}

87 
	$LcdPrötRec
(
u16
 
x1
, u16 
y1
, u16 
x2
, u16 
y2
, u16 
cﬁ‹
)

89 
	`LcdPrötH‹z
(
x1
, 
y1
, 
x2
 - x1+1, 
cﬁ‹
);

90 
	`LcdPrötVît
(
x1
, 
y1
, 
y2
 - y1+1, 
cﬁ‹
);

91 
	`LcdPrötH‹z
(
x1
, 
y2
, 
x2
 - x1+1, 
cﬁ‹
);

92 
	`LcdPrötVît
(
x2
, 
y1
, 
y2
 - y1+1, 
cﬁ‹
);

93 
	}
}

100 
	$LcdFûlRec
(
u16
 
x1
, u16 
y1
, u16 
x2
, u16 
y2
,u16 
cﬁ‹
)

102 
u32
 
size
;

104 
	`LcdSëAªa
(
x1
,
y1
,
x2
,
y2
);

105 
	`WrôeComm™d
(0x2C);

107 
size
 = (
u32
)(
y2
-
y1
+1)*(
x2
-
x1
+1);

108 
size
--)

109 
	`WrôeD©a
(
cﬁ‹
);

110 
	}
}

117 
	$LcdCÀ¨
(
u16
 
cﬁ‹
)

119 
u32
 
size
;

121 
	`LcdSëAªa
(0,0,799,479);

122 
	`WrôeComm™d
(0x2C);

124 
size
 = 
LCDBUFSIZE
;

125 
size
--)

126 
	`WrôeD©a
(
cﬁ‹
);

127 
	}
}

137 
	$LcdPrötEn
(
u8
 
code
, 
u16
 
x
, u16 
y
, u16 
cﬁ‹
,u16 
bcﬁ‹
)

139 
u8
 
ù
,
i
,
j
,
m
;

141 
ù
 = 0;

142 
m
=0;

145 if(
sysEnzk
[
ù
].
code
 == code)

147 
i
 = 0; i < 16; i++)

149 
j
=0;j<8;j++)

151 if(
sysEnzk
[
ù
].
ENCODE
[
i
]&(0x80>>
j
))

152 
f⁄tbuf
[
m
++] = 
cﬁ‹
;

154 
f⁄tbuf
[
m
++] = 
bcﬁ‹
;

157 
	`LcdSëAªa
(
x
,
y
,x+7,y+15);

158 
	`WrôeComm™d
(0x2C);

159 
m
=0;

160 
i
=0;i<16;i++)

162 
	`WrôeD©a
(
f⁄tbuf
[
m
++]);

163 
	`WrôeD©a
(
f⁄tbuf
[
m
++]);

164 
	`WrôeD©a
(
f⁄tbuf
[
m
++]);

165 
	`WrôeD©a
(
f⁄tbuf
[
m
++]);

166 
	`WrôeD©a
(
f⁄tbuf
[
m
++]);

167 
	`WrôeD©a
(
f⁄tbuf
[
m
++]);

168 
	`WrôeD©a
(
f⁄tbuf
[
m
++]);

169 
	`WrôeD©a
(
f⁄tbuf
[
m
++]);

173 
ù
++;

175 
sysEnzk
[
ù
].
code
);

176 
	}
}

186 
	$LcdPrötHz
(
u16
 
code
,u16 
x
,u16 
y
,u16 
cﬁ‹
,u16 
bcﬁ‹
)

188 
u8
 
ù
,
i
,
j
;

189 
u16
 
m
,
fcode
;

191 
ù
 = 0;

192 
m
 = 0;

195 if(
sysHzzk
[
ù
].
code
 == code)

197 
i
=0;i<32;i=i+2)

199 
fcode
 = 
sysHzzk
[
ù
].
HZCODE
[
i
]<<8|sysHzzk[ip].HZCODE[i+1];

200 
j
=0;j<16;j++)

202 if(
fcode
&(0x8000>>
j
))

203 
f⁄tbuf
[
m
++] = 
cﬁ‹
;

205 
f⁄tbuf
[
m
++] = 
bcﬁ‹
;

208 
	`LcdSëAªa
(
x
,
y
,x+15,y+15);

209 
	`WrôeComm™d
(0x2C);

210 
m
 = 0;

211 
i
=0;i<16;i++)

213 
	`WrôeD©a
(
f⁄tbuf
[
m
++]);

214 
	`WrôeD©a
(
f⁄tbuf
[
m
++]);

215 
	`WrôeD©a
(
f⁄tbuf
[
m
++]);

216 
	`WrôeD©a
(
f⁄tbuf
[
m
++]);

217 
	`WrôeD©a
(
f⁄tbuf
[
m
++]);

218 
	`WrôeD©a
(
f⁄tbuf
[
m
++]);

219 
	`WrôeD©a
(
f⁄tbuf
[
m
++]);

220 
	`WrôeD©a
(
f⁄tbuf
[
m
++]);

221 
	`WrôeD©a
(
f⁄tbuf
[
m
++]);

222 
	`WrôeD©a
(
f⁄tbuf
[
m
++]);

223 
	`WrôeD©a
(
f⁄tbuf
[
m
++]);

224 
	`WrôeD©a
(
f⁄tbuf
[
m
++]);

225 
	`WrôeD©a
(
f⁄tbuf
[
m
++]);

226 
	`WrôeD©a
(
f⁄tbuf
[
m
++]);

227 
	`WrôeD©a
(
f⁄tbuf
[
m
++]);

228 
	`WrôeD©a
(
f⁄tbuf
[
m
++]);

232 
ù
++;

233 }
sysHzzk
[
ù
].
code
);

234 
	}
}

244 
	$LcdPrötSå
(*
°r
,
u16
 
x
,u16 
y
,u16 
cﬁ‹
,u16 
bcﬁ‹
)

246 
u8
 
i
;

247 
u16
 
px
;

249 
i
 = 0;

250 
px
 = 
x
;

251 
°r
[
i
])

253 if(
°r
[
i
] > 0x7F)

255 
	`LcdPrötHz
((
°r
[
i
]<<8)|°r[i+1],
px
,
y
,
cﬁ‹
,
bcﬁ‹
);

256 
i
 += 2;

257 
px
 += 16;

261 
	`LcdPrötEn
(
°r
[
i
],
px
, 
y
+1, 
cﬁ‹
,
bcﬁ‹
);

262 
i
++;

263 
px
 += 8;

266 
	}
}

274 
	$LcdPrötf
(
u16
 
x
,u16 
y
,u16 
cﬁ‹
,u16 
bcﬁ‹
,*
fmt
,...)

276 
va_li°
 
≠
;

277 
°r
[64];

279 
	`va_°¨t
(
≠
,
fmt
);

280 
	`v•rötf
(
°r
,
fmt
,
≠
);

281 
	`LcdPrötSå
(
°r
,
x
,
y
,
cﬁ‹
,
bcﬁ‹
);

282 
	`va_íd
(
≠
);

283 
	}
}

292 
	$LcdPröt16bôBmp
(c⁄° 
u8
* 
bmpbô
,
u16
 
x
,u16 
y
,u16 
widht
,u16 
height
)

294 
u32
 
size
,
ù
 = 0;

296 
	`LcdSëAªa
(
x
,
y
,x+
widht
-1,y+
height
-1);

297 
	`WrôeComm™d
(0x2C);

299 
size
 = 
widht
*
height
*2;

300 
ù
 = 0; i∞< 
size
; ip += 2)

301 
	`WrôeD©a
(
bmpbô
[
ù
]<<8|bmpbit[ip+1]);

302 
	}
}

317 
	$LcdPrötASCIIöModñ
(
u16x
, 
u16y
 
u16
 
wdt
, u16 
hgt
)

320 
	}
}

322 
LcdPrötASCIIöModñ
(
u16
 
x
, u16 
y
, u16 
width
, u16 
height
, )

	@Source/User/Graphics.H

2 #i‚de‡
__GRAPHICS_H__


3 
	#__GRAPHICS_H__


	)

6 
	~"°m32f10x.h
"

8 
LcdSëAªa
(
u16
 
x1
, u16 
y1
, u16 
x2
, u16 
y2
);

9 
LcdPrötDŸ
(
u16
 
x
, u16 
y
, u16 
cﬁ‹
);

10 
LcdPrötH‹z
(
u16
 
x
, u16 
y
, u16 
width
, u16 
cﬁ‹
);

11 
LcdPrötVît
(
u16
 
x
, u16 
y
, u16 
height
, u16 
cﬁ‹
);

12 
LcdPrötRec
(
u16
 
x1
, u16 
y1
, u16 
x2
, u16 
y2
, u16 
cﬁ‹
);

13 
LcdFûlRec
(
u16
 
x1
, u16 
y1
, u16 
x2
, u16 
y2
,u16 
cﬁ‹
);

14 
LcdCÀ¨
(
u16
 
cﬁ‹
);

15 
LcdPrötEn
(
u8
 
code
, 
u16
 
x
, u16 
y
, u16 
cﬁ‹
,u16 
bcﬁ‹
);

16 
LcdPrötHz
(
u16
 
code
,u16 
x
,u16 
y
,u16 
cﬁ‹
,u16 
bcﬁ‹
);

17 
LcdPrötSå
(*
°r
,
u16
 
x
,u16 
y
,u16 
cﬁ‹
,u16 
bcﬁ‹
);

18 
LcdPrötf
(
u16
 
x
,u16 
y
,u16 
cﬁ‹
,u16 
bcﬁ‹
,*
fmt
,...);

19 
LcdPröt16bôBmp
(c⁄° 
u8
* 
bmpbô
,
u16
 
x
,u16 
y
,u16 
widht
,u16 
height
);

	@Source/User/SSD1963.C

12 
	~"°m32f10x.h
"

13 
	~"SSD1963.h
"

14 
	~"debug_STM32.h
"

16 
	gHDP
=799;

19 
	gLPS
=46;

20 
	gHPW
=
DISP_HOR_PULSE_WIDTH
;

22 
	gVDP
=479;

25 
	gFPS
=23;

26 
	gVPW
=3;

37 
	#HT
 (
DISP_HOR_RESOLUTION
+
DISP_HOR_PULSE_WIDTH
+
DISP_HOR_BACK_PORCH
+
DISP_HOR_FRONT_PORCH
)

	)

38 
	#HPS
 (
DISP_HOR_PULSE_WIDTH
+
DISP_HOR_BACK_PORCH
)

	)

39 
	#VT
 (
DISP_VER_PULSE_WIDTH
+
DISP_VER_BACK_PORCH
+
DISP_VER_FRONT_PORCH
+
DISP_VER_RESOLUTION
)

	)

40 
	#VPS
 (
DISP_VER_PULSE_WIDTH
+
DISP_VER_BACK_PORCH
)

	)

43 
u8
 
brighäess
;

44 
u8
 
c⁄åa°
;

45 
u8
 
ßtuøti⁄
;

46 
DñayMs
(
u32
 
nMs
);

48 
u8
 
	gs1963gpio
;

50 
u8
 
	$RódD©a
()

52  
LCD_DATA_ADD
;

53 
	}
}

63 
	$InôSSD1963
()

65 
	`WrôeComm™d
(0xE2);

66 
	`WrôeD©a
(0x23);

67 
	`WrôeD©a
(0x02);

68 
	`WrôeD©a
(0x54);

70 
	`PrötSå
("ok: =======23 02 04==========\r\n");

71 
	`WrôeComm™d
(0xE3);

72 
	`Prötf
("e30=%02x\r\n",
	`RódD©a
());

73 
	`Prötf
("e31=%02x\r\n",
	`RódD©a
());

74 
	`Prötf
("e32=%02x\r\n",
	`RódD©a
());

76 
	`WrôeComm™d
(0xE0);

77 
	`WrôeD©a
(0x01);

78 
	`DñayMs
(1);

80 
	`WrôeComm™d
(0xE0);

81 
	`WrôeD©a
(0x03);

82 
	`DñayMs
(1);

84 
	`PrötSå
("ok: ===========04===========\r\n");

85 
	`WrôeComm™d
(0xE4);

86 
	`Prötf
("e4=%02x\r\n",
	`RódD©a
());

89 
	`WrôeComm™d
(0x01);

90 
	`DñayMs
(10);

100 
	`WrôeComm™d
(0xE6);

104 
	`WrôeD©a
(0x04);

105 
	`WrôeD©a
(0x93);

106 
	`WrôeD©a
(0xE0);

108 
	`PrötSå
("ok: =========03 ff ff============\r\n");

109 
	`WrôeComm™d
(0xE7);

110 
	`Prötf
("e70=%02x\r\n",
	`RódD©a
());

111 
	`Prötf
("e71=%02x\r\n",
	`RódD©a
());

112 
	`Prötf
("e72=%02x\r\n",
	`RódD©a
());

115 
	`WrôeComm™d
(0xB0);

116 
	`WrôeD©a
(0x10);

117 
	`WrôeD©a
(0x80);

118 
	`WrôeD©a
((
DISP_HOR_RESOLUTION
-1)>>8);

119 
	`WrôeD©a
(
DISP_HOR_RESOLUTION
-1);

120 
	`WrôeD©a
((
DISP_VER_RESOLUTION
-1)>>8);

121 
	`WrôeD©a
(
DISP_VER_RESOLUTION
-1);

122 
	`WrôeD©a
(0x00);

124 
	`PrötSå
("ok: =======10 80 03 1f 01 df 00============\r\n");

125 
	`WrôeComm™d
(0xB1);

126 
	`Prötf
("B10=%02x\r\n",
	`RódD©a
());

127 
	`Prötf
("B11=%02x\r\n",
	`RódD©a
());

128 
	`Prötf
("B12=%02x\r\n",
	`RódD©a
());

129 
	`Prötf
("B13=%02x\r\n",
	`RódD©a
());

130 
	`Prötf
("B14=%02x\r\n",
	`RódD©a
());

131 
	`Prötf
("B15=%02x\r\n",
	`RódD©a
());

132 
	`Prötf
("B16=%02x\r\n",
	`RódD©a
());

135 
	`WrôeComm™d
(0xB4);

136 
	`WrôeD©a
((
HT
-1)>>8);

137 
	`WrôeD©a
(
HT
-1);

138 
	`WrôeD©a
((
HPS
-1)>>8);

139 
	`WrôeD©a
(
HPS
-1);

140 
	`WrôeD©a
(
DISP_HOR_PULSE_WIDTH
-1);

141 
	`WrôeD©a
(0x00);

142 
	`WrôeD©a
(0x00);

143 
	`WrôeD©a
(0x00);

145 
	`PrötSå
("ok======: 04 1f 00 d2 00 00 00 00========\r\n");

146 
	`WrôeComm™d
(0xB5);

147 
	`Prötf
("B50=%02x\r\n",
	`RódD©a
());

148 
	`Prötf
("B51=%02x\r\n",
	`RódD©a
());

149 
	`Prötf
("B52=%02x\r\n",
	`RódD©a
());

150 
	`Prötf
("B53=%02x\r\n",
	`RódD©a
());

151 
	`Prötf
("B54=%02x\r\n",
	`RódD©a
());

152 
	`Prötf
("B55=%02x\r\n",
	`RódD©a
());

153 
	`Prötf
("B56=%02x\r\n",
	`RódD©a
());

154 
	`Prötf
("B57=%02x\r\n",
	`RódD©a
());

159 
	`WrôeComm™d
(0xB6);

160 
	`WrôeD©a
((
VT
-1)>>8);

161 
	`WrôeD©a
(
VT
-1);

162 
	`WrôeD©a
((
VSP
-1)>>8);

163 
	`WrôeD©a
(
VSP
-1);

164 
	`WrôeD©a
(
DISP_VER_PULSE_WIDTH
-1);

165 
	`WrôeD©a
(0x00);

166 
	`WrôeD©a
(0x00);

168 
	`PrötSå
("ok======: 02 0c 00 22 00 00 00========\r\n");

169 
	`WrôeComm™d
(0xB7);

170 
	`Prötf
("B70=%02x\r\n",
	`RódD©a
());

171 
	`Prötf
("B71=%02x\r\n",
	`RódD©a
());

172 
	`Prötf
("B72=%02x\r\n",
	`RódD©a
());

173 
	`Prötf
("B73=%02x\r\n",
	`RódD©a
());

174 
	`Prötf
("B74=%02x\r\n",
	`RódD©a
());

175 
	`Prötf
("B75=%02x\r\n",
	`RódD©a
());

176 
	`Prötf
("B76=%02x\r\n",
	`RódD©a
());

179 
	`WrôeComm™d
(0x3A);

180 
	`WrôeD©a
(0x55);

182 
	`WrôeComm™d
(0xF0);

183 
	`WrôeD©a
(0x03);

185 
	`PrötSå
("ok======: 03========\r\n");

186 
	`WrôeComm™d
(0xF1);

187 
	`Prötf
("F10=%02x\r\n",
	`RódD©a
());

189 
	`WrôeComm™d
(0x21);

191 
	`WrôeComm™d
(0xBC);

192 
	`WrôeD©a
(
brighäess
);

193 
	`WrôeD©a
(
c⁄åa°
);

194 
	`WrôeD©a
(
ßtuøti⁄
);

195 
	`WrôeD©a
(0x01);

197 
	`WrôeComm™d
(0x29);

200 
	`PrötSå
("==========getÖower mode==========\r\n");

201 
	`WrôeComm™d
(0x0A);

202 
	`Prötf
("0A0=%02x\r\n",
	`RódD©a
());

203 
	`PrötSå
("==========getádder mode==========\r\n");

204 
	`WrôeComm™d
(0x0B);

205 
	`Prötf
("0B0=%02x\r\n",
	`RódD©a
());

206 
	`PrötSå
("==========Get Pixel Format==========\r\n");

207 
	`WrôeComm™d
(0x0C);

208 
	`Prötf
("0B0=%02x\r\n",
	`RódD©a
());

209 
	`PrötSå
("==========Get Display mode==========\r\n");

210 
	`WrôeComm™d
(0x0D);

211 
	`Prötf
("0B0=%02x\r\n",
	`RódD©a
());

212 
	`PrötSå
("==========Get Signal Mode==========\r\n");

213 
	`WrôeComm™d
(0x0E);

214 
	`Prötf
("0B0=%02x\r\n",
	`RódD©a
());

215 
	`PrötSå
("==========Get Post Proc==========\r\n");

216 
	`WrôeComm™d
(0xBD);

217 
	`Prötf
("0B0=%02x\r\n",
	`RódD©a
());

218 
	`Prötf
("0B0=%02x\r\n",
	`RódD©a
());

219 
	`Prötf
("0B0=%02x\r\n",
	`RódD©a
());

220 
	`Prötf
("0B0=%02x\r\n",
	`RódD©a
());

224 
	`WrôeComm™d
(0xB8);

225 
	`WrôeD©a
(0x0F);

226 
	`WrôeD©a
(0x01);

228 
s1963gpio
 = 
Up2Down2Le·2Right
;

229 
	`SëS1963GpioOut
();

232 
	}
}

234 
	$LcdWrôeRam
 (
uöt16_t
 
d©a
)

236 
LCD_DATA_ADD
 = 
d©a
;

237 
	}
}

238 
	$LcdWrôeCom
 (
uöt16_t
 
com
)

240 
LCD_COMM_ADD
 = 
com
;

241 
	}
}

250 
	$FSMC_GPIO_C⁄figuøti⁄
()

252 
GPIO_InôTy≥Def
 
GPIO_InôSåu˘uª
;

254 
	`RCC_AHBPîùhClockCmd
(
RCC_AHBPîùh_FSMC
, 
ENABLE
);

256 
	`RCC_APB2PîùhClockCmd
(
RCC_APB2Pîùh_GPIOD
 | 
RCC_APB2Pîùh_GPIOE
 | 
RCC_APB2Pîùh_AFIO


257 ,
ENABLE
);

259 
GPIO_InôSåu˘uª
.
GPIO_Pö
 = 
GPIO_Pö_0
 | 
GPIO_Pö_1
 | 
GPIO_Pö_4
 | 
GPIO_Pö_5
 |

260 
GPIO_Pö_7
 | 
GPIO_Pö_8
 | 
GPIO_Pö_9
 | 
GPIO_Pö_10
 |

261 
GPIO_Pö_11
 | 
GPIO_Pö_14
 | 
GPIO_Pö_15
;

262 
GPIO_InôSåu˘uª
.
GPIO_S≥ed
 = 
GPIO_S≥ed_50MHz
;

263 
GPIO_InôSåu˘uª
.
GPIO_Mode
 = 
GPIO_Mode_AF_PP
;

264 
	`GPIO_Inô
(
GPIOD
, &
GPIO_InôSåu˘uª
);

266 
GPIO_InôSåu˘uª
.
GPIO_Pö
 = 
GPIO_Pö_7
 | 
GPIO_Pö_8
 | 
GPIO_Pö_9
 | 
GPIO_Pö_10
 |

267 
GPIO_Pö_11
 | 
GPIO_Pö_12
 | 
GPIO_Pö_13
 | 
GPIO_Pö_14
 |

268 
GPIO_Pö_15
;

269 
GPIO_InôSåu˘uª
.
GPIO_S≥ed
 = 
GPIO_S≥ed_50MHz
;

270 
GPIO_InôSåu˘uª
.
GPIO_Mode
 = 
GPIO_Mode_AF_PP
;

271 
	`GPIO_Inô
(
GPIOE
, &
GPIO_InôSåu˘uª
);

272 
	}
}

280 
	$FSMC_LCD_Inô
()

282 
FSMC_NORSRAMInôTy≥Def
 
FSMC_NORSRAMInôSåu˘uª
;

283 
FSMC_NORSRAMTimögInôTy≥Def
 
p
;

287 
p
.
FSMC_AddªssSëupTime
 = 0x02;

288 
p
.
FSMC_AddªssHﬁdTime
 = 0x00;

289 
p
.
FSMC_D©aSëupTime
 = 0x05;

290 
p
.
FSMC_BusTu∫AroundDuøti⁄
 = 0x00;

291 
p
.
FSMC_CLKDivisi⁄
 = 0x00;

292 
p
.
FSMC_D©aL©ícy
 = 0x00;

293 
p
.
FSMC_Ac˚ssMode
 = 
FSMC_Ac˚ssMode_B
;

295 
FSMC_NORSRAMInôSåu˘uª
.
FSMC_B™k
 = 
FSMC_B™k1_NORSRAM1
;

296 
FSMC_NORSRAMInôSåu˘uª
.
FSMC_D©aAddªssMux
 = 
FSMC_D©aAddªssMux_DißbÀ
;

297 
FSMC_NORSRAMInôSåu˘uª
.
FSMC_Mem‹yTy≥
 = 
FSMC_Mem‹yTy≥_NOR
;

298 
FSMC_NORSRAMInôSåu˘uª
.
FSMC_Mem‹yD©aWidth
 = 
FSMC_Mem‹yD©aWidth_16b
;

299 
FSMC_NORSRAMInôSåu˘uª
.
FSMC_Bur°Ac˚ssMode
 = 
FSMC_Bur°Ac˚ssMode_DißbÀ
;

300 
FSMC_NORSRAMInôSåu˘uª
.
FSMC_WaôSig«lPﬁ¨ôy
 = 
FSMC_WaôSig«lPﬁ¨ôy_Low
;

301 
FSMC_NORSRAMInôSåu˘uª
.
FSMC_WøpMode
 = 
FSMC_WøpMode_DißbÀ
;

302 
FSMC_NORSRAMInôSåu˘uª
.
FSMC_WaôSig«lA˘ive
 = 
FSMC_WaôSig«lA˘ive_Bef‹eWaôSèã
;

303 
FSMC_NORSRAMInôSåu˘uª
.
FSMC_WrôeO≥øti⁄
 = 
FSMC_WrôeO≥øti⁄_E«bÀ
;

304 
FSMC_NORSRAMInôSåu˘uª
.
FSMC_WaôSig«l
 = 
FSMC_WaôSig«l_DißbÀ
;

305 
FSMC_NORSRAMInôSåu˘uª
.
FSMC_ExãndedMode
 = 
FSMC_ExãndedMode_DißbÀ
;

306 
FSMC_NORSRAMInôSåu˘uª
.
FSMC_WrôeBur°
 = 
FSMC_WrôeBur°_DißbÀ
;

307 
FSMC_NORSRAMInôSåu˘uª
.
FSMC_RódWrôeTimögSåu˘
 = &
p
;

308 
FSMC_NORSRAMInôSåu˘uª
.
FSMC_WrôeTimögSåu˘
 = &
p
;

310 
	`FSMC_NORSRAMInô
(&
FSMC_NORSRAMInôSåu˘uª
);

313 
	`FSMC_NORSRAMCmd
(
FSMC_B™k1_NORSRAM1
, 
ENABLE
);

314 
	}
}

322 
	$LcdInô
()

324 
	`FSMC_GPIO_C⁄figuøti⁄
();

325 
	`FSMC_LCD_Inô
();

328 
	`LcdWrôeCom
(0x00E2);

329 
	`LcdWrôeRam
(0x001D);

330 
	`LcdWrôeRam
(0x0002);

331 
	`LcdWrôeRam
(0x0004);

333 
	`LcdWrôeCom
(0x00E0);

334 
	`LcdWrôeRam
(0x0001);

335 
	`DñayMs
(5);

336 
	`LcdWrôeCom
(0x00E0);

337 
	`LcdWrôeRam
(0x0003);

338 
	`DñayMs
(5);

339 
	`LcdWrôeCom
(0x0001);

340 
	`DñayMs
(5);

341 
	`LcdWrôeCom
(0x00E6);

342 
	`LcdWrôeRam
(0x0004);

343 
	`LcdWrôeRam
(0x0093);

344 
	`LcdWrôeRam
(0x00e0);

346 
	`LcdWrôeCom
(0x00B0);

347 
	`LcdWrôeRam
(0x0000);

348 
	`LcdWrôeRam
(0x0000);

349 
	`LcdWrôeRam
((
HDP
>>8)&0X00FF);

350 
	`LcdWrôeRam
(
HDP
&0X00FF);

351 
	`LcdWrôeRam
((
VDP
>>8)&0X00FF);

352 
	`LcdWrôeRam
(
VDP
&0X00FF);

353 
	`LcdWrôeRam
(0x0000);

355 
	`LcdWrôeCom
(0x00B4);

356 
	`LcdWrôeRam
((
HT
>>8)&0X00FF);

357 
	`LcdWrôeRam
(
HT
&0X00FF);

358 
	`LcdWrôeRam
((
HPS
>>8)&0X00FF);

359 
	`LcdWrôeRam
(
HPS
&0X00FF);

360 
	`LcdWrôeRam
(
HPW
);

361 
	`LcdWrôeRam
((
LPS
>>8)&0X00FF);

362 
	`LcdWrôeRam
(
LPS
&0X00FF);

363 
	`LcdWrôeRam
(0x0000);

365 
	`LcdWrôeCom
(0x00B6);

366 
	`LcdWrôeRam
((
VT
>>8)&0X00FF);

367 
	`LcdWrôeRam
(
VT
&0X00FF);

368 
	`LcdWrôeRam
((
VPS
>>8)&0X00FF);

369 
	`LcdWrôeRam
(
VPS
&0X00FF);

370 
	`LcdWrôeRam
(
VPW
);

371 
	`LcdWrôeRam
((
FPS
>>8)&0X00FF);

372 
	`LcdWrôeRam
(
FPS
&0X00FF);

374 
	`LcdWrôeCom
(0x00BA);

375 
	`LcdWrôeRam
(0x0005);

377 
	`LcdWrôeCom
(0x00B8);

378 
	`LcdWrôeRam
(0x0007);

379 
	`LcdWrôeRam
(0x0001);

381 
	`LcdWrôeCom
(0x0036);

382 
	`LcdWrôeRam
(0x0000);

396 
	`LcdWrôeCom
(0x00F0);

397 
	`LcdWrôeRam
(0x0003);

399 
	`DñayMs
(5);

403 
	`LcdWrôeCom
(0x0026);

404 
	`LcdWrôeRam
(0x0001);

406 
	`LcdWrôeCom
(0x0029);

419 
	`LcdWrôeCom
(0x00d0);

420 
	`LcdWrôeRam
(0x000d);

422 
	`LcdWrôeCom
(0x0029);

423 
	}
}

	@Source/User/SSD1963.H

2 #i‚de‡
__SSD1963_H__


3 
	#__SSD1963_H__


	)

5 
	~"°m32f10x.h
"

9 
	#__AT070TN92__


	)

11 #ifdef 
__AT070TN92__


18 
	#LCD_COMM_ADD
 *((
u16
 *)0X60000000)

	)

19 
	#LCD_DATA_ADD
 *((
u16
 *)0X60020000)

	)

21 
	#WrôeComm™d
(
cmd
Ë{
LCD_COMM_ADD
 = cmd;}

	)

22 
	#WrôeD©a
(
d©a
Ë{
LCD_DATA_ADD
 = d©a;}

	)

25 
	#O≥nEL
(Ë{
s1963gpio
 = 0x08|s1963gpio; 
LCD_COMM_ADD
 = 0xBA; 
LCD_DATA_ADD
 = s1963gpio;}

	)

26 
	#Clo£EL
(Ë{
s1963gpio
 = 0x07&s1963gpio; 
LCD_COMM_ADD
 = 0xBA; 
LCD_DATA_ADD
 = s1963gpio;}

	)

27 
	#E«bÀDITHB
(Ë{
s1963gpio
 = 0x0B&s1963gpio; 
LCD_COMM_ADD
 = 0xBA; 
LCD_DATA_ADD
 = s1963gpio;}

	)

28 
	#DißbÀDITHB
(Ë{
s1963gpio
 = 0x04|s1963gpio; 
LCD_COMM_ADD
 = 0xBA; 
LCD_DATA_ADD
 = s1963gpio;}

	)

29 
	#SëS1963GpioOut
(Ë{ 
LCD_COMM_ADD
 = 0xBA; 
LCD_DATA_ADD
 = 
s1963gpio
;}

	)

31 
	#DISP_HOR_RESOLUTION
 800

	)

32 
	#DISP_VER_RESOLUTION
 480

	)

33 
	#DISP_HOR_PULSE_WIDTH
 1

	)

34 
	#DISP_HOR_BACK_PORCH
 210

	)

35 
	#DISP_HOR_FRONT_PORCH
 45

	)

36 
	#DISP_VER_PULSE_WIDTH
 1

	)

37 
	#DISP_VER_BACK_PORCH
 34

	)

38 
	#DISP_VER_FRONT_PORCH
 10

	)

43 
	#VSP
 (
DISP_VER_PULSE_WIDTH
+
DISP_VER_BACK_PORCH
)

	)

45 
	#Up2Down2Le·2Right
 0x01

	)

46 
	#Down2Up2Right2Le·
 0x02

	)

47 
	#Up2Down2Right2Le·
 0x00

	)

48 
	#Down2Up2Le·2Right
 0x03

	)

51 
InôSSD1963
();

52 
LcdInô
();

	@Source/User/SYS_ZK.C

3 
	~"°m32f10x.h
"

4 
	~"SYS_ZK.H
"

7 c⁄° 
__ASC_ZK
 
	gsysEnzk
[]=

50 c⁄° 
__HZK_ZK
 
	gsysHzzk
[]=

	@Source/User/SYS_ZK.H

2 #i‚de‡
__SYS_ZK_H__


3 
	#__SYS_ZK_H__


	)

5 
	~"°m32f10x.h
"

7 
	s__ASC_ZK


9 
u8
 
	mcode
;

10 
u8
 
	mENCODE
[16];

13 
	s__HZK_ZK


15 
u16
 
	mcode
;

16 
u8
 
	mHZCODE
[32];

	@Source/User/USB_BULK/inc/hw_config.h

17 #i‚de‡
__HW_CONFIG_H


18 
	#__HW_CONFIG_H


	)

21 
	~"°m32f10x.h
"

22 
	~"usb_c‹e.h
"

26 
	e_DEVICE_STATE


28 
	mUNCONNECTED
,

29 
	mATTACHED
,

30 
	mPOWERED
,

31 
	mSUSPENDED
,

32 
	mADDRESSED
,

33 
	mCONFIGURED


34 } 
	tDEVICE_STATE
;

37 
	#BULK_MAX_PACKET_SIZE
 0x00000040

	)

40 
Së_USBClock
();

41 
USB_I¡îru±s_C⁄fig
();

42 
USB_Disc⁄√˘_C⁄fig
();

43 
Gë_SîülNum
();

44 
RESULT
 
PowîOn
();

46 
__IO
 
uöt32_t
 
bUSBDevi˚Sèã
;

	@Source/User/USB_BULK/inc/platform_config.h

17 #i‚de‡
__PLATFORM_CONFIG_H


18 
	#__PLATFORM_CONFIG_H


	)

21 
	~"°m32f10x.h
"

27 #i‡!
deföed
 (
USE_STM3210B_EVAL
Ë&& !deföed (
USE_STM3210E_EVAL
)

29 
	#USE_STM3210E_EVAL


	)

32 #ifde‡
USE_STM3210B_EVAL


34 
	#USB_DISCONNECT
 
GPIOA


	)

35 
	#USB_DISCONNECT_PIN
 
GPIO_Pö_13


	)

36 
	#RCC_APB2Pîùh_GPIO_DISCONNECT
 
RCC_APB2Pîùh_GPIOA


	)

38 
	#USB_LED_PORT
 
GPIOA


	)

39 
	#RCC_APB2Pîùh_GPIO_LED
 
RCC_APB2Pîùh_GPIOA


	)

42 
	#USB_DISCONNECT
 
GPIOB


	)

43 
	#USB_DISCONNECT_PIN
 
GPIO_Pö_14


	)

44 
	#RCC_APB2Pîùh_GPIO_DISCONNECT
 
RCC_APB2Pîùh_GPIOB


	)

46 
	#USB_LED_PORT
 
GPIOF


	)

47 
	#RCC_APB2Pîùh_GPIO_LED
 
RCC_APB2Pîùh_GPIOF


	)

	@Source/User/USB_BULK/inc/usb_core.h

17 #i‚de‡
__USB_CORE_H


18 
	#__USB_CORE_H


	)

22 
	e_CONTROL_STATE


24 
	mWAIT_SETUP
,

25 
	mSETTING_UP
,

26 
	mIN_DATA
,

27 
	mOUT_DATA
,

28 
	mLAST_IN_DATA
,

29 
	mLAST_OUT_DATA
,

30 
	mWAIT_STATUS_IN
,

31 
	mWAIT_STATUS_OUT
,

32 
	mSTALLED
,

33 
	mPAUSE


34 } 
	tCONTROL_STATE
;

36 
	sO√Des¸ùt‹


38 
uöt8_t
 *
	mDes¸ùt‹
;

39 
uöt16_t
 
	mDes¸ùt‹_Size
;

41 
	tONE_DESCRIPTOR
, *
	tPONE_DESCRIPTOR
;

45 
	e_RESULT


47 
	mUSB_SUCCESS
 = 0,

48 
	mUSB_ERROR
,

49 
	mUSB_UNSUPPORT
,

50 
	mUSB_NOT_READY


52 } 
	tRESULT
;

56 
	s_ENDPOINT_INFO


80 
uöt16_t
 
	mUsb_wLígth
;

81 
uöt16_t
 
	mUsb_wOff£t
;

82 
uöt16_t
 
	mPackëSize
;

83 
	muöt8_t
 *(*
	mC›yD©a
)(
uöt16_t
 
	mLígth
);

84 }
	tENDPOINT_INFO
;

88 
	s_DEVICE


90 
uöt8_t
 
	mTŸÆ_Endpoöt
;

91 
uöt8_t
 
	mTŸÆ_C⁄figuøti⁄
;

93 
	tDEVICE
;

97 
uöt16_t
 
	mw
;

98 
	sBW


100 
uöt8_t
 
	mbb1
;

101 
uöt8_t
 
	mbb0
;

103 
	mbw
;

104 } 
	tuöt16_t_uöt8_t
;

106 
	s_DEVICE_INFO


108 
uöt8_t
 
	mUSBbmReque°Ty≥
;

109 
uöt8_t
 
	mUSBbReque°
;

110 
uöt16_t_uöt8_t
 
	mUSBwVÆues
;

111 
uöt16_t_uöt8_t
 
	mUSBwIndexs
;

112 
uöt16_t_uöt8_t
 
	mUSBwLígths
;

114 
uöt8_t
 
	mC⁄åﬁSèã
;

115 
uöt8_t
 
	mCuºít_Fótuª
;

116 
uöt8_t
 
	mCuºít_C⁄figuøti⁄
;

117 
uöt8_t
 
	mCuºít_I¡îÁ˚
;

118 
uöt8_t
 
	mCuºít_A…î«ãSëtög
;

121 
ENDPOINT_INFO
 
	mCål_Info
;

122 }
	tDEVICE_INFO
;

124 
	s_DEVICE_PROP


126 (*
	mInô
)();

127 (*
	mRe£t
)();

130 (*
	mPro˚ss_Sètus_IN
)();

131 (*
	mPro˚ss_Sètus_OUT
)();

149 
RESULT
 (*
Cœss_D©a_Sëup
)(
uöt8_t
 
	mReque°No
);

160 
RESULT
 (*
Cœss_NoD©a_Sëup
)(
uöt8_t
 
	mReque°No
);

170 
RESULT
 (*
Cœss_Gë_I¡îÁ˚_Sëtög
)(
uöt8_t
 
	mI¡îÁ˚
, uöt8_à
	mA…î«ãSëtög
);

172 
	muöt8_t
* (*
	mGëDevi˚Des¸ùt‹
)(
uöt16_t
 
	mLígth
);

173 
	muöt8_t
* (*
	mGëC⁄figDes¸ùt‹
)(
uöt16_t
 
	mLígth
);

174 
	muöt8_t
* (*
	mGëSåögDes¸ùt‹
)(
uöt16_t
 
	mLígth
);

176 
uöt8_t
* 
	mRxEP_buf„r
;

177 
uöt8_t
 
	mMaxPackëSize
;

179 }
	tDEVICE_PROP
;

181 
	s_USER_STANDARD_REQUESTS


183 (*
	mU£r_GëC⁄figuøti⁄
)();

184 (*
	mU£r_SëC⁄figuøti⁄
)();

185 (*
	mU£r_GëI¡îÁ˚
)();

186 (*
	mU£r_SëI¡îÁ˚
)();

187 (*
	mU£r_GëSètus
)();

188 (*
	mU£r_CÀ¨Fótuª
)();

189 (*
	mU£r_SëEndPoötFótuª
)();

190 (*
	mU£r_SëDevi˚Fótuª
)();

191 (*
	mU£r_SëDevi˚Addªss
)();

193 
	tUSER_STANDARD_REQUESTS
;

196 
	#Ty≥_Recùõ¡
 (
pInf‹m©i⁄
->
USBbmReque°Ty≥
 & (
REQUEST_TYPE
 | 
RECIPIENT
))

	)

198 
	#Usb_rLígth
 
Usb_wLígth


	)

199 
	#Usb_rOff£t
 
Usb_wOff£t


	)

201 
	#USBwVÆue
 
USBwVÆues
.
w


	)

202 
	#USBwVÆue0
 
USBwVÆues
.
bw
.
bb0


	)

203 
	#USBwVÆue1
 
USBwVÆues
.
bw
.
bb1


	)

204 
	#USBwIndex
 
USBwIndexs
.
w


	)

205 
	#USBwIndex0
 
USBwIndexs
.
bw
.
bb0


	)

206 
	#USBwIndex1
 
USBwIndexs
.
bw
.
bb1


	)

207 
	#USBwLígth
 
USBwLígths
.
w


	)

208 
	#USBwLígth0
 
USBwLígths
.
bw
.
bb0


	)

209 
	#USBwLígth1
 
USBwLígths
.
bw
.
bb1


	)

213 
uöt8_t
 
Sëup0_Pro˚ss
();

214 
uöt8_t
 
Po°0_Pro˚ss
();

215 
uöt8_t
 
Out0_Pro˚ss
();

216 
uöt8_t
 
In0_Pro˚ss
();

218 
RESULT
 
Sènd¨d_SëEndPoötFótuª
();

219 
RESULT
 
Sènd¨d_SëDevi˚Fótuª
();

221 
uöt8_t
 *
Sènd¨d_GëC⁄figuøti⁄
(
uöt16_t
 
Lígth
);

222 
RESULT
 
Sènd¨d_SëC⁄figuøti⁄
();

223 
uöt8_t
 *
Sènd¨d_GëI¡îÁ˚
(
uöt16_t
 
Lígth
);

224 
RESULT
 
Sènd¨d_SëI¡îÁ˚
();

225 
uöt8_t
 *
Sènd¨d_GëDes¸ùt‹D©a
(
uöt16_t
 
Lígth
, 
PONE_DESCRIPTOR
 
pDesc
);

227 
uöt8_t
 *
Sènd¨d_GëSètus
(
uöt16_t
 
Lígth
);

228 
RESULT
 
Sènd¨d_CÀ¨Fótuª
();

229 
NOP_Pro˚ss
();

231 
DEVICE_PROP
 
Devi˚_Pr›îty
;

232 
USER_STANDARD_REQUESTS
 
U£r_Sènd¨d_Reque°s
;

233 
DEVICE
 
Devi˚_TabÀ
;

234 
DEVICE_INFO
 
Devi˚_Info
;

237 
uöt16_t
 
SaveRSèã
;

238 
uöt16_t
 
SaveTSèã
;

	@Source/User/USB_BULK/inc/usb_def.h

17 #i‚de‡
__USB_DEF_H


18 
	#__USB_DEF_H


	)

22 
	e_RECIPIENT_TYPE


24 
	mDEVICE_RECIPIENT
,

25 
	mINTERFACE_RECIPIENT
,

26 
	mENDPOINT_RECIPIENT
,

27 
	mOTHER_RECIPIENT


28 } 
	tRECIPIENT_TYPE
;

31 
	e_STANDARD_REQUESTS


33 
	mGET_STATUS
 = 0,

34 
	mCLEAR_FEATURE
,

35 
	mRESERVED1
,

36 
	mSET_FEATURE
,

37 
	mRESERVED2
,

38 
	mSET_ADDRESS
,

39 
	mGET_DESCRIPTOR
,

40 
	mSET_DESCRIPTOR
,

41 
	mGET_CONFIGURATION
,

42 
	mSET_CONFIGURATION
,

43 
	mGET_INTERFACE
,

44 
	mSET_INTERFACE
,

45 
	mTOTAL_sREQUEST
,

46 
	mSYNCH_FRAME
 = 12

47 } 
	tSTANDARD_REQUESTS
;

50 
	e_DESCRIPTOR_TYPE


52 
	mDEVICE_DESCRIPTOR
 = 1,

53 
	mCONFIG_DESCRIPTOR
,

54 
	mSTRING_DESCRIPTOR
,

55 
	mINTERFACE_DESCRIPTOR
,

56 
	mENDPOINT_DESCRIPTOR


57 } 
	tDESCRIPTOR_TYPE
;

60 
	e_FEATURE_SELECTOR


62 
	mENDPOINT_STALL
,

63 
	mDEVICE_REMOTE_WAKEUP


64 } 
	tFEATURE_SELECTOR
;

68 
	#REQUEST_TYPE
 0x60

	)

69 
	#STANDARD_REQUEST
 0x00

	)

70 
	#CLASS_REQUEST
 0x20

	)

71 
	#VENDOR_REQUEST
 0x40

	)

73 
	#RECIPIENT
 0x1F

	)

	@Source/User/USB_BULK/inc/usb_desc.h

17 #i‚de‡
__USB_DESC_H


18 
	#__USB_DESC_H


	)

21 
	~"°m32f10x.h
"

26 
	#MASS_SIZ_DEVICE_DESC
 18

	)

27 
	#MASS_SIZ_CONFIG_DESC
 32

	)

29 
	#MASS_SIZ_STRING_LANGID
 4

	)

30 
	#MASS_SIZ_STRING_VENDOR
 36

	)

31 
	#MASS_SIZ_STRING_PRODUCT
 32

	)

32 
	#MASS_SIZ_STRING_SERIAL
 26

	)

33 
	#MASS_SIZ_STRING_INTERFACE
 16

	)

36 c⁄° 
uöt8_t
 
MASS_Devi˚Des¸ùt‹
[
MASS_SIZ_DEVICE_DESC
];

37 c⁄° 
uöt8_t
 
MASS_C⁄figDes¸ùt‹
[
MASS_SIZ_CONFIG_DESC
];

39 c⁄° 
uöt8_t
 
MASS_SåögL™gID
[
MASS_SIZ_STRING_LANGID
];

40 c⁄° 
uöt8_t
 
MASS_SåögVíd‹
[
MASS_SIZ_STRING_VENDOR
];

41 c⁄° 
uöt8_t
 
MASS_SåögProdu˘
[
MASS_SIZ_STRING_PRODUCT
];

42 
uöt8_t
 
MASS_SåögSîül
[
MASS_SIZ_STRING_SERIAL
];

43 c⁄° 
uöt8_t
 
MASS_SåögI¡îÁ˚
[
MASS_SIZ_STRING_INTERFACE
];

	@Source/User/USB_BULK/inc/usb_init.h

17 #i‚de‡
__USB_INIT_H


18 
	#__USB_INIT_H


	)

27 
USB_Inô
();

31 
uöt8_t
 
EPödex
;

36 
DEVICE_INFO
* 
pInf‹m©i⁄
;

39 
DEVICE_PROP
* 
pPr›îty
;

44 
USER_STANDARD_REQUESTS
 *
pU£r_Sènd¨d_Reque°s
;

46 
uöt16_t
 
SaveSèã
 ;

47 
uöt16_t
 
wI¡îru±_Mask
;

	@Source/User/USB_BULK/inc/usb_lib.h

17 #i‚de‡
__USB_LIB_H


18 
	#__USB_LIB_H


	)

21 
	~"°m32f10x.h
"

22 
	~"usb_ty≥.h
"

23 
	~"usb_ªgs.h
"

24 
	~"usb_def.h
"

25 
	~"usb_c‹e.h
"

26 
	~"usb_öô.h
"

27 
	~"usb_mem.h
"

	@Source/User/USB_BULK/inc/usb_mem.h

17 #i‚de‡
__USB_MEM_H


18 
	#__USB_MEM_H


	)

25 
U£rToPMABuf„rC›yENDP0
(
uöt8_t
 *
pbU§Buf
, 
uöt16_t
 
wNByãs
);

26 
PMAToU£rBuf„rC›yENDP0
(
uöt8_t
 *
pbU§Buf
, 
uöt16_t
 
wNByãs
);

27 
U£rToPMABuf„rC›yENDP1
(
uöt8_t
 *
pbU§Buf
, 
uöt16_t
 
wNByãs
);

28 
PMAToU£rBuf„rC›yENDP2
(
uöt8_t
 *
pbU§Buf
, 
uöt16_t
 
wNByãs
);

	@Source/User/USB_BULK/inc/usb_prop.h

17 #i‚de‡
__usb_¥›_H


18 
	#__usb_¥›_H


	)

23 
	#Mass_St‹age_GëC⁄figuøti⁄
 
NOP_Pro˚ss


	)

25 
	#Mass_St‹age_GëI¡îÁ˚
 
NOP_Pro˚ss


	)

26 
	#Mass_St‹age_SëI¡îÁ˚
 
NOP_Pro˚ss


	)

27 
	#Mass_St‹age_GëSètus
 
NOP_Pro˚ss


	)

29 
	#Mass_St‹age_SëEndPoötFótuª
 
NOP_Pro˚ss


	)

30 
	#Mass_St‹age_SëDevi˚Fótuª
 
NOP_Pro˚ss


	)

34 
	#GET_MAX_LUN
 0xFE

	)

35 
	#MASS_STORAGE_RESET
 0xFF

	)

36 
	#LUN_DATA_LENGTH
 1

	)

40 
MASS_öô
();

41 
MASS_Re£t
();

42 
Mass_St‹age_SëC⁄figuøti⁄
();

43 
Mass_St‹age_CÀ¨Fótuª
();

44 
Mass_St‹age_SëDevi˚Addªss
 ();

45 
MASS_Sètus_In
 ();

46 
MASS_Sètus_Out
 ();

47 
RESULT
 
MASS_D©a_Sëup
(
uöt8_t
);

48 
RESULT
 
MASS_NoD©a_Sëup
(
uöt8_t
);

49 
RESULT
 
MASS_Gë_I¡îÁ˚_Sëtög
(
uöt8_t
 
I¡îÁ˚
, uöt8_à
A…î«ãSëtög
);

50 
uöt8_t
 *
MASS_GëDevi˚Des¸ùt‹
(
uöt16_t
 );

51 
uöt8_t
 *
MASS_GëC⁄figDes¸ùt‹
(
uöt16_t
);

52 
uöt8_t
 *
MASS_GëSåögDes¸ùt‹
(
uöt16_t
);

53 
uöt8_t
 *
Gë_Max_Lun
(
uöt16_t
 
Lígth
);

	@Source/User/USB_BULK/inc/usb_regs.h

17 #i‚de‡
__USB_REGS_H


18 
	#__USB_REGS_H


	)

22 
	e_EP_DBUF_DIR


25 
	mEP_DBUF_ERR
,

26 
	mEP_DBUF_OUT
,

27 
	mEP_DBUF_IN


28 }
	tEP_DBUF_DIR
;

31 
	eEP_BUF_NUM


33 
	mEP_NOBUF
,

34 
	mEP_BUF0
,

35 
	mEP_BUF1


40 
	#YJW_ENDP0_TXADDR
 (0x58 * 2 + 0x40006000L)

	)

41 
	#YJW_ENDP0_RXADDR
 (0x18 * 2 + 0x40006000L)

	)

42 
	#YJW_ENDP1_TXADDR
 (0x98 * 2 + 0x40006000L)

	)

43 
	#YJW_ENDP2_RXADDR
 (0xD8 * 2 + 0x40006000L)

	)

47 
	#ENDP0_RXADDR
 (0x18)

	)

48 
	#ENDP0_TXADDR
 (0x58)

	)

52 
	#ENDP1_TXADDR
 (0x98)

	)

56 
	#ENDP2_RXADDR
 (0xD8)

	)

62 
	#RegBa£
 (0x40005C00LË

	)

63 
	#PMAAddr
 (0x40006000LË

	)

70 
	#CNTR
 ((
__IO
 *)(
RegBa£
 + 0x40))

	)

72 
	#ISTR
 ((
__IO
 *)(
RegBa£
 + 0x44))

	)

74 
	#FNR
 ((
__IO
 *)(
RegBa£
 + 0x48))

	)

76 
	#DADDR
 ((
__IO
 *)(
RegBa£
 + 0x4C))

	)

78 
	#BTABLE
 ((
__IO
 *)(
RegBa£
 + 0x50))

	)

82 
	#EP0REG
 ((
__IO
 *)(
RegBa£
)Ë

	)

85 
	#ENDP0
 ((
uöt8_t
)0)

	)

86 
	#ENDP1
 ((
uöt8_t
)1)

	)

87 
	#ENDP2
 ((
uöt8_t
)2)

	)

88 
	#ENDP3
 ((
uöt8_t
)3)

	)

89 
	#ENDP4
 ((
uöt8_t
)4)

	)

90 
	#ENDP5
 ((
uöt8_t
)5)

	)

91 
	#ENDP6
 ((
uöt8_t
)6)

	)

92 
	#ENDP7
 ((
uöt8_t
)7)

	)

96 
	#ISTR_CTR
 (0x8000Ë

	)

97 
	#ISTR_DOVR
 (0x4000Ë

	)

98 
	#ISTR_ERR
 (0x2000Ë

	)

99 
	#ISTR_WKUP
 (0x1000Ë

	)

100 
	#ISTR_SUSP
 (0x0800Ë

	)

101 
	#ISTR_RESET
 (0x0400Ë

	)

102 
	#ISTR_SOF
 (0x0200Ë

	)

103 
	#ISTR_ESOF
 (0x0100Ë

	)

106 
	#ISTR_DIR
 (0x0010Ë

	)

107 
	#ISTR_EP_ID
 (0x000FË

	)

109 
	#CLR_CTR
 (~
ISTR_CTR
Ë

	)

110 
	#CLR_DOVR
 (~
ISTR_DOVR
Ë

	)

111 
	#CLR_ERR
 (~
ISTR_ERR
Ë

	)

112 
	#CLR_WKUP
 (~
ISTR_WKUP
Ë

	)

113 
	#CLR_SUSP
 (~
ISTR_SUSP
Ë

	)

114 
	#CLR_RESET
 (~
ISTR_RESET
Ë

	)

115 
	#CLR_SOF
 (~
ISTR_SOF
Ë

	)

116 
	#CLR_ESOF
 (~
ISTR_ESOF
Ë

	)

121 
	#CNTR_CTRM
 (0x8000Ë

	)

122 
	#CNTR_DOVRM
 (0x4000Ë

	)

123 
	#CNTR_ERRM
 (0x2000Ë

	)

124 
	#CNTR_WKUPM
 (0x1000Ë

	)

125 
	#CNTR_SUSPM
 (0x0800Ë

	)

126 
	#CNTR_RESETM
 (0x0400Ë

	)

127 
	#CNTR_SOFM
 (0x0200Ë

	)

128 
	#CNTR_ESOFM
 (0x0100Ë

	)

131 
	#CNTR_RESUME
 (0x0010Ë

	)

132 
	#CNTR_FSUSP
 (0x0008Ë

	)

133 
	#CNTR_LPMODE
 (0x0004Ë

	)

134 
	#CNTR_PDWN
 (0x0002Ë

	)

135 
	#CNTR_FRES
 (0x0001Ë

	)

140 
	#FNR_RXDP
 (0x8000Ë

	)

141 
	#FNR_RXDM
 (0x4000Ë

	)

142 
	#FNR_LCK
 (0x2000Ë

	)

143 
	#FNR_LSOF
 (0x1800Ë

	)

144 
	#FNR_FN
 (0x07FFË

	)

148 
	#DADDR_EF
 (0x80)

	)

149 
	#DADDR_ADD
 (0x7F)

	)

154 
	#EP_CTR_RX
 (0x8000Ë

	)

155 
	#EP_DTOG_RX
 (0x4000Ë

	)

156 
	#EPRX_STAT
 (0x3000Ë

	)

157 
	#EP_SETUP
 (0x0800Ë

	)

158 
	#EP_T_FIELD
 (0x0600Ë

	)

159 
	#EP_KIND
 (0x0100Ë

	)

160 
	#EP_CTR_TX
 (0x0080Ë

	)

161 
	#EP_DTOG_TX
 (0x0040Ë

	)

162 
	#EPTX_STAT
 (0x0030Ë

	)

163 
	#EPADDR_FIELD
 (0x000FË

	)

166 
	#EPREG_MASK
 (
EP_CTR_RX
|
EP_SETUP
|
EP_T_FIELD
|
EP_KIND
|
EP_CTR_TX
|
EPADDR_FIELD
)

	)

169 
	#EP_TYPE_MASK
 (0x0600Ë

	)

170 
	#EP_BULK
 (0x0000Ë

	)

171 
	#EP_CONTROL
 (0x0200Ë

	)

172 
	#EP_ISOCHRONOUS
 (0x0400Ë

	)

173 
	#EP_INTERRUPT
 (0x0600Ë

	)

174 
	#EP_T_MASK
 (~
EP_T_FIELD
 & 
EPREG_MASK
)

	)

178 
	#EPKIND_MASK
 (~
EP_KIND
 & 
EPREG_MASK
)

	)

181 
	#EP_TX_DIS
 (0x0000Ë

	)

182 
	#EP_TX_STALL
 (0x0010Ë

	)

183 
	#EP_TX_NAK
 (0x0020Ë

	)

184 
	#EP_TX_VALID
 (0x0030Ë

	)

185 
	#EPTX_DTOG1
 (0x0010Ë

	)

186 
	#EPTX_DTOG2
 (0x0020Ë

	)

187 
	#EPTX_DTOGMASK
 (
EPTX_STAT
|
EPREG_MASK
)

	)

190 
	#EP_RX_DIS
 (0x0000Ë

	)

191 
	#EP_RX_STALL
 (0x1000Ë

	)

192 
	#EP_RX_NAK
 (0x2000Ë

	)

193 
	#EP_RX_VALID
 (0x3000Ë

	)

194 
	#EPRX_DTOG1
 (0x1000Ë

	)

195 
	#EPRX_DTOG2
 (0x2000Ë

	)

196 
	#EPRX_DTOGMASK
 (
EPRX_STAT
|
EPREG_MASK
)

	)

199 
	#_SëCNTR
(
wRegVÆue
Ë(*
CNTR
 = (
uöt16_t
)wRegVÆue)

	)

202 
	#_SëISTR
(
wRegVÆue
Ë(*
ISTR
 = (
uöt16_t
)wRegVÆue)

	)

205 
	#_SëDADDR
(
wRegVÆue
Ë(*
DADDR
 = (
uöt16_t
)wRegVÆue)

	)

208 
	#_SëBTABLE
(
wRegVÆue
)(*
BTABLE
 = (
uöt16_t
)(wRegVÆuê& 0xFFF8))

	)

211 
	#_GëCNTR
(Ë((
uöt16_t
Ë*
CNTR
)

	)

214 
	#_GëISTR
(Ë((
uöt16_t
Ë*
ISTR
)

	)

217 
	#_GëFNR
(Ë((
uöt16_t
Ë*
FNR
)

	)

220 
	#_GëDADDR
(Ë((
uöt16_t
Ë*
DADDR
)

	)

223 
	#_GëBTABLE
(Ë((
uöt16_t
Ë*
BTABLE
)

	)

226 
	#_SëENDPOINT
(
bEpNum
,
wRegVÆue
Ë(*(
EP0REG
 + bEpNum)\

	)

227 (
	guöt16_t
)
	gwRegVÆue
)

230 
	#_GëENDPOINT
(
bEpNum
Ë((
uöt16_t
)(*(
EP0REG
 + bEpNum)))

	)

240 
	#_SëEPTy≥
(
bEpNum
,
wTy≥
Ë(
	`_SëENDPOINT
(bEpNum,\

	)

241 ((
_GëENDPOINT
(
bEpNum
Ë& 
	gEP_T_MASK
Ë| 
	gwTy≥
)))

250 
	#_GëEPTy≥
(
bEpNum
Ë(
	`_GëENDPOINT
(bEpNumË& 
EP_T_FIELD
)

	)

260 
	#_SëEPTxSètus
(
bEpNum
,
wSèã
Ë{\

	)

261 
uöt16_t
 
	g_wRegVÆ
; \

262 
	g_wRegVÆ
 = 
_GëENDPOINT
(
bEpNum
Ë& 
EPTX_DTOGMASK
;\

264 if((
	gEPTX_DTOG1
 & 
	gwSèã
)!= 0) \

265 
_wRegVÆ
 ^
EPTX_DTOG1
; \

267 if((
	gEPTX_DTOG2
 & 
	gwSèã
)!= 0) \

268 
_wRegVÆ
 ^
EPTX_DTOG2
; \

269 
_SëENDPOINT
(
bEpNum
, 
_wRegVÆ
); \

280 
	#_SëEPRxSètus
(
bEpNum
,
wSèã
Ë{\

	)

281 
uöt16_t
 
	g_wRegVÆ
; \

283 
	g_wRegVÆ
 = 
_GëENDPOINT
(
bEpNum
Ë& 
EPRX_DTOGMASK
;\

285 if((
	gEPRX_DTOG1
 & 
	gwSèã
)!= 0) \

286 
_wRegVÆ
 ^
EPRX_DTOG1
; \

288 if((
	gEPRX_DTOG2
 & 
	gwSèã
)!= 0) \

289 
_wRegVÆ
 ^
EPRX_DTOG2
; \

290 
_SëENDPOINT
(
bEpNum
, 
_wRegVÆ
); \

300 
	#_GëEPTxSètus
(
bEpNum
Ë((
uöt16_t
)
	`_GëENDPOINT
(bEpNumË& 
EPTX_STAT
)

	)

302 
	#_GëEPRxSètus
(
bEpNum
Ë((
uöt16_t
)
	`_GëENDPOINT
(bEpNumË& 
EPRX_STAT
)

	)

311 
	#_SëEPTxVÆid
(
bEpNum
Ë(
	`_SëEPTxSètus
(bEpNum, 
EP_TX_VALID
))

	)

313 
	#_SëEPRxVÆid
(
bEpNum
Ë(
	`_SëEPRxSètus
(bEpNum, 
EP_RX_VALID
))

	)

322 
	#_GëTxSèŒSètus
(
bEpNum
Ë(
	`_GëEPTxSètus
(bEpNumË\

	)

323 =
EP_TX_STALL
)

324 
	#_GëRxSèŒSètus
(
bEpNum
Ë(
	`_GëEPRxSètus
(bEpNumË\

	)

325 =
EP_RX_STALL
)

334 
	#_SëEP_KIND
(
bEpNum
Ë(
	`_SëENDPOINT
(bEpNum, \

	)

335 (
_GëENDPOINT
(
bEpNum
Ë| 
	gEP_KIND
Ë& 
	gEPREG_MASK
))

336 
	#_CÀ¨EP_KIND
(
bEpNum
Ë(
	`_SëENDPOINT
(bEpNum, \

	)

337 (
_GëENDPOINT
(
bEpNum
Ë& 
	gEPKIND_MASK
)))

346 
	#_Së_Sètus_Out
(
bEpNum
Ë
	`_SëEP_KIND
(bEpNum)

	)

347 
	#_CÀ¨_Sètus_Out
(
bEpNum
Ë
	`_CÀ¨EP_KIND
(bEpNum)

	)

356 
	#_SëEPDoubÀBuff
(
bEpNum
Ë
	`_SëEP_KIND
(bEpNum)

	)

357 
	#_CÀ¨EPDoubÀBuff
(
bEpNum
Ë
	`_CÀ¨EP_KIND
(bEpNum)

	)

366 
	#_CÀ¨EP_CTR_RX
(
bEpNum
Ë(
	`_SëENDPOINT
(bEpNum,\

	)

367 
_GëENDPOINT
(
bEpNum
Ë& 0x7FFF & 
	gEPREG_MASK
))

368 
	#_CÀ¨EP_CTR_TX
(
bEpNum
Ë(
	`_SëENDPOINT
(bEpNum,\

	)

369 
_GëENDPOINT
(
bEpNum
Ë& 0xFF7F & 
	gEPREG_MASK
))

378 
	#_ToggÀDTOG_RX
(
bEpNum
Ë(
	`_SëENDPOINT
(bEpNum, \

	)

379 
	gEP_DTOG_RX
 | 
_GëENDPOINT
(
bEpNum
Ë& 
	gEPREG_MASK
))

380 
	#_ToggÀDTOG_TX
(
bEpNum
Ë(
	`_SëENDPOINT
(bEpNum, \

	)

381 
	gEP_DTOG_TX
 | 
_GëENDPOINT
(
bEpNum
Ë& 
	gEPREG_MASK
))

390 
	#_CÀ¨DTOG_RX
(
bEpNum
Ëif((
	`_GëENDPOINT
(bEpNumË& 
EP_DTOG_RX
Ë!0)\

	)

391 
	$_ToggÀDTOG_RX
(
bEpNum
)

392 
	#_CÀ¨DTOG_TX
(
bEpNum
Ëif((
	`_GëENDPOINT
(bEpNumË& 
EP_DTOG_TX
Ë!0)\

	)

393 
	$_ToggÀDTOG_TX
(
bEpNum
)

402 
	#_SëEPAddªss
(
bEpNum
,
bAddr
Ë
	`_SëENDPOINT
(bEpNum,\

	)

403 
	`_GëENDPOINT
(
bEpNum
Ë& 
EPREG_MASK
 | 
bAddr
)

412 
	#_GëEPAddªss
(
bEpNum
Ë((
uöt8_t
)(
	`_GëENDPOINT
(bEpNumË& 
EPADDR_FIELD
))

	)

414 
	#_pEPTxAddr
(
bEpNum
Ë((
uöt32_t
 *)((
	`_GëBTABLE
()+bEpNum*8 )*2 + 
PMAAddr
))

	)

415 
	#_pEPTxCou¡
(
bEpNum
Ë((
uöt32_t
 *)((
	`_GëBTABLE
()+bEpNum*8+2)*2 + 
PMAAddr
))

	)

416 
	#_pEPRxAddr
(
bEpNum
Ë((
uöt32_t
 *)((
	`_GëBTABLE
()+bEpNum*8+4)*2 + 
PMAAddr
))

	)

417 
	#_pEPRxCou¡
(
bEpNum
Ë((
uöt32_t
 *)((
	`_GëBTABLE
()+bEpNum*8+6)*2 + 
PMAAddr
))

	)

427 
	#_SëEPTxAddr
(
bEpNum
,
wAddr
Ë(*
	`_pEPTxAddr
(bEpNumË((wAdd∏>> 1Ë<< 1))

	)

428 
	#_SëEPRxAddr
(
bEpNum
,
wAddr
Ë(*
	`_pEPRxAddr
(bEpNumË((wAdd∏>> 1Ë<< 1))

	)

437 
	#_GëEPTxAddr
(
bEpNum
Ë((
uöt16_t
)*
	`_pEPTxAddr
(bEpNum))

	)

438 
	#_GëEPRxAddr
(
bEpNum
Ë((
uöt16_t
)*
	`_pEPRxAddr
(bEpNum))

	)

448 
	#_BlocksOf32
(
dwReg
,
wCou¡
,
wNBlocks
Ë{\

	)

449 
wNBlocks
 = 
wCou¡
 >> 5;\

450 if((
wCou¡
 & 0x1f) == 0)\

451 
wNBlocks
--;\

452 *
pdwReg
 = (
uöt32_t
)((
wNBlocks
 << 10) | 0x8000);\

453 
	}
}

455 
	#_BlocksOf2
(
dwReg
,
wCou¡
,
wNBlocks
Ë{\

	)

456 
	gwNBlocks
 = 
wCou¡
 >> 1;\

457 if((
	gwCou¡
 & 0x1) != 0)\

458 
wNBlocks
++;\

459 *
	gpdwReg
 = (
uöt32_t
)(
wNBlocks
 << 10);\

462 
	#_SëEPCou¡RxReg
(
dwReg
,
wCou¡
Ë{\

	)

463 
uöt16_t
 
	gwNBlocks
;\

464 if(
	gwCou¡
 > 62){
_BlocksOf32
(
dwReg
,
wCou¡
,
wNBlocks
);}\

465 {
_BlocksOf2
(
dwReg
,
wCou¡
,
wNBlocks
);}\

470 
	#_SëEPRxDblBuf0Cou¡
(
bEpNum
,
wCou¡
Ë{\

	)

471 
uöt32_t
 *
	gpdwReg
 = 
_pEPTxCou¡
(
bEpNum
); \

472 
_SëEPCou¡RxReg
(
pdwReg
, 
wCou¡
);\

482 
	#_SëEPTxCou¡
(
bEpNum
,
wCou¡
Ë(*
	`_pEPTxCou¡
(bEpNumËwCou¡)

	)

483 
	#_SëEPRxCou¡
(
bEpNum
,
wCou¡
Ë{\

	)

484 
uöt32_t
 *
	gpdwReg
 = 
_pEPRxCou¡
(
bEpNum
); \

485 
_SëEPCou¡RxReg
(
pdwReg
, 
wCou¡
);\

494 
	#_GëEPTxCou¡
(
bEpNum
)((
uöt16_t
)(*
	`_pEPTxCou¡
(bEpNum)Ë& 0x3ff)

	)

495 
	#_GëEPRxCou¡
(
bEpNum
)((
uöt16_t
)(*
	`_pEPRxCou¡
(bEpNum)Ë& 0x3ff)

	)

505 
	#_SëEPDblBuf0Addr
(
bEpNum
,
wBuf0Addr
Ë{
	`_SëEPTxAddr
(bEpNum, wBuf0Addr);}

	)

506 
	#_SëEPDblBuf1Addr
(
bEpNum
,
wBuf1Addr
Ë{
	`_SëEPRxAddr
(bEpNum, wBuf1Addr);}

	)

517 
	#_SëEPDblBuffAddr
(
bEpNum
,
wBuf0Addr
,
wBuf1Addr
Ë{ \

	)

518 
_SëEPDblBuf0Addr
(
bEpNum
, 
wBuf0Addr
);\

519 
_SëEPDblBuf1Addr
(
bEpNum
, 
wBuf1Addr
);\

529 
	#_GëEPDblBuf0Addr
(
bEpNum
Ë(
	`_GëEPTxAddr
(bEpNum))

	)

530 
	#_GëEPDblBuf1Addr
(
bEpNum
Ë(
	`_GëEPRxAddr
(bEpNum))

	)

542 
	#_SëEPDblBuf0Cou¡
(
bEpNum
, 
bDú
, 
wCou¡
Ë{ \

	)

543 if(
	gbDú
 =
EP_DBUF_OUT
)\

545 {
_SëEPRxDblBuf0Cou¡
(
bEpNum
,
wCou¡
);} \

546 if(
	gbDú
 =
EP_DBUF_IN
)\

548 *
_pEPTxCou¡
(
bEpNum
Ë(
uöt32_t
)
wCou¡
; \

551 
	#_SëEPDblBuf1Cou¡
(
bEpNum
, 
bDú
, 
wCou¡
Ë{ \

	)

552 if(
	gbDú
 =
EP_DBUF_OUT
)\

554 {
_SëEPRxCou¡
(
bEpNum
,
wCou¡
);}\

555 if(
	gbDú
 =
EP_DBUF_IN
)\

557 *
_pEPRxCou¡
(
bEpNum
Ë(
uöt32_t
)
wCou¡
; \

560 
	#_SëEPDblBuffCou¡
(
bEpNum
, 
bDú
, 
wCou¡
Ë{\

	)

561 
_SëEPDblBuf0Cou¡
(
bEpNum
, 
bDú
, 
wCou¡
); \

562 
_SëEPDblBuf1Cou¡
(
bEpNum
, 
bDú
, 
wCou¡
); \

572 
	#_GëEPDblBuf0Cou¡
(
bEpNum
Ë(
	`_GëEPTxCou¡
(bEpNum))

	)

573 
	#_GëEPDblBuf1Cou¡
(
bEpNum
Ë(
	`_GëEPRxCou¡
(bEpNum))

	)

577 
__IO
 
uöt16_t
 
wI°r
;

580 
SëDouBÀBuffEPSèŒ
(
uöt8_t
 , uöt8_à
bDú
);

581 
EP_DBUF_DIR
 
GëEPDblBufDú
(
uöt8_t
 );

582 
FªeU£rBuf„r
(
uöt8_t
 
bEpNum
 , uöt8_à
bDú
);

	@Source/User/USB_BULK/inc/usb_type.h

17 #i‚de‡
__USB_TYPE_H


18 
	#__USB_TYPE_H


	)

25 #i‚de‡
NULL


26 
	#NULL
 ((*)0)

	)

29 #i‚de‡
__STM32F10x_H


31 sig√d 
	ts32
;

32 sig√d 
	ts16
;

33 sig√d 
	ts8
;

35 vﬁ©ûêsig√d 
	tvs32
;

36 vﬁ©ûêsig√d 
	tvs16
;

37 vﬁ©ûêsig√d 
	tvs8
;

39 
	tu32
;

40 
	tu16
;

41 
	tu8
;

43 c⁄° 
	tuc32
;

44 c⁄° 
	tuc16
;

45 c⁄° 
	tuc8
;

47 vﬁ©ûê
	tvu32
;

48 vﬁ©ûê
	tvu16
;

49 vﬁ©ûê
	tvu8
;

51 vﬁ©ûêc⁄° 
	tvuc32
;

52 vﬁ©ûêc⁄° 
	tvuc16
;

53 vﬁ©ûêc⁄° 
	tvuc8
;

58 
	mFALSE
 = 0, 
	mTRUE
 = !
FALSE


60 
	tboﬁ
;

62 íum { 
	mRESET
 = 0, 
	mSET
 = !
RESET
 } 
	tFœgSètus
, 
	tITSètus
;

64 íum { 
	mDISABLE
 = 0, 
	mENABLE
 = !
DISABLE
} 
	tFun˘i⁄ÆSèã
;

66 íum { 
	mERROR
 = 0, 
	mSUCCESS
 = !
ERROR
} 
	tEº‹Sètus
;

	@Source/User/USB_BULK/src/hw_config.c

17 
	~"°m32f10x_ô.h
"

18 
	~"hw_c⁄fig.h
"

20 
	~"∂©f‹m_c⁄fig.h
"

22 
	~"usb_desc.h
"

24 
	~"usb_öô.h
"

25 
	~"usb_ªgs.h
"

28 
__IO
 
uöt32_t
 
	gbUSBDevi˚Sèã
 = 
UNCONNECTED
;

37 
	$Së_USBClock
()

40 
	`USB_Disc⁄√˘_C⁄fig
();

43 
	`RCC_USBCLKC⁄fig
(
RCC_USBCLKSour˚_PLLCLK_1Div5
);

46 
	`RCC_APB1PîùhClockCmd
(
RCC_APB1Pîùh_USB
, 
ENABLE
);

47 
	}
}

55 
	$USB_I¡îru±s_C⁄fig
()

57 
NVIC_InôTy≥Def
 
NVIC_InôSåu˘uª
;

59 
	`NVIC_Pri‹ôyGroupC⁄fig
(
NVIC_Pri‹ôyGroup_1
);

61 
NVIC_InôSåu˘uª
.
NVIC_IRQCh™√l
 = 
USB_LP_CAN1_RX0_IRQn
;

62 
NVIC_InôSåu˘uª
.
NVIC_IRQCh™√lPªem±i⁄Pri‹ôy
 = 1;

63 
NVIC_InôSåu˘uª
.
NVIC_IRQCh™√lSubPri‹ôy
 = 1;

64 
NVIC_InôSåu˘uª
.
NVIC_IRQCh™√lCmd
 = 
ENABLE
;

65 
	`NVIC_Inô
(&
NVIC_InôSåu˘uª
);

67 
NVIC_InôSåu˘uª
.
NVIC_IRQCh™√l
 = 
USB_HP_CAN1_TX_IRQn
;

68 
NVIC_InôSåu˘uª
.
NVIC_IRQCh™√lPªem±i⁄Pri‹ôy
 = 1;

69 
NVIC_InôSåu˘uª
.
NVIC_IRQCh™√lSubPri‹ôy
 = 0;

70 
NVIC_InôSåu˘uª
.
NVIC_IRQCh™√lCmd
 = 
ENABLE
;

71 
	`NVIC_Inô
(&
NVIC_InôSåu˘uª
);

72 
	}
}

81 
	$Gë_SîülNum
()

83 
uöt32_t
 
Devi˚_Sîül0
, 
Devi˚_Sîül1
, 
Devi˚_Sîül2
;

85 
Devi˚_Sîül0
 = *(
__IO
 
uöt32_t
*)(0x1FFFF7E8);

86 
Devi˚_Sîül1
 = *(
__IO
 
uöt32_t
*)(0x1FFFF7EC);

87 
Devi˚_Sîül2
 = *(
__IO
 
uöt32_t
*)(0x1FFFF7F0);

89 i‡(
Devi˚_Sîül0
 != 0)

91 
MASS_SåögSîül
[2] = (
uöt8_t
)(
Devi˚_Sîül0
 & 0x000000FF);

92 
MASS_SåögSîül
[4] = (
uöt8_t
)((
Devi˚_Sîül0
 & 0x0000FF00) >> 8);

93 
MASS_SåögSîül
[6] = (
uöt8_t
)((
Devi˚_Sîül0
 & 0x00FF0000) >> 16);

94 
MASS_SåögSîül
[8] = (
uöt8_t
)((
Devi˚_Sîül0
 & 0xFF000000) >> 24);

96 
MASS_SåögSîül
[10] = (
uöt8_t
)(
Devi˚_Sîül1
 & 0x000000FF);

97 
MASS_SåögSîül
[12] = (
uöt8_t
)((
Devi˚_Sîül1
 & 0x0000FF00) >> 8);

98 
MASS_SåögSîül
[14] = (
uöt8_t
)((
Devi˚_Sîül1
 & 0x00FF0000) >> 16);

99 
MASS_SåögSîül
[16] = (
uöt8_t
)((
Devi˚_Sîül1
 & 0xFF000000) >> 24);

101 
MASS_SåögSîül
[18] = (
uöt8_t
)(
Devi˚_Sîül2
 & 0x000000FF);

102 
MASS_SåögSîül
[20] = (
uöt8_t
)((
Devi˚_Sîül2
 & 0x0000FF00) >> 8);

103 
MASS_SåögSîül
[22] = (
uöt8_t
)((
Devi˚_Sîül2
 & 0x00FF0000) >> 16);

104 
MASS_SåögSîül
[24] = (
uöt8_t
)((
Devi˚_Sîül2
 & 0xFF000000) >> 24);

106 
	}
}

114 
	$USB_Disc⁄√˘_C⁄fig
()

116 
GPIO_InôTy≥Def
 
GPIO_InôSåu˘uª
;

119 
	`RCC_APB2PîùhClockCmd
(
RCC_APB2Pîùh_GPIO_DISCONNECT
, 
ENABLE
);

122 
GPIO_InôSåu˘uª
.
GPIO_Pö
 = 
USB_DISCONNECT_PIN
;

123 
GPIO_InôSåu˘uª
.
GPIO_S≥ed
 = 
GPIO_S≥ed_50MHz
;

124 
GPIO_InôSåu˘uª
.
GPIO_Mode
 = 
GPIO_Mode_Out_OD
;

125 
	`GPIO_Inô
(
USB_DISCONNECT
, &
GPIO_InôSåu˘uª
);

134 
	}
}

143 
RESULT
 
	$PowîOn
()

145 
uöt16_t
 
wRegVÆ
;

148 
	`GPIO_SëBôs
(
USB_DISCONNECT
, 
USB_DISCONNECT_PIN
);

151 
wRegVÆ
 = 
CNTR_FRES
;

152 
	`_SëCNTR
(
wRegVÆ
);

155 
wI¡îru±_Mask
 = 0;

156 
	`_SëCNTR
(
wI¡îru±_Mask
);

158 
	`_SëISTR
(0);

160 
wI¡îru±_Mask
 = 
CNTR_RESETM
 | 
CNTR_SUSPM
 | 
CNTR_WKUPM
;

161 
	`_SëCNTR
(
wI¡îru±_Mask
);

163  
USB_SUCCESS
;

164 
	}
}

	@Source/User/USB_BULK/src/usb_core.c

17 
	~"usb_lib.h
"

21 
	#VÆBô
(
VAR
,
Pœ˚
Ë(VAR & (1 << Pœ˚))

	)

22 
	#SëBô
(
VAR
,
Pœ˚
Ë(VAR |(1 << Pœ˚))

	)

23 
	#CÃBô
(
VAR
,
Pœ˚
Ë(VAR &((1 << Pœ˚Ë^ 255))

	)

25 
	#Síd0LígthD©a
(Ë{ 
	`_SëEPTxCou¡
(
ENDP0
, 0); \

	)

26 
vSëEPTxSètus
(
EP_TX_VALID
); \

29 
	#vSëEPRxSètus
(
°
Ë(
SaveRSèã
 = st)

	)

30 
	#vSëEPTxSètus
(
°
Ë(
SaveTSèã
 = st)

	)

32 
	#USB_SètusIn
(Ë
	`Síd0LígthD©a
()

	)

33 
	#USB_SètusOut
(Ë
	`vSëEPRxSètus
(
EP_RX_VALID
)

	)

35 
	#SètusInfo0
 
SètusInfo
.
bw
.
bb1


	)

36 
	#SètusInfo1
 
SètusInfo
.
bw
.
bb0


	)

40 
uöt16_t_uöt8_t
 
	gSètusInfo
;

41 
boﬁ
 
	gD©a_Mul_MaxPackëSize
 = 
FALSE
;

43 
D©aSègeOut
();

44 
D©aSègeIn
();

45 
NoD©a_Sëup0
();

46 
D©a_Sëup0
();

57 
uöt8_t
 *
	$Sènd¨d_GëC⁄figuøti⁄
(
uöt16_t
 
Lígth
)

59 i‡(
Lígth
 == 0)

61 
pInf‹m©i⁄
->
Cål_Info
.
Usb_wLígth
 =

62 (
pInf‹m©i⁄
->
Cuºít_C⁄figuøti⁄
);

65 
pU£r_Sènd¨d_Reque°s
->
	`U£r_GëC⁄figuøti⁄
();

66  (
uöt8_t
 *)&
pInf‹m©i⁄
->
Cuºít_C⁄figuøti⁄
;

67 
	}
}

78 
RESULT
 
	$Sènd¨d_SëC⁄figuøti⁄
()

81 i‡((
pInf‹m©i⁄
->
USBwVÆue0
 <=

82 
Devi˚_TabÀ
.
TŸÆ_C⁄figuøti⁄
Ë&& (
pInf‹m©i⁄
->
USBwVÆue1
 == 0)

83 && (
pInf‹m©i⁄
->
USBwIndex
 == 0))

85 
pInf‹m©i⁄
->
Cuºít_C⁄figuøti⁄
 =ÖInf‹m©i⁄->
USBwVÆue0
;

86 
pU£r_Sènd¨d_Reque°s
->
	`U£r_SëC⁄figuøti⁄
();

87  
USB_SUCCESS
;

91  
USB_UNSUPPORT
;

93 
	}
}

103 
uöt8_t
 *
	$Sènd¨d_GëI¡îÁ˚
(
uöt16_t
 
Lígth
)

105 i‡(
Lígth
 == 0)

107 
pInf‹m©i⁄
->
Cål_Info
.
Usb_wLígth
 =

108 (
pInf‹m©i⁄
->
Cuºít_A…î«ãSëtög
);

111 
pU£r_Sènd¨d_Reque°s
->
	`U£r_GëI¡îÁ˚
();

112  (
uöt8_t
 *)&
pInf‹m©i⁄
->
Cuºít_A…î«ãSëtög
;

113 
	}
}

124 
RESULT
 
	$Sènd¨d_SëI¡îÁ˚
()

126 
RESULT
 
Re
;

129 
Re
 = (*
pPr›îty
->
Cœss_Gë_I¡îÁ˚_Sëtög
)(
pInf‹m©i⁄
->
USBwIndex0
,ÖInf‹m©i⁄->
USBwVÆue0
);

131 i‡(
pInf‹m©i⁄
->
Cuºít_C⁄figuøti⁄
 != 0)

133 i‡((
Re
 !
USB_SUCCESS
Ë|| (
pInf‹m©i⁄
->
USBwIndex1
 != 0)

134 || (
pInf‹m©i⁄
->
USBwVÆue1
 != 0))

136  
USB_UNSUPPORT
;

138 i‡(
Re
 =
USB_SUCCESS
)

140 
pU£r_Sènd¨d_Reque°s
->
	`U£r_SëI¡îÁ˚
();

141 
pInf‹m©i⁄
->
Cuºít_I¡îÁ˚
 =ÖInf‹m©i⁄->
USBwIndex0
;

142 
pInf‹m©i⁄
->
Cuºít_A…î«ãSëtög
 =ÖInf‹m©i⁄->
USBwVÆue0
;

143  
USB_SUCCESS
;

148  
USB_UNSUPPORT
;

149 
	}
}

159 
uöt8_t
 *
	$Sènd¨d_GëSètus
(
uöt16_t
 
Lígth
)

161 i‡(
Lígth
 == 0)

163 
pInf‹m©i⁄
->
Cål_Info
.
Usb_wLígth
 = 2;

167 
SètusInfo
.
w
 = 0;

170 i‡(
Ty≥_Recùõ¡
 =(
STANDARD_REQUEST
 | 
DEVICE_RECIPIENT
))

173 
uöt8_t
 
Fótuª
 = 
pInf‹m©i⁄
->
Cuºít_Fótuª
;

176 i‡(
	`VÆBô
(
Fótuª
, 5))

178 
	`SëBô
(
SètusInfo0
, 1);

182 i‡(
	`VÆBô
(
Fótuª
, 6))

184 
	`CÃBô
(
SètusInfo0
, 0);

188 
	`SëBô
(
SètusInfo0
, 0);

192 i‡(
Ty≥_Recùõ¡
 =(
STANDARD_REQUEST
 | 
INTERFACE_RECIPIENT
))

194  (
uöt8_t
 *)&
SètusInfo
;

197 i‡(
Ty≥_Recùõ¡
 =(
STANDARD_REQUEST
 | 
ENDPOINT_RECIPIENT
))

199 
uöt8_t
 
Rñ©ed_Endpoöt
;

200 
uöt8_t
 
wIndex0
 = 
pInf‹m©i⁄
->
USBwIndex0
;

202 
Rñ©ed_Endpoöt
 = (
wIndex0
 & 0x0f);

203 i‡(
	`VÆBô
(
wIndex0
, 7))

206 i‡(
	`_GëTxSèŒSètus
(
Rñ©ed_Endpoöt
))

208 
	`SëBô
(
SètusInfo0
, 0);

214 i‡(
	`_GëRxSèŒSètus
(
Rñ©ed_Endpoöt
))

216 
	`SëBô
(
SètusInfo0
, 0);

223  
NULL
;

225 
pU£r_Sènd¨d_Reque°s
->
	`U£r_GëSètus
();

226  (
uöt8_t
 *)&
SètusInfo
;

227 
	}
}

237 
RESULT
 
	$Sènd¨d_CÀ¨Fótuª
()

239 
uöt32_t
 
Ty≥_Rec
 = 
Ty≥_Recùõ¡
;

240 
uöt32_t
 
Sètus
;

243 i‡(
Ty≥_Rec
 =(
STANDARD_REQUEST
 | 
DEVICE_RECIPIENT
))

245 
	`CÃBô
(
pInf‹m©i⁄
->
Cuºít_Fótuª
, 5);

246  
USB_SUCCESS
;

248 i‡(
Ty≥_Rec
 =(
STANDARD_REQUEST
 | 
ENDPOINT_RECIPIENT
))

250 
DEVICE
* 
pDev
;

251 
uöt32_t
 
Rñ©ed_Endpoöt
;

252 
uöt32_t
 
wIndex0
;

253 
uöt32_t
 
rEP
;

255 i‡((
pInf‹m©i⁄
->
USBwVÆue
 !
ENDPOINT_STALL
)

256 || (
pInf‹m©i⁄
->
USBwIndex1
 != 0))

258  
USB_UNSUPPORT
;

261 
pDev
 = &
Devi˚_TabÀ
;

262 
wIndex0
 = 
pInf‹m©i⁄
->
USBwIndex0
;

263 
rEP
 = 
wIndex0
 & ~0x80;

264 
Rñ©ed_Endpoöt
 = 
ENDP0
 + 
rEP
;

266 i‡(
	`VÆBô
(
pInf‹m©i⁄
->
USBwIndex0
, 7))

270 
Sètus
 = 
	`_GëEPTxSètus
(
Rñ©ed_Endpoöt
);

274 
Sètus
 = 
	`_GëEPRxSètus
(
Rñ©ed_Endpoöt
);

277 i‡((
rEP
 >
pDev
->
TŸÆ_Endpoöt
Ë|| (
Sètus
 == 0)

278 || (
pInf‹m©i⁄
->
Cuºít_C⁄figuøti⁄
 == 0))

280  
USB_UNSUPPORT
;

284 i‡(
wIndex0
 & 0x80)

287 i‡(
	`_GëTxSèŒSètus
(
Rñ©ed_Endpoöt
 ))

289 
	`_CÀ¨DTOG_TX
(
Rñ©ed_Endpoöt
);

290 
	`_SëEPTxSètus
(
Rñ©ed_Endpoöt
, 
EP_TX_VALID
);

296 i‡(
	`_GëRxSèŒSètus
(
Rñ©ed_Endpoöt
))

298 i‡(
Rñ©ed_Endpoöt
 =
ENDP0
)

301 
	`_SëEPRxCou¡
(
Rñ©ed_Endpoöt
, 
Devi˚_Pr›îty
.
MaxPackëSize
);

302 
	`_SëEPRxSètus
(
Rñ©ed_Endpoöt
, 
EP_RX_VALID
);

306 
	`_CÀ¨DTOG_RX
(
Rñ©ed_Endpoöt
);

307 
	`_SëEPRxSètus
(
Rñ©ed_Endpoöt
, 
EP_RX_VALID
);

311 
pU£r_Sènd¨d_Reque°s
->
	`U£r_CÀ¨Fótuª
();

312  
USB_SUCCESS
;

315  
USB_UNSUPPORT
;

316 
	}
}

326 
RESULT
 
	$Sènd¨d_SëEndPoötFótuª
()

328 
uöt32_t
 
wIndex0
;

329 
uöt32_t
 
Rñ©ed_Endpoöt
;

330 
uöt32_t
 
rEP
;

331 
uöt32_t
 
Sètus
;

333 
wIndex0
 = 
pInf‹m©i⁄
->
USBwIndex0
;

334 
rEP
 = 
wIndex0
 & ~0x80;

335 
Rñ©ed_Endpoöt
 = 
ENDP0
 + 
rEP
;

337 i‡(
	`VÆBô
(
pInf‹m©i⁄
->
USBwIndex0
, 7))

341 
Sètus
 = 
	`_GëEPTxSètus
(
Rñ©ed_Endpoöt
);

345 
Sètus
 = 
	`_GëEPRxSètus
(
Rñ©ed_Endpoöt
);

348 i‡(
Rñ©ed_Endpoöt
 >
Devi˚_TabÀ
.
TŸÆ_Endpoöt


349 || 
pInf‹m©i⁄
->
USBwVÆue
 !0 || 
Sètus
 == 0

350 || 
pInf‹m©i⁄
->
Cuºít_C⁄figuøti⁄
 == 0)

352  
USB_UNSUPPORT
;

356 i‡(
wIndex0
 & 0x80)

359 
	`_SëEPTxSètus
(
Rñ©ed_Endpoöt
, 
EP_TX_STALL
);

365 
	`_SëEPRxSètus
(
Rñ©ed_Endpoöt
, 
EP_RX_STALL
);

368 
pU£r_Sènd¨d_Reque°s
->
	`U£r_SëEndPoötFótuª
();

369  
USB_SUCCESS
;

370 
	}
}

380 
RESULT
 
	$Sènd¨d_SëDevi˚Fótuª
()

382 
	`SëBô
(
pInf‹m©i⁄
->
Cuºít_Fótuª
, 5);

383 
pU£r_Sènd¨d_Reque°s
->
	`U£r_SëDevi˚Fótuª
();

384  
USB_SUCCESS
;

385 
	}
}

406 
uöt8_t
 *
	$Sènd¨d_GëDes¸ùt‹D©a
(
uöt16_t
 
Lígth
, 
ONE_DESCRIPTOR
 *
pDesc
)

408 
uöt32_t
 
wOff£t
;

410 
wOff£t
 = 
pInf‹m©i⁄
->
Cål_Info
.
Usb_wOff£t
;

411 i‡(
Lígth
 == 0)

413 
pInf‹m©i⁄
->
Cål_Info
.
Usb_wLígth
 = 
pDesc
->
Des¸ùt‹_Size
 - 
wOff£t
;

417  
pDesc
->
Des¸ùt‹
 + 
wOff£t
;

418 
	}
}

427 
	$D©aSègeOut
()

429 
ENDPOINT_INFO
 *
pEPöfo
 = &
pInf‹m©i⁄
->
Cål_Info
;

430 
uöt32_t
 
ßve_rLígth
;

432 
ßve_rLígth
 = 
pEPöfo
->
Usb_rLígth
;

434 i‡(
pEPöfo
->
C›yD©a
 && 
ßve_rLígth
)

436 
uöt8_t
 *
Buf„r
;

437 
uöt32_t
 
Lígth
;

439 
Lígth
 = 
pEPöfo
->
PackëSize
;

440 i‡(
Lígth
 > 
ßve_rLígth
)

442 
Lígth
 = 
ßve_rLígth
;

445 
Buf„r
 = (*
pEPöfo
->
C›yD©a
)(
Lígth
);

446 
pEPöfo
->
Usb_rLígth
 -
Lígth
;

447 
pEPöfo
->
Usb_rOff£t
 +
Lígth
;

449 
	`PMAToU£rBuf„rC›yENDP0
(
Buf„r
, 
Lígth
);

452 i‡(
pEPöfo
->
Usb_rLígth
 != 0)

454 
	`vSëEPRxSètus
(
EP_RX_VALID
);

455 
	`_SëEPTxCou¡
(
ENDP0
, 0);

456 
	`vSëEPTxSètus
(
EP_TX_VALID
);

459 i‡(
pEPöfo
->
Usb_rLígth
 >pEPöfo->
PackëSize
)

461 
pInf‹m©i⁄
->
C⁄åﬁSèã
 = 
OUT_DATA
;

465 i‡(
pEPöfo
->
Usb_rLígth
 > 0)

467 
pInf‹m©i⁄
->
C⁄åﬁSèã
 = 
LAST_OUT_DATA
;

469 i‡(
pEPöfo
->
Usb_rLígth
 == 0)

471 
pInf‹m©i⁄
->
C⁄åﬁSèã
 = 
WAIT_STATUS_IN
;

472 
	`USB_SètusIn
();

475 
	}
}

484 
	$D©aSègeIn
()

486 
ENDPOINT_INFO
 *
pEPöfo
 = &
pInf‹m©i⁄
->
Cål_Info
;

487 
uöt32_t
 
ßve_wLígth
 = 
pEPöfo
->
Usb_wLígth
;

488 
uöt32_t
 
C⁄åﬁSèã
 = 
pInf‹m©i⁄
->ControlState;

490 
uöt8_t
 *
D©aBuf„r
;

491 
uöt32_t
 
Lígth
;

493 i‡((
ßve_wLígth
 =0Ë&& (
C⁄åﬁSèã
 =
LAST_IN_DATA
))

495 if(
D©a_Mul_MaxPackëSize
 =
TRUE
)

498 
	`Síd0LígthD©a
();

499 
C⁄åﬁSèã
 = 
LAST_IN_DATA
;

500 
D©a_Mul_MaxPackëSize
 = 
FALSE
;

505 
C⁄åﬁSèã
 = 
WAIT_STATUS_OUT
;

506 
	`vSëEPTxSètus
(
EP_TX_STALL
);

509 
Ex≥˘_Sètus_Out
;

512 
Lígth
 = 
pEPöfo
->
PackëSize
;

513 
C⁄åﬁSèã
 = (
ßve_wLígth
 <
Lígth
Ë? 
LAST_IN_DATA
 : 
IN_DATA
;

515 i‡(
Lígth
 > 
ßve_wLígth
)

517 
Lígth
 = 
ßve_wLígth
;

520 
D©aBuf„r
 = (*
pEPöfo
->
C›yD©a
)(
Lígth
);

522 
	`U£rToPMABuf„rC›yENDP0
(
D©aBuf„r
, 
Lígth
);

524 
	`_SëEPTxCou¡
(
ENDP0
, 
Lígth
);

526 
pEPöfo
->
Usb_wLígth
 -
Lígth
;

527 
pEPöfo
->
Usb_wOff£t
 +
Lígth
;

528 
	`vSëEPTxSètus
(
EP_TX_VALID
);

530 
	`USB_SètusOut
();

532 
Ex≥˘_Sètus_Out
:

533 
pInf‹m©i⁄
->
C⁄åﬁSèã
 = ControlState;

534 
	}
}

543 
	$NoD©a_Sëup0
()

545 
RESULT
 
Resu…
 = 
USB_UNSUPPORT
;

546 
uöt32_t
 
Reque°No
 = 
pInf‹m©i⁄
->
USBbReque°
;

547 
uöt32_t
 
C⁄åﬁSèã
;

550 i‡(
Ty≥_Recùõ¡
 =(
STANDARD_REQUEST
 | 
DEVICE_RECIPIENT
))

552 i‡(
Reque°No
 =
SET_CONFIGURATION
)

554 
Resu…
 = 
	`Sènd¨d_SëC⁄figuøti⁄
();

556 i‡(
Reque°No
 =
SET_ADDRESS
)

558 i‡((
pInf‹m©i⁄
->
USBwVÆue0
 > 127Ë|| (pInf‹m©i⁄->
USBwVÆue1
 != 0)

559 || (
pInf‹m©i⁄
->
USBwIndex
 != 0)

560 || (
pInf‹m©i⁄
->
Cuºít_C⁄figuøti⁄
 != 0))

562 
C⁄åﬁSèã
 = 
STALLED
;

563 
exô_NoD©a_Sëup0
;

567 
Resu…
 = 
USB_SUCCESS
;

570 i‡(
Reque°No
 =
SET_FEATURE
)

572 i‡((
pInf‹m©i⁄
->
USBwVÆue0
 =
DEVICE_REMOTE_WAKEUP
)

573 && (
pInf‹m©i⁄
->
USBwIndex
 == 0)

574 && (
	`VÆBô
(
pInf‹m©i⁄
->
Cuºít_Fótuª
, 5)))

576 
Resu…
 = 
	`Sènd¨d_SëDevi˚Fótuª
();

580 
Resu…
 = 
USB_UNSUPPORT
;

583 i‡(
Reque°No
 =
CLEAR_FEATURE
)

585 i‡(
pInf‹m©i⁄
->
USBwVÆue0
 =
DEVICE_REMOTE_WAKEUP


586 && 
pInf‹m©i⁄
->
USBwIndex
 == 0

587 && 
	`VÆBô
(
pInf‹m©i⁄
->
Cuºít_Fótuª
, 5))

589 
Resu…
 = 
	`Sènd¨d_CÀ¨Fótuª
();

593 
Resu…
 = 
USB_UNSUPPORT
;

598 i‡(
Ty≥_Recùõ¡
 =(
STANDARD_REQUEST
 | 
INTERFACE_RECIPIENT
))

600 i‡(
Reque°No
 =
SET_INTERFACE
)

602 
Resu…
 = 
	`Sènd¨d_SëI¡îÁ˚
();

606 i‡(
Ty≥_Recùõ¡
 =(
STANDARD_REQUEST
 | 
ENDPOINT_RECIPIENT
))

608 i‡(
Reque°No
 =
CLEAR_FEATURE
)

610 
Resu…
 = 
	`Sènd¨d_CÀ¨Fótuª
();

612 i‡(
Reque°No
 =
SET_FEATURE
)

614 
Resu…
 = 
	`Sènd¨d_SëEndPoötFótuª
();

619 
Resu…
 = 
USB_UNSUPPORT
;

622 i‡(
Resu…
 !
USB_SUCCESS
)

624 
Resu…
 = (*
pPr›îty
->
Cœss_NoD©a_Sëup
)(
Reque°No
);

625 i‡(
Resu…
 =
USB_NOT_READY
)

627 
C⁄åﬁSèã
 = 
PAUSE
;

628 
exô_NoD©a_Sëup0
;

632 i‡(
Resu…
 !
USB_SUCCESS
)

634 
C⁄åﬁSèã
 = 
STALLED
;

635 
exô_NoD©a_Sëup0
;

638 
C⁄åﬁSèã
 = 
WAIT_STATUS_IN
;

639 
	`USB_SètusIn
();

641 
exô_NoD©a_Sëup0
:

642 
pInf‹m©i⁄
->
C⁄åﬁSèã
 = ControlState;

644 
	}
}

653 
	$D©a_Sëup0
()

655 
uöt8_t
 *(*
C›yRoutöe
)(
uöt16_t
);

656 
RESULT
 
Resu…
;

657 
uöt32_t
 
Reque°_No
 = 
pInf‹m©i⁄
->
USBbReque°
;

659 
uöt32_t
 
Rñ©ed_Endpoöt
, 
Re£rved
;

660 
uöt32_t
 
wOff£t
, 
Sètus
;

662 
C›yRoutöe
 = 
NULL
;

663 
wOff£t
 = 0;

665 i‡(
Reque°_No
 =
GET_DESCRIPTOR
)

667 i‡(
Ty≥_Recùõ¡
 =(
STANDARD_REQUEST
 | 
DEVICE_RECIPIENT
))

669 
uöt8_t
 
wVÆue1
 = 
pInf‹m©i⁄
->
USBwVÆue1
;

670 i‡(
wVÆue1
 =
DEVICE_DESCRIPTOR
)

672 
C›yRoutöe
 = 
pPr›îty
->
GëDevi˚Des¸ùt‹
;

674 i‡(
wVÆue1
 =
CONFIG_DESCRIPTOR
)

676 
C›yRoutöe
 = 
pPr›îty
->
GëC⁄figDes¸ùt‹
;

678 i‡(
wVÆue1
 =
STRING_DESCRIPTOR
)

680 
C›yRoutöe
 = 
pPr›îty
->
GëSåögDes¸ùt‹
;

685 i‡((
Reque°_No
 =
GET_STATUS
Ë&& (
pInf‹m©i⁄
->
USBwVÆue
 == 0)

686 && (
pInf‹m©i⁄
->
USBwLígth
 == 0x0002)

687 && (
pInf‹m©i⁄
->
USBwIndex1
 == 0))

690 i‡((
Ty≥_Recùõ¡
 =(
STANDARD_REQUEST
 | 
DEVICE_RECIPIENT
))

691 && (
pInf‹m©i⁄
->
USBwIndex
 == 0))

693 
C›yRoutöe
 = 
Sènd¨d_GëSètus
;

696 i‡(
Ty≥_Recùõ¡
 =(
STANDARD_REQUEST
 | 
INTERFACE_RECIPIENT
))

698 i‡(((*
pPr›îty
->
Cœss_Gë_I¡îÁ˚_Sëtög
)(
pInf‹m©i⁄
->
USBwIndex0
, 0Ë=
USB_SUCCESS
)

699 && (
pInf‹m©i⁄
->
Cuºít_C⁄figuøti⁄
 != 0))

701 
C›yRoutöe
 = 
Sènd¨d_GëSètus
;

705 i‡(
Ty≥_Recùõ¡
 =(
STANDARD_REQUEST
 | 
ENDPOINT_RECIPIENT
))

707 
Rñ©ed_Endpoöt
 = (
pInf‹m©i⁄
->
USBwIndex0
 & 0x0f);

708 
Re£rved
 = 
pInf‹m©i⁄
->
USBwIndex0
 & 0x70;

710 i‡(
	`VÆBô
(
pInf‹m©i⁄
->
USBwIndex0
, 7))

714 
Sètus
 = 
	`_GëEPTxSètus
(
Rñ©ed_Endpoöt
);

718 
Sètus
 = 
	`_GëEPRxSètus
(
Rñ©ed_Endpoöt
);

721 i‡((
Rñ©ed_Endpoöt
 < 
Devi˚_TabÀ
.
TŸÆ_Endpoöt
Ë&& (
Re£rved
 == 0)

722 && (
Sètus
 != 0))

724 
C›yRoutöe
 = 
Sènd¨d_GëSètus
;

729 i‡(
Reque°_No
 =
GET_CONFIGURATION
)

731 i‡(
Ty≥_Recùõ¡
 =(
STANDARD_REQUEST
 | 
DEVICE_RECIPIENT
))

733 
C›yRoutöe
 = 
Sènd¨d_GëC⁄figuøti⁄
;

737 i‡(
Reque°_No
 =
GET_INTERFACE
)

739 i‡((
Ty≥_Recùõ¡
 =(
STANDARD_REQUEST
 | 
INTERFACE_RECIPIENT
))

740 && (
pInf‹m©i⁄
->
Cuºít_C⁄figuøti⁄
 !0Ë&& (pInf‹m©i⁄->
USBwVÆue
 == 0)

741 && (
pInf‹m©i⁄
->
USBwIndex1
 =0Ë&& (pInf‹m©i⁄->
USBwLígth
 == 0x0001)

742 && ((*
pPr›îty
->
Cœss_Gë_I¡îÁ˚_Sëtög
)(
pInf‹m©i⁄
->
USBwIndex0
, 0Ë=
USB_SUCCESS
))

744 
C›yRoutöe
 = 
Sènd¨d_GëI¡îÁ˚
;

748 i‡(
C›yRoutöe
)

750 
pInf‹m©i⁄
->
Cål_Info
.
Usb_wOff£t
 = 
wOff£t
;

751 
pInf‹m©i⁄
->
Cål_Info
.
C›yD©a
 = 
C›yRoutöe
;

754 (*
C›yRoutöe
)(0);

755 
Resu…
 = 
USB_SUCCESS
;

759 
Resu…
 = (*
pPr›îty
->
Cœss_D©a_Sëup
)(
pInf‹m©i⁄
->
USBbReque°
);

760 i‡(
Resu…
 =
USB_NOT_READY
)

762 
pInf‹m©i⁄
->
C⁄åﬁSèã
 = 
PAUSE
;

767 i‡(
pInf‹m©i⁄
->
Cål_Info
.
Usb_wLígth
 == 0xFFFF)

770 
pInf‹m©i⁄
->
C⁄åﬁSèã
 = 
PAUSE
;

774 i‡((
Resu…
 =
USB_UNSUPPORT
Ë|| (
pInf‹m©i⁄
->
Cål_Info
.
Usb_wLígth
 == 0))

777 
pInf‹m©i⁄
->
C⁄åﬁSèã
 = 
STALLED
;

781 i‡(
	`VÆBô
(
pInf‹m©i⁄
->
USBbmReque°Ty≥
, 7))

784 
__IO
 
uöt32_t
 
wLígth
 = 
pInf‹m©i⁄
->
USBwLígth
;

786 i‡(
pInf‹m©i⁄
->
Cål_Info
.
Usb_wLígth
 > 
wLígth
)

788 
pInf‹m©i⁄
->
Cål_Info
.
Usb_wLígth
 = 
wLígth
;

790 i‡(
pInf‹m©i⁄
->
Cål_Info
.
Usb_wLígth
 <ÖInf‹m©i⁄->
USBwLígth
)

792 i‡(
pInf‹m©i⁄
->
Cål_Info
.
Usb_wLígth
 < 
pPr›îty
->
MaxPackëSize
)

794 
D©a_Mul_MaxPackëSize
 = 
FALSE
;

796 i‡((
pInf‹m©i⁄
->
Cål_Info
.
Usb_wLígth
 % 
pPr›îty
->
MaxPackëSize
) == 0)

798 
D©a_Mul_MaxPackëSize
 = 
TRUE
;

801 
pInf‹m©i⁄
->
Cål_Info
.
PackëSize
 = 
pPr›îty
->
MaxPackëSize
;

802 
	`D©aSègeIn
();

806 
pInf‹m©i⁄
->
C⁄åﬁSèã
 = 
OUT_DATA
;

807 
	`vSëEPRxSètus
(
EP_RX_VALID
);

811 
	}
}

820 
uöt8_t
 
	$Sëup0_Pro˚ss
()

824 
uöt8_t
* 
b
;

825 
uöt16_t
* 
w
;

826 } 
pBuf
;

828 
pBuf
.
b
 = 
PMAAddr
 + (
uöt8_t
 *)(
	`_GëEPRxAddr
(
ENDP0
) * 2);

830 i‡(
pInf‹m©i⁄
->
C⁄åﬁSèã
 !
PAUSE
)

832 
uöt8_t
 
bTemp
;

834 
pInf‹m©i⁄
->
USBbmReque°Ty≥
 = *
pBuf
.
b
++;

835 
pInf‹m©i⁄
->
USBbReque°
 = *
pBuf
.
b
++;

836 
pBuf
.
w
++;

837 
bTemp
 = (
uöt8_t
)(*
pBuf
.
w
 & 0xff);

838 
pInf‹m©i⁄
->
USBwVÆue
 = (*
pBuf
.
w
 >> 8Ë| ((
uöt16_t
)
bTemp
 << 8);;

839 
pBuf
.
w
++;

840 
pBuf
.
w
++;

841 
bTemp
 = (
uöt8_t
)(*
pBuf
.
w
 & 0xff);

842 
pInf‹m©i⁄
->
USBwIndex
 = (*
pBuf
.
w
 >> 8Ë| ((
uöt16_t
)
bTemp
 << 8);;

843 
pBuf
.
w
++;

844 
pBuf
.
w
++;

845 
pInf‹m©i⁄
->
USBwLígth
 = *
pBuf
.
w
;

848 
pInf‹m©i⁄
->
C⁄åﬁSèã
 = 
SETTING_UP
;

849 i‡(
pInf‹m©i⁄
->
USBwLígth
 == 0)

851 
	`NoD©a_Sëup0
();

855 
	`D©a_Sëup0
();

857  
	`Po°0_Pro˚ss
();

858 
	}
}

867 
uöt8_t
 
	$In0_Pro˚ss
()

869 
uöt32_t
 
C⁄åﬁSèã
 = 
pInf‹m©i⁄
->ControlState;

871 i‡((
C⁄åﬁSèã
 =
IN_DATA
Ë|| (C⁄åﬁSèã =
LAST_IN_DATA
))

873 
	`D©aSègeIn
();

875 
C⁄åﬁSèã
 = 
pInf‹m©i⁄
->ControlState;

877 i‡(
C⁄åﬁSèã
 =
WAIT_STATUS_IN
)

879 i‡((
pInf‹m©i⁄
->
USBbReque°
 =
SET_ADDRESS
) &&

880 (
Ty≥_Recùõ¡
 =(
STANDARD_REQUEST
 | 
DEVICE_RECIPIENT
)))

882 
	`_SëEPAddªss
(
ENDP0
, ENDP0);

883 
	`_SëEPAddªss
(
ENDP1
, ENDP1);

884 
	`_SëEPAddªss
(
ENDP2
, ENDP2);

886 
	`_SëDADDR
(
pInf‹m©i⁄
->
USBwVÆue0
 | 
DADDR_EF
);

888 
pU£r_Sènd¨d_Reque°s
->
	`U£r_SëDevi˚Addªss
();

890 (*
pPr›îty
->
Pro˚ss_Sètus_IN
)();

891 
C⁄åﬁSèã
 = 
STALLED
;

895 
C⁄åﬁSèã
 = 
STALLED
;

898 
pInf‹m©i⁄
->
C⁄åﬁSèã
 = ControlState;

900  
	`Po°0_Pro˚ss
();

901 
	}
}

910 
uöt8_t
 
	$Out0_Pro˚ss
()

912 
uöt32_t
 
C⁄åﬁSèã
 = 
pInf‹m©i⁄
->ControlState;

914 i‡((
C⁄åﬁSèã
 =
OUT_DATA
Ë|| (C⁄åﬁSèã =
LAST_OUT_DATA
))

916 
	`D©aSègeOut
();

917 
C⁄åﬁSèã
 = 
pInf‹m©i⁄
->ControlState;

919 i‡(
C⁄åﬁSèã
 =
WAIT_STATUS_OUT
)

921 (*
pPr›îty
->
Pro˚ss_Sètus_OUT
)();

922 
C⁄åﬁSèã
 = 
STALLED
;

924 i‡((
C⁄åﬁSèã
 =
IN_DATA
Ë|| (C⁄åﬁSèã =
LAST_IN_DATA
))

926 
C⁄åﬁSèã
 = 
STALLED
;

930 
C⁄åﬁSèã
 = 
STALLED
;

933 
pInf‹m©i⁄
->
C⁄åﬁSèã
 = ControlState;

935  
	`Po°0_Pro˚ss
();

936 
	}
}

946 
uöt8_t
 
	$Po°0_Pro˚ss
()

948 
	`_SëEPRxCou¡
(
ENDP0
, 
Devi˚_Pr›îty
.
MaxPackëSize
);

950 i‡(
pInf‹m©i⁄
->
C⁄åﬁSèã
 =
STALLED
)

952 
	`vSëEPRxSètus
(
EP_RX_STALL
);

953 
	`vSëEPTxSètus
(
EP_TX_STALL
);

956  (
pInf‹m©i⁄
->
C⁄åﬁSèã
 =
PAUSE
);

957 
	}
}

966 
	$NOP_Pro˚ss
()

968 
	}
}

	@Source/User/USB_BULK/src/usb_desc.c

17 
	~"usb_desc.h
"

19 c⁄° 
uöt8_t
 
	gMASS_Devi˚Des¸ùt‹
[
MASS_SIZ_DEVICE_DESC
] =

41 c⁄° 
uöt8_t
 
	gMASS_C⁄figDes¸ùt‹
[
MASS_SIZ_CONFIG_DESC
] =

45 
MASS_SIZ_CONFIG_DESC
,

84 c⁄° 
uöt8_t
 
	gMASS_SåögL™gID
[
MASS_SIZ_STRING_LANGID
] =

86 
MASS_SIZ_STRING_LANGID
,

93 c⁄° 
uöt8_t
 
	gMASS_SåögVíd‹
[
MASS_SIZ_STRING_VENDOR
] =

95 
MASS_SIZ_STRING_VENDOR
,

104 c⁄° 
uöt8_t
 
	gMASS_SåögProdu˘
[
MASS_SIZ_STRING_PRODUCT
] =

106 
MASS_SIZ_STRING_PRODUCT
,

115 
uöt8_t
 
	gMASS_SåögSîül
[
MASS_SIZ_STRING_SERIAL
] =

117 
MASS_SIZ_STRING_SERIAL
,

123 c⁄° 
uöt8_t
 
	gMASS_SåögI¡îÁ˚
[
MASS_SIZ_STRING_INTERFACE
] =

125 
MASS_SIZ_STRING_INTERFACE
,

	@Source/User/USB_BULK/src/usb_endp.c

17 
	~"usb_lib.h
"

35 
	$EP1_IN_CÆlback
()

38 
	}
}

47 
	$EP2_OUT_CÆlback
()

50 
	}
}

	@Source/User/USB_BULK/src/usb_init.c

17 
	~"usb_lib.h
"

18 
	~"hw_c⁄fig.h
"

19 
	~"°rög.h
"

27 
uöt8_t
 
	gEPödex
;

32 
DEVICE_INFO
 *
	gpInf‹m©i⁄
;

35 
DEVICE_PROP
 *
	gpPr›îty
;

40 
uöt16_t
 
	gSaveSèã
 ;

41 
uöt16_t
 
	gwI¡îru±_Mask
;

42 
DEVICE_INFO
 
	gDevi˚_Info
;

43 
USER_STANDARD_REQUESTS
 *
	gpU£r_Sènd¨d_Reque°s
;

56 
	$USB_Inô
()

58 
	`Së_USBClock
();

59 
	`USB_I¡îru±s_C⁄fig
();

60 
pInf‹m©i⁄
 = &
Devi˚_Info
;

61 
pInf‹m©i⁄
->
C⁄åﬁSèã
 = 2;

62 
pPr›îty
 = &
Devi˚_Pr›îty
;

63 
pU£r_Sènd¨d_Reque°s
 = &
U£r_Sènd¨d_Reque°s
;

65 
pPr›îty
->
	`Inô
();

66 
	}
}

	@Source/User/USB_BULK/src/usb_mem.c

17 
	~"usb_lib.h
"

35 
	$U£rToPMABuf„rC›yENDP0
(
uöt8_t
 *
pbU§Buf
, 
uöt16_t
 
wNByãs
)

37 
uöt32_t
 
n
 = (
wNByãs
 + 1) >> 1;

38 
uöt32_t
 
i
, 
ãmp1
, 
ãmp2
;

39 
uöt16_t
 *
pdwVÆ
;

40 
pdwVÆ
 = (
uöt16_t
 *)
YJW_ENDP0_TXADDR
;

41 
i
 = 
n
; i != 0; i--)

43 
ãmp1
 = (
uöt16_t
Ë* 
pbU§Buf
;

44 
pbU§Buf
++;

45 
ãmp2
 = 
ãmp1
 | (
uöt16_t
Ë* 
pbU§Buf
 << 8;

46 *
pdwVÆ
++ = 
ãmp2
;

47 
pdwVÆ
++;

48 
pbU§Buf
++;

50 
	}
}

60 
	$PMAToU£rBuf„rC›yENDP0
(
uöt8_t
 *
pbU§Buf
, 
uöt16_t
 
wNByãs
)

62 
uöt32_t
 
n
 = (
wNByãs
 + 1) >> 1;

63 
uöt32_t
 
i
;

64 
uöt32_t
 *
pdwVÆ
;

65 
pdwVÆ
 = (
uöt32_t
 *)
YJW_ENDP0_RXADDR
;

66 
i
 = 
n
; i != 0; i--)

68 *(
uöt16_t
*)
pbU§Buf
++ = *
pdwVÆ
++;

69 
pbU§Buf
++;

71 
	}
}

73 
	$U£rToPMABuf„rC›yENDP1
(
uöt8_t
 *
pbU§Buf
, 
uöt16_t
 
wNByãs
)

75 
uöt32_t
 
n
 = (
wNByãs
 + 1) >> 1;

76 
uöt32_t
 
i
, 
ãmp1
, 
ãmp2
;

77 
uöt16_t
 *
pdwVÆ
;

78 
pdwVÆ
 = (
uöt16_t
 *)
YJW_ENDP1_TXADDR
;

79 
i
 = 
n
; i != 0; i--)

81 
ãmp1
 = (
uöt16_t
Ë* 
pbU§Buf
;

82 
pbU§Buf
++;

83 
ãmp2
 = 
ãmp1
 | (
uöt16_t
Ë* 
pbU§Buf
 << 8;

84 *
pdwVÆ
++ = 
ãmp2
;

85 
pdwVÆ
++;

86 
pbU§Buf
++;

88 
	}
}

90 
	$PMAToU£rBuf„rC›yENDP2
(
uöt8_t
 *
pbU§Buf
, 
uöt16_t
 
wNByãs
)

92 
uöt32_t
 
n
 = (
wNByãs
 + 1) >> 1;

94 
uöt32_t
 *
pdwVÆ
;

95 
pdwVÆ
 = (
uöt32_t
 *)
YJW_ENDP2_RXADDR
;

97 
n
--)

99 *(
uöt16_t
*)
pbU§Buf
++ = *
pdwVÆ
++;

100 
pbU§Buf
++;

102 
	}
}

	@Source/User/USB_BULK/src/usb_prop.c

17 
	~"usb_lib.h
"

18 
	~"usb_desc.h
"

21 
	~"hw_c⁄fig.h
"

24 
	~"usb_¥›.h
"

31 #ifde‡
USE_STM3210B_EVAL


32 
uöt32_t
 
	gMax_Lun
 = 0;

34 
uöt32_t
 
	gMax_Lun
 = 1;

37 
DEVICE
 
	gDevi˚_TabÀ
 =

43 
DEVICE_PROP
 
	gDevi˚_Pr›îty
 =

45 
MASS_öô
,

46 
MASS_Re£t
,

47 
MASS_Sètus_In
,

48 
MASS_Sètus_Out
,

49 
MASS_D©a_Sëup
,

50 
MASS_NoD©a_Sëup
,

51 
MASS_Gë_I¡îÁ˚_Sëtög
,

52 
MASS_GëDevi˚Des¸ùt‹
,

53 
MASS_GëC⁄figDes¸ùt‹
,

54 
MASS_GëSåögDes¸ùt‹
,

59 
USER_STANDARD_REQUESTS
 
	gU£r_Sènd¨d_Reque°s
 =

61 
Mass_St‹age_GëC⁄figuøti⁄
,

62 
Mass_St‹age_SëC⁄figuøti⁄
,

63 
Mass_St‹age_GëI¡îÁ˚
,

64 
Mass_St‹age_SëI¡îÁ˚
,

65 
Mass_St‹age_GëSètus
,

66 
Mass_St‹age_CÀ¨Fótuª
,

67 
Mass_St‹age_SëEndPoötFótuª
,

68 
Mass_St‹age_SëDevi˚Fótuª
,

69 
Mass_St‹age_SëDevi˚Addªss


72 
ONE_DESCRIPTOR
 
	gDevi˚_Des¸ùt‹
 =

74 (
uöt8_t
*)
MASS_Devi˚Des¸ùt‹
,

75 
MASS_SIZ_DEVICE_DESC


78 
ONE_DESCRIPTOR
 
	gC⁄fig_Des¸ùt‹
 =

80 (
uöt8_t
*)
MASS_C⁄figDes¸ùt‹
,

81 
MASS_SIZ_CONFIG_DESC


84 
ONE_DESCRIPTOR
 
	gSåög_Des¸ùt‹
[5] =

86 {(
uöt8_t
*)
MASS_SåögL™gID
, 
MASS_SIZ_STRING_LANGID
},

87 {(
uöt8_t
*)
MASS_SåögVíd‹
, 
MASS_SIZ_STRING_VENDOR
},

88 {(
uöt8_t
*)
MASS_SåögProdu˘
, 
MASS_SIZ_STRING_PRODUCT
},

89 {(
uöt8_t
*)
MASS_SåögSîül
, 
MASS_SIZ_STRING_SERIAL
},

90 {(
uöt8_t
*)
MASS_SåögI¡îÁ˚
, 
MASS_SIZ_STRING_INTERFACE
},

104 
	$MASS_öô
()

107 
	`Gë_SîülNum
();

109 
pInf‹m©i⁄
->
Cuºít_C⁄figuøti⁄
 = 0;

112 
	`PowîOn
();

116 
	`_SëISTR
(0);

117 
wI¡îru±_Mask
 = (
CNTR_CTRM
 | 
CNTR_RESETM
);

119 
	`_SëCNTR
(
wI¡îru±_Mask
);

121 
bUSBDevi˚Sèã
 = 
UNCONNECTED
;

122 
	}
}

131 
	$MASS_Re£t
()

134 
Devi˚_Info
.
Cuºít_C⁄figuøti⁄
 = 0;

137 
pInf‹m©i⁄
->
Cuºít_Fótuª
 = 
MASS_C⁄figDes¸ùt‹
[7];

139 
	`_SëBTABLE
(0x00);

142 
	`_SëEPTy≥
(
ENDP0
, 
EP_CONTROL
);

143 
	`_SëEPTxSètus
(
ENDP0
, 
EP_TX_NAK
);

144 
	`_SëEPRxAddr
(
ENDP0
, 
ENDP0_RXADDR
);

145 
	`_SëEPRxCou¡
(
ENDP0
, 
Devi˚_Pr›îty
.
MaxPackëSize
);

146 
	`_SëEPTxAddr
(
ENDP0
, 
ENDP0_TXADDR
);

147 
	`_CÀ¨_Sètus_Out
(
ENDP0
);

148 
	`_SëEPRxSètus
(
ENDP0
, 
EP_RX_VALID
);

151 
	`_SëEPTy≥
(
ENDP1
, 
EP_BULK
);

152 
	`_CÀ¨_Sètus_Out
(
ENDP1
);

153 
	`U£rToPMABuf„rC›yENDP1
(0,1);

154 
	`_SëEPTxCou¡
(
ENDP1
, 1);

155 
	`_SëEPTxAddr
(
ENDP1
, 
ENDP1_TXADDR
);

156 
	`_SëEPRxSètus
(
ENDP1
, 
EP_RX_DIS
);

157 
	`_SëEPTxSètus
(
ENDP1
, 
EP_TX_VALID
);

160 
	`_SëEPTy≥
(
ENDP2
, 
EP_BULK
);

161 
	`_CÀ¨_Sètus_Out
(
ENDP2
);

162 
	`_SëEPRxCou¡
(
ENDP2
, 
Devi˚_Pr›îty
.
MaxPackëSize
);

163 
	`_SëEPRxAddr
(
ENDP2
, 
ENDP2_RXADDR
);

164 
	`_SëEPRxSètus
(
ENDP2
, 
EP_RX_VALID
);

165 
	`_SëEPTxSètus
(
ENDP2
, 
EP_TX_DIS
);

169 
	`_SëEPAddªss
(
ENDP0
, ENDP0);

170 
	`_SëEPAddªss
(
ENDP1
, ENDP1);

171 
	`_SëEPAddªss
(
ENDP2
, ENDP2);

173 
	`_SëDADDR
(
DADDR_EF
);

175 
bUSBDevi˚Sèã
 = 
ATTACHED
;

179 
	}
}

188 
	$Mass_St‹age_SëC⁄figuøti⁄
()

190 i‡(
pInf‹m©i⁄
->
Cuºít_C⁄figuøti⁄
 != 0)

193 
bUSBDevi˚Sèã
 = 
CONFIGURED
;

195 
	`_CÀ¨DTOG_TX
(
ENDP1
);

196 
	`_CÀ¨DTOG_RX
(
ENDP2
);

199 
	}
}

208 
	$Mass_St‹age_CÀ¨Fótuª
()

214 
	}
}

223 
	$Mass_St‹age_SëDevi˚Addªss
 ()

225 
bUSBDevi˚Sèã
 = 
ADDRESSED
;

226 
	}
}

234 
	$MASS_Sètus_In
()

237 
	}
}

246 
	$MASS_Sètus_Out
()

249 
	}
}

258 
RESULT
 
	$MASS_D©a_Sëup
(
uöt8_t
 
Reque°No
)

260 
uöt8_t
 *(*
C›yRoutöe
)(
uöt16_t
);

262 
C›yRoutöe
 = 
NULL
;

263 i‡((
Ty≥_Recùõ¡
 =(
CLASS_REQUEST
 | 
INTERFACE_RECIPIENT
))

264 && (
Reque°No
 =
GET_MAX_LUN
Ë&& (
pInf‹m©i⁄
->
USBwVÆue
 == 0)

265 && (
pInf‹m©i⁄
->
USBwIndex
 =0Ë&& (pInf‹m©i⁄->
USBwLígth
 == 0x01))

267 
C›yRoutöe
 = 
Gë_Max_Lun
;

271  
USB_UNSUPPORT
;

274 i‡(
C›yRoutöe
 =
NULL
)

276  
USB_UNSUPPORT
;

279 
pInf‹m©i⁄
->
Cål_Info
.
C›yD©a
 = 
C›yRoutöe
;

280 
pInf‹m©i⁄
->
Cål_Info
.
Usb_wOff£t
 = 0;

281 (*
C›yRoutöe
)(0);

283  
USB_SUCCESS
;

285 
	}
}

294 
RESULT
 
	$MASS_NoD©a_Sëup
(
uöt8_t
 
Reque°No
)

296 i‡((
Ty≥_Recùõ¡
 =(
CLASS_REQUEST
 | 
INTERFACE_RECIPIENT
))

297 && (
Reque°No
 =
MASS_STORAGE_RESET
Ë&& (
pInf‹m©i⁄
->
USBwVÆue
 == 0)

298 && (
pInf‹m©i⁄
->
USBwIndex
 =0Ë&& (pInf‹m©i⁄->
USBwLígth
 == 0x00))

301 
	`_CÀ¨DTOG_TX
(
ENDP1
);

304 
	`_CÀ¨DTOG_RX
(
ENDP2
);

310  
USB_SUCCESS
;

312  
USB_UNSUPPORT
;

313 
	}
}

323 
RESULT
 
	$MASS_Gë_I¡îÁ˚_Sëtög
(
uöt8_t
 
I¡îÁ˚
, uöt8_à
A…î«ãSëtög
)

325 i‡(
A…î«ãSëtög
 > 0)

327  
USB_UNSUPPORT
;

329 i‡(
I¡îÁ˚
 > 0)

331  
USB_UNSUPPORT
;

333  
USB_SUCCESS
;

334 
	}
}

343 
uöt8_t
 *
	$MASS_GëDevi˚Des¸ùt‹
(
uöt16_t
 
Lígth
)

345  
	`Sènd¨d_GëDes¸ùt‹D©a
(
Lígth
, &
Devi˚_Des¸ùt‹
 );

346 
	}
}

355 
uöt8_t
 *
	$MASS_GëC⁄figDes¸ùt‹
(
uöt16_t
 
Lígth
)

357  
	`Sènd¨d_GëDes¸ùt‹D©a
(
Lígth
, &
C⁄fig_Des¸ùt‹
 );

358 
	}
}

367 
uöt8_t
 *
	$MASS_GëSåögDes¸ùt‹
(
uöt16_t
 
Lígth
)

369 
uöt8_t
 
wVÆue0
 = 
pInf‹m©i⁄
->
USBwVÆue0
;

371 i‡(
wVÆue0
 > 5)

373  
NULL
;

377  
	`Sènd¨d_GëDes¸ùt‹D©a
(
Lígth
, &
Såög_Des¸ùt‹
[
wVÆue0
]);

379 
	}
}

388 
uöt8_t
 *
	$Gë_Max_Lun
(
uöt16_t
 
Lígth
)

390 i‡(
Lígth
 == 0)

392 
pInf‹m©i⁄
->
Cål_Info
.
Usb_wLígth
 = 
LUN_DATA_LENGTH
;

397 ((
uöt8_t
*)(&
Max_Lun
));

399 
	}
}

	@Source/User/USB_BULK/src/usb_regs.c

17 
	~"usb_lib.h
"

36 
	$SëDouBÀBuffEPSèŒ
(
uöt8_t
 
bEpNum
, uöt8_à
bDú
)

38 
uöt16_t
 
Endpoöt_DTOG_Sètus
;

39 
Endpoöt_DTOG_Sètus
 = 
	`_GëENDPOINT
(
bEpNum
);

40 i‡(
bDú
 =
EP_DBUF_OUT
)

42 
	`_SëENDPOINT
(
bEpNum
, 
Endpoöt_DTOG_Sètus
 & ~
EPRX_DTOG1
);

44 i‡(
bDú
 =
EP_DBUF_IN
)

46 
	`_SëENDPOINT
(
bEpNum
, 
Endpoöt_DTOG_Sètus
 & ~
EPTX_DTOG1
);

48 
	}
}

59 
EP_DBUF_DIR
 
	$GëEPDblBufDú
(
uöt8_t
 
bEpNum
)

61 i‡((
uöt16_t
)(*
	`_pEPRxCou¡
(
bEpNum
) & 0xFC00) != 0)

62 (
EP_DBUF_OUT
);

63 i‡(((
uöt16_t
)(*
	`_pEPTxCou¡
(
bEpNum
)) & 0x03FF) != 0)

64 (
EP_DBUF_IN
);

66 (
EP_DBUF_ERR
);

67 
	}
}

76 
	$FªeU£rBuf„r
(
uöt8_t
 
bEpNum
, uöt8_à
bDú
)

78 i‡(
bDú
 =
EP_DBUF_OUT
)

80 
	`_ToggÀDTOG_TX
(
bEpNum
);

82 i‡(
bDú
 =
EP_DBUF_IN
)

84 
	`_ToggÀDTOG_RX
(
bEpNum
);

86 
	}
}

	@Source/User/a.h

1 c⁄° 
	ggImage_a
[7360] = {

	@Source/User/bmp.h

1 c⁄° 
	ggImage
[153600] = {

	@Source/User/bmp2.c

15 
	ggImage
[153600] = {

	@Source/User/fsmc_sram.c

23 
	~"fsmc_§am.h
"

35 
	#B™k1_SRAM3_ADDR
 ((
uöt32_t
)0x68000000)

	)

49 
	$FSMC_SRAM_Inô
()

51 
FSMC_NORSRAMInôTy≥Def
 
FSMC_NORSRAMInôSåu˘uª
;

52 
FSMC_NORSRAMTimögInôTy≥Def
 
p
;

53 
GPIO_InôTy≥Def
 
GPIO_InôSåu˘uª
;

55 
	`RCC_APB2PîùhClockCmd
(
RCC_APB2Pîùh_GPIOD
 | 
RCC_APB2Pîùh_GPIOG
 | 
RCC_APB2Pîùh_GPIOE
 |

56 
RCC_APB2Pîùh_GPIOF
, 
ENABLE
);

60 
GPIO_InôSåu˘uª
.
GPIO_Pö
 = 
GPIO_Pö_0
 | 
GPIO_Pö_1
 | 
GPIO_Pö_8
 | 
GPIO_Pö_9
 |

61 
GPIO_Pö_10
 | 
GPIO_Pö_14
 | 
GPIO_Pö_15
;

62 
GPIO_InôSåu˘uª
.
GPIO_Mode
 = 
GPIO_Mode_AF_PP
;

63 
GPIO_InôSåu˘uª
.
GPIO_S≥ed
 = 
GPIO_S≥ed_50MHz
;

64 
	`GPIO_Inô
(
GPIOD
, &
GPIO_InôSåu˘uª
);

66 
GPIO_InôSåu˘uª
.
GPIO_Pö
 = 
GPIO_Pö_7
 | 
GPIO_Pö_8
 | 
GPIO_Pö_9
 | 
GPIO_Pö_10
 |

67 
GPIO_Pö_11
 | 
GPIO_Pö_12
 | 
GPIO_Pö_13
 | 
GPIO_Pö_14
 |

68 
GPIO_Pö_15
;

69 
	`GPIO_Inô
(
GPIOE
, &
GPIO_InôSåu˘uª
);

72 
GPIO_InôSåu˘uª
.
GPIO_Pö
 = 
GPIO_Pö_0
 | 
GPIO_Pö_1
 | 
GPIO_Pö_2
 | 
GPIO_Pö_3
 |

73 
GPIO_Pö_4
 | 
GPIO_Pö_5
 | 
GPIO_Pö_12
 | 
GPIO_Pö_13
 |

74 
GPIO_Pö_14
 | 
GPIO_Pö_15
;

75 
	`GPIO_Inô
(
GPIOF
, &
GPIO_InôSåu˘uª
);

77 
GPIO_InôSåu˘uª
.
GPIO_Pö
 = 
GPIO_Pö_0
 | 
GPIO_Pö_1
 | 
GPIO_Pö_2
 | 
GPIO_Pö_3
 |

78 
GPIO_Pö_4
 | 
GPIO_Pö_5
;

79 
	`GPIO_Inô
(
GPIOG
, &
GPIO_InôSåu˘uª
);

81 
GPIO_InôSåu˘uª
.
GPIO_Pö
 = 
GPIO_Pö_11
 | 
GPIO_Pö_12
 | 
GPIO_Pö_13
;

82 
	`GPIO_Inô
(
GPIOD
, &
GPIO_InôSåu˘uª
);

85 
GPIO_InôSåu˘uª
.
GPIO_Pö
 = 
GPIO_Pö_4
 |
GPIO_Pö_5
;

86 
	`GPIO_Inô
(
GPIOD
, &
GPIO_InôSåu˘uª
);

89 
GPIO_InôSåu˘uª
.
GPIO_Pö
 = 
GPIO_Pö_10
;

90 
	`GPIO_Inô
(
GPIOG
, &
GPIO_InôSåu˘uª
);

93 
GPIO_InôSåu˘uª
.
GPIO_Pö
 = 
GPIO_Pö_0
 | 
GPIO_Pö_1
;

94 
	`GPIO_Inô
(
GPIOE
, &
GPIO_InôSåu˘uª
);

97 
p
.
FSMC_AddªssSëupTime
 = 0;

98 
p
.
FSMC_AddªssHﬁdTime
 = 0;

99 
p
.
FSMC_D©aSëupTime
 = 1;

100 
p
.
FSMC_BusTu∫AroundDuøti⁄
 = 0;

101 
p
.
FSMC_CLKDivisi⁄
 = 0;

102 
p
.
FSMC_D©aL©ícy
 = 0;

104 
p
.
FSMC_Ac˚ssMode
 = 
FSMC_Ac˚ssMode_B
;

108 
FSMC_NORSRAMInôSåu˘uª
.
FSMC_B™k
 = 
FSMC_B™k1_NORSRAM1
;

110 
FSMC_NORSRAMInôSåu˘uª
.
FSMC_D©aAddªssMux
 = 
FSMC_D©aAddªssMux_DißbÀ
;

111 
FSMC_NORSRAMInôSåu˘uª
.
FSMC_Mem‹yTy≥
 = 
FSMC_Mem‹yTy≥_SRAM
;

112 
FSMC_NORSRAMInôSåu˘uª
.
FSMC_Mem‹yD©aWidth
 = 
FSMC_Mem‹yD©aWidth_16b
;

113 
FSMC_NORSRAMInôSåu˘uª
.
FSMC_Bur°Ac˚ssMode
 = 
FSMC_Bur°Ac˚ssMode_DißbÀ
;

114 
FSMC_NORSRAMInôSåu˘uª
.
FSMC_WaôSig«lPﬁ¨ôy
 = 
FSMC_WaôSig«lPﬁ¨ôy_Low
;

115 
FSMC_NORSRAMInôSåu˘uª
.
FSMC_WøpMode
 = 
FSMC_WøpMode_DißbÀ
;

116 
FSMC_NORSRAMInôSåu˘uª
.
FSMC_WaôSig«lA˘ive
 = 
FSMC_WaôSig«lA˘ive_Bef‹eWaôSèã
;

117 
FSMC_NORSRAMInôSåu˘uª
.
FSMC_WrôeO≥øti⁄
 = 
FSMC_WrôeO≥øti⁄_E«bÀ
;

118 
FSMC_NORSRAMInôSåu˘uª
.
FSMC_WaôSig«l
 = 
FSMC_WaôSig«l_DißbÀ
;

119 
FSMC_NORSRAMInôSåu˘uª
.
FSMC_ExãndedMode
 = 
FSMC_ExãndedMode_DißbÀ
;

120 
FSMC_NORSRAMInôSåu˘uª
.
FSMC_WrôeBur°
 = 
FSMC_WrôeBur°_DißbÀ
;

121 
FSMC_NORSRAMInôSåu˘uª
.
FSMC_RódWrôeTimögSåu˘
 = &
p
;

122 
FSMC_NORSRAMInôSåu˘uª
.
FSMC_WrôeTimögSåu˘
 = &
p
;

124 
	`FSMC_NORSRAMInô
(&
FSMC_NORSRAMInôSåu˘uª
);

128 
	`FSMC_NORSRAMCmd
(
FSMC_B™k1_NORSRAM1
, 
ENABLE
);

130 
	}
}

	@Source/User/fsmc_sram.h

22 #i‚de‡
__FSMC_SRAM_H


23 
	#__FSMC_SRAM_H


	)

26 
	~"°m32f10x.h
"

32 
FSMC_SRAM_Inô
();

33 
FSMC_SRAM_WrôeBuf„r
(
uöt16_t
* 
pBuf„r
, 
uöt32_t
 
WrôeAddr
, uöt32_à
NumHÆfw‹dToWrôe
);

34 
FSMC_SRAM_RódBuf„r
(
uöt16_t
* 
pBuf„r
, 
uöt32_t
 
RódAddr
, uöt32_à
NumHÆfw‹dToRód
);

	@Source/User/luoyong.h

1 c⁄° 
	ggImage_luoy⁄g
[360640] = {

	@Source/User/main.c

8 
	~<°rög.h
>

9 
	~"°m32f10x.h
"

11 
	~"debug_STM32.h
"

12 
	~"fsmc_§am.h
"

13 
	~"hw_c⁄fig.h
"

14 
	~"usb_öô.h
"

15 
	~"usb_lib.h
"

16 
	~"SSD1963.h
"

17 
	~"Gøphics.h
"

18 
	~"SYS_ZK.H
"

19 
	~"buâ⁄.h
"

20 
	~"°m32f10x_adc.h
"

21 
	~"°m32f10x_ußπ.h
"

22 
	~"°m32f10x_•i.h
"

24 
	~"Ÿ.h
"

25 
	~"touch.h
"

26 
	~"24LC02.H
"

27 
	~"a.h
"

32 
Inô_LED
();

33 
Inô_NVIC
();

34 
Inô_KEY
();

35 
uöt8_t
 
KEY_Sˇn
();

36 
Dñay_Ms
(
uöt16_t
 
time
);

37 
Dñay_Us
(
uöt16_t
 
time
);

42 
u8
 
	gSecC¡
 = 0;

43 
u8
 
	g_SEC_
 = 0;

44 
u8
 
	gmode
;

45 
u8
 
	gbrighäess
;

46 
u8
 
	gc⁄åa°
;

47 
u8
 
	gßtuøti⁄
;

49 
u8
 
	göbuf
[64];

50 
u8
 
	goutbuf
[64];

52 
BUTTONDEFINE
 
	gbuâ⁄1
[]=

65 
BUTTONDEFINE
 
	gbuâ⁄2
[]=

81 
GPIOInô
();

82 
ADC_Inô_Ex
();

83 
Tim3_ETR_Inô
();

84 
Tim4_Inô
();

86 
	$DñayMs
(
u32
 
nMs
)

88 
u32
 
i
;

90 ; 
nMs
 !=0;ÇMs--)

92 
i
 = 10301;

93 
i
--);

95 
	}
}

97 
	$Usb_SídD©a
(
u8
 
Àn
)

100 
	`_SëEPTxCou¡
(
ENDP1
, 
Àn
);

101 
	`_SëEPTxSètus
(
ENDP1
, 
EP_TX_VALID
);

102 
	}
}

104 
	$maö
()

111 
brighäess
 = 0x40;

112 
c⁄åa°
 = 0x70;

113 
ßtuøti⁄
 = 0x40;

114 
	`mem£t
(
outbuf
,0,64);

117 
	`Sy°emInô
();

129 
	`UART3_Inô
(115200);

130 
	`PrötSå
("=========12345========\r\n");

134 
	`Tim4_Inô
();

137 
	`USB_Inô
();

139 
	`RCC_AHBPîùhClockCmd
(
RCC_AHBPîùh_FSMC
, 
ENABLE
);

145 
	`LcdInô
();

147 
	`LcdCÀ¨
(
GRAY0
);

148 
	`Di•Buâ⁄
(
buâ⁄2
);

149 
	`Di•œyBuâ⁄Up
(2, 2,400,25);

150 
	`LcdPrötSå
("∞Ê»®À˘”–(C)mmmmmmmmmmmmmmmmmmmm",4,4,
BLUE
,
GRAY0
);

151 
	`Di•œyBuâ⁄Up
(402,2,478,25);

152 
	`LcdPrötf
(410,4,
BLACK
,
GRAY0
,"%02d:%02d:%02d",12,12,12);

153 
	`Di•œyBuâ⁄DownCﬁ‹
(200, 410, 290, 470, 
RED
);

154 
	`Di•œyBuâ⁄DownCﬁ‹
(412, 410, 502, 470, 
GREEN
);

155 
	`LcdPrötSå
("…æ≥˝",230,432,
WHITE
,
RED
);

156 
	`LcdPrötSå
("»∑»œ",442,432,
BLACK
,
GREEN
);

157 
	`LcdFûlRec
(200,100,502,190,
DGREEN
);

158 
	`Di•œyBuâ⁄Up
(190,90,512,475);

159 
	`DñayMs
(1000);

160 
	`LcdFûlRec
(190,90,512,475,
RED
);

161 
	`DñayMs
(1000);

162 
	`LcdFûlRec
(190,90,512,475,
GRAY0
);

163 
	`Di•Buâ⁄
(
buâ⁄2
);

164 
	`Di•œyBuâ⁄DownCﬁ‹
(200, 410, 290, 470, 
RED
);

165 
	`Di•œyBuâ⁄DownCﬁ‹
(412, 410, 502, 470, 
GREEN
);

166 
	`LcdPrötSå
("…æ≥˝",230,432,
WHITE
,
RED
);

167 
	`LcdPrötSå
("»∑»œ",442,432,
BLACK
,
GREEN
);

168 
	`LcdFûlRec
(200,100,502,190,
DGREEN
);

169 
	`Di•œyBuâ⁄Up
(190,90,512,475);

172 
	`LcdPröt16bôBmp
(
gImage_a
, 600, 90, 40, 92);

177 
LED1
=!LED1;

178 
	`DñayMs
(50);

232 
	}
}

234 
	$GPIOInô
()

236 
GPIO_InôTy≥Def
 
GPIO_InôSåu˘uª
;

237 
GPIO_InôSåu˘uª
.
GPIO_S≥ed
 = 
GPIO_S≥ed_50MHz
;

238 
GPIO_InôSåu˘uª
.
GPIO_Mode
 = 
GPIO_Mode_Out_PP
;

240 
	`RCC_APB2PîùhClockCmd
–
RCC_APB2Pîùh_GPIOA
 | 
RCC_APB2Pîùh_GPIOB
 | 
RCC_APB2Pîùh_GPIOC
 |

241 
RCC_APB2Pîùh_GPIOD
 | 
RCC_APB2Pîùh_GPIOE
 | 
RCC_APB2Pîùh_AFIO
,

242 
ENABLE
 );

272 
GPIO_InôSåu˘uª
.
GPIO_Pö
 = 
GPIO_Pö_6
;

273 
	`GPIO_Inô
(
GPIOC
, &
GPIO_InôSåu˘uª
);

274 
GPIO_InôSåu˘uª
.
GPIO_Mode
 = 
GPIO_Mode_IPU
;

275 
GPIO_InôSåu˘uª
.
GPIO_Pö
 = 
GPIO_Pö_7
|
GPIO_Pö_8
;

276 
	`GPIO_Inô
(
GPIOC
, &
GPIO_InôSåu˘uª
);

277 
	}
}

282 
	$SysTick_Inô
()

284 
	`SysTick_CLKSour˚C⁄fig
(
SysTick_CLKSour˚_HCLK_Div8
);

286 
SysTick
->
LOAD
 = 0xFFFFFE;

287 
SysTick
->
VAL
 = 0;

288 
SysTick
->
CTRL
 &~(
SYSTICK_TICKINT
<<1);

289 
	}
}

297 
	$ADC_Inô_Ex
()

299 
GPIO_InôTy≥Def
 
GPIO_InôSåu˘uª
;

300 
ADC_InôTy≥Def
 
ADC_InôSåu˘uª
;

301 
GPIO_InôSåu˘uª
.
GPIO_S≥ed
 = 
GPIO_S≥ed_50MHz
;

302 
GPIO_InôSåu˘uª
.
GPIO_Mode
 = 
GPIO_Mode_AIN
;

304 
GPIO_InôSåu˘uª
.
GPIO_Pö
 = 
GPIO_Pö_0
 | 
GPIO_Pö_1
 | 
GPIO_Pö_2
 | 
GPIO_Pö_3
 |

305 
GPIO_Pö_4
 | 
GPIO_Pö_5
 | 
GPIO_Pö_6
 | 
GPIO_Pö_7
;

306 
	`GPIO_Inô
(
GPIOA
, &
GPIO_InôSåu˘uª
);

308 
GPIO_InôSåu˘uª
.
GPIO_Pö
 = 
GPIO_Pö_0
 | 
GPIO_Pö_1
;

309 
	`GPIO_Inô
(
GPIOB
, &
GPIO_InôSåu˘uª
);

311 
GPIO_InôSåu˘uª
.
GPIO_Pö
 = 
GPIO_Pö_0
 | 
GPIO_Pö_1
 | 
GPIO_Pö_2
 | 
GPIO_Pö_3
 |

312 
GPIO_Pö_4
 | 
GPIO_Pö_5
;

313 
	`GPIO_Inô
(
GPIOC
, &
GPIO_InôSåu˘uª
);

317 
	`RCC_ADCCLKC⁄fig
(
RCC_PCLK2_Div6
);

319 
	`RCC_APB2PîùhClockCmd
(
RCC_APB2Pîùh_ADC1
, 
ENABLE
);

322 
ADC_InôSåu˘uª
.
ADC_Mode
 = 
ADC_Mode_Indïídít
;

323 
ADC_InôSåu˘uª
.
ADC_SˇnC⁄vMode
 = 
DISABLE
;

324 
ADC_InôSåu˘uª
.
ADC_C⁄töuousC⁄vMode
 = 
DISABLE
;

325 
ADC_InôSåu˘uª
.
ADC_Exã∫ÆTrigC⁄v
 = 
ADC_Exã∫ÆTrigC⁄v_N⁄e
;

326 
ADC_InôSåu˘uª
.
ADC_D©aAlign
 = 
ADC_D©aAlign_Right
;

327 
ADC_InôSåu˘uª
.
ADC_NbrOfCh™√l
 = 16;

328 
	`ADC_Inô
(
ADC1
, &
ADC_InôSåu˘uª
);

330 
	`ADC_Cmd
(
ADC1
, 
ENABLE
);

332 
	`ADC_Re£tCÆibøti⁄
(
ADC1
);

333 
	`ADC_GëRe£tCÆibøti⁄Sètus
(
ADC1
));

335 
	`ADC_SèπCÆibøti⁄
(
ADC1
);

336 
	`ADC_GëCÆibøti⁄Sètus
(
ADC1
));

338 
	`ADC_So·w¨eSèπC⁄vCmd
(
ADC1
, 
ENABLE
);

340 
ADC1
->
CR2
 |= 0x01;

341 
	}
}

346 
	$Tim3_ETR_Inô
()

348 
GPIO_InôTy≥Def
 
GPIO_InôSåu˘uª
;

349 
TIM_TimeBa£InôTy≥Def
 
TIM_TimeBa£Såu˘uª
;

350 
	`RCC_APB1PîùhClockCmd
(
RCC_APB1Pîùh_TIM3
, 
ENABLE
);

354 
GPIO_InôSåu˘uª
.
GPIO_Pö
 = 
GPIO_Pö_2
;

355 
GPIO_InôSåu˘uª
.
GPIO_Mode
 = 
GPIO_Mode_IPU
;

356 
GPIO_InôSåu˘uª
.
GPIO_S≥ed
 = 
GPIO_S≥ed_50MHz
;

357 
	`GPIO_Inô
(
GPIOD
, &
GPIO_InôSåu˘uª
);

360 
TIM_TimeBa£Såu˘uª
.
TIM_Pîiod
 = 65535;

361 
TIM_TimeBa£Såu˘uª
.
TIM_PªsˇÀr
 = 0;

362 
TIM_TimeBa£Såu˘uª
.
TIM_ClockDivisi⁄
 = 0;

363 
TIM_TimeBa£Såu˘uª
.
TIM_Cou¡îMode
 = 
TIM_Cou¡îMode_Up
;

364 
	`TIM_TimeBa£Inô
(
TIM3
, &
TIM_TimeBa£Såu˘uª
);

366 
TIM3
->
CNT
 = 0;

367 
	`TIM_Sñe˘I≈utTriggî
(
TIM3
,
TIM_TS_ETRF
);

368 
	`TIM_ETRClockMode2C⁄fig
(
TIM3
,
TIM_ExtTRGPSC_OFF
,
TIM_ExtTRGPﬁ¨ôy_N⁄Invîãd
,0x00);

370 
	`TIM_ITC⁄fig
(
TIM3
, 
TIM_IT_Upd©e
, 
ENABLE
);

371 
	`TIM_Cmd
(
TIM3
, 
ENABLE
);

372 
	}
}

377 
	$Tim4_Inô
()

379 
NVIC_InôTy≥Def
 
NVIC_InôSåu˘uª
;

380 
TIM_TimeBa£InôTy≥Def
 
TIM_TimeBa£Såu˘uª
;

381 
	`RCC_APB1PîùhClockCmd
(
RCC_APB1Pîùh_TIM4
, 
ENABLE
);

383 
TIM_TimeBa£Såu˘uª
.
TIM_Pîiod
 = 60000;

384 
TIM_TimeBa£Såu˘uª
.
TIM_PªsˇÀr
 = 5;

385 
TIM_TimeBa£Såu˘uª
.
TIM_ClockDivisi⁄
 = 0;

386 
TIM_TimeBa£Såu˘uª
.
TIM_Cou¡îMode
 = 
TIM_Cou¡îMode_Up
;

387 
	`TIM_TimeBa£Inô
(
TIM4
, &
TIM_TimeBa£Såu˘uª
);

391 
NVIC_InôSåu˘uª
.
NVIC_IRQCh™√l
 = 
TIM4_IRQn
;

392 
NVIC_InôSåu˘uª
.
NVIC_IRQCh™√lPªem±i⁄Pri‹ôy
 = 0;

393 
NVIC_InôSåu˘uª
.
NVIC_IRQCh™√lSubPri‹ôy
 = 3;

394 
NVIC_InôSåu˘uª
.
NVIC_IRQCh™√lCmd
 = 
ENABLE
;

395 
	`NVIC_Inô
(&
NVIC_InôSåu˘uª
);

397 
	`TIM_CÀ¨Fœg
(
TIM4
, 
TIM_FLAG_Upd©e
);

398 
	`TIM_ARRPªlﬂdC⁄fig
(
TIM4
, 
DISABLE
);

400 
	`TIM_ITC⁄fig
(
TIM4
, 
TIM_IT_Upd©e
, 
ENABLE
);

401 
	`TIM_Cmd
(
TIM4
, 
ENABLE
);

402 
	}
}

403 
	$TIM4_IRQH™dÀr
()

405 if(
	`TIM_GëITSètus
(
TIM4
, 
TIM_IT_Upd©e
Ë!
RESET
)

407 
	`TIM_CÀ¨ITPídögBô
(
TIM4
, 
TIM_IT_Upd©e
);

409 
SecC¡
++;

410 if(
SecC¡
 >= 200)

412 
SecC¡
 = 0;

413 
_SEC_
 = 1;

418 
	}
}

429 
	$Inô_LED
()

431 
GPIO_InôTy≥Def
 
GPIO_InôSåu˘uª
;

433 
	`RCC_APB2PîùhClockCmd
(
RCC_APB2Pîùh_GPIOD
,
ENABLE
);

435 
GPIO_InôSåu˘uª
.
GPIO_Pö
 = 
GPIO_Pö_6
 | 
GPIO_Pö_12
;

436 
GPIO_InôSåu˘uª
.
GPIO_Mode
 = 
GPIO_Mode_Out_PP
;

437 
GPIO_InôSåu˘uª
.
GPIO_S≥ed
 = 
GPIO_S≥ed_50MHz
;

438 
	`GPIO_Inô
(
GPIOD
, &
GPIO_InôSåu˘uª
);

440 
GPIO_InôSåu˘uª
.
GPIO_Pö
 = 
GPIO_Pö_13
 ;

441 
GPIO_InôSåu˘uª
.
GPIO_Mode
 = 
GPIO_Mode_Out_PP
;

442 
GPIO_InôSåu˘uª
.
GPIO_S≥ed
 = 
GPIO_S≥ed_50MHz
;

443 
	`GPIO_Inô
(
GPIOD
, &
GPIO_InôSåu˘uª
);

444 
	}
}

452 
	$Inô_KEY
()

454 
GPIO_InôTy≥Def
 
GPIO_InôSåu˘uª
;

455 
	`RCC_APB2PîùhClockCmd
(
RCC_APB2Pîùh_GPIOC
 |
RCC_APB2Pîùh_GPIOE
,
ENABLE
);

457 
GPIO_InôSåu˘uª
.
GPIO_Pö
 = 
GPIO_Pö_13
;

458 
GPIO_InôSåu˘uª
.
GPIO_Mode
 = 
GPIO_Mode_IPU
;

459 
	`GPIO_Inô
(
GPIOC
 ,&
GPIO_InôSåu˘uª
);

461 
GPIO_InôSåu˘uª
.
GPIO_Pö
 = 
GPIO_Pö_0
 | 
GPIO_Pö_1
 | 
GPIO_Pö_2


462 | 
GPIO_Pö_3
 | 
GPIO_Pö_4
;

463 
GPIO_InôSåu˘uª
.
GPIO_Mode
 = 
GPIO_Mode_IPU
;

464 
	`GPIO_Inô
(
GPIOE
,&
GPIO_InôSåu˘uª
);

465 
	}
}

474 
uöt8_t
 
	$KEY_Sˇn
()

476 
uöt8_t
 
KEY_Sètus
 =1;

477 if(
KEY_Sètus
&&(
KEY_USER
==0||
KEY_S
==0||
KEY_D
==0||
KEY_L
==0||
KEY_R
==0||
KEY_U
==0))

479 
	`Dñay_Ms
(10);

480 
KEY_Sètus
 =0;

481 if(
KEY_USER
==0)  1;

482 if(
KEY_S
==0)  2;

483 if(
KEY_D
==0)  3;

484 if(
KEY_L
==0)  4;

485 if(
KEY_R
==0)  5;

486 if(
KEY_U
==0)  6;

487 }if(
KEY_USER
==1&&
KEY_S
==1&&
KEY_D
==1&&
KEY_L
==1&&
KEY_R
==1&&
KEY_U
==1)
KEY_Sètus
=1;

489 
	}
}

497 
	$Inô_NVIC
()

499 
NVIC_InôTy≥Def
 
NVIC_InôSåu˘uª
;

501 #ifde‡ 
VECT_TAB_RAM


503 
	`NVIC_SëVe˘‹TabÀ
(
NVIC_Ve˘Tab_RAM
, 0x0);

506 
	`NVIC_SëVe˘‹TabÀ
(
NVIC_Ve˘Tab_FLASH
, 0x0);

509 
	`NVIC_Pri‹ôyGroupC⁄fig
(
NVIC_Pri‹ôyGroup_2
);

511 
NVIC_InôSåu˘uª
.
NVIC_IRQCh™√l
 = 
EXTI9_5_IRQn
;

512 
NVIC_InôSåu˘uª
.
NVIC_IRQCh™√lPªem±i⁄Pri‹ôy
 = 2;

513 
NVIC_InôSåu˘uª
.
NVIC_IRQCh™√lSubPri‹ôy
 = 0;

514 
NVIC_InôSåu˘uª
.
NVIC_IRQCh™√lCmd
 = 
ENABLE
;

515 
	`NVIC_Inô
(&
NVIC_InôSåu˘uª
);

516 
	}
}

525 
	$Dñay_Ms
(
uöt16_t
 
time
)

527 
uöt16_t
 
i
,
j
;

528 
i
=0;i<
time
;i++)

529 
j
=0;j<10260;j++);

530 
	}
}

538 
	$Dñay_Us
(
uöt16_t
 
time
)

540 
uöt16_t
 
i
,
j
;

541 
i
=0;i<
time
;i++)

542 
j
=0;j<9;j++);

543 
	}
}

	@Source/User/stm32f10x_conf.h

22 #i‚de‡
__STM32F10x_CONF_H


23 
	#__STM32F10x_CONF_H


	)

33 
	~"°m32f10x_dma.h
"

34 
	~"°m32f10x_exti.h
"

35 
	~"°m32f10x_Êash.h
"

36 
	~"°m32f10x_fsmc.h
"

37 
	~"°m32f10x_gpio.h
"

41 
	~"°m32f10x_rcc.h
"

43 
	~"°m32f10x_sdio.h
"

45 
	~"°m32f10x_tim.h
"

46 
	~"°m32f10x_ußπ.h
"

48 
	~"misc.h
"

57 #ifde‡ 
USE_FULL_ASSERT


67 
	#as£π_∑øm
(
ex¥
Ë(”x¥Ë? ()0 : 
	`as£π_Áûed
((
uöt8_t
 *)
__FILE__
, 
__LINE__
))

	)

69 
as£π_Áûed
(
uöt8_t
* 
fûe
, 
uöt32_t
 
löe
);

71 
	#as£π_∑øm
(
ex¥
Ë(()0)

	)

	@Source/User/stm32f10x_it.c

24 
	~"°m32f10x_ô.h
"

25 
	~"usb_lib.h
"

26 
	~"SSD1963.h
"

27 
	~"Gøphics.h
"

29 
u8
 
mode
;

30 
u8
 
brighäess
;

31 
u8
 
c⁄åa°
;

32 
u8
 
ßtuøti⁄
;

33 
u8
 
öbuf
[64];

34 
u8
 
outbuf
[64];

36 
u16
 
	gso‚um
 = 0;

37 
u16
 
	gimage_w
;

38 
u16
 
	gimage_h
;

39 
u16
 
	gdi•œy_x
;

40 
u16
 
	gdi•œy_y
;

62 
	$NMI_H™dÀr
()

64 
	}
}

71 
	$H¨dFau…_H™dÀr
()

77 
	}
}

84 
	$MemM™age_H™dÀr
()

90 
	}
}

97 
	$BusFau…_H™dÀr
()

103 
	}
}

110 
	$UßgeFau…_H™dÀr
()

116 
	}
}

123 
	$SVC_H™dÀr
()

125 
	}
}

132 
	$DebugM⁄_H™dÀr
()

134 
	}
}

141 
	$PídSV_H™dÀr
()

143 
	}
}

150 
	$SysTick_H™dÀr
()

152 
	}
}

155 
__IO
 
uöt16_t
 
	gwI°r
;

156 
__IO
 
uöt8_t
 
	gbI¡PackSOF
 = 0;

157 
uöt16_t
 
	gSaveRSèã
;

158 
uöt16_t
 
	gSaveTSèã
;

168 
	$USB_HP_CAN1_TX_IRQH™dÀr
()

170 
uöt32_t
 
wEPVÆ
 = 0;

172 
	`_SëISTR
((
uöt16_t
)
CLR_CTR
);

173 
EPödex
 = (
uöt8_t
)(
wI°r
 & 
ISTR_EP_ID
);

174 
wEPVÆ
 = 
	`_GëENDPOINT
(
EPödex
);

176 i‡((
wEPVÆ
 & 
EP_CTR_RX
) != 0)

178 
	`_CÀ¨EP_CTR_RX
(
EPödex
);

182 i‡((
wEPVÆ
 & 
EP_CTR_TX
) != 0)

184 
	`_CÀ¨EP_CTR_TX
(
EPödex
);

188 
	}
}

198 
	$WrôeBuf
()

200 
u16
 *
dp
;

201 
dp
 = (
u16
*)
outbuf
;

203 
	`WrôeD©a
(*
dp
++);

204 
	`WrôeD©a
(*
dp
++);

205 
	`WrôeD©a
(*
dp
++);

206 
	`WrôeD©a
(*
dp
++);

207 
	`WrôeD©a
(*
dp
++);

208 
	`WrôeD©a
(*
dp
++);

209 
	`WrôeD©a
(*
dp
++);

210 
	`WrôeD©a
(*
dp
++);

211 
	`WrôeD©a
(*
dp
++);

212 
	`WrôeD©a
(*
dp
++);

213 
	`WrôeD©a
(*
dp
++);

214 
	`WrôeD©a
(*
dp
++);

215 
	`WrôeD©a
(*
dp
++);

216 
	`WrôeD©a
(*
dp
++);

217 
	`WrôeD©a
(*
dp
++);

218 
	`WrôeD©a
(*
dp
++);

219 
	`WrôeD©a
(*
dp
++);

220 
	`WrôeD©a
(*
dp
++);

221 
	`WrôeD©a
(*
dp
++);

222 
	`WrôeD©a
(*
dp
++);

223 
	`WrôeD©a
(*
dp
++);

224 
	`WrôeD©a
(*
dp
++);

225 
	`WrôeD©a
(*
dp
++);

226 
	`WrôeD©a
(*
dp
++);

227 
	`WrôeD©a
(*
dp
++);

228 
	`WrôeD©a
(*
dp
++);

229 
	`WrôeD©a
(*
dp
++);

230 
	`WrôeD©a
(*
dp
++);

231 
	`WrôeD©a
(*
dp
++);

232 
	`WrôeD©a
(*
dp
++);

233 
	`WrôeD©a
(*
dp
++);

234 
	`WrôeD©a
(*
dp
++);

235 
	}
}

236 
	$USB_LP_CAN1_RX0_IRQH™dÀr
()

240 
wI°r
 = 
	`_GëISTR
();

241 i‡(
wI°r
 & 
ISTR_CTR
)

243 
uöt32_t
 
wEPVÆ
 = 0;

245 
	`_SëISTR
((
uöt16_t
)
CLR_CTR
);

246 
EPödex
 = (
uöt8_t
)(
wI°r
 & 
ISTR_EP_ID
);

248 i‡(
EPödex
)

250 
wEPVÆ
 = 
	`_GëENDPOINT
(
EPödex
);

252 i‡(
wEPVÆ
 & 
EP_CTR_TX
)

254 
	`_CÀ¨EP_CTR_TX
(
EPödex
);

255 
öbuf
[0] = 
mode
;

256 
öbuf
[1] = 
brighäess
;

257 
öbuf
[2] = 
c⁄åa°
;

258 
öbuf
[3] = 
ßtuøti⁄
;

259 
	`U£rToPMABuf„rC›yENDP1
(
öbuf
, 64);

260 
	`_SëEPTxCou¡
(
ENDP1
, 64);

261 
	`_SëEPTxSètus
(
ENDP1
, 
EP_TX_VALID
);

263 i‡(
wEPVÆ
 & 
EP_CTR_RX
)

265 
	`_CÀ¨EP_CTR_RX
(
EPödex
);

268 
	`PMAToU£rBuf„rC›yENDP2
(
outbuf
, 64);

269 
	`_SëEPRxSètus
(
ENDP2
, 
EP_RX_VALID
);

270 if(!
so‚um
)

272 if(
outbuf
[0] == 0x01)

274 
brighäess
 = 
outbuf
[1];

275 
c⁄åa°
 = 
outbuf
[2];

276 
ßtuøti⁄
 = 
outbuf
[3];

277 
	`WrôeComm™d
(0xBC);

278 
	`WrôeD©a
(
brighäess
);

279 
	`WrôeD©a
(
c⁄åa°
);

280 
	`WrôeD©a
(
ßtuøti⁄
);

281 
	`WrôeD©a
(0x01);

283 if(
outbuf
[0] == 0x02)

285 
di•œy_x
 = 
outbuf
[9]<<8|outbuf[8];

286 
di•œy_y
 = 
outbuf
[11]<<8|outbuf[10];

287 
image_w
 = 
outbuf
[13]<<8|outbuf[12];

288 
image_h
 = 
outbuf
[15]<<8|outbuf[14];

289 
so‚um
 = 
outbuf
[17]<<8|outbuf[16];

291 
	`LcdSëAªa
(
di•œy_x
,
di•œy_y
,di•œy_x+
image_w
-1,di•œy_y+
image_h
-1);

292 
	`WrôeComm™d
(0x2C);

297 
so‚um
--;

300 
	`WrôeBuf
();

308 
SaveRSèã
 = 
	`_GëEPRxSètus
(
ENDP0
);

309 
SaveTSèã
 = 
	`_GëEPTxSètus
(
ENDP0
);

310 
	`_SëEPRxSètus
(
ENDP0
, 
EP_RX_NAK
);

311 
	`_SëEPTxSètus
(
ENDP0
, 
EP_TX_NAK
);

313 
wEPVÆ
 = 
	`_GëENDPOINT
(
ENDP0
);

314 i‡((
wEPVÆ
 & 
EP_CTR_TX
))

316 
	`_CÀ¨EP_CTR_TX
(
ENDP0
);

317 
	`In0_Pro˚ss
();

319 i‡((
wEPVÆ
 & 
EP_SETUP
))

321 
	`_CÀ¨EP_CTR_RX
(
ENDP0
);

322 
	`Sëup0_Pro˚ss
();

332 
pInf‹m©i⁄
->
USBbReque°
)

346 i‡((
wEPVÆ
 & 
EP_CTR_RX
))

348 
	`_CÀ¨EP_CTR_RX
(
ENDP0
);

349 
	`Out0_Pro˚ss
();

352 
	`_SëEPRxSètus
(
ENDP0
, 
SaveRSèã
);

353 
	`_SëEPTxSètus
(
ENDP0
, 
SaveTSèã
);

358 i‡(
wI°r
 & 
ISTR_RESET
)

360 
	`_SëISTR
((
uöt16_t
)
CLR_RESET
);

361 
Devi˚_Pr›îty
.
	`Re£t
();

362 
so‚um
 = 0;

364 
	}
}

	@Source/User/stm32f10x_it.h

22 #i‚de‡
__STM32F10x_IT_H


23 
	#__STM32F10x_IT_H


	)

26 
	~"°m32f10x.h
"

33 
NMI_H™dÀr
();

34 
H¨dFau…_H™dÀr
();

35 
MemM™age_H™dÀr
();

36 
BusFau…_H™dÀr
();

37 
UßgeFau…_H™dÀr
();

38 
SVC_H™dÀr
();

39 
DebugM⁄_H™dÀr
();

40 
PídSV_H™dÀr
();

41 
SysTick_H™dÀr
();

42 
EXTI4_IRQH™dÀr
();

	@Source/User/touch/24LC02.c

15 
	~"24LC02.h
"

16 
	~"Ÿ.h
"

18 
Dñay_Us
(
uöt16_t
 
time
);

23 
uöt8_t
 
	$AT24CXX_RódO√Byã
(
uöt16_t
 
RódAddr
)

25 
uöt8_t
 
ãmp
=0;

26 
	`IIC_Sèπ
();

27 if(
EE_TYPE
>
AT24C16
)

29 
	`IIC_Síd_Byã
(0XA0);

30 
	`IIC_Waô_Ack
();

31 
	`IIC_Síd_Byã
(
RódAddr
>>8);

32 
	`IIC_Waô_Ack
();

33 }
	`IIC_Síd_Byã
(0XA0+((
RódAddr
/256)<<1));

35 
	`IIC_Waô_Ack
();

36 
	`IIC_Síd_Byã
(
RódAddr
%256);

37 
	`IIC_Waô_Ack
();

38 
	`IIC_Sèπ
();

39 
	`IIC_Síd_Byã
(0XA1);

40 
	`IIC_Waô_Ack
();

41 
ãmp
=
	`IIC_Ród_Byã
(0);

42 
	`IIC_St›
();

43  
ãmp
;

44 
	}
}

48 
	$AT24CXX_WrôeO√Byã
(
uöt16_t
 
WrôeAddr
,
uöt8_t
 
D©aToWrôe
)

50 
	`IIC_Sèπ
();

51 if(
EE_TYPE
>
AT24C16
)

53 
	`IIC_Síd_Byã
(0XA0);

54 
	`IIC_Waô_Ack
();

55 
	`IIC_Síd_Byã
(
WrôeAddr
>>8);

56 
	`IIC_Waô_Ack
();

59 
	`IIC_Síd_Byã
(0XA0+((
WrôeAddr
/256)<<1));

61 
	`IIC_Waô_Ack
();

62 
	`IIC_Síd_Byã
(
WrôeAddr
%256);

63 
	`IIC_Waô_Ack
();

64 
	`IIC_Síd_Byã
(
D©aToWrôe
);

65 
	`IIC_Waô_Ack
();

66 
	`IIC_St›
();

67 
	`Dñay_Ms
(10);

68 
	}
}

74 
	$AT24CXX_WrôeLíByã
(
uöt16_t
 
WrôeAddr
,
uöt32_t
 
D©aToWrôe
,
uöt8_t
 
Lí
)

76 
uöt8_t
 
t
;

77 
t
=0;t<
Lí
;t++)

79 
	`AT24CXX_WrôeO√Byã
(
WrôeAddr
+
t
,(
D©aToWrôe
>>(8*t))&0xff);

81 
	}
}

88 
uöt32_t
 
	$AT24CXX_RódLíByã
(
uöt16_t
 
RódAddr
,
uöt8_t
 
Lí
)

90 
uöt8_t
 
t
;

91 
uöt32_t
 
ãmp
=0;

92 
t
=0;t<
Lí
;t++)

94 
ãmp
<<=8;

95 
ãmp
+=
	`AT24CXX_RódO√Byã
(
RódAddr
+
Lí
-
t
-1);

97  
ãmp
;

98 
	}
}

104 
uöt8_t
 
	$AT24CXX_Check
()

106 
uöt8_t
 
ãmp
;

107 
ãmp
=
	`AT24CXX_RódO√Byã
(255);

108 if(
ãmp
==0X55) 0;

111 
	`AT24CXX_WrôeO√Byã
(255,0X55);

112 
ãmp
=
	`AT24CXX_RódO√Byã
(255);

113 if(
ãmp
==0X55) 0;

116 
	}
}

122 
	$AT24CXX_Ród
(
uöt16_t
 
RódAddr
,
uöt8_t
 *
pBuf„r
,uöt16_à
NumToRód
)

124 
NumToRód
)

126 *
pBuf„r
++=
	`AT24CXX_RódO√Byã
(
RódAddr
++);

127 
NumToRód
--;

129 
	}
}

134 
	$AT24CXX_Wrôe
(
uöt16_t
 
WrôeAddr
,
uöt8_t
 *
pBuf„r
,uöt16_à
NumToWrôe
)

136 
NumToWrôe
--)

138 
	`AT24CXX_WrôeO√Byã
(
WrôeAddr
,*
pBuf„r
);

139 
WrôeAddr
++;

140 
pBuf„r
++;

142 
	}
}

143 
	$Inô_IIC
()

145 
GPIO_InôTy≥Def
 
GPIO_InôSåu˘uª
;

146 
	`RCC_APB2PîùhClockCmd
(
RCC_APB2Pîùh_GPIOB
,
ENABLE
);

148 
GPIO_InôSåu˘uª
.
GPIO_Pö
 = 
GPIO_Pö_6
 | 
GPIO_Pö_7
;

149 
GPIO_InôSåu˘uª
.
GPIO_Mode
 = 
GPIO_Mode_Out_PP
;

150 
GPIO_InôSåu˘uª
.
GPIO_S≥ed
 = 
GPIO_S≥ed_50MHz
;

151 
	`GPIO_Inô
(
GPIOB
, &
GPIO_InôSåu˘uª
);

152 
	}
}

154 
	$IIC_Sèπ
()

156 
	`SDA_OUT
();

157 
IIC_SDA
=1;

158 
IIC_SCL
=1;

159 
	`Dñay_Us
(4);

160 
IIC_SDA
=0;

161 
	`Dñay_Us
(4);

162 
IIC_SCL
=0;

163 
	}
}

165 
	$IIC_St›
()

167 
	`SDA_OUT
();

168 
IIC_SCL
=0;

169 
IIC_SDA
=0;

170 
	`Dñay_Us
(4);

171 
IIC_SCL
=1;

172 
IIC_SDA
=1;

173 
	`Dñay_Us
(4);

174 
	}
}

178 
uöt8_t
 
	$IIC_Waô_Ack
()

180 
uöt8_t
 
ucEºTime
=0;

181 
	`SDA_IN
();

182 
IIC_SDA
=1;
	`Dñay_Us
(1);

183 
IIC_SCL
=1;
	`Dñay_Us
(1);

184 
READ_SDA
)

186 
ucEºTime
++;

187 if(
ucEºTime
>250)

189 
	`IIC_St›
();

193 
IIC_SCL
=0;

195 
	}
}

197 
	$IIC_Ack
()

199 
IIC_SCL
=0;

200 
	`SDA_OUT
();

201 
IIC_SDA
=0;

202 
	`Dñay_Us
(2);

203 
IIC_SCL
=1;

204 
	`Dñay_Us
(2);

205 
IIC_SCL
=0;

206 
	}
}

208 
	$IIC_NAck
()

210 
IIC_SCL
=0;

211 
	`SDA_OUT
();

212 
IIC_SDA
=1;

213 
	`Dñay_Us
(2);

214 
IIC_SCL
=1;

215 
	`Dñay_Us
(2);

216 
IIC_SCL
=0;

217 
	}
}

222 
	$IIC_Síd_Byã
(
uöt8_t
 
txd
)

224 
uöt8_t
 
t
;

225 
	`SDA_OUT
();

226 
IIC_SCL
=0;

227 
t
=0;t<8;t++)

229 
IIC_SDA
=(
txd
&0x80)>>7;

230 
txd
<<=1;

231 
	`Dñay_Us
(2);

232 
IIC_SCL
=1;

233 
	`Dñay_Us
(2);

234 
IIC_SCL
=0;

235 
	`Dñay_Us
(2);

237 
	}
}

239 
uöt8_t
 
	$IIC_Ród_Byã
(
ack
)

241 
i
,
ª˚ive
=0;

242 
	`SDA_IN
();

243 
i
=0;i<8;i++ )

245 
IIC_SCL
=0;

246 
	`Dñay_Us
(2);

247 
IIC_SCL
=1;

248 
ª˚ive
<<=1;

249 if(
READ_SDA
)
ª˚ive
++;

250 
	`Dñay_Us
(1);

252 i‡(!
ack
)

253 
	`IIC_NAck
();

255 
	`IIC_Ack
();

256  
ª˚ive
;

257 
	}
}

	@Source/User/touch/24LC02.h

1 #i‚de‡
__I2C_H


2 
	#__I2C_H


	)

3 
	~"°m32f10x.h
"

5 
	#AT24C01
 127

	)

6 
	#AT24C02
 255

	)

7 
	#AT24C04
 511

	)

8 
	#AT24C08
 1023

	)

9 
	#AT24C16
 2047

	)

10 
	#AT24C32
 4095

	)

11 
	#AT24C64
 8191

	)

12 
	#AT24C128
 16383

	)

13 
	#AT24C256
 32767

	)

15 
	#EE_TYPE
 
AT24C02


	)

17 
uöt8_t
 
AT24CXX_RódO√Byã
(
uöt16_t
 
RódAddr
);

18 
AT24CXX_WrôeO√Byã
(
uöt16_t
 
WrôeAddr
,
uöt8_t
 
D©aToWrôe
);

19 
AT24CXX_WrôeLíByã
(
uöt16_t
 
WrôeAddr
,
uöt32_t
 
D©aToWrôe
,
uöt8_t
 
Lí
);

20 
uöt32_t
 
AT24CXX_RódLíByã
(
uöt16_t
 
RódAddr
,
uöt8_t
 
Lí
);

21 
AT24CXX_Wrôe
(
uöt16_t
 
WrôeAddr
,
uöt8_t
 *
pBuf„r
,uöt16_à
NumToWrôe
);

22 
AT24CXX_Ród
(
uöt16_t
 
RódAddr
,
uöt8_t
 *
pBuf„r
,uöt16_à
NumToRód
);

24 
uöt8_t
 
AT24CXX_Check
();

25 
AT24CXX_Inô
();

29 
	#SDA_IN
(Ë{
GPIOB
->
CRL
&=0X0FFFFFFF;GPIOB->CRL|=0x80000000;}

	)

30 
	#SDA_OUT
(Ë{
GPIOB
->
CRL
&=0X0FFFFFFF;GPIOB->CRL|=0x30000000;}

	)

33 
	#IIC_SCL
 
	`PBout
(6)

34 
	#IIC_SDA
 
	`PBout
(7)

35 
	#READ_SDA
 
	`PBö
(7)

36 

	)

38 
Inô_IIC
();

39 
IIC_Sèπ
();

40 
IIC_St›
();

41 
IIC_Síd_Byã
(
uöt8_t
 
txd
);

42 
uöt8_t
 
IIC_Ród_Byã
(
ack
);

43 
uöt8_t
 
IIC_Waô_Ack
();

44 
IIC_Ack
();

45 
IIC_NAck
();

47 
IIC_Wrôe_O√_Byã
(
uöt8_t
 
daddr
,uöt8_à
addr
,uöt8_à
d©a
);

48 
uöt8_t
 
IIC_Ród_O√_Byã
(uöt8_à
daddr
,uöt8_à
addr
);

	@Source/User/touch/Touch.c

12 
	~"Touch.h
"

13 
	~"24LC02.h
"

14 
	~"gøphics.h
"

15 
	~"°dlib.h
"

16 
	~"m©h.h
"

17 
	~"ssd1963.h
"

19 
	~"Ÿ.h
"

21 
u16
 
	gTextCﬁ‹
;

22 
u16
 
	gBœckCﬁ‹
;

24 
Pí_Hﬁdî
 
	gPí_Poöt
;

28 
	$ADS_Wrôe_Byã
(
uöt8_t
 
num
)

30 
uöt8_t
 
cou¡
=0;

31 
cou¡
=0;count<8;count++)

33 if(
num
&0x80)
TDIN
=1;

34 
TDIN
=0;

35 
num
<<=1;

36 
TCLK
=0;

37 
TCLK
=1;

39 
	}
}

42 
uöt16_t
 
	$ADS_Ród_AD
(
uöt8_t
 
CMD
)

44 
uöt8_t
 
i
;

45 
uöt8_t
 
cou¡
=0;

46 
uöt16_t
 
Num
=0;

47 
TCLK
=0;

48 
TCS
=0;

49 
	`ADS_Wrôe_Byã
(
CMD
);

50 
i
=200;i>0;i--);

51 
TCLK
=1;

52 
TCLK
=0;

53 
cou¡
=0;count<16;count++)

55 
Num
<<=1;

56 
TCLK
=0;

57 
TCLK
=1;

58 if(
DOUT
)
Num
++;

60 
Num
>>=4;

61 
TCS
=1;

62 (
Num
);

63 
	}
}

67 
	#READ_TIMES
 15

68 
	#LOST_VAL
 5

69 
uöt16_t
 
	`ADS_Ród_XY
(
uöt8_t
 
xy
)

	)

71 
uöt16_t
 
	gi
, 
	gj
;

72 
uöt16_t
 
	gbuf
[
READ_TIMES
];

73 
uöt16_t
 
	gsum
=0;

74 
uöt16_t
 
	gãmp
;

75 
	gi
=0;i<
	gREAD_TIMES
;i++)

77 
	gbuf
[
i
]=
ADS_Ród_AD
(
xy
);

79 
	gi
=0;i<
	gREAD_TIMES
-1; i++)

81 
	gj
=
i
+1;j<
	gREAD_TIMES
;j++)

83 if(
	gbuf
[
i
]>buf[
j
])

85 
	gãmp
=
buf
[
i
];

86 
	gbuf
[
i
]=
buf
[
j
];

87 
	gbuf
[
j
]=
ãmp
;

91 
	gsum
=0;

92 
	gi
=
LOST_VAL
;i<
	gREAD_TIMES
-
	gLOST_VAL
;i++)
	gsum
+=
buf
[
i
];

93 
	gãmp
=
sum
/(
READ_TIMES
-2*
LOST_VAL
);

94  
	gãmp
;

98 
uöt8_t
 
	$Ród_ADS
(
uöt16_t
 *
x
,uöt16_à*
y
)

100 
uöt16_t
 
xãmp
,
yãmp
;

101 
xãmp
=
	`ADS_Ród_XY
(
CMD_RDX
);

102 
yãmp
=
	`ADS_Ród_XY
(
CMD_RDY
);

103 if(
xãmp
<100||
yãmp
<100) 0;

104 *
x
=
xãmp
;

105 *
y
=
yãmp
;

107 
	}
}

111 
	#ERR_RANGE
 50

112 
uöt8_t
 
	`Ród_ADS2
(
uöt16_t
 *
x
,uöt16_à*
y
)

	)

114 
uöt16_t
 
	gx1
,
	gy1
;

115 
uöt16_t
 
	gx2
,
	gy2
;

116 
uöt8_t
 
	gÊag
;

117 
	gÊag
=
Ród_ADS
(&
x1
,&
y1
);

118 if(
	gÊag
==0)(0);

119 
	gÊag
=
Ród_ADS
(&
x2
,&
y2
);

120 if(
	gÊag
==0)(0);

121 if(((
	gx2
<=
x1
&&x1<
x2
+
ERR_RANGE
)||(x1<=x2&&x2<x1+ERR_RANGE))

122 &&((
y2
<=
y1
&&y1<y2+
ERR_RANGE
)||(y1<=y2&&y2<y1+ERR_RANGE)))

124 *
x
=(
x1
+
x2
)/2;

125 *
	gy
=(
y1
+
y2
)/2;

131 
uöt8_t
 
	$Ród_TP_On˚
()

133 
uöt8_t
 
t
=0;

134 
	`Pí_I¡_Së
(0);

135 
Pí_Poöt
.
Key_Sè
=
Key_Up
;

136 
	`Ród_ADS2
(&
Pí_Poöt
.
X
,&Pí_Poöt.
Y
);

137 
PEN
==0&&
t
<=250)

139 
t
++;

140 
	`Dñay_Ms
(10);

142 
	`Pí_I¡_Së
(1);

143 if(
t
>=250) 0;

145 
	}
}

151 
	$Drow_Touch_Poöt
(
uöt8_t
 
x
,
uöt16_t
 
y
)

160 
	`LcdPrötDŸ
(
x
,
y
,
DGREEN
);

161 
	}
}

164 
	$Døw_Big_Poöt
(
uöt16_t
 
x
,uöt16_à
y
)

170 
	`LcdFûlRec
(
x
,
y
,x+5,y+5,
DGREEN
);

171 
	}
}

176 
	$C⁄vît_Pos
()

178 if(
	`Ród_ADS2
(&
Pí_Poöt
.
X
,&Pí_Poöt.
Y
))

180 
Pí_Poöt
.
X0
=Pí_Poöt.
xÁc
*Pí_Poöt.
X
+Pí_Poöt.
xoff
;

181 
Pí_Poöt
.
Y0
=Pí_Poöt.
yÁc
*Pí_Poöt.
Y
+Pí_Poöt.
yoff
;

183 
	}
}

186 
	$Touch_Adju°
()

188 
uöt16_t
 
pos_ãmp
[4][2];

189 
uöt8_t
 
˙t
=0;

190 
uöt16_t
 
d1
,
d2
;

191 
uöt32_t
 
ãm1
,
ãm2
;

192 
Ác
;

193 
˙t
=0;

194 
TextCﬁ‹
=
PURPLE
;

195 
BœckCﬁ‹
 =
BLACK
;

196 
	`Drow_Touch_Poöt
(20,20);

197 
Pí_Poöt
.
Key_Sè
=
Key_Up
;

198 
Pí_Poöt
.
xÁc
=0;

202 if(
Pí_Poöt
.
Key_Sè
==
Key_Down
)

204 if(
	`Ród_TP_On˚
())

206 
pos_ãmp
[
˙t
][0]=
Pí_Poöt
.
X
;

207 
pos_ãmp
[
˙t
][1]=
Pí_Poöt
.
Y
;

208 
˙t
++;

210 
˙t
)

213 
	`LcdCÀ¨
(
BœckCﬁ‹
);

214 
	`Drow_Touch_Poöt
(220,20);

217 
	`LcdCÀ¨
(
BœckCﬁ‹
);

218 
	`Drow_Touch_Poöt
(20,300);

221 
	`LcdCÀ¨
(
BœckCﬁ‹
);

222 
	`Drow_Touch_Poöt
(220,300);

226 
ãm1
=
	`abs
(
pos_ãmp
[0][0]-pos_temp[1][0]);

227 
ãm2
=
	`abs
(
pos_ãmp
[0][1]-pos_temp[1][1]);

228 
ãm1
*=tem1;

229 
ãm2
*=tem2;

230 
d1
=
	`sqπ
(
ãm1
+
ãm2
);

232 
ãm1
=
	`abs
(
pos_ãmp
[2][0]-pos_temp[3][0]);

233 
ãm2
=
	`abs
(
pos_ãmp
[2][1]-pos_temp[3][1]);

234 
ãm1
*=tem1;

235 
ãm2
*=tem2;

236 
d2
=
	`sqπ
(
ãm1
+
ãm2
);

237 
Ác
=()
d1
/
d2
;

238 if(
Ác
<0.95||Ác>1.05||
d1
==0||
d2
==0)

240 
˙t
=0;

241 
	`LcdCÀ¨
(
BœckCﬁ‹
);

242 
	`Drow_Touch_Poöt
(20,20);

245 
ãm1
=
	`abs
(
pos_ãmp
[0][0]-pos_temp[2][0]);

246 
ãm2
=
	`abs
(
pos_ãmp
[0][1]-pos_temp[2][1]);

247 
ãm1
*=tem1;

248 
ãm2
*=tem2;

249 
d1
=
	`sqπ
(
ãm1
+
ãm2
);

251 
ãm1
=
	`abs
(
pos_ãmp
[1][0]-pos_temp[3][0]);

252 
ãm2
=
	`abs
(
pos_ãmp
[1][1]-pos_temp[3][1]);

253 
ãm1
*=tem1;

254 
ãm2
*=tem2;

255 
d2
=
	`sqπ
(
ãm1
+
ãm2
);

256 
Ác
=()
d1
/
d2
;

257 if(
Ác
<0.95||fac>1.05)

259 
˙t
=0;

260 
	`LcdCÀ¨
(
BœckCﬁ‹
);

261 
	`Drow_Touch_Poöt
(20,20);

266 
ãm1
=
	`abs
(
pos_ãmp
[1][0]-pos_temp[2][0]);

267 
ãm2
=
	`abs
(
pos_ãmp
[1][1]-pos_temp[2][1]);

268 
ãm1
*=tem1;

269 
ãm2
*=tem2;

270 
d1
=
	`sqπ
(
ãm1
+
ãm2
);

272 
ãm1
=
	`abs
(
pos_ãmp
[0][0]-pos_temp[3][0]);

273 
ãm2
=
	`abs
(
pos_ãmp
[0][1]-pos_temp[3][1]);

274 
ãm1
*=tem1;

275 
ãm2
*=tem2;

276 
d2
=
	`sqπ
(
ãm1
+
ãm2
);

277 
Ác
=()
d1
/
d2
;

278 if(
Ác
<0.95||fac>1.05)

280 
˙t
=0;

281 
	`LcdCÀ¨
(
BœckCﬁ‹
);

282 
	`Drow_Touch_Poöt
(20,20);

286 
Pí_Poöt
.
xÁc
=()200/(
pos_ãmp
[1][0]-pos_temp[0][0]);

287 
Pí_Poöt
.
xoff
=(240-Pí_Poöt.
xÁc
*(
pos_ãmp
[1][0]+pos_temp[0][0]))/2;

289 
Pí_Poöt
.
yÁc
=()280/(
pos_ãmp
[2][1]-pos_temp[0][1]);

290 
Pí_Poöt
.
yoff
=(320-Pí_Poöt.
yÁc
*(
pos_ãmp
[2][1]+pos_temp[0][1]))/2;

291 
TextCﬁ‹
=
DGREEN
;

292 
	`LcdCÀ¨
(
BLACK
);

293 
	`LcdPrötSå
("Touch S¸ì¿Adju° OK!",35,110,
WHITE
,
BLACK
);

294 
	`Dñay_Ms
(1200);

295 
	`LcdCÀ¨
(
BLACK
);

300 
	}
}

301 
	$Inô_TOUCH
()

303 
EXTI_InôTy≥Def
 
EXTI_InôSåu˘uª
;

305 
	`Touch_C⁄figuøti⁄
();

307 
	`Ród_ADS
(&
Pí_Poöt
.
X
,&Pí_Poöt.
Y
);

309 
	`GPIO_EXTILöeC⁄fig
(
GPIO_P‹tSour˚GPIOC
, 
GPIO_PöSour˚5
);

311 
EXTI_InôSåu˘uª
.
EXTI_Löe
 = 
EXTI_Löe5
;

312 
EXTI_InôSåu˘uª
.
EXTI_Mode
 = 
EXTI_Mode_I¡îru±
;

313 
EXTI_InôSåu˘uª
.
EXTI_Triggî
 = 
EXTI_Triggî_FÆlög
;

314 
EXTI_InôSåu˘uª
.
EXTI_LöeCmd
 = 
ENABLE
;

315 
	`EXTI_Inô
(&
EXTI_InôSåu˘uª
);

317 #ifde‡
ADJ_SAVE_ENABLE


318 if(
	`Gë_Adjd©a
());

321 
	`LcdCÀ¨
(
BLACK
);

322 
	`Touch_Adju°
();

323 
	`Save_Adjd©a
();

326 
	`LcdCÀ¨
(
WHITE
);

327 
	`Touch_Adju°
();

329 
	}
}

330 
	$Touch_C⁄figuøti⁄
()

332 
GPIO_InôTy≥Def
 
GPIO_InôSåu˘uª
;

334 
	`RCC_APB2PîùhClockCmd
(
RCC_APB2Pîùh_GPIOB
 | 
RCC_APB2Pîùh_GPIOC
, 
ENABLE
 );

337 
GPIO_InôSåu˘uª
.
GPIO_Pö
 =
GPIO_Pö_0
 | 
GPIO_Pö_1
 | 
GPIO_Pö_5
 | 
GPIO_Pö_13
 | 
GPIO_Pö_15
;

338 
GPIO_InôSåu˘uª
.
GPIO_Mode
 = 
GPIO_Mode_Out_PP
;

339 
GPIO_InôSåu˘uª
.
GPIO_S≥ed
 = 
GPIO_S≥ed_50MHz
;

340 
	`GPIO_Inô
(
GPIOB
,&
GPIO_InôSåu˘uª
);

342 
GPIO_InôSåu˘uª
.
GPIO_Pö
 = 
GPIO_Pö_1
;

343 
GPIO_InôSåu˘uª
.
GPIO_Mode
 = 
GPIO_Mode_Out_PP
;

344 
GPIO_InôSåu˘uª
.
GPIO_S≥ed
 = 
GPIO_S≥ed_50MHz
;

345 
	`GPIO_Inô
(
GPIOC
,&
GPIO_InôSåu˘uª
);

348 
GPIO_InôSåu˘uª
.
GPIO_Pö
 = 
GPIO_Pö_14
;

349 
GPIO_InôSåu˘uª
.
GPIO_Mode
 = 
GPIO_Mode_IPU
;

350 
	`GPIO_Inô
(
GPIOB
,&
GPIO_InôSåu˘uª
);

353 
GPIO_InôSåu˘uª
.
GPIO_Pö
 = 
GPIO_Pö_5
;

354 
GPIO_InôSåu˘uª
.
GPIO_Mode
 = 
GPIO_Mode_IPU
;

355 
	`GPIO_Inô
(
GPIOC
,&
GPIO_InôSåu˘uª
);

356 
TP_CS
 = 
MP3_CS
 = 
F_CS
 = 
TCS
 = 1;

357 
	}
}

359 
	$Pí_I¡_Së
(
uöt8_t
 
í
)

361 if(
í
)
EXTI
->
IMR
|=1<<5;

362 
EXTI
->
IMR
&=~(1<<5);

363 
	}
}

367 
	$EXTI9_5_IRQH™dÀr
()

369 if(
	`EXTI_GëITSètus
(
EXTI_Löe5
Ë!
RESET
)

371 
Pí_Poöt
.
Key_Sè
=
Key_Down
;

373 
	`EXTI_CÀ¨ITPídögBô
(
EXTI_Löe5
);

375 
	}
}

376 #ifde‡
ADJ_SAVE_ENABLE


377 
	#SAVE_ADDR_BASE
 40

	)

386 
	$Save_Adjd©a
()

388 
s32
 
ãmp
;

390 
ãmp
=
Pí_Poöt
.
xÁc
*100000000;

391 
	`AT24CXX_WrôeLíByã
(
SAVE_ADDR_BASE
,
ãmp
,4);

392 
ãmp
=
Pí_Poöt
.
yÁc
*100000000;

393 
	`AT24CXX_WrôeLíByã
(
SAVE_ADDR_BASE
+4,
ãmp
,4);

395 
	`AT24CXX_WrôeLíByã
(
SAVE_ADDR_BASE
+8,
Pí_Poöt
.
xoff
,2);

397 
	`AT24CXX_WrôeLíByã
(
SAVE_ADDR_BASE
+10,
Pí_Poöt
.
yoff
,2);

399 
ãmp
=
	`AT24CXX_RódO√Byã
(
SAVE_ADDR_BASE
+12);

401 
ãmp
 =0Xaa;

402 
	`AT24CXX_WrôeO√Byã
(
SAVE_ADDR_BASE
+12,
ãmp
);

403 
	}
}

412 
uöt8_t
 
	$Gë_Adjd©a
()

414 
s32
 
ãmpÁc
;

415 
ãmpÁc
=
	`AT24CXX_RódO√Byã
(52);

416 if((
ãmpÁc
)==0xaa)

418 
ãmpÁc
=
	`AT24CXX_RódLíByã
(40,4);

419 
Pí_Poöt
.
xÁc
=()
ãmpÁc
/100000000;

420 
ãmpÁc
=
	`AT24CXX_RódLíByã
(44,4);

421 
Pí_Poöt
.
yÁc
=()
ãmpÁc
/100000000;

423 
ãmpÁc
=
	`AT24CXX_RódLíByã
(48,2);

424 
Pí_Poöt
.
xoff
=
ãmpÁc
;

426 
ãmpÁc
=
	`AT24CXX_RódLíByã
(50,2);

427 
Pí_Poöt
.
yoff
=
ãmpÁc
;

431 
	}
}

	@Source/User/touch/Touch.h

1 #i‚de‡
__TOUCH_H


2 
	#__TOUCH_H


	)

4 
	~"°m32f10x.h
"

6 
	#Key_Down
 0x01

	)

7 
	#Key_Up
 0x00

	)

11 
uöt16_t
 
	mX0
;

12 
uöt16_t
 
	mY0
;

13 
uöt16_t
 
	mX
;

14 
uöt16_t
 
	mY
;

15 
uöt8_t
 
	mKey_Sè
;

17 
	mxÁc
;

18 
	myÁc
;

19 
	mxoff
;

20 
	myoff
;

21 }
	tPí_Hﬁdî
;

23 
Pí_Hﬁdî
 
Pí_Poöt
;

26 
	#PEN
 
	`PCö
(5)

27 
	#DOUT
 
	`PBö
(14)

28 
	#TDIN
 
	`PBout
(15)

29 
	#TCLK
 
	`PBout
(13)

30 
	#TCS
 
	`PBout
(0)

31 
	#F_CS
 
	`PBout
(1)

32 
	#MP3_CS
 
	`PBout
(5)

33 
	#TP_CS
 
	`PCout
(1)

34 

	)

35 
	#CMD_RDY
 0x90

36 
	#CMD_RDX
 0xD0

37 

	)

38 
	#ADJ_SAVE_ENABLE


	)

41 
Inô_TOUCH
();

42 
Touch_Adju°
();

43 
C⁄vît_Pos
();

44 
Pí_I¡_Së
(
uöt8_t
 
í
);

45 
Touch_C⁄figuøti⁄
();

46 
ADS_Wrôe_Byã
(
uöt8_t
 
num
);

47 
uöt16_t
 
ADS_Ród_AD
(
uöt8_t
 
CMD
);

48 
uöt16_t
 
ADS_Ród_XY
(
uöt8_t
 
xy
);

49 
uöt8_t
 
Ród_TP_On˚
();

50 
uöt8_t
 
Ród_ADS2
(
uöt16_t
 *
x
,uöt16_à*
y
);

51 
uöt8_t
 
Ród_ADS
(
uöt16_t
 *
x
,uöt16_à*
y
);

52 
Døw_Big_Poöt
(
uöt16_t
 
x
,uöt16_à
y
);

53 
Drow_Touch_Poöt
(
uöt8_t
 
x
,
uöt16_t
 
y
);

55 
Save_Adjd©a
();

56 
uöt8_t
 
Gë_Adjd©a
();

57 
uöt8_t
 
Is_In_Aªa
(
uöt16_t
 
x
,uöt16_à
y
,uöt16_à
xÀn
,uöt16_à
yÀn
);

	@Source/User/touch/ot.h

1 #i‚de‡
__OT_H


2 
	#__OT_H


	)

5 
	#BITBAND
(
addr
, 
bônum
Ë(◊dd∏& 0xF0000000)+0x2000000+(◊dd∏&0xFFFFF)<<5)+(bônum<<2))

	)

6 
	#MEM_ADDR
(
addr
Ë*((vﬁ©ûê*)◊ddr))

	)

7 
	#BIT_ADDR
(
addr
, 
bônum
Ë
	`MEM_ADDR
(
	`BITBAND
◊ddr, bônum))

	)

9 
	#GPIOA_ODR_Addr
 (
GPIOA_BASE
+12)

10 
	#GPIOB_ODR_Addr
 (
GPIOB_BASE
+12)

11 
	#GPIOC_ODR_Addr
 (
GPIOC_BASE
+12)

12 
	#GPIOD_ODR_Addr
 (
GPIOD_BASE
+12)

13 
	#GPIOE_ODR_Addr
 (
GPIOE_BASE
+12)

14 

	)

15 
	#GPIOA_IDR_Addr
 (
GPIOA_BASE
+8)

16 
	#GPIOB_IDR_Addr
 (
GPIOB_BASE
+8)

17 
	#GPIOC_IDR_Addr
 (
GPIOC_BASE
+8)

18 
	#GPIOD_IDR_Addr
 (
GPIOD_BASE
+8)

19 
	#GPIOE_IDR_Addr
 (
GPIOE_BASE
+8)

20 

	)

23 
	#PAout
(
n
Ë
	`BIT_ADDR
(
GPIOA_ODR_Addr
,n)

24 
	#PAö
(
n
Ë
	`BIT_ADDR
(
GPIOA_IDR_Addr
,n)

25 

	)

26 
	#PBout
(
n
Ë
	`BIT_ADDR
(
GPIOB_ODR_Addr
,n)

27 
	#PBö
(
n
Ë
	`BIT_ADDR
(
GPIOB_IDR_Addr
,n)

28 

	)

29 
	#PCout
(
n
Ë
	`BIT_ADDR
(
GPIOC_ODR_Addr
,n)

30 
	#PCö
(
n
Ë
	`BIT_ADDR
(
GPIOC_IDR_Addr
,n)

31 

	)

32 
	#PDout
(
n
Ë
	`BIT_ADDR
(
GPIOD_ODR_Addr
,n)

33 
	#PDö
(
n
Ë
	`BIT_ADDR
(
GPIOD_IDR_Addr
,n)

34 

	)

35 
	#PEout
(
n
Ë
	`BIT_ADDR
(
GPIOE_ODR_Addr
,n)

36 
	#PEö
(
n
Ë
	`BIT_ADDR
(
GPIOE_IDR_Addr
,n)

38 

	)

39 
uöt16_t
 
TextCﬁ‹
 , 
BœckCﬁ‹
;

43 
	#LED1
 
	`PDout
(6)

44 
	#LED2
 
	`PDout
(12)

45 
	#LED3
 
	`PDout
(13)

46 

	)

48 
	#KEY_USER
 
	`PCö
(13)

49 
	#KEY_S
 
	`PEö
(0)

50 
	#KEY_D
 
	`PEö
(1)

51 
	#KEY_L
 
	`PEö
(2)

52 
	#KEY_R
 
	`PEö
(3)

53 
	#KEY_U
 
	`PEö
(4)

54 

	)

58 
	mUSER
=1,

59 
	mSEN
,

60 
	mDOWN
,

61 
	mLEFT
,

62 
	mRIGHT
,

63 
	mUP


65 
	sD©a_Time


67 
uöt8_t
 
	mhour
;

68 
uöt8_t
 
	mmö
;

69 
uöt8_t
 
	m£c
;

71 
uöt16_t
 
	mw_yór
;

72 
uöt8_t
 
	mw_m⁄th
;

73 
uöt8_t
 
	mw_d©e
;

74 
uöt8_t
 
	mwìk
;

83 
	#BLACK
 0x0000

84 
	#NAVY
 0x000F

85 
	#DGREEN
 0x03E0

86 
	#DCYAN
 0x03EF

87 
	#MAROON
 0x7800

88 
	#PURPLE
 0x780F

89 
	#OLIVE
 0x7BE0

90 
	#LGRAY
 0xC618

91 
	#DGRAY
 0x7BEF

93 
	#GREEN
 0x07E0

94 
	#CYAN
 0x07FF

96 
	#MAGENTA
 0xF81F

98 
	#WHITE
 0xFFFF

99 

	)

	@/usr/include/math.h

25 #i‚def 
_MATH_H


26 
	#_MATH_H
 1

	)

28 
	~<„©uªs.h
>

30 
	g__BEGIN_DECLS


34 
	~<bôs/huge_vÆ.h
>

35 #ifde‡
__USE_ISOC99


36 
	~<bôs/huge_vÆf.h
>

37 
	~<bôs/huge_vÆl.h
>

40 
	~<bôs/öf.h
>

43 
	~<bôs/«n.h
>

47 
	~<bôs/m©hdef.h
>

54 
	#__MATHCALL
(
fun˘i⁄
,
suffix
, 
¨gs
) \

55 
	`__MATHDECL
 (
_MdoubÀ_
,
fun˘i⁄
,
suffix
, 
¨gs
)

	)

56 
	#__MATHDECL
(
ty≥
, 
fun˘i⁄
,
suffix
, 
¨gs
) \

57 
	`__MATHDECL_1
(
ty≥
, 
fun˘i⁄
,
suffix
, 
¨gs
); \

58 
	`__MATHDECL_1
(
ty≥
, 
	`__CONCAT
(
__
,
fun˘i⁄
),
suffix
, 
¨gs
)

	)

59 
	#__MATHCALLX
(
fun˘i⁄
,
suffix
, 
¨gs
, 
©åib
) \

60 
	`__MATHDECLX
 (
_MdoubÀ_
,
fun˘i⁄
,
suffix
, 
¨gs
, 
©åib
)

	)

61 
	#__MATHDECLX
(
ty≥
, 
fun˘i⁄
,
suffix
, 
¨gs
, 
©åib
) \

62 
	`__MATHDECL_1
(
ty≥
, 
fun˘i⁄
,
suffix
, 
¨gs
Ë
	`__©åibuã__
 (
©åib
); \

63 
	`__MATHDECL_1
(
ty≥
, 
	`__CONCAT
(
__
,
fun˘i⁄
),
suffix
, 
¨gs
Ë
	`__©åibuã__
 (
©åib
)

	)

64 
	#__MATHDECL_1
(
ty≥
, 
fun˘i⁄
,
suffix
, 
¨gs
) \

65 
ty≥
 
	`__MATH_PRECNAME
(
fun˘i⁄
,
suffix
Ë
¨gs
 
__THROW


	)

67 
	#_MdoubÀ_
 

	)

68 
	#__MATH_PRECNAME
(
«me
,
r
Ë
	`__CONCAT
“ame,r)

	)

69 
	#_MdoubÀ_BEGIN_NAMESPACE
 
__BEGIN_NAMESPACE_STD


	)

70 
	#_MdoubÀ_END_NAMESPACE
 
__END_NAMESPACE_STD


	)

71 
	~<bôs/m©hˇŒs.h
>

72 #unde‡
_MdoubÀ_


73 #unde‡
_MdoubÀ_BEGIN_NAMESPACE


74 #unde‡
_MdoubÀ_END_NAMESPACE


75 #unde‡
__MATH_PRECNAME


77 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_ISOC99


83 #i‚de‡
_MÊﬂt_


84 
	#_MÊﬂt_
 

	)

86 
	#_MdoubÀ_
 
_MÊﬂt_


	)

87 #ifde‡
__STDC__


88 
	#__MATH_PRECNAME
(
«me
,
r
Ë«me##
f
##
	)
r

90 
	#__MATH_PRECNAME
(
«me
,
r
Ë«mê
f
 
	)
r

92 
	#_MdoubÀ_BEGIN_NAMESPACE
 
__BEGIN_NAMESPACE_C99


	)

93 
	#_MdoubÀ_END_NAMESPACE
 
__END_NAMESPACE_C99


	)

94 
	~<bôs/m©hˇŒs.h
>

95 #unde‡
_MdoubÀ_


96 #unde‡
_MdoubÀ_BEGIN_NAMESPACE


97 #unde‡
_MdoubÀ_END_NAMESPACE


98 #unde‡
__MATH_PRECNAME


100 #i‡(
__STDC__
 - 0 || 
__GNUC__
 - 0) \

101 && (!(
deföed
 
__NO_LONG_DOUBLE_MATH
 && deföed 
_LIBC
) \

102 || 
deföed
 
__LDBL_COMPAT
)

103 #ifde‡
__LDBL_COMPAT


105 #ifde‡
__USE_ISOC99


106 
	$__∆dbl_√xâow¨df
 (
__x
, 
__y
)

107 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

108 #ifde‡
__REDIRECT_NTH


109 
	`__REDIRECT_NTH
 (
√xâow¨df
, (
__x
, 
__y
),

110 
__∆dbl_√xâow¨df
)

111 
	`__©åibuã__
 ((
__c⁄°__
));

112 
	`__REDIRECT_NTH
 (
√xâow¨d
, (
__x
, 
__y
),

113 
√xè·î
Ë
	`__©åibuã__
 ((
__c⁄°__
));

114 
	`__REDIRECT_NTH
 (
√xâow¨dl
,

115 (
__x
, 
__y
),

116 
√xè·î
Ë
	`__©åibuã__
 ((
__c⁄°__
));

121 #i‡
deföed
 
__LDBL_COMPAT
 || deföed 
__NO_LONG_DOUBLE_MATH


123 #unde‡
__MATHDECL_1


124 
	#__MATHDECL_2
(
ty≥
, 
fun˘i⁄
,
suffix
, 
¨gs
, 
Æüs
) \

125 
ty≥
 
	`__REDIRECT_NTH
(
	`__MATH_PRECNAME
(
fun˘i⁄
,
suffix
), \

126 
¨gs
, 
Æüs
)

	)

127 
	#__MATHDECL_1
(
ty≥
, 
fun˘i⁄
,
suffix
, 
¨gs
) \

128 
	`__MATHDECL_2
(
ty≥
, 
fun˘i⁄
,
suffix
, 
¨gs
, 
	`__CONCAT
(fun˘i⁄,suffix))

	)

134 #i‚de‡
_Ml⁄g_doubÀ_


135 
	#_Ml⁄g_doubÀ_
 

	)

137 
	#_MdoubÀ_
 
_Ml⁄g_doubÀ_


	)

138 #ifde‡
__STDC__


139 
	#__MATH_PRECNAME
(
«me
,
r
Ë«me##
l
##
	)
r

141 
	#__MATH_PRECNAME
(
«me
,
r
Ë«mê
l
 
	)
r

143 
	#_MdoubÀ_BEGIN_NAMESPACE
 
__BEGIN_NAMESPACE_C99


	)

144 
	#_MdoubÀ_END_NAMESPACE
 
__END_NAMESPACE_C99


	)

145 
	#__MATH_DECLARE_LDOUBLE
 1

	)

146 
	~<bôs/m©hˇŒs.h
>

147 #unde‡
_MdoubÀ_


148 #unde‡
_MdoubÀ_BEGIN_NAMESPACE


149 #unde‡
_MdoubÀ_END_NAMESPACE


150 #unde‡
__MATH_PRECNAME


155 #unde‡
__MATHDECL_1


156 #unde‡
__MATHDECL


157 #unde‡
__MATHCALL


160 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN


162 
signgam
;

167 #ifde‡
__USE_ISOC99


205 
FP_NAN
,

206 
	#FP_NAN
 
FP_NAN


	)

207 
FP_INFINITE
,

208 
	#FP_INFINITE
 
FP_INFINITE


	)

209 
FP_ZERO
,

210 
	#FP_ZERO
 
FP_ZERO


	)

211 
FP_SUBNORMAL
,

212 
	#FP_SUBNORMAL
 
FP_SUBNORMAL


	)

213 
FP_NORMAL


214 
	#FP_NORMAL
 
FP_NORMAL


	)

218 #ifde‡
__NO_LONG_DOUBLE_MATH


219 
	#Â˛assify
(
x
) \

220 ( (
x
Ë= (Ë? 
	`__Â˛assifyf
 (xË: 
	`__Â˛assify
 (x))

	)

222 
	#Â˛assify
(
x
) \

223 ( (
x
) ==  () \

224 ? 
	`__Â˛assifyf
 (
x
) \

225 :  (
x
) ==  () \

226 ? 
	`__Â˛assify
 (
x
Ë: 
	`__Â˛assifyl
 (x))

	)

230 #ifde‡
__NO_LONG_DOUBLE_MATH


231 
	#signbô
(
x
) \

232 ( (
x
Ë= (Ë? 
	`__signbôf
 (xË: 
	`__signbô
 (x))

	)

234 
	#signbô
(
x
) \

235 ( (
x
) ==  () \

236 ? 
	`__signbôf
 (
x
) \

237 :  (
x
) ==  () \

238 ? 
	`__signbô
 (
x
Ë: 
	`__signbôl
 (x))

	)

242 #ifde‡
__NO_LONG_DOUBLE_MATH


243 
	#isföôe
(
x
) \

244 ( (
x
Ë= (Ë? 
	`__föôef
 (xË: 
	`__föôe
 (x))

	)

246 
	#isföôe
(
x
) \

247 ( (
x
) ==  () \

248 ? 
	`__föôef
 (
x
) \

249 :  (
x
) ==  () \

250 ? 
	`__föôe
 (
x
Ë: 
	`__föôñ
 (x))

	)

254 
	#i¢‹mÆ
(
x
Ë(
	`Â˛assify
 (xË=
FP_NORMAL
)

	)

258 #ifde‡
__NO_LONG_DOUBLE_MATH


259 
	#i¢™
(
x
) \

260 ( (
x
Ë= (Ë? 
	`__i¢™f
 (xË: 
	`__i¢™
 (x))

	)

262 
	#i¢™
(
x
) \

263 ( (
x
) ==  () \

264 ? 
	`__i¢™f
 (
x
) \

265 :  (
x
) ==  () \

266 ? 
	`__i¢™
 (
x
Ë: 
	`__i¢™l
 (x))

	)

270 #ifde‡
__NO_LONG_DOUBLE_MATH


271 
	#isöf
(
x
) \

272 ( (
x
Ë= (Ë? 
	`__isöff
 (xË: 
	`__isöf
 (x))

	)

274 
	#isöf
(
x
) \

275 ( (
x
) ==  () \

276 ? 
	`__isöff
 (
x
) \

277 :  (
x
) ==  () \

278 ? 
	`__isöf
 (
x
Ë: 
	`__isöÊ
 (x))

	)

282 
	#MATH_ERRNO
 1

	)

283 
	#MATH_ERREXCEPT
 2

	)

288 #i‚de‡
__FAST_MATH__


289 
	#m©h_îrh™dlög
 (
MATH_ERRNO
 | 
MATH_ERREXCEPT
)

	)

294 #ifdef 
__USE_MISC


298 
_IEEE_
 = -1,

299 
_SVID_
,

300 
_XOPEN_
,

301 
_POSIX_
,

302 
_ISOC_


303 } 
	t_LIB_VERSION_TYPE
;

308 
_LIB_VERSION_TYPE
 
_LIB_VERSION
;

312 #ifde‡
__USE_SVID


318 #ifde‡
__˝lu•lus


319 
__ex˚±i⁄


321 
ex˚±i⁄


324 
ty≥
;

325 *
«me
;

326 
¨g1
;

327 
¨g2
;

328 
ªtvÆ
;

329 
	}
};

331 #ifde‡
__˝lu•lus


332 
	$m©hîr
 (
__ex˚±i⁄
 *
__exc
Ë
	`throw
 ();

334 
	`m©hîr
 (
ex˚±i⁄
 *
__exc
);

337 
	#X_TLOSS
 1.41484755040568800000e+16

	)

340 
	#DOMAIN
 1

	)

341 
	#SING
 2

	)

342 
	#OVERFLOW
 3

	)

343 
	#UNDERFLOW
 4

	)

344 
	#TLOSS
 5

	)

345 
	#PLOSS
 6

	)

348 
	#HUGE
 3.40282347e+38F

	)

352 #ifde‡
__USE_XOPEN


354 
	#MAXFLOAT
 3.40282347e+38F

	)

361 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN


362 
	#M_E
 2.7182818284590452354

	)

363 
	#M_LOG2E
 1.4426950408889634074

	)

364 
	#M_LOG10E
 0.43429448190325182765

	)

365 
	#M_LN2
 0.69314718055994530942

	)

366 
	#M_LN10
 2.30258509299404568402

	)

367 
	#M_PI
 3.14159265358979323846

	)

368 
	#M_PI_2
 1.57079632679489661923

	)

369 
	#M_PI_4
 0.78539816339744830962

	)

370 
	#M_1_PI
 0.31830988618379067154

	)

371 
	#M_2_PI
 0.63661977236758134308

	)

372 
	#M_2_SQRTPI
 1.12837916709551257390

	)

373 
	#M_SQRT2
 1.41421356237309504880

	)

374 
	#M_SQRT1_2
 0.70710678118654752440

	)

380 #ifde‡
__USE_GNU


381 
	#M_El
 2.7182818284590452353602874713526625L

	)

382 
	#M_LOG2El
 1.4426950408889634073599246810018921L

	)

383 
	#M_LOG10El
 0.4342944819032518276511289189166051L

	)

384 
	#M_LN2l
 0.6931471805599453094172321214581766L

	)

385 
	#M_LN10l
 2.3025850929940456840179914546843642L

	)

386 
	#M_PIl
 3.1415926535897932384626433832795029L

	)

387 
	#M_PI_2l
 1.5707963267948966192313216916397514L

	)

388 
	#M_PI_4l
 0.7853981633974483096156608458198757L

	)

389 
	#M_1_PIl
 0.3183098861837906715377675267450287L

	)

390 
	#M_2_PIl
 0.6366197723675813430755350534900574L

	)

391 
	#M_2_SQRTPIl
 1.1283791670955125738961589031215452L

	)

392 
	#M_SQRT2l
 1.4142135623730950488016887242096981L

	)

393 
	#M_SQRT1_2l
 0.7071067811865475244008443621048490L

	)

400 #i‡
deföed
 
__STRICT_ANSI__
 && !deföed 
__NO_MATH_INLINES


401 
	#__NO_MATH_INLINES
 1

	)

404 #i‡
deföed
 
__USE_ISOC99
 && 
	`__GNUC_PREREQ
(2,97)

411 
	#isgª©î
(
x
, 
y
Ë
	`__buûtö_isgª©î
(x, y)

	)

412 
	#isgª©îequÆ
(
x
, 
y
Ë
	`__buûtö_isgª©îequÆ
(x, y)

	)

413 
	#i¶ess
(
x
, 
y
Ë
	`__buûtö_i¶ess
(x, y)

	)

414 
	#i¶es£quÆ
(
x
, 
y
Ë
	`__buûtö_i¶es£quÆ
(x, y)

	)

415 
	#i¶essgª©î
(
x
, 
y
Ë
	`__buûtö_i¶essgª©î
(x, y)

	)

416 
	#isun‹dîed
(
u
, 
v
Ë
	`__buûtö_isun‹dîed
(u, v)

	)

420 #ifde‡
__USE_EXTERN_INLINES


421 
	~<bôs/m©hölöe.h
>

426 #i‡
deföed
 
__FINITE_MATH_ONLY__
 && __FINITE_MATH_ONLY__ > 0

427 
	~<bôs/m©h-föôe.h
>

430 #ifde‡
__USE_ISOC99


434 #i‚de‡
isgª©î


435 
	#isgª©î
(
x
, 
y
) \

436 (
__exãnsi⁄__
 \

437 ({ 
	`__ty≥of__
(
x
Ë
__x
 = (x); __ty≥of__(
y
Ë
__y
 = (y); \

438 !
	`isun‹dîed
 (
__x
, 
__y
Ë&& __x > __y; 
	}
}))

	)

442 #i‚de‡
isgª©îequÆ


443 
	#isgª©îequÆ
(
x
, 
y
) \

444 (
__exãnsi⁄__
 \

445 ({ 
	`__ty≥of__
(
x
Ë
__x
 = (x); __ty≥of__(
y
Ë
__y
 = (y); \

446 !
	`isun‹dîed
 (
__x
, 
__y
Ë&& __x >__y; }))

	)

450 #i‚de‡
i¶ess


451 
	#i¶ess
(
x
, 
y
) \

452 (
__exãnsi⁄__
 \

453 ({ 
	`__ty≥of__
(
x
Ë
__x
 = (x); __ty≥of__(
y
Ë
__y
 = (y); \

454 !
	`isun‹dîed
 (
__x
, 
__y
Ë&& __x < __y; }))

	)

458 #i‚de‡
i¶es£quÆ


459 
	#i¶es£quÆ
(
x
, 
y
) \

460 (
__exãnsi⁄__
 \

461 ({ 
	`__ty≥of__
(
x
Ë
__x
 = (x); __ty≥of__(
y
Ë
__y
 = (y); \

462 !
	`isun‹dîed
 (
__x
, 
__y
Ë&& __x <__y; }))

	)

466 #i‚de‡
i¶essgª©î


467 
	#i¶essgª©î
(
x
, 
y
) \

468 (
__exãnsi⁄__
 \

469 ({ 
	`__ty≥of__
(
x
Ë
__x
 = (x); __ty≥of__(
y
Ë
__y
 = (y); \

470 !
	`isun‹dîed
 (
__x
, 
__y
Ë&& (__x < __y || __y < __x); }))

	)

474 #i‚de‡
isun‹dîed


475 
	#isun‹dîed
(
u
, 
v
) \

476 (
__exãnsi⁄__
 \

477 ({ 
	`__ty≥of__
(
u
Ë
__u
 = (u); __ty≥of__(
v
Ë
__v
 = (v); \

478 
	`Â˛assify
 (
__u
Ë=
FP_NAN
 || fp˛assify (
__v
Ë=FP_NAN; }))

	)

483 
	g__END_DECLS


	@/usr/include/stdint.h

23 #i‚de‡
_STDINT_H


24 
	#_STDINT_H
 1

	)

26 
	~<„©uªs.h
>

27 
	~<bôs/wch¨.h
>

28 
	~<bôs/w‹dsize.h
>

35 #i‚de‡
__öt8_t_deföed


36 
	#__öt8_t_deföed


	)

37 sig√d 
	töt8_t
;

38 
	töt16_t
;

39 
	töt32_t
;

40 #i‡
__WORDSIZE
 == 64

41 
	töt64_t
;

43 
__exãnsi⁄__


44 
	töt64_t
;

49 
	tuöt8_t
;

50 
	tuöt16_t
;

51 #i‚de‡
__uöt32_t_deföed


52 
	tuöt32_t
;

53 
	#__uöt32_t_deföed


	)

55 #i‡
__WORDSIZE
 == 64

56 
	tuöt64_t
;

58 
__exãnsi⁄__


59 
	tuöt64_t
;

66 sig√d 
	töt_Àa°8_t
;

67 
	töt_Àa°16_t
;

68 
	töt_Àa°32_t
;

69 #i‡
__WORDSIZE
 == 64

70 
	töt_Àa°64_t
;

72 
__exãnsi⁄__


73 
	töt_Àa°64_t
;

77 
	tuöt_Àa°8_t
;

78 
	tuöt_Àa°16_t
;

79 
	tuöt_Àa°32_t
;

80 #i‡
__WORDSIZE
 == 64

81 
	tuöt_Àa°64_t
;

83 
__exãnsi⁄__


84 
	tuöt_Àa°64_t
;

91 sig√d 
	töt_Á°8_t
;

92 #i‡
__WORDSIZE
 == 64

93 
	töt_Á°16_t
;

94 
	töt_Á°32_t
;

95 
	töt_Á°64_t
;

97 
	töt_Á°16_t
;

98 
	töt_Á°32_t
;

99 
__exãnsi⁄__


100 
	töt_Á°64_t
;

104 
	tuöt_Á°8_t
;

105 #i‡
__WORDSIZE
 == 64

106 
	tuöt_Á°16_t
;

107 
	tuöt_Á°32_t
;

108 
	tuöt_Á°64_t
;

110 
	tuöt_Á°16_t
;

111 
	tuöt_Á°32_t
;

112 
__exãnsi⁄__


113 
	tuöt_Á°64_t
;

118 #i‡
__WORDSIZE
 == 64

119 #i‚de‡
__öçå_t_deföed


120 
	töçå_t
;

121 
	#__öçå_t_deföed


	)

123 
	tuöçå_t
;

125 #i‚de‡
__öçå_t_deföed


126 
	töçå_t
;

127 
	#__öçå_t_deföed


	)

129 
	tuöçå_t
;

134 #i‡
__WORDSIZE
 == 64

135 
	tötmax_t
;

136 
	tuötmax_t
;

138 
__exãnsi⁄__


139 
	tötmax_t
;

140 
__exãnsi⁄__


141 
	tuötmax_t
;

147 #i‡!
deföed
 
__˝lu•lus
 || deföed 
__STDC_LIMIT_MACROS


149 #i‡
__WORDSIZE
 == 64

150 
	#__INT64_C
(
c
Ë¯## 
L


	)

151 
	#__UINT64_C
(
c
Ë¯## 
UL


	)

153 
	#__INT64_C
(
c
Ë¯## 
LL


	)

154 
	#__UINT64_C
(
c
Ë¯## 
ULL


	)

160 
	#INT8_MIN
 (-128)

	)

161 
	#INT16_MIN
 (-32767-1)

	)

162 
	#INT32_MIN
 (-2147483647-1)

	)

163 
	#INT64_MIN
 (-
	`__INT64_C
(9223372036854775807)-1)

	)

165 
	#INT8_MAX
 (127)

	)

166 
	#INT16_MAX
 (32767)

	)

167 
	#INT32_MAX
 (2147483647)

	)

168 
	#INT64_MAX
 (
	`__INT64_C
(9223372036854775807))

	)

171 
	#UINT8_MAX
 (255)

	)

172 
	#UINT16_MAX
 (65535)

	)

173 
	#UINT32_MAX
 (4294967295U)

	)

174 
	#UINT64_MAX
 (
	`__UINT64_C
(18446744073709551615))

	)

178 
	#INT_LEAST8_MIN
 (-128)

	)

179 
	#INT_LEAST16_MIN
 (-32767-1)

	)

180 
	#INT_LEAST32_MIN
 (-2147483647-1)

	)

181 
	#INT_LEAST64_MIN
 (-
	`__INT64_C
(9223372036854775807)-1)

	)

183 
	#INT_LEAST8_MAX
 (127)

	)

184 
	#INT_LEAST16_MAX
 (32767)

	)

185 
	#INT_LEAST32_MAX
 (2147483647)

	)

186 
	#INT_LEAST64_MAX
 (
	`__INT64_C
(9223372036854775807))

	)

189 
	#UINT_LEAST8_MAX
 (255)

	)

190 
	#UINT_LEAST16_MAX
 (65535)

	)

191 
	#UINT_LEAST32_MAX
 (4294967295U)

	)

192 
	#UINT_LEAST64_MAX
 (
	`__UINT64_C
(18446744073709551615))

	)

196 
	#INT_FAST8_MIN
 (-128)

	)

197 #i‡
__WORDSIZE
 == 64

198 
	#INT_FAST16_MIN
 (-9223372036854775807L-1)

	)

199 
	#INT_FAST32_MIN
 (-9223372036854775807L-1)

	)

201 
	#INT_FAST16_MIN
 (-2147483647-1)

	)

202 
	#INT_FAST32_MIN
 (-2147483647-1)

	)

204 
	#INT_FAST64_MIN
 (-
	`__INT64_C
(9223372036854775807)-1)

	)

206 
	#INT_FAST8_MAX
 (127)

	)

207 #i‡
__WORDSIZE
 == 64

208 
	#INT_FAST16_MAX
 (9223372036854775807L)

	)

209 
	#INT_FAST32_MAX
 (9223372036854775807L)

	)

211 
	#INT_FAST16_MAX
 (2147483647)

	)

212 
	#INT_FAST32_MAX
 (2147483647)

	)

214 
	#INT_FAST64_MAX
 (
	`__INT64_C
(9223372036854775807))

	)

217 
	#UINT_FAST8_MAX
 (255)

	)

218 #i‡
__WORDSIZE
 == 64

219 
	#UINT_FAST16_MAX
 (18446744073709551615UL)

	)

220 
	#UINT_FAST32_MAX
 (18446744073709551615UL)

	)

222 
	#UINT_FAST16_MAX
 (4294967295U)

	)

223 
	#UINT_FAST32_MAX
 (4294967295U)

	)

225 
	#UINT_FAST64_MAX
 (
	`__UINT64_C
(18446744073709551615))

	)

229 #i‡
__WORDSIZE
 == 64

230 
	#INTPTR_MIN
 (-9223372036854775807L-1)

	)

231 
	#INTPTR_MAX
 (9223372036854775807L)

	)

232 
	#UINTPTR_MAX
 (18446744073709551615UL)

	)

234 
	#INTPTR_MIN
 (-2147483647-1)

	)

235 
	#INTPTR_MAX
 (2147483647)

	)

236 
	#UINTPTR_MAX
 (4294967295U)

	)

241 
	#INTMAX_MIN
 (-
	`__INT64_C
(9223372036854775807)-1)

	)

243 
	#INTMAX_MAX
 (
	`__INT64_C
(9223372036854775807))

	)

246 
	#UINTMAX_MAX
 (
	`__UINT64_C
(18446744073709551615))

	)

252 #i‡
__WORDSIZE
 == 64

253 
	#PTRDIFF_MIN
 (-9223372036854775807L-1)

	)

254 
	#PTRDIFF_MAX
 (9223372036854775807L)

	)

256 
	#PTRDIFF_MIN
 (-2147483647-1)

	)

257 
	#PTRDIFF_MAX
 (2147483647)

	)

261 
	#SIG_ATOMIC_MIN
 (-2147483647-1)

	)

262 
	#SIG_ATOMIC_MAX
 (2147483647)

	)

265 #i‡
__WORDSIZE
 == 64

266 
	#SIZE_MAX
 (18446744073709551615UL)

	)

268 
	#SIZE_MAX
 (4294967295U)

	)

272 #i‚de‡
WCHAR_MIN


274 
	#WCHAR_MIN
 
__WCHAR_MIN


	)

275 
	#WCHAR_MAX
 
__WCHAR_MAX


	)

279 
	#WINT_MIN
 (0u)

	)

280 
	#WINT_MAX
 (4294967295u)

	)

287 #i‡!
deföed
 
__˝lu•lus
 || deföed 
__STDC_CONSTANT_MACROS


290 
	#INT8_C
(
c
Ë
	)
c

291 
	#INT16_C
(
c
Ë
	)
c

292 
	#INT32_C
(
c
Ë
	)
c

293 #i‡
__WORDSIZE
 == 64

294 
	#INT64_C
(
c
Ë¯## 
L


	)

296 
	#INT64_C
(
c
Ë¯## 
LL


	)

300 
	#UINT8_C
(
c
Ë
	)
c

301 
	#UINT16_C
(
c
Ë
	)
c

302 
	#UINT32_C
(
c
Ë¯## 
U


	)

303 #i‡
__WORDSIZE
 == 64

304 
	#UINT64_C
(
c
Ë¯## 
UL


	)

306 
	#UINT64_C
(
c
Ë¯## 
ULL


	)

310 #i‡
__WORDSIZE
 == 64

311 
	#INTMAX_C
(
c
Ë¯## 
L


	)

312 
	#UINTMAX_C
(
c
Ë¯## 
UL


	)

314 
	#INTMAX_C
(
c
Ë¯## 
LL


	)

315 
	#UINTMAX_C
(
c
Ë¯## 
ULL


	)

	@/usr/include/stdio.h

24 #i‚de‡
_STDIO_H


26 #i‡!
deföed
 
__√ed_FILE
 && !deföed 
__√ed___FILE


27 
	#_STDIO_H
 1

	)

28 
	~<„©uªs.h
>

30 
	g__BEGIN_DECLS


32 
	#__√ed_size_t


	)

33 
	#__√ed_NULL


	)

34 
	~<°ddef.h
>

36 
	~<bôs/ty≥s.h
>

37 
	#__√ed_FILE


	)

38 
	#__√ed___FILE


	)

42 #i‡!
deföed
 
__FILE_deföed
 && deföed 
__√ed_FILE


45 
	g_IO_FILE
;

47 
__BEGIN_NAMESPACE_STD


49 
_IO_FILE
 
	tFILE
;

50 
	g__END_NAMESPACE_STD


51 #i‡
deföed
 
__USE_LARGEFILE64
 || deföed 
__USE_SVID
 || deföed 
__USE_POSIX
 \

52 || 
deföed
 
	g__USE_BSD
 || deföed 
	g__USE_ISOC99
 || deföed 
	g__USE_XOPEN
 \

53 || 
deföed
 
__USE_POSIX2


54 
	$__USING_NAMESPACE_STD
(
FILE
)

57 
	#__FILE_deföed
 1

	)

59 #unde‡
__√ed_FILE


62 #i‡!
deföed
 
____FILE_deföed
 && deföed 
__√ed___FILE


65 
_IO_FILE
 
	t__FILE
;

67 
	#____FILE_deföed
 1

	)

69 #unde‡
__√ed___FILE


72 #ifdef 
_STDIO_H


73 
	#_STDIO_USES_IOSTREAM


	)

75 
	~<libio.h
>

77 #i‡
deföed
 
__USE_XOPEN
 || deföed 
__USE_XOPEN2K8


78 #ifde‡
__GNUC__


79 #i‚de‡
_VA_LIST_DEFINED


80 
_G_va_li°
 
	tva_li°
;

81 
	#_VA_LIST_DEFINED


	)

84 
	~<°d¨g.h
>

88 #ifde‡
__USE_XOPEN2K8


89 #i‚de‡
__off_t_deföed


90 #i‚de‡
__USE_FILE_OFFSET64


91 
__off_t
 
	toff_t
;

93 
__off64_t
 
	toff_t
;

95 
	#__off_t_deföed


	)

97 #i‡
deföed
 
__USE_LARGEFILE64
 && !deföed 
__off64_t_deföed


98 
__off64_t
 
	toff64_t
;

99 
	#__off64_t_deföed


	)

102 #i‚de‡
__ssize_t_deföed


103 
__ssize_t
 
	tssize_t
;

104 
	#__ssize_t_deföed


	)

109 
__BEGIN_NAMESPACE_STD


110 #i‚de‡
__USE_FILE_OFFSET64


111 
_G_Âos_t
 
	tÂos_t
;

113 
_G_Âos64_t
 
	tÂos_t
;

115 
__END_NAMESPACE_STD


116 #ifde‡
__USE_LARGEFILE64


117 
_G_Âos64_t
 
	tÂos64_t
;

121 
	#_IOFBF
 0

	)

122 
	#_IOLBF
 1

	)

123 
	#_IONBF
 2

	)

127 #i‚de‡
BUFSIZ


128 
	#BUFSIZ
 
_IO_BUFSIZ


	)

134 #i‚de‡
EOF


135 
	#EOF
 (-1)

	)

141 
	#SEEK_SET
 0

	)

142 
	#SEEK_CUR
 1

	)

143 
	#SEEK_END
 2

	)

144 #ifde‡
__USE_GNU


145 
	#SEEK_DATA
 3

	)

146 
	#SEEK_HOLE
 4

	)

150 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_XOPEN


152 
	#P_tmpdú
 "/tmp"

	)

165 
	~<bôs/°dio_lim.h
>

169 
_IO_FILE
 *
°dö
;

170 
_IO_FILE
 *
°dout
;

171 
_IO_FILE
 *
°dîr
;

173 
	#°dö
 
°dö


	)

174 
	#°dout
 
°dout


	)

175 
	#°dîr
 
°dîr


	)

177 
__BEGIN_NAMESPACE_STD


179 
	$ªmove
 (
__c⁄°
 *
__fûíame
Ë
__THROW
;

181 
	$ª«me
 (
__c⁄°
 *
__ﬁd
, __c⁄° *
__√w
Ë
__THROW
;

182 
__END_NAMESPACE_STD


184 #ifde‡
__USE_ATFILE


186 
	$ª«mót
 (
__ﬁdfd
, 
__c⁄°
 *
__ﬁd
, 
__√wfd
,

187 
__c⁄°
 *
__√w
Ë
__THROW
;

190 
__BEGIN_NAMESPACE_STD


195 #i‚de‡
__USE_FILE_OFFSET64


196 
FILE
 *
	$tmpfûe
 (Ë
__wur
;

198 #ifde‡
__REDIRECT


199 
FILE
 *
	`__REDIRECT
 (
tmpfûe
, (), 
tmpfûe64
Ë
__wur
;

201 
	#tmpfûe
 
tmpfûe64


	)

205 #ifde‡
__USE_LARGEFILE64


206 
FILE
 *
	$tmpfûe64
 (Ë
__wur
;

210 *
	$tm≤am
 (*
__s
Ë
__THROW
 
__wur
;

211 
__END_NAMESPACE_STD


213 #ifde‡
__USE_MISC


216 *
	$tm≤am_r
 (*
__s
Ë
__THROW
 
__wur
;

220 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_XOPEN


228 *
	$ãm≤am
 (
__c⁄°
 *
__dú
, __c⁄° *
__pfx
)

229 
__THROW
 
__©åibuã_mÆloc__
 
__wur
;

233 
__BEGIN_NAMESPACE_STD


238 
	`f˛o£
 (
FILE
 *
__°ªam
);

243 
	`fÊush
 (
FILE
 *
__°ªam
);

244 
__END_NAMESPACE_STD


246 #ifde‡
__USE_MISC


253 
	`fÊush_u∆ocked
 (
FILE
 *
__°ªam
);

256 #ifde‡
__USE_GNU


263 
	`f˛o£Æl
 ();

267 
__BEGIN_NAMESPACE_STD


268 #i‚de‡
__USE_FILE_OFFSET64


273 
FILE
 *
	$f›í
 (
__c⁄°
 *
__ª°ri˘
 
__fûíame
,

274 
__c⁄°
 *
__ª°ri˘
 
__modes
Ë
__wur
;

279 
FILE
 *
	$‰e›í
 (
__c⁄°
 *
__ª°ri˘
 
__fûíame
,

280 
__c⁄°
 *
__ª°ri˘
 
__modes
,

281 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

283 #ifde‡
__REDIRECT


284 
FILE
 *
	`__REDIRECT
 (
f›í
, (
__c⁄°
 *
__ª°ri˘
 
__fûíame
,

285 
__c⁄°
 *
__ª°ri˘
 
__modes
), 
f›í64
)

286 
__wur
;

287 
FILE
 *
	`__REDIRECT
 (
‰e›í
, (
__c⁄°
 *
__ª°ri˘
 
__fûíame
,

288 
__c⁄°
 *
__ª°ri˘
 
__modes
,

289 
FILE
 *
__ª°ri˘
 
__°ªam
), 
‰e›í64
)

290 
__wur
;

292 
	#f›í
 
f›í64


	)

293 
	#‰e›í
 
‰e›í64


	)

296 
__END_NAMESPACE_STD


297 #ifde‡
__USE_LARGEFILE64


298 
FILE
 *
	$f›í64
 (
__c⁄°
 *
__ª°ri˘
 
__fûíame
,

299 
__c⁄°
 *
__ª°ri˘
 
__modes
Ë
__wur
;

300 
FILE
 *
	$‰e›í64
 (
__c⁄°
 *
__ª°ri˘
 
__fûíame
,

301 
__c⁄°
 *
__ª°ri˘
 
__modes
,

302 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

305 #ifdef 
__USE_POSIX


307 
FILE
 *
	$fd›í
 (
__fd
, 
__c⁄°
 *
__modes
Ë
__THROW
 
__wur
;

310 #ifdef 
__USE_GNU


313 
FILE
 *
	$f›ícookõ
 (*
__ª°ri˘
 
__magic_cookõ
,

314 
__c⁄°
 *
__ª°ri˘
 
__modes
,

315 
_IO_cookõ_io_fun˘i⁄s_t
 
__io_funcs
Ë
__THROW
 
__wur
;

318 #ifde‡
__USE_XOPEN2K8


320 
FILE
 *
	$fmem›í
 (*
__s
, 
size_t
 
__Àn
, 
__c⁄°
 *
__modes
)

321 
__THROW
 
__wur
;

326 
FILE
 *
	$›í_mem°ªam
 (**
__buÊoc
, 
size_t
 *
__sizñoc
Ë
__THROW
 
__wur
;

330 
__BEGIN_NAMESPACE_STD


333 
	$£tbuf
 (
FILE
 *
__ª°ri˘
 
__°ªam
, *__ª°ri˘ 
__buf
Ë
__THROW
;

337 
	$£tvbuf
 (
FILE
 *
__ª°ri˘
 
__°ªam
, *__ª°ri˘ 
__buf
,

338 
__modes
, 
size_t
 
__n
Ë
__THROW
;

339 
__END_NAMESPACE_STD


341 #ifdef 
__USE_BSD


344 
	$£tbuf„r
 (
FILE
 *
__ª°ri˘
 
__°ªam
, *__ª°ri˘ 
__buf
,

345 
size_t
 
__size
Ë
__THROW
;

348 
	$£éöebuf
 (
FILE
 *
__°ªam
Ë
__THROW
;

352 
__BEGIN_NAMESPACE_STD


357 
	`Ârötf
 (
FILE
 *
__ª°ri˘
 
__°ªam
,

358 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
, ...);

363 
	`¥ötf
 (
__c⁄°
 *
__ª°ri˘
 
__f‹m©
, ...);

365 
	$•rötf
 (*
__ª°ri˘
 
__s
,

366 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
, ...Ë
__THROWNL
;

372 
	`vÂrötf
 (
FILE
 *
__ª°ri˘
 
__s
, 
__c⁄°
 *__ª°ri˘ 
__f‹m©
,

373 
_G_va_li°
 
__¨g
);

378 
	`v¥ötf
 (
__c⁄°
 *
__ª°ri˘
 
__f‹m©
, 
_G_va_li°
 
__¨g
);

380 
	$v•rötf
 (*
__ª°ri˘
 
__s
, 
__c⁄°
 *__ª°ri˘ 
__f‹m©
,

381 
_G_va_li°
 
__¨g
Ë
__THROWNL
;

382 
__END_NAMESPACE_STD


384 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_ISOC99
 || deföed 
__USE_UNIX98


385 
__BEGIN_NAMESPACE_C99


387 
	$¢¥ötf
 (*
__ª°ri˘
 
__s
, 
size_t
 
__maxÀn
,

388 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
, ...)

389 
__THROWNL
 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__¥ötf__
, 3, 4)));

391 
	$v¢¥ötf
 (*
__ª°ri˘
 
__s
, 
size_t
 
__maxÀn
,

392 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
, 
_G_va_li°
 
__¨g
)

393 
__THROWNL
 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__¥ötf__
, 3, 0)));

394 
__END_NAMESPACE_C99


397 #ifde‡
__USE_GNU


400 
	$va•rötf
 (**
__ª°ri˘
 
__±r
, 
__c⁄°
 *__ª°ri˘ 
__f
,

401 
_G_va_li°
 
__¨g
)

402 
__THROWNL
 
	`__©åibuã__
 ((
	$__f‹m©__
 (
__¥ötf__
, 2, 0))Ë
__wur
;

403 
	$__a•rötf
 (**
__ª°ri˘
 
__±r
,

404 
__c⁄°
 *
__ª°ri˘
 
__fmt
, ...)

405 
__THROWNL
 
	`__©åibuã__
 ((
	$__f‹m©__
 (
__¥ötf__
, 2, 3))Ë
__wur
;

406 
	$a•rötf
 (**
__ª°ri˘
 
__±r
,

407 
__c⁄°
 *
__ª°ri˘
 
__fmt
, ...)

408 
__THROWNL
 
	`__©åibuã__
 ((
	$__f‹m©__
 (
__¥ötf__
, 2, 3))Ë
__wur
;

411 #ifde‡
__USE_XOPEN2K8


418 
	$vd¥ötf
 (
__fd
, 
__c⁄°
 *
__ª°ri˘
 
__fmt
,

419 
_G_va_li°
 
__¨g
)

420 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__¥ötf__
, 2, 0)));

421 
	$d¥ötf
 (
__fd
, 
__c⁄°
 *
__ª°ri˘
 
__fmt
, ...)

422 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__¥ötf__
, 2, 3)));

426 
__BEGIN_NAMESPACE_STD


431 
	$fsˇnf
 (
FILE
 *
__ª°ri˘
 
__°ªam
,

432 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
, ...Ë
__wur
;

437 
	$sˇnf
 (
__c⁄°
 *
__ª°ri˘
 
__f‹m©
, ...Ë
__wur
;

439 
	$ssˇnf
 (
__c⁄°
 *
__ª°ri˘
 
__s
,

440 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
, ...Ë
__THROW
;

442 #i‡
deföed
 
__USE_ISOC99
 && !deföed 
__USE_GNU
 \

443 && (!
deföed
 
__LDBL_COMPAT
 || !deföed 
__REDIRECT
) \

444 && (
deföed
 
__STRICT_ANSI__
 || deföed 
__USE_XOPEN2K
)

445 #ifde‡
__REDIRECT


449 
	`__REDIRECT
 (
fsˇnf
, (
FILE
 *
__ª°ri˘
 
__°ªam
,

450 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
, ...),

451 
__isoc99_fsˇnf
Ë
__wur
;

452 
	`__REDIRECT
 (
sˇnf
, (
__c⁄°
 *
__ª°ri˘
 
__f‹m©
, ...),

453 
__isoc99_sˇnf
Ë
__wur
;

454 
	`__REDIRECT_NTH
 (
ssˇnf
, (
__c⁄°
 *
__ª°ri˘
 
__s
,

455 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
, ...),

456 
__isoc99_ssˇnf
);

458 
	$__isoc99_fsˇnf
 (
FILE
 *
__ª°ri˘
 
__°ªam
,

459 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
, ...Ë
__wur
;

460 
	$__isoc99_sˇnf
 (
__c⁄°
 *
__ª°ri˘
 
__f‹m©
, ...Ë
__wur
;

461 
	$__isoc99_ssˇnf
 (
__c⁄°
 *
__ª°ri˘
 
__s
,

462 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
, ...Ë
__THROW
;

463 
	#fsˇnf
 
__isoc99_fsˇnf


	)

464 
	#sˇnf
 
__isoc99_sˇnf


	)

465 
	#ssˇnf
 
__isoc99_ssˇnf


	)

469 
__END_NAMESPACE_STD


471 #ifdef 
__USE_ISOC99


472 
__BEGIN_NAMESPACE_C99


477 
	$vfsˇnf
 (
FILE
 *
__ª°ri˘
 
__s
, 
__c⁄°
 *__ª°ri˘ 
__f‹m©
,

478 
_G_va_li°
 
__¨g
)

479 
	`__©åibuã__
 ((
	$__f‹m©__
 (
__sˇnf__
, 2, 0))Ë
__wur
;

485 
	$vsˇnf
 (
__c⁄°
 *
__ª°ri˘
 
__f‹m©
, 
_G_va_li°
 
__¨g
)

486 
	`__©åibuã__
 ((
	$__f‹m©__
 (
__sˇnf__
, 1, 0))Ë
__wur
;

489 
	$vssˇnf
 (
__c⁄°
 *
__ª°ri˘
 
__s
,

490 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
, 
_G_va_li°
 
__¨g
)

491 
__THROW
 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__sˇnf__
, 2, 0)));

493 #i‡!
deföed
 
__USE_GNU
 \

494 && (!
deföed
 
__LDBL_COMPAT
 || !deföed 
__REDIRECT
) \

495 && (
deföed
 
__STRICT_ANSI__
 || deföed 
__USE_XOPEN2K
)

496 #ifde‡
__REDIRECT


500 
	`__REDIRECT
 (
vfsˇnf
,

501 (
FILE
 *
__ª°ri˘
 
__s
,

502 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
, 
_G_va_li°
 
__¨g
),

503 
__isoc99_vfsˇnf
)

504 
	`__©åibuã__
 ((
	$__f‹m©__
 (
__sˇnf__
, 2, 0))Ë
__wur
;

505 
	`__REDIRECT
 (
vsˇnf
, (
__c⁄°
 *
__ª°ri˘
 
__f‹m©
,

506 
_G_va_li°
 
__¨g
), 
__isoc99_vsˇnf
)

507 
	`__©åibuã__
 ((
	$__f‹m©__
 (
__sˇnf__
, 1, 0))Ë
__wur
;

508 
	`__REDIRECT_NTH
 (
vssˇnf
,

509 (
__c⁄°
 *
__ª°ri˘
 
__s
,

510 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
,

511 
_G_va_li°
 
__¨g
), 
__isoc99_vssˇnf
)

512 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__sˇnf__
, 2, 0)));

514 
	$__isoc99_vfsˇnf
 (
FILE
 *
__ª°ri˘
 
__s
,

515 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
,

516 
_G_va_li°
 
__¨g
Ë
__wur
;

517 
	$__isoc99_vsˇnf
 (
__c⁄°
 *
__ª°ri˘
 
__f‹m©
,

518 
_G_va_li°
 
__¨g
Ë
__wur
;

519 
	$__isoc99_vssˇnf
 (
__c⁄°
 *
__ª°ri˘
 
__s
,

520 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
,

521 
_G_va_li°
 
__¨g
Ë
__THROW
;

522 
	#vfsˇnf
 
__isoc99_vfsˇnf


	)

523 
	#vsˇnf
 
__isoc99_vsˇnf


	)

524 
	#vssˇnf
 
__isoc99_vssˇnf


	)

528 
__END_NAMESPACE_C99


532 
__BEGIN_NAMESPACE_STD


537 
	`fgëc
 (
FILE
 *
__°ªam
);

538 
	`gëc
 (
FILE
 *
__°ªam
);

544 
	`gëch¨
 ();

545 
__END_NAMESPACE_STD


549 
	#gëc
(
_Â
Ë
	`_IO_gëc
 (_Â)

	)

551 #i‡
deföed
 
__USE_POSIX
 || deföed 
__USE_MISC


556 
	`gëc_u∆ocked
 (
FILE
 *
__°ªam
);

557 
	`gëch¨_u∆ocked
 ();

560 #ifde‡
__USE_MISC


567 
	`fgëc_u∆ocked
 (
FILE
 *
__°ªam
);

571 
__BEGIN_NAMESPACE_STD


579 
	`Âutc
 (
__c
, 
FILE
 *
__°ªam
);

580 
	`putc
 (
__c
, 
FILE
 *
__°ªam
);

586 
	`putch¨
 (
__c
);

587 
__END_NAMESPACE_STD


591 
	#putc
(
_ch
, 
_Â
Ë
	`_IO_putc
 (_ch, _Â)

	)

593 #ifde‡
__USE_MISC


600 
	`Âutc_u∆ocked
 (
__c
, 
FILE
 *
__°ªam
);

603 #i‡
deföed
 
__USE_POSIX
 || deföed 
__USE_MISC


608 
	`putc_u∆ocked
 (
__c
, 
FILE
 *
__°ªam
);

609 
	`putch¨_u∆ocked
 (
__c
);

613 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_MISC
 \

614 || (
deföed
 
__USE_XOPEN
 && !deföed 
__USE_XOPEN2K
)

616 
	`gëw
 (
FILE
 *
__°ªam
);

619 
	`putw
 (
__w
, 
FILE
 *
__°ªam
);

623 
__BEGIN_NAMESPACE_STD


628 *
	$fgës
 (*
__ª°ri˘
 
__s
, 
__n
, 
FILE
 *__ª°ri˘ 
__°ªam
)

629 
__wur
;

636 *
	$gës
 (*
__s
Ë
__wur
;

637 
__END_NAMESPACE_STD


639 #ifde‡
__USE_GNU


646 *
	$fgës_u∆ocked
 (*
__ª°ri˘
 
__s
, 
__n
,

647 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

651 #ifdef 
__USE_XOPEN2K8


662 
_IO_ssize_t
 
	$__gëdñim
 (**
__ª°ri˘
 
__löïå
,

663 
size_t
 *
__ª°ri˘
 
__n
, 
__dñimôî
,

664 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

665 
_IO_ssize_t
 
	$gëdñim
 (**
__ª°ri˘
 
__löïå
,

666 
size_t
 *
__ª°ri˘
 
__n
, 
__dñimôî
,

667 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

675 
_IO_ssize_t
 
	$gëlöe
 (**
__ª°ri˘
 
__löïå
,

676 
size_t
 *
__ª°ri˘
 
__n
,

677 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

681 
__BEGIN_NAMESPACE_STD


686 
	`Âuts
 (
__c⁄°
 *
__ª°ri˘
 
__s
, 
FILE
 *__ª°ri˘ 
__°ªam
);

692 
	`puts
 (
__c⁄°
 *
__s
);

699 
	`ungëc
 (
__c
, 
FILE
 *
__°ªam
);

706 
size_t
 
	$‰ód
 (*
__ª°ri˘
 
__±r
, 
size_t
 
__size
,

707 
size_t
 
__n
, 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

712 
size_t
 
	`fwrôe
 (
__c⁄°
 *
__ª°ri˘
 
__±r
, size_à
__size
,

713 
size_t
 
__n
, 
FILE
 *
__ª°ri˘
 
__s
);

714 
__END_NAMESPACE_STD


716 #ifde‡
__USE_GNU


723 
	`Âuts_u∆ocked
 (
__c⁄°
 *
__ª°ri˘
 
__s
,

724 
FILE
 *
__ª°ri˘
 
__°ªam
);

727 #ifde‡
__USE_MISC


734 
size_t
 
	$‰ód_u∆ocked
 (*
__ª°ri˘
 
__±r
, 
size_t
 
__size
,

735 
size_t
 
__n
, 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

736 
size_t
 
	`fwrôe_u∆ocked
 (
__c⁄°
 *
__ª°ri˘
 
__±r
, size_à
__size
,

737 
size_t
 
__n
, 
FILE
 *
__ª°ri˘
 
__°ªam
);

741 
__BEGIN_NAMESPACE_STD


746 
	`f£ek
 (
FILE
 *
__°ªam
, 
__off
, 
__whí˚
);

751 
	$·ñl
 (
FILE
 *
__°ªam
Ë
__wur
;

756 
	`ªwöd
 (
FILE
 *
__°ªam
);

757 
__END_NAMESPACE_STD


764 #i‡
deföed
 
__USE_LARGEFILE
 || deföed 
__USE_XOPEN2K


765 #i‚de‡
__USE_FILE_OFFSET64


770 
	`f£eko
 (
FILE
 *
__°ªam
, 
__off_t
 
__off
, 
__whí˚
);

775 
__off_t
 
	$·ñlo
 (
FILE
 *
__°ªam
Ë
__wur
;

777 #ifde‡
__REDIRECT


778 
	`__REDIRECT
 (
f£eko
,

779 (
FILE
 *
__°ªam
, 
__off64_t
 
__off
, 
__whí˚
),

780 
f£eko64
);

781 
__off64_t
 
	`__REDIRECT
 (
·ñlo
, (
FILE
 *
__°ªam
), 
·ñlo64
);

783 
	#f£eko
 
f£eko64


	)

784 
	#·ñlo
 
·ñlo64


	)

789 
__BEGIN_NAMESPACE_STD


790 #i‚de‡
__USE_FILE_OFFSET64


795 
	`fgëpos
 (
FILE
 *
__ª°ri˘
 
__°ªam
, 
Âos_t
 *__ª°ri˘ 
__pos
);

800 
	`f£ços
 (
FILE
 *
__°ªam
, 
__c⁄°
 
Âos_t
 *
__pos
);

802 #ifde‡
__REDIRECT


803 
	`__REDIRECT
 (
fgëpos
, (
FILE
 *
__ª°ri˘
 
__°ªam
,

804 
Âos_t
 *
__ª°ri˘
 
__pos
), 
fgëpos64
);

805 
	`__REDIRECT
 (
f£ços
,

806 (
FILE
 *
__°ªam
, 
__c⁄°
 
Âos_t
 *
__pos
), 
f£ços64
);

808 
	#fgëpos
 
fgëpos64


	)

809 
	#f£ços
 
f£ços64


	)

812 
__END_NAMESPACE_STD


814 #ifde‡
__USE_LARGEFILE64


815 
	`f£eko64
 (
FILE
 *
__°ªam
, 
__off64_t
 
__off
, 
__whí˚
);

816 
__off64_t
 
	$·ñlo64
 (
FILE
 *
__°ªam
Ë
__wur
;

817 
	`fgëpos64
 (
FILE
 *
__ª°ri˘
 
__°ªam
, 
Âos64_t
 *__ª°ri˘ 
__pos
);

818 
	`f£ços64
 (
FILE
 *
__°ªam
, 
__c⁄°
 
Âos64_t
 *
__pos
);

821 
__BEGIN_NAMESPACE_STD


823 
	$˛óªº
 (
FILE
 *
__°ªam
Ë
__THROW
;

825 
	$„of
 (
FILE
 *
__°ªam
Ë
__THROW
 
__wur
;

827 
	$„º‹
 (
FILE
 *
__°ªam
Ë
__THROW
 
__wur
;

828 
__END_NAMESPACE_STD


830 #ifde‡
__USE_MISC


832 
	$˛óªº_u∆ocked
 (
FILE
 *
__°ªam
Ë
__THROW
;

833 
	$„of_u∆ocked
 (
FILE
 *
__°ªam
Ë
__THROW
 
__wur
;

834 
	$„º‹_u∆ocked
 (
FILE
 *
__°ªam
Ë
__THROW
 
__wur
;

838 
__BEGIN_NAMESPACE_STD


843 
	`≥º‹
 (
__c⁄°
 *
__s
);

844 
__END_NAMESPACE_STD


850 
	~<bôs/sys_îæi°.h
>

853 #ifdef 
__USE_POSIX


855 
	$fûío
 (
FILE
 *
__°ªam
Ë
__THROW
 
__wur
;

858 #ifde‡
__USE_MISC


860 
	$fûío_u∆ocked
 (
FILE
 *
__°ªam
Ë
__THROW
 
__wur
;

864 #i‡(
deföed
 
__USE_POSIX2
 || deföed 
__USE_SVID
 || deföed 
__USE_BSD
 || \

865 
deföed
 
__USE_MISC
)

870 
FILE
 *
	$p›í
 (
__c⁄°
 *
__comm™d
, __c⁄° *
__modes
Ë
__wur
;

876 
	`p˛o£
 (
FILE
 *
__°ªam
);

880 #ifdef 
__USE_POSIX


882 *
	$˘îmid
 (*
__s
Ë
__THROW
;

886 #ifde‡
__USE_XOPEN


888 *
	`cu£rid
 (*
__s
);

892 #ifdef 
__USE_GNU


893 
ob°ack
;

896 
	$ob°ack_¥ötf
 (
ob°ack
 *
__ª°ri˘
 
__ob°ack
,

897 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
, ...)

898 
__THROWNL
 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__¥ötf__
, 2, 3)));

899 
	$ob°ack_v¥ötf
 (
ob°ack
 *
__ª°ri˘
 
__ob°ack
,

900 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
,

901 
_G_va_li°
 
__¨gs
)

902 
__THROWNL
 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__¥ötf__
, 2, 0)));

906 #i‡
deföed
 
__USE_POSIX
 || deföed 
__USE_MISC


910 
	$Êockfûe
 (
FILE
 *
__°ªam
Ë
__THROW
;

914 
	$·rylockfûe
 (
FILE
 *
__°ªam
Ë
__THROW
 
__wur
;

917 
	$fu∆ockfûe
 (
FILE
 *
__°ªam
Ë
__THROW
;

920 #i‡
deföed
 
__USE_XOPEN
 && !deföed 
__USE_XOPEN2K
 && !deföed 
__USE_GNU


924 
	#__√ed_gë›t


	)

925 
	~<gë›t.h
>

930 #ifde‡
__USE_EXTERN_INLINES


931 
	~<bôs/°dio.h
>

933 #i‡
__USE_FORTIFY_LEVEL
 > 0 && 
deföed
 
__exã∫_Æways_ölöe


934 
	~<bôs/°dio2.h
>

936 #ifde‡
__LDBL_COMPAT


937 
	~<bôs/°dio-ldbl.h
>

940 
__END_DECLS


	@/usr/include/stdlib.h

23 #i‚def 
_STDLIB_H


25 
	~<„©uªs.h
>

28 
	#__√ed_size_t


	)

29 #i‚de‡
__√ed_mÆloc_™d_ˇŒoc


30 
	#__√ed_wch¨_t


	)

31 
	#__√ed_NULL


	)

33 
	~<°ddef.h
>

35 
	g__BEGIN_DECLS


37 #i‚de‡
__√ed_mÆloc_™d_ˇŒoc


38 
	#_STDLIB_H
 1

	)

40 #i‡(
deföed
 
__USE_XOPEN
 || deföed 
__USE_XOPEN2K8
Ë&& !deföed 
_SYS_WAIT_H


42 
	~<bôs/waôÊags.h
>

43 
	~<bôs/waô°©us.h
>

45 #ifde‡
__USE_BSD


50 #i‡
deföed
 
__GNUC__
 && !deföed 
__˝lu•lus


51 
	#__WAIT_INT
(
°©us
) \

52 (
	`__exãnsi⁄__
 (((uni⁄ { 
	`__ty≥of
(
°©us
Ë
__ö
; 
__i
; }) \

53 { .
__ö
 = (
°©us
Ë}).
__i
))

	)

55 
	#__WAIT_INT
(
°©us
Ë(*(*Ë&(°©us))

	)

63 #i‡!
deföed
 
__GNUC__
 || __GNUC__ < 2 || deföed 
__˝lu•lus


64 
	#__WAIT_STATUS
 *

	)

65 
	#__WAIT_STATUS_DEFN
 *

	)

70 
waô
 *
	m__u±r
;

71 *
	m__ùå
;

72 } 
	t__WAIT_STATUS
 
	t__©åibuã__
 ((
	t__å™•¨ít_uni⁄__
));

73 
	#__WAIT_STATUS_DEFN
 *

	)

78 
	#__WAIT_INT
(
°©us
Ë(°©us)

	)

79 
	#__WAIT_STATUS
 *

	)

80 
	#__WAIT_STATUS_DEFN
 *

	)

85 
	#WEXITSTATUS
(
°©us
Ë
	`__WEXITSTATUS
 (
	`__WAIT_INT
 (°©us))

	)

86 
	#WTERMSIG
(
°©us
Ë
	`__WTERMSIG
 (
	`__WAIT_INT
 (°©us))

	)

87 
	#WSTOPSIG
(
°©us
Ë
	`__WSTOPSIG
 (
	`__WAIT_INT
 (°©us))

	)

88 
	#WIFEXITED
(
°©us
Ë
	`__WIFEXITED
 (
	`__WAIT_INT
 (°©us))

	)

89 
	#WIFSIGNALED
(
°©us
Ë
	`__WIFSIGNALED
 (
	`__WAIT_INT
 (°©us))

	)

90 
	#WIFSTOPPED
(
°©us
Ë
	`__WIFSTOPPED
 (
	`__WAIT_INT
 (°©us))

	)

91 #ifde‡
__WIFCONTINUED


92 
	#WIFCONTINUED
(
°©us
Ë
	`__WIFCONTINUED
 (
	`__WAIT_INT
 (°©us))

	)

96 
__BEGIN_NAMESPACE_STD


100 
	mquŸ
;

101 
	mªm
;

102 } 
	tdiv_t
;

105 #i‚de‡
__ldiv_t_deföed


108 
	mquŸ
;

109 
	mªm
;

110 } 
	tldiv_t
;

111 
	#__ldiv_t_deföed
 1

	)

113 
	g__END_NAMESPACE_STD


115 #i‡
deföed
 
__USE_ISOC99
 && !deföed 
__Œdiv_t_deföed


116 
__BEGIN_NAMESPACE_C99


118 
__exãnsi⁄__
 struct

120 
	mquŸ
;

121 
	mªm
;

122 } 
	tŒdiv_t
;

123 
	#__Œdiv_t_deföed
 1

	)

124 
	g__END_NAMESPACE_C99


129 
	#RAND_MAX
 2147483647

	)

134 
	#EXIT_FAILURE
 1

	)

135 
	#EXIT_SUCCESS
 0

	)

139 
	#MB_CUR_MAX
 (
	`__˘y≥_gë_mb_cur_max
 ())

	)

140 
size_t
 
	$__˘y≥_gë_mb_cur_max
 (Ë
__THROW
 
__wur
;

143 
__BEGIN_NAMESPACE_STD


145 
	$©of
 (
__c⁄°
 *
__≈å
)

146 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

148 
	$©oi
 (
__c⁄°
 *
__≈å
)

149 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

151 
	$©ﬁ
 (
__c⁄°
 *
__≈å
)

152 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

153 
__END_NAMESPACE_STD


155 #i‡
deföed
 
__USE_ISOC99
 || (deföed 
__GLIBC_HAVE_LONG_LONG
 && deföed 
__USE_MISC
)

156 
__BEGIN_NAMESPACE_C99


158 
__exãnsi⁄__
 
	$©ﬁl
 (
__c⁄°
 *
__≈å
)

159 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

160 
__END_NAMESPACE_C99


163 
__BEGIN_NAMESPACE_STD


165 
	$°πod
 (
__c⁄°
 *
__ª°ri˘
 
__≈å
,

166 **
__ª°ri˘
 
__íd±r
)

167 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

168 
__END_NAMESPACE_STD


170 #ifdef 
__USE_ISOC99


171 
__BEGIN_NAMESPACE_C99


173 
	$°πof
 (
__c⁄°
 *
__ª°ri˘
 
__≈å
,

174 **
__ª°ri˘
 
__íd±r
Ë
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

176 
	$°πﬁd
 (
__c⁄°
 *
__ª°ri˘
 
__≈å
,

177 **
__ª°ri˘
 
__íd±r
)

178 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

179 
__END_NAMESPACE_C99


182 
__BEGIN_NAMESPACE_STD


184 
	$°πﬁ
 (
__c⁄°
 *
__ª°ri˘
 
__≈å
,

185 **
__ª°ri˘
 
__íd±r
, 
__ba£
)

186 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

188 
	$°πoul
 (
__c⁄°
 *
__ª°ri˘
 
__≈å
,

189 **
__ª°ri˘
 
__íd±r
, 
__ba£
)

190 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

191 
__END_NAMESPACE_STD


193 #i‡
deföed
 
__GLIBC_HAVE_LONG_LONG
 && deföed 
__USE_BSD


195 
__exãnsi⁄__


196 
	$°πoq
 (
__c⁄°
 *
__ª°ri˘
 
__≈å
,

197 **
__ª°ri˘
 
__íd±r
, 
__ba£
)

198 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

200 
__exãnsi⁄__


201 
	$°πouq
 (
__c⁄°
 *
__ª°ri˘
 
__≈å
,

202 **
__ª°ri˘
 
__íd±r
, 
__ba£
)

203 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

206 #i‡
deföed
 
__USE_ISOC99
 || (deföed 
__GLIBC_HAVE_LONG_LONG
 && deföed 
__USE_MISC
)

207 
__BEGIN_NAMESPACE_C99


209 
__exãnsi⁄__


210 
	$°πﬁl
 (
__c⁄°
 *
__ª°ri˘
 
__≈å
,

211 **
__ª°ri˘
 
__íd±r
, 
__ba£
)

212 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

214 
__exãnsi⁄__


215 
	$°πouŒ
 (
__c⁄°
 *
__ª°ri˘
 
__≈å
,

216 **
__ª°ri˘
 
__íd±r
, 
__ba£
)

217 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

218 
__END_NAMESPACE_C99


222 #ifde‡
__USE_GNU


236 
	~<xloˇÀ.h
>

240 
	$°πﬁ_l
 (
__c⁄°
 *
__ª°ri˘
 
__≈å
,

241 **
__ª°ri˘
 
__íd±r
, 
__ba£
,

242 
__loˇÀ_t
 
__loc
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 4)Ë
__wur
;

244 
	$°πoul_l
 (
__c⁄°
 *
__ª°ri˘
 
__≈å
,

245 **
__ª°ri˘
 
__íd±r
,

246 
__ba£
, 
__loˇÀ_t
 
__loc
)

247 
__THROW
 
	`__n⁄nuŒ
 ((1, 4)Ë
__wur
;

249 
__exãnsi⁄__


250 
	$°πﬁl_l
 (
__c⁄°
 *
__ª°ri˘
 
__≈å
,

251 **
__ª°ri˘
 
__íd±r
, 
__ba£
,

252 
__loˇÀ_t
 
__loc
)

253 
__THROW
 
	`__n⁄nuŒ
 ((1, 4)Ë
__wur
;

255 
__exãnsi⁄__


256 
	$°πouŒ_l
 (
__c⁄°
 *
__ª°ri˘
 
__≈å
,

257 **
__ª°ri˘
 
__íd±r
,

258 
__ba£
, 
__loˇÀ_t
 
__loc
)

259 
__THROW
 
	`__n⁄nuŒ
 ((1, 4)Ë
__wur
;

261 
	$°πod_l
 (
__c⁄°
 *
__ª°ri˘
 
__≈å
,

262 **
__ª°ri˘
 
__íd±r
, 
__loˇÀ_t
 
__loc
)

263 
__THROW
 
	`__n⁄nuŒ
 ((1, 3)Ë
__wur
;

265 
	$°πof_l
 (
__c⁄°
 *
__ª°ri˘
 
__≈å
,

266 **
__ª°ri˘
 
__íd±r
, 
__loˇÀ_t
 
__loc
)

267 
__THROW
 
	`__n⁄nuŒ
 ((1, 3)Ë
__wur
;

269 
	$°πﬁd_l
 (
__c⁄°
 *
__ª°ri˘
 
__≈å
,

270 **
__ª°ri˘
 
__íd±r
,

271 
__loˇÀ_t
 
__loc
)

272 
__THROW
 
	`__n⁄nuŒ
 ((1, 3)Ë
__wur
;

276 #ifde‡
__USE_EXTERN_INLINES


277 
__BEGIN_NAMESPACE_STD


278 
__exã∫_ölöe
 

279 
	`__NTH
 (
	$©of
 (
__c⁄°
 *
__≈å
))

281  
	`°πod
 (
__≈å
, (**Ë
NULL
);

282 
	}
}

283 
__exã∫_ölöe
 

284 
__NTH
 (
	$©oi
 (
__c⁄°
 *
__≈å
))

286  (Ë
	`°πﬁ
 (
__≈å
, (**Ë
NULL
, 10);

287 
	}
}

288 
__exã∫_ölöe
 

289 
__NTH
 (
	$©ﬁ
 (
__c⁄°
 *
__≈å
))

291  
	`°πﬁ
 (
__≈å
, (**Ë
NULL
, 10);

292 
	}
}

293 
	g__END_NAMESPACE_STD


295 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_ISOC99


296 
__BEGIN_NAMESPACE_C99


297 
__exãnsi⁄__
 
__exã∫_ölöe
 

298 
__NTH
 (
	$©ﬁl
 (
__c⁄°
 *
__≈å
))

300  
	`°πﬁl
 (
__≈å
, (**Ë
NULL
, 10);

301 
	}
}

302 
	g__END_NAMESPACE_C99


307 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_XOPEN_EXTENDED


311 *
	$l64a
 (
__n
Ë
__THROW
 
__wur
;

314 
	$a64l
 (
__c⁄°
 *
__s
)

315 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

319 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_BSD


320 
	~<sys/ty≥s.h
>

327 
	$øndom
 (Ë
__THROW
;

330 
	$§™dom
 (
__£ed
Ë
__THROW
;

336 *
	$öô°©e
 (
__£ed
, *
__°©ebuf
,

337 
size_t
 
__°©ñí
Ë
__THROW
 
	`__n⁄nuŒ
 ((2));

341 *
	$£t°©e
 (*
__°©ebuf
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

344 #ifde‡
__USE_MISC


349 
	søndom_d©a


351 
öt32_t
 *
Âå
;

352 
öt32_t
 *
Ωå
;

353 
öt32_t
 *
°©e
;

354 
ønd_ty≥
;

355 
ønd_deg
;

356 
ønd_£p
;

357 
öt32_t
 *
íd_±r
;

360 
	$øndom_r
 (
øndom_d©a
 *
__ª°ri˘
 
__buf
,

361 
öt32_t
 *
__ª°ri˘
 
__ªsu…
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

363 
	$§™dom_r
 (
__£ed
, 
øndom_d©a
 *
__buf
)

364 
__THROW
 
	`__n⁄nuŒ
 ((2));

366 
	$öô°©e_r
 (
__£ed
, *
__ª°ri˘
 
__°©ebuf
,

367 
size_t
 
__°©ñí
,

368 
øndom_d©a
 *
__ª°ri˘
 
__buf
)

369 
__THROW
 
	`__n⁄nuŒ
 ((2, 4));

371 
	$£t°©e_r
 (*
__ª°ri˘
 
__°©ebuf
,

372 
øndom_d©a
 *
__ª°ri˘
 
__buf
)

373 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

378 
__BEGIN_NAMESPACE_STD


380 
	$ønd
 (Ë
__THROW
;

382 
	$§™d
 (
__£ed
Ë
__THROW
;

383 
__END_NAMESPACE_STD


385 #ifde‡
__USE_POSIX


387 
	$ønd_r
 (*
__£ed
Ë
__THROW
;

391 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_XOPEN


395 
	$dønd48
 (Ë
__THROW
;

396 
	$î™d48
 (
__xsubi
[3]Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

399 
	$Ã™d48
 (Ë
__THROW
;

400 
	$ƒ™d48
 (
__xsubi
[3])

401 
__THROW
 
	`__n⁄nuŒ
 ((1));

404 
	$mønd48
 (Ë
__THROW
;

405 
	$jønd48
 (
__xsubi
[3])

406 
__THROW
 
	`__n⁄nuŒ
 ((1));

409 
	$§™d48
 (
__£edvÆ
Ë
__THROW
;

410 *
	$£ed48
 (
__£ed16v
[3])

411 
__THROW
 
	`__n⁄nuŒ
 ((1));

412 
	$lc⁄g48
 (
__∑øm
[7]Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

414 #ifde‡
__USE_MISC


418 
	sdønd48_d©a


420 
__x
[3];

421 
__ﬁd_x
[3];

422 
__c
;

423 
__öô
;

424 
__a
;

428 
	$dønd48_r
 (
dønd48_d©a
 *
__ª°ri˘
 
__buf„r
,

429 *
__ª°ri˘
 
__ªsu…
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

430 
	$î™d48_r
 (
__xsubi
[3],

431 
dønd48_d©a
 *
__ª°ri˘
 
__buf„r
,

432 *
__ª°ri˘
 
__ªsu…
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

435 
	$Ã™d48_r
 (
dønd48_d©a
 *
__ª°ri˘
 
__buf„r
,

436 *
__ª°ri˘
 
__ªsu…
)

437 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

438 
	$ƒ™d48_r
 (
__xsubi
[3],

439 
dønd48_d©a
 *
__ª°ri˘
 
__buf„r
,

440 *
__ª°ri˘
 
__ªsu…
)

441 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

444 
	$mønd48_r
 (
dønd48_d©a
 *
__ª°ri˘
 
__buf„r
,

445 *
__ª°ri˘
 
__ªsu…
)

446 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

447 
	$jønd48_r
 (
__xsubi
[3],

448 
dønd48_d©a
 *
__ª°ri˘
 
__buf„r
,

449 *
__ª°ri˘
 
__ªsu…
)

450 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

453 
	$§™d48_r
 (
__£edvÆ
, 
dønd48_d©a
 *
__buf„r
)

454 
__THROW
 
	`__n⁄nuŒ
 ((2));

456 
	$£ed48_r
 (
__£ed16v
[3],

457 
dønd48_d©a
 *
__buf„r
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

459 
	$lc⁄g48_r
 (
__∑øm
[7],

460 
dønd48_d©a
 *
__buf„r
)

461 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

467 #i‚de‡
__mÆloc_™d_ˇŒoc_deföed


468 
	#__mÆloc_™d_ˇŒoc_deföed


	)

469 
__BEGIN_NAMESPACE_STD


471 *
	$mÆloc
 (
size_t
 
__size
Ë
__THROW
 
__©åibuã_mÆloc__
 
__wur
;

473 *
	$ˇŒoc
 (
size_t
 
__nmemb
, size_à
__size
)

474 
__THROW
 
__©åibuã_mÆloc__
 
__wur
;

475 
__END_NAMESPACE_STD


478 #i‚de‡
__√ed_mÆloc_™d_ˇŒoc


479 
__BEGIN_NAMESPACE_STD


485 *
	$ªÆloc
 (*
__±r
, 
size_t
 
__size
)

486 
__THROW
 
__©åibuã_w¨n_unu£d_ªsu…__
;

488 
	$‰ì
 (*
__±r
Ë
__THROW
;

489 
__END_NAMESPACE_STD


491 #ifdef 
__USE_MISC


493 
	$c‰ì
 (*
__±r
Ë
__THROW
;

496 #i‡
deföed
 
__USE_GNU
 || deföed 
__USE_BSD
 || deföed 
__USE_MISC


497 
	~<Æloˇ.h
>

500 #i‡(
deföed
 
__USE_XOPEN_EXTENDED
 && !deföed 
__USE_XOPEN2K
) \

501 || 
deföed
 
__USE_BSD


503 *
	$vÆloc
 (
size_t
 
__size
Ë
__THROW
 
__©åibuã_mÆloc__
 
__wur
;

506 #ifde‡
__USE_XOPEN2K


508 
	$posix_memÆign
 (**
__mem±r
, 
size_t
 
__Æignmít
, size_à
__size
)

509 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

512 
__BEGIN_NAMESPACE_STD


514 
	$ab‹t
 (Ë
__THROW
 
	`__©åibuã__
 ((
__n‹ëu∫__
));

518 
	`©exô
 ((*
__func
Ë()Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

520 #ifde‡
__USE_GNU


524 #ifde‡
__˝lu•lus


525 "C++" 
	`©_quick_exô
 ((*
__func
) ())

526 
__THROW
 
	`__asm
 ("©_quick_exô"Ë
	`__n⁄nuŒ
 ((1));

528 
	`©_quick_exô
 ((*
__func
Ë()Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

531 
__END_NAMESPACE_STD


533 #ifdef 
__USE_MISC


536 
	`⁄_exô
 ((*
__func
Ë(
__°©us
, *
__¨g
), *__arg)

537 
__THROW
 
	`__n⁄nuŒ
 ((1));

540 
__BEGIN_NAMESPACE_STD


544 
	$exô
 (
__°©us
Ë
__THROW
 
	`__©åibuã__
 ((
__n‹ëu∫__
));

546 #ifde‡
__USE_GNU


552 
	$quick_exô
 (
__°©us
Ë
__THROW
 
	`__©åibuã__
 ((
__n‹ëu∫__
));

554 
__END_NAMESPACE_STD


556 #ifde‡
__USE_ISOC99


557 
__BEGIN_NAMESPACE_C99


560 
	$_Exô
 (
__°©us
Ë
__THROW
 
	`__©åibuã__
 ((
__n‹ëu∫__
));

561 
__END_NAMESPACE_C99


565 
__BEGIN_NAMESPACE_STD


567 *
	$gëív
 (
__c⁄°
 *
__«me
Ë
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

568 
__END_NAMESPACE_STD


572 *
	$__£cuª_gëív
 (
__c⁄°
 *
__«me
)

573 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

575 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_XOPEN


579 
	$puãnv
 (*
__°rög
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

582 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN2K


585 
	$£ãnv
 (
__c⁄°
 *
__«me
, __c⁄° *
__vÆue
, 
__ª∂a˚
)

586 
__THROW
 
	`__n⁄nuŒ
 ((2));

589 
	$un£ãnv
 (
__c⁄°
 *
__«me
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

592 #ifdef 
__USE_MISC


596 
	$˛óªnv
 (Ë
__THROW
;

600 #i‡
deföed
 
__USE_MISC
 \

601 || (
deföed
 
__USE_XOPEN_EXTENDED
 && !deföed 
__USE_XOPEN2K
)

606 *
	$mkãmp
 (*
__ãm∂©e
Ë
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

609 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN_EXTENDED
 \

610 || 
deföed
 
__USE_XOPEN2K8


619 #i‚de‡
__USE_FILE_OFFSET64


620 
	$mk°emp
 (*
__ãm∂©e
Ë
	`__n⁄nuŒ
 ((1)Ë
__wur
;

622 #ifde‡
__REDIRECT


623 
	`__REDIRECT
 (
mk°emp
, (*
__ãm∂©e
), 
mk°emp64
)

624 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

626 
	#mk°emp
 
mk°emp64


	)

629 #ifde‡
__USE_LARGEFILE64


630 
	$mk°emp64
 (*
__ãm∂©e
Ë
	`__n⁄nuŒ
 ((1)Ë
__wur
;

634 #ifde‡
__USE_MISC


641 #i‚de‡
__USE_FILE_OFFSET64


642 
	$mk°emps
 (*
__ãm∂©e
, 
__suffixÀn
Ë
	`__n⁄nuŒ
 ((1)Ë
__wur
;

644 #ifde‡
__REDIRECT


645 
	`__REDIRECT
 (
mk°emps
, (*
__ãm∂©e
, 
__suffixÀn
),

646 
mk°emps64
Ë
	`__n⁄nuŒ
 ((1)Ë
__wur
;

648 
	#mk°emps
 
mk°emps64


	)

651 #ifde‡
__USE_LARGEFILE64


652 
	$mk°emps64
 (*
__ãm∂©e
, 
__suffixÀn
)

653 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

657 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN2K8


663 *
	$mkdãmp
 (*
__ãm∂©e
Ë
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

666 #ifde‡
__USE_GNU


673 #i‚de‡
__USE_FILE_OFFSET64


674 
	$mko°emp
 (*
__ãm∂©e
, 
__Êags
Ë
	`__n⁄nuŒ
 ((1)Ë
__wur
;

676 #ifde‡
__REDIRECT


677 
	`__REDIRECT
 (
mko°emp
, (*
__ãm∂©e
, 
__Êags
), 
mko°emp64
)

678 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

680 
	#mko°emp
 
mko°emp64


	)

683 #ifde‡
__USE_LARGEFILE64


684 
	$mko°emp64
 (*
__ãm∂©e
, 
__Êags
Ë
	`__n⁄nuŒ
 ((1)Ë
__wur
;

693 #i‚de‡
__USE_FILE_OFFSET64


694 
	$mko°emps
 (*
__ãm∂©e
, 
__suffixÀn
, 
__Êags
)

695 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

697 #ifde‡
__REDIRECT


698 
	`__REDIRECT
 (
mko°emps
, (*
__ãm∂©e
, 
__suffixÀn
,

699 
__Êags
), 
mko°emps64
)

700 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

702 
	#mko°emps
 
mko°emps64


	)

705 #ifde‡
__USE_LARGEFILE64


706 
	$mko°emps64
 (*
__ãm∂©e
, 
__suffixÀn
, 
__Êags
)

707 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

712 
__BEGIN_NAMESPACE_STD


717 
	$sy°em
 (
__c⁄°
 *
__comm™d
Ë
__wur
;

718 
__END_NAMESPACE_STD


721 #ifdef 
__USE_GNU


724 *
	$ˇn⁄iˇlize_fûe_«me
 (
__c⁄°
 *
__«me
)

725 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

728 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN_EXTENDED


734 *
	$ªÆ∑th
 (
__c⁄°
 *
__ª°ri˘
 
__«me
,

735 *
__ª°ri˘
 
__ªsﬁved
Ë
__THROW
 
__wur
;

740 #i‚de‡
__COMPAR_FN_T


741 
	#__COMPAR_FN_T


	)

742 (*
	t__com∑r_‚_t
Ë(
	t__c⁄°
 *, __const *);

744 #ifdef 
__USE_GNU


745 
__com∑r_‚_t
 
	tcom∑ris⁄_‚_t
;

748 #ifde‡
__USE_GNU


749 (*
	t__com∑r_d_‚_t
Ë(
	t__c⁄°
 *, __const *, *);

752 
__BEGIN_NAMESPACE_STD


755 *
	$b£¨ch
 (
__c⁄°
 *
__key
, __c⁄° *
__ba£
,

756 
size_t
 
__nmemb
, size_à
__size
, 
__com∑r_‚_t
 
__com∑r
)

757 
	`__n⁄nuŒ
 ((1, 2, 5)Ë
__wur
;

761 
	$qs‹t
 (*
__ba£
, 
size_t
 
__nmemb
, size_à
__size
,

762 
__com∑r_‚_t
 
__com∑r
Ë
	`__n⁄nuŒ
 ((1, 4));

763 #ifde‡
__USE_GNU


764 
	$qs‹t_r
 (*
__ba£
, 
size_t
 
__nmemb
, size_à
__size
,

765 
__com∑r_d_‚_t
 
__com∑r
, *
__¨g
)

766 
	`__n⁄nuŒ
 ((1, 4));

771 
	$abs
 (
__x
Ë
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
)Ë
__wur
;

772 
	$œbs
 (
__x
Ë
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
)Ë
__wur
;

773 
__END_NAMESPACE_STD


775 #ifde‡
__USE_ISOC99


776 
__exãnsi⁄__
 
	$Œabs
 (
__x
)

777 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
)Ë
__wur
;

781 
__BEGIN_NAMESPACE_STD


785 
div_t
 
	$div
 (
__numî
, 
__díom
)

786 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
)Ë
__wur
;

787 
ldiv_t
 
	$ldiv
 (
__numî
, 
__díom
)

788 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
)Ë
__wur
;

789 
__END_NAMESPACE_STD


791 #ifde‡
__USE_ISOC99


792 
__BEGIN_NAMESPACE_C99


793 
__exãnsi⁄__
 
Œdiv_t
 
	$Œdiv
 (
__numî
,

794 
__díom
)

795 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
)Ë
__wur
;

796 
__END_NAMESPACE_C99


800 #i‡(
deföed
 
__USE_XOPEN_EXTENDED
 && !deföed 
__USE_XOPEN2K
) \

801 || 
deföed
 
__USE_SVID


808 *
	$ecvt
 (
__vÆue
, 
__ndigô
, *
__ª°ri˘
 
__de˝t
,

809 *
__ª°ri˘
 
__sign
Ë
__THROW
 
	`__n⁄nuŒ
 ((3, 4)Ë
__wur
;

814 *
	$fcvt
 (
__vÆue
, 
__ndigô
, *
__ª°ri˘
 
__de˝t
,

815 *
__ª°ri˘
 
__sign
Ë
__THROW
 
	`__n⁄nuŒ
 ((3, 4)Ë
__wur
;

820 *
	$gcvt
 (
__vÆue
, 
__ndigô
, *
__buf
)

821 
__THROW
 
	`__n⁄nuŒ
 ((3)Ë
__wur
;

824 #ifde‡
__USE_MISC


826 *
	$qecvt
 (
__vÆue
, 
__ndigô
,

827 *
__ª°ri˘
 
__de˝t
, *__ª°ri˘ 
__sign
)

828 
__THROW
 
	`__n⁄nuŒ
 ((3, 4)Ë
__wur
;

829 *
	$qfcvt
 (
__vÆue
, 
__ndigô
,

830 *
__ª°ri˘
 
__de˝t
, *__ª°ri˘ 
__sign
)

831 
__THROW
 
	`__n⁄nuŒ
 ((3, 4)Ë
__wur
;

832 *
	$qgcvt
 (
__vÆue
, 
__ndigô
, *
__buf
)

833 
__THROW
 
	`__n⁄nuŒ
 ((3)Ë
__wur
;

838 
	$ecvt_r
 (
__vÆue
, 
__ndigô
, *
__ª°ri˘
 
__de˝t
,

839 *
__ª°ri˘
 
__sign
, *__ª°ri˘ 
__buf
,

840 
size_t
 
__Àn
Ë
__THROW
 
	`__n⁄nuŒ
 ((3, 4, 5));

841 
	$fcvt_r
 (
__vÆue
, 
__ndigô
, *
__ª°ri˘
 
__de˝t
,

842 *
__ª°ri˘
 
__sign
, *__ª°ri˘ 
__buf
,

843 
size_t
 
__Àn
Ë
__THROW
 
	`__n⁄nuŒ
 ((3, 4, 5));

845 
	$qecvt_r
 (
__vÆue
, 
__ndigô
,

846 *
__ª°ri˘
 
__de˝t
, *__ª°ri˘ 
__sign
,

847 *
__ª°ri˘
 
__buf
, 
size_t
 
__Àn
)

848 
__THROW
 
	`__n⁄nuŒ
 ((3, 4, 5));

849 
	$qfcvt_r
 (
__vÆue
, 
__ndigô
,

850 *
__ª°ri˘
 
__de˝t
, *__ª°ri˘ 
__sign
,

851 *
__ª°ri˘
 
__buf
, 
size_t
 
__Àn
)

852 
__THROW
 
	`__n⁄nuŒ
 ((3, 4, 5));

857 
__BEGIN_NAMESPACE_STD


860 
	$mbÀn
 (
__c⁄°
 *
__s
, 
size_t
 
__n
Ë
__THROW
 
__wur
;

863 
	$mbtowc
 (
wch¨_t
 *
__ª°ri˘
 
__pwc
,

864 
__c⁄°
 *
__ª°ri˘
 
__s
, 
size_t
 
__n
Ë
__THROW
 
__wur
;

867 
	$w˘omb
 (*
__s
, 
wch¨_t
 
__wch¨
Ë
__THROW
 
__wur
;

871 
size_t
 
	$mb°owcs
 (
wch¨_t
 *
__ª°ri˘
 
__pwcs
,

872 
__c⁄°
 *
__ª°ri˘
 
__s
, 
size_t
 
__n
Ë
__THROW
;

874 
size_t
 
	$wc°ombs
 (*
__ª°ri˘
 
__s
,

875 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__pwcs
, 
size_t
 
__n
)

876 
__THROW
;

877 
__END_NAMESPACE_STD


880 #ifde‡
__USE_SVID


885 
	$Ωm©ch
 (
__c⁄°
 *
__ª•⁄£
Ë
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

889 #i‡
deföed
 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K8


896 
	$gësub›t
 (**
__ª°ri˘
 
__›ti⁄p
,

897 *
__c⁄°
 *
__ª°ri˘
 
__tokís
,

898 **
__ª°ri˘
 
__vÆuï
)

899 
__THROW
 
	`__n⁄nuŒ
 ((1, 2, 3)Ë
__wur
;

903 #ifde‡
__USE_XOPEN


905 
	$£tkey
 (
__c⁄°
 *
__key
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

911 #ifde‡
__USE_XOPEN2KXSI


913 
	$posix_›í±
 (
__oÊag
Ë
__wur
;

916 #ifde‡
__USE_XOPEN


921 
	$gø¡±
 (
__fd
Ë
__THROW
;

925 
	$u∆ock±
 (
__fd
Ë
__THROW
;

930 *
	$±¢ame
 (
__fd
Ë
__THROW
 
__wur
;

933 #ifde‡
__USE_GNU


937 
	$±¢ame_r
 (
__fd
, *
__buf
, 
size_t
 
__buÊí
)

938 
__THROW
 
	`__n⁄nuŒ
 ((2));

941 
	`gë±
 ();

944 #ifde‡
__USE_BSD


948 
	$gëlﬂdavg
 (
__lﬂdavg
[], 
__√Àm
)

949 
__THROW
 
	`__n⁄nuŒ
 ((1));

954 #i‡
__USE_FORTIFY_LEVEL
 > 0 && 
deföed
 
__exã∫_Æways_ölöe


955 
	~<bôs/°dlib.h
>

957 #ifde‡
__LDBL_COMPAT


958 
	~<bôs/°dlib-ldbl.h
>

962 #unde‡
__√ed_mÆloc_™d_ˇŒoc


964 
__END_DECLS


	@/usr/include/string.h

24 #i‚def 
_STRING_H


25 
	#_STRING_H
 1

	)

27 
	~<„©uªs.h
>

29 
	g__BEGIN_DECLS


32 
	#__√ed_size_t


	)

33 
	#__√ed_NULL


	)

34 
	~<°ddef.h
>

37 #i‡
deföed
 
__˝lu•lus
 && 
__GNUC_PREREQ
 (4, 4)

38 
	#__CORRECT_ISO_CPP_STRING_H_PROTO


	)

42 
__BEGIN_NAMESPACE_STD


44 *
	$mem˝y
 (*
__ª°ri˘
 
__de°
,

45 
__c⁄°
 *
__ª°ri˘
 
__§c
, 
size_t
 
__n
)

46 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

49 *
	$memmove
 (*
__de°
, 
__c⁄°
 *
__§c
, 
size_t
 
__n
)

50 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

51 
__END_NAMESPACE_STD


56 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_BSD
 || deföed 
__USE_XOPEN


57 *
	$memc˝y
 (*
__ª°ri˘
 
__de°
, 
__c⁄°
 *__ª°ri˘ 
__§c
,

58 
__c
, 
size_t
 
__n
)

59 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

63 
__BEGIN_NAMESPACE_STD


65 *
	$mem£t
 (*
__s
, 
__c
, 
size_t
 
__n
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

68 
	$memcmp
 (
__c⁄°
 *
__s1
, __c⁄° *
__s2
, 
size_t
 
__n
)

69 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

72 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


75 *
	`memchr
 (*
__s
, 
__c
, 
size_t
 
__n
)

76 
__THROW
 
	`__asm
 ("memchr"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

77 
__c⁄°
 *
	`memchr
 (__c⁄° *
__s
, 
__c
, 
size_t
 
__n
)

78 
__THROW
 
	`__asm
 ("memchr"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

80 #ifde‡
__OPTIMIZE__


81 
__exã∫_Æways_ölöe
 *

82 
	`memchr
 (*
__s
, 
__c
, 
size_t
 
__n
Ë
__THROW


84  
	`__buûtö_memchr
 (
__s
, 
__c
, 
__n
);

87 
__exã∫_Æways_ölöe
 
__c⁄°
 *

88 
	`memchr
 (
__c⁄°
 *
__s
, 
__c
, 
size_t
 
__n
Ë
__THROW


90  
	`__buûtö_memchr
 (
__s
, 
__c
, 
__n
);

93 
	}
}

95 *
	$memchr
 (
__c⁄°
 *
__s
, 
__c
, 
size_t
 
__n
)

96 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

98 
__END_NAMESPACE_STD


100 #ifde‡
__USE_GNU


103 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


104 "C++" *
	$øwmemchr
 (*
__s
, 
__c
)

105 
__THROW
 
	`__asm
 ("øwmemchr"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

106 "C++" 
__c⁄°
 *
	$øwmemchr
 (
__c⁄°
 *
__s
, 
__c
)

107 
__THROW
 
	`__asm
 ("øwmemchr"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

109 *
	$øwmemchr
 (
__c⁄°
 *
__s
, 
__c
)

110 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

114 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


115 "C++" *
	$memrchr
 (*
__s
, 
__c
, 
size_t
 
__n
)

116 
__THROW
 
	`__asm
 ("memrchr"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

117 "C++" 
__c⁄°
 *
	$memrchr
 (
__c⁄°
 *
__s
, 
__c
, 
size_t
 
__n
)

118 
__THROW
 
	`__asm
 ("memrchr"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

120 *
	$memrchr
 (
__c⁄°
 *
__s
, 
__c
, 
size_t
 
__n
)

121 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

126 
__BEGIN_NAMESPACE_STD


128 *
	$°r˝y
 (*
__ª°ri˘
 
__de°
, 
__c⁄°
 *__ª°ri˘ 
__§c
)

129 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

131 *
	$°∫˝y
 (*
__ª°ri˘
 
__de°
,

132 
__c⁄°
 *
__ª°ri˘
 
__§c
, 
size_t
 
__n
)

133 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

136 *
	$°rˇt
 (*
__ª°ri˘
 
__de°
, 
__c⁄°
 *__ª°ri˘ 
__§c
)

137 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

139 *
	$°∫ˇt
 (*
__ª°ri˘
 
__de°
, 
__c⁄°
 *__ª°ri˘ 
__§c
,

140 
size_t
 
__n
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

143 
	$°rcmp
 (
__c⁄°
 *
__s1
, __c⁄° *
__s2
)

144 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

146 
	$°∫cmp
 (
__c⁄°
 *
__s1
, __c⁄° *
__s2
, 
size_t
 
__n
)

147 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

150 
	$°rcﬁl
 (
__c⁄°
 *
__s1
, __c⁄° *
__s2
)

151 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

153 
size_t
 
	$°rx‰m
 (*
__ª°ri˘
 
__de°
,

154 
__c⁄°
 *
__ª°ri˘
 
__§c
, 
size_t
 
__n
)

155 
__THROW
 
	`__n⁄nuŒ
 ((2));

156 
__END_NAMESPACE_STD


158 #ifde‡
__USE_XOPEN2K8


162 
	~<xloˇÀ.h
>

165 
	$°rcﬁl_l
 (
__c⁄°
 *
__s1
, __c⁄° *
__s2
, 
__loˇÀ_t
 
__l
)

166 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2, 3));

168 
size_t
 
	$°rx‰m_l
 (*
__de°
, 
__c⁄°
 *
__§c
, 
size_t
 
__n
,

169 
__loˇÀ_t
 
__l
Ë
__THROW
 
	`__n⁄nuŒ
 ((2, 4));

172 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_BSD
 || deföed 
__USE_XOPEN_EXTENDED
 \

173 || 
deföed
 
__USE_XOPEN2K8


175 *
	$°rdup
 (
__c⁄°
 *
__s
)

176 
__THROW
 
__©åibuã_mÆloc__
 
	`__n⁄nuŒ
 ((1));

182 #i‡
deföed
 
__USE_XOPEN2K8


183 *
	$°∫dup
 (
__c⁄°
 *
__°rög
, 
size_t
 
__n
)

184 
__THROW
 
__©åibuã_mÆloc__
 
	`__n⁄nuŒ
 ((1));

187 #i‡
deföed
 
__USE_GNU
 && deföed 
__GNUC__


189 
	#°rdu∑
(
s
) \

190 (
__exãnsi⁄__
 \

192 
__c⁄°
 *
__ﬁd
 = (
s
); \

193 
size_t
 
__Àn
 = 
	`°æí
 (
__ﬁd
) + 1; \

194 *
__√w
 = (*Ë
	`__buûtö_Æloˇ
 (
__Àn
); \

195 (*Ë
	`mem˝y
 (
__√w
, 
__ﬁd
, 
__Àn
); \

196 
	}
}))

	)

199 
	#°∫du∑
(
s
, 
n
) \

200 (
__exãnsi⁄__
 \

202 
__c⁄°
 *
__ﬁd
 = (
s
); \

203 
size_t
 
__Àn
 = 
	`°∫Àn
 (
__ﬁd
, (
n
)); \

204 *
__√w
 = (*Ë
	`__buûtö_Æloˇ
 (
__Àn
 + 1); \

205 
__√w
[
__Àn
] = '\0'; \

206 (*Ë
	`mem˝y
 (
__√w
, 
__ﬁd
, 
__Àn
); \

207 }))

	)

210 
	g__BEGIN_NAMESPACE_STD


212 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


215 *
°rchr
 (*
__s
, 
__c
)

216 
__THROW
 
__asm
 ("°rchr"Ë
__©åibuã_puª__
 
__n⁄nuŒ
 ((1));

217 
__c⁄°
 *
°rchr
 (__c⁄° *
__s
, 
__c
)

218 
__THROW
 
__asm
 ("°rchr"Ë
__©åibuã_puª__
 
__n⁄nuŒ
 ((1));

220 #ifde‡
__OPTIMIZE__


221 
__exã∫_Æways_ölöe
 *

222 
°rchr
 (*
__s
, 
__c
Ë
	g__THROW


224  
__buûtö_°rchr
 (
__s
, 
__c
);

227 
__exã∫_Æways_ölöe
 
__c⁄°
 *

228 
°rchr
 (
__c⁄°
 *
__s
, 
__c
Ë
	g__THROW


230  
__buûtö_°rchr
 (
__s
, 
__c
);

235 *
	$°rchr
 (
__c⁄°
 *
__s
, 
__c
)

236 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

239 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


242 *
	`°ºchr
 (*
__s
, 
__c
)

243 
__THROW
 
	`__asm
 ("°ºchr"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

244 
__c⁄°
 *
	`°ºchr
 (__c⁄° *
__s
, 
__c
)

245 
__THROW
 
	`__asm
 ("°ºchr"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

247 #ifde‡
__OPTIMIZE__


248 
__exã∫_Æways_ölöe
 *

249 
	`°ºchr
 (*
__s
, 
__c
Ë
__THROW


251  
	`__buûtö_°ºchr
 (
__s
, 
__c
);

254 
__exã∫_Æways_ölöe
 
__c⁄°
 *

255 
	`°ºchr
 (
__c⁄°
 *
__s
, 
__c
Ë
__THROW


257  
	`__buûtö_°ºchr
 (
__s
, 
__c
);

260 
	}
}

262 *
	$°ºchr
 (
__c⁄°
 *
__s
, 
__c
)

263 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

265 
__END_NAMESPACE_STD


267 #ifde‡
__USE_GNU


270 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


271 "C++" *
	$°rch∫ul
 (*
__s
, 
__c
)

272 
__THROW
 
	`__asm
 ("°rch∫ul"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

273 "C++" 
__c⁄°
 *
	$°rch∫ul
 (
__c⁄°
 *
__s
, 
__c
)

274 
__THROW
 
	`__asm
 ("°rch∫ul"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

276 *
	$°rch∫ul
 (
__c⁄°
 *
__s
, 
__c
)

277 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

281 
__BEGIN_NAMESPACE_STD


284 
size_t
 
	$°rc•n
 (
__c⁄°
 *
__s
, __c⁄° *
__ªje˘
)

285 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

288 
size_t
 
	$°r•n
 (
__c⁄°
 *
__s
, __c⁄° *
__ac˚±
)

289 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

291 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


294 *
	`°Ωbrk
 (*
__s
, 
__c⁄°
 *
__ac˚±
)

295 
__THROW
 
	`__asm
 ("°Ωbrk"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

296 
__c⁄°
 *
	`°Ωbrk
 (__c⁄° *
__s
, __c⁄° *
__ac˚±
)

297 
__THROW
 
	`__asm
 ("°Ωbrk"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

299 #ifde‡
__OPTIMIZE__


300 
__exã∫_Æways_ölöe
 *

301 
	`°Ωbrk
 (*
__s
, 
__c⁄°
 *
__ac˚±
Ë
__THROW


303  
	`__buûtö_°Ωbrk
 (
__s
, 
__ac˚±
);

306 
__exã∫_Æways_ölöe
 
__c⁄°
 *

307 
	`°Ωbrk
 (
__c⁄°
 *
__s
, __c⁄° *
__ac˚±
Ë
__THROW


309  
	`__buûtö_°Ωbrk
 (
__s
, 
__ac˚±
);

312 
	}
}

314 *
	$°Ωbrk
 (
__c⁄°
 *
__s
, __c⁄° *
__ac˚±
)

315 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

318 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


321 *
	`°r°r
 (*
__hay°ack
, 
__c⁄°
 *
__√edÀ
)

322 
__THROW
 
	`__asm
 ("°r°r"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

323 
__c⁄°
 *
	`°r°r
 (__c⁄° *
__hay°ack
,

324 
__c⁄°
 *
__√edÀ
)

325 
__THROW
 
	`__asm
 ("°r°r"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

327 #ifde‡
__OPTIMIZE__


328 
__exã∫_Æways_ölöe
 *

329 
	`°r°r
 (*
__hay°ack
, 
__c⁄°
 *
__√edÀ
Ë
__THROW


331  
	`__buûtö_°r°r
 (
__hay°ack
, 
__√edÀ
);

334 
__exã∫_Æways_ölöe
 
__c⁄°
 *

335 
	`°r°r
 (
__c⁄°
 *
__hay°ack
, __c⁄° *
__√edÀ
Ë
__THROW


337  
	`__buûtö_°r°r
 (
__hay°ack
, 
__√edÀ
);

340 
	}
}

342 *
	$°r°r
 (
__c⁄°
 *
__hay°ack
, __c⁄° *
__√edÀ
)

343 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

348 *
	$°πok
 (*
__ª°ri˘
 
__s
, 
__c⁄°
 *__ª°ri˘ 
__dñim
)

349 
__THROW
 
	`__n⁄nuŒ
 ((2));

350 
__END_NAMESPACE_STD


354 *
	$__°πok_r
 (*
__ª°ri˘
 
__s
,

355 
__c⁄°
 *
__ª°ri˘
 
__dñim
,

356 **
__ª°ri˘
 
__ßve_±r
)

357 
__THROW
 
	`__n⁄nuŒ
 ((2, 3));

358 #i‡
deföed
 
__USE_POSIX
 || deföed 
__USE_MISC


359 *
	$°πok_r
 (*
__ª°ri˘
 
__s
, 
__c⁄°
 *__ª°ri˘ 
__dñim
,

360 **
__ª°ri˘
 
__ßve_±r
)

361 
__THROW
 
	`__n⁄nuŒ
 ((2, 3));

364 #ifde‡
__USE_GNU


366 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


367 "C++" *
	$°rˇ£°r
 (*
__hay°ack
, 
__c⁄°
 *
__√edÀ
)

368 
__THROW
 
	`__asm
 ("°rˇ£°r"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

369 "C++" 
__c⁄°
 *
	$°rˇ£°r
 (
__c⁄°
 *
__hay°ack
,

370 
__c⁄°
 *
__√edÀ
)

371 
__THROW
 
	`__asm
 ("°rˇ£°r"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

373 *
	$°rˇ£°r
 (
__c⁄°
 *
__hay°ack
, __c⁄° *
__√edÀ
)

374 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

378 #ifde‡
__USE_GNU


382 *
	$memmem
 (
__c⁄°
 *
__hay°ack
, 
size_t
 
__hay°ackÀn
,

383 
__c⁄°
 *
__√edÀ
, 
size_t
 
__√edÀÀn
)

384 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 3));

388 *
	$__memp˝y
 (*
__ª°ri˘
 
__de°
,

389 
__c⁄°
 *
__ª°ri˘
 
__§c
, 
size_t
 
__n
)

390 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

391 *
	$memp˝y
 (*
__ª°ri˘
 
__de°
,

392 
__c⁄°
 *
__ª°ri˘
 
__§c
, 
size_t
 
__n
)

393 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

397 
__BEGIN_NAMESPACE_STD


399 
size_t
 
	$°æí
 (
__c⁄°
 *
__s
)

400 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

401 
__END_NAMESPACE_STD


403 #ifdef 
__USE_XOPEN2K8


406 
size_t
 
	$°∫Àn
 (
__c⁄°
 *
__°rög
, 
size_t
 
__maxÀn
)

407 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

411 
__BEGIN_NAMESPACE_STD


413 *
	$°ªº‹
 (
__î∫um
Ë
__THROW
;

414 
__END_NAMESPACE_STD


415 #i‡
deföed
 
__USE_XOPEN2K
 || deföed 
__USE_MISC


423 #i‡
deföed
 
__USE_XOPEN2K
 && !deföed 
__USE_GNU


426 #ifde‡
__REDIRECT_NTH


427 
	`__REDIRECT_NTH
 (
°ªº‹_r
,

428 (
__î∫um
, *
__buf
, 
size_t
 
__buÊí
),

429 
__xpg_°ªº‹_r
Ë
	`__n⁄nuŒ
 ((2));

431 
	$__xpg_°ªº‹_r
 (
__î∫um
, *
__buf
, 
size_t
 
__buÊí
)

432 
__THROW
 
	`__n⁄nuŒ
 ((2));

433 
	#°ªº‹_r
 
__xpg_°ªº‹_r


	)

438 *
	$°ªº‹_r
 (
__î∫um
, *
__buf
, 
size_t
 
__buÊí
)

439 
__THROW
 
	`__n⁄nuŒ
 ((2));

443 #ifde‡
__USE_XOPEN2K8


445 *
	$°ªº‹_l
 (
__î∫um
, 
__loˇÀ_t
 
__l
Ë
__THROW
;

451 
	$__bzîo
 (*
__s
, 
size_t
 
__n
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

453 #ifde‡
__USE_BSD


455 
	$bc›y
 (
__c⁄°
 *
__§c
, *
__de°
, 
size_t
 
__n
)

456 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

459 
	$bzîo
 (*
__s
, 
size_t
 
__n
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

462 
	$bcmp
 (
__c⁄°
 *
__s1
, __c⁄° *
__s2
, 
size_t
 
__n
)

463 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

466 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


469 *
	`ödex
 (*
__s
, 
__c
)

470 
__THROW
 
	`__asm
 ("ödex"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

471 
__c⁄°
 *
	`ödex
 (__c⁄° *
__s
, 
__c
)

472 
__THROW
 
	`__asm
 ("ödex"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

474 #i‡
deföed
 
__OPTIMIZE__
 && !deföed 
__CORRECT_ISO_CPP_STRINGS_H_PROTO


475 
__exã∫_Æways_ölöe
 *

476 
	`ödex
 (*
__s
, 
__c
Ë
__THROW


478  
	`__buûtö_ödex
 (
__s
, 
__c
);

481 
__exã∫_Æways_ölöe
 
__c⁄°
 *

482 
	`ödex
 (
__c⁄°
 *
__s
, 
__c
Ë
__THROW


484  
	`__buûtö_ödex
 (
__s
, 
__c
);

487 
	}
}

489 *
	$ödex
 (
__c⁄°
 *
__s
, 
__c
)

490 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

494 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


497 *
	`rödex
 (*
__s
, 
__c
)

498 
__THROW
 
	`__asm
 ("rödex"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

499 
__c⁄°
 *
	`rödex
 (__c⁄° *
__s
, 
__c
)

500 
__THROW
 
	`__asm
 ("rödex"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

502 #i‡
deföed
 
__OPTIMIZE__
 && !deföed 
__CORRECT_ISO_CPP_STRINGS_H_PROTO


503 
__exã∫_Æways_ölöe
 *

504 
	`rödex
 (*
__s
, 
__c
Ë
__THROW


506  
	`__buûtö_rödex
 (
__s
, 
__c
);

509 
__exã∫_Æways_ölöe
 
__c⁄°
 *

510 
	`rödex
 (
__c⁄°
 *
__s
, 
__c
Ë
__THROW


512  
	`__buûtö_rödex
 (
__s
, 
__c
);

515 
	}
}

517 *
	$rödex
 (
__c⁄°
 *
__s
, 
__c
)

518 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

523 
	$ffs
 (
__i
Ë
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

527 #ifdef 
__USE_GNU


528 
	$ff¶
 (
__l
Ë
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

529 #ifde‡
__GNUC__


530 
__exãnsi⁄__
 
	$ff¶l
 (
__Œ
)

531 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

536 
	$°rˇ£cmp
 (
__c⁄°
 *
__s1
, __c⁄° *
__s2
)

537 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

540 
	$°∫ˇ£cmp
 (
__c⁄°
 *
__s1
, __c⁄° *
__s2
, 
size_t
 
__n
)

541 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

544 #ifdef 
__USE_GNU


547 
	$°rˇ£cmp_l
 (
__c⁄°
 *
__s1
, __c⁄° *
__s2
,

548 
__loˇÀ_t
 
__loc
)

549 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2, 3));

551 
	$°∫ˇ£cmp_l
 (
__c⁄°
 *
__s1
, __c⁄° *
__s2
,

552 
size_t
 
__n
, 
__loˇÀ_t
 
__loc
)

553 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2, 4));

556 #ifdef 
__USE_BSD


559 *
	$°r£p
 (**
__ª°ri˘
 
__°rögp
,

560 
__c⁄°
 *
__ª°ri˘
 
__dñim
)

561 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

564 #ifdef 
__USE_XOPEN2K8


566 *
	$°rsig«l
 (
__sig
Ë
__THROW
;

569 *
	$__°p˝y
 (*
__ª°ri˘
 
__de°
, 
__c⁄°
 *__ª°ri˘ 
__§c
)

570 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

571 *
	$°p˝y
 (*
__ª°ri˘
 
__de°
, 
__c⁄°
 *__ª°ri˘ 
__§c
)

572 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

576 *
	$__°≤˝y
 (*
__ª°ri˘
 
__de°
,

577 
__c⁄°
 *
__ª°ri˘
 
__§c
, 
size_t
 
__n
)

578 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

579 *
	$°≤˝y
 (*
__ª°ri˘
 
__de°
,

580 
__c⁄°
 *
__ª°ri˘
 
__§c
, 
size_t
 
__n
)

581 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

584 #ifdef 
__USE_GNU


586 
	$°rvîscmp
 (
__c⁄°
 *
__s1
, __c⁄° *
__s2
)

587 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

590 *
	$°r‰y
 (*
__°rög
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

593 *
	$mem‰ob
 (*
__s
, 
size_t
 
__n
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

595 #i‚de‡
ba£«me


600 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


601 "C++" *
	$ba£«me
 (*
__fûíame
)

602 
__THROW
 
	`__asm
 ("ba£«me"Ë
	`__n⁄nuŒ
 ((1));

603 "C++" 
__c⁄°
 *
	$ba£«me
 (
__c⁄°
 *
__fûíame
)

604 
__THROW
 
	`__asm
 ("ba£«me"Ë
	`__n⁄nuŒ
 ((1));

606 *
	$ba£«me
 (
__c⁄°
 *
__fûíame
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

612 #i‡
deföed
 
__GNUC__
 && __GNUC__ >= 2

613 #i‡
deföed
 
__OPTIMIZE__
 && !deföed 
__OPTIMIZE_SIZE__
 \

614 && !
deföed
 
__NO_INLINE__
 && !deföed 
__˝lu•lus


634 
	~<bôs/°rög.h
>

637 
	~<bôs/°rög2.h
>

640 #i‡
__USE_FORTIFY_LEVEL
 > 0 && 
deföed
 
__exã∫_Æways_ölöe


642 
	~<bôs/°rög3.h
>

646 
__END_DECLS


	@/usr/include/alloca.h

19 #i‚def 
_ALLOCA_H


20 
	#_ALLOCA_H
 1

	)

22 
	~<„©uªs.h
>

24 
	#__√ed_size_t


	)

25 
	~<°ddef.h
>

27 
	g__BEGIN_DECLS


30 #unde‡
Æloˇ


33 *
	$Æloˇ
 (
size_t
 
__size
Ë
__THROW
;

35 #ifdef 
__GNUC__


36 
	#Æloˇ
(
size
Ë
	`__buûtö_Æloˇ
 (size)

	)

39 
__END_DECLS


	@/usr/include/features.h

20 #i‚def 
_FEATURES_H


21 
	#_FEATURES_H
 1

	)

98 #unde‡
__USE_ISOC99


99 #unde‡
__USE_ISOC95


100 #unde‡
__USE_POSIX


101 #unde‡
__USE_POSIX2


102 #unde‡
__USE_POSIX199309


103 #unde‡
__USE_POSIX199506


104 #unde‡
__USE_XOPEN


105 #unde‡
__USE_XOPEN_EXTENDED


106 #unde‡
__USE_UNIX98


107 #unde‡
__USE_XOPEN2K


108 #unde‡
__USE_XOPEN2KXSI


109 #unde‡
__USE_XOPEN2K8


110 #unde‡
__USE_XOPEN2K8XSI


111 #unde‡
__USE_LARGEFILE


112 #unde‡
__USE_LARGEFILE64


113 #unde‡
__USE_FILE_OFFSET64


114 #unde‡
__USE_BSD


115 #unde‡
__USE_SVID


116 #unde‡
__USE_MISC


117 #unde‡
__USE_ATFILE


118 #unde‡
__USE_GNU


119 #unde‡
__USE_REENTRANT


120 #unde‡
__USE_FORTIFY_LEVEL


121 #unde‡
__FAVOR_BSD


122 #unde‡
__KERNEL_STRICT_NAMES


126 #i‚de‡
_LOOSE_KERNEL_NAMES


127 
	#__KERNEL_STRICT_NAMES


	)

131 
	#__USE_ANSI
 1

	)

140 #i‡
deföed
 
__GNUC__
 && deföed 
__GNUC_MINOR__


141 
	#__GNUC_PREREQ
(
maj
, 
mö
) \

142 ((
__GNUC__
 << 16Ë+ 
__GNUC_MINOR__
 >((
maj
Ë<< 16Ë+ (
mö
))

	)

144 
	#__GNUC_PREREQ
(
maj
, 
mö
Ë0

	)

149 #i‡
deföed
 
_BSD_SOURCE
 && \

150 !(
deföed
 
	g_POSIX_SOURCE
 || deföed 
	g_POSIX_C_SOURCE
 || \

151 
deföed
 
	g_XOPEN_SOURCE
 || deföed 
	g_GNU_SOURCE
 || deföed 
	g_SVID_SOURCE
)

152 
	#__FAVOR_BSD
 1

	)

156 #ifde‡
_GNU_SOURCE


157 #unde‡
_ISOC95_SOURCE


158 
	#_ISOC95_SOURCE
 1

	)

159 #unde‡
_ISOC99_SOURCE


160 
	#_ISOC99_SOURCE
 1

	)

161 #unde‡
_POSIX_SOURCE


162 
	#_POSIX_SOURCE
 1

	)

163 #unde‡
_POSIX_C_SOURCE


164 
	#_POSIX_C_SOURCE
 200809L

	)

165 #unde‡
_XOPEN_SOURCE


166 
	#_XOPEN_SOURCE
 700

	)

167 #unde‡
_XOPEN_SOURCE_EXTENDED


168 
	#_XOPEN_SOURCE_EXTENDED
 1

	)

169 #unde‡
_LARGEFILE64_SOURCE


170 
	#_LARGEFILE64_SOURCE
 1

	)

171 #unde‡
_BSD_SOURCE


172 
	#_BSD_SOURCE
 1

	)

173 #unde‡
_SVID_SOURCE


174 
	#_SVID_SOURCE
 1

	)

175 #unde‡
_ATFILE_SOURCE


176 
	#_ATFILE_SOURCE
 1

	)

181 #i‡(!
deföed
 
__STRICT_ANSI__
 && !deföed 
_ISOC99_SOURCE
 && \

182 !
deföed
 
	g_POSIX_SOURCE
 && !deföed 
	g_POSIX_C_SOURCE
 && \

183 !
deföed
 
	g_XOPEN_SOURCE
 && !deföed 
	g_BSD_SOURCE
 && !deföed 
	g_SVID_SOURCE
)

184 
	#_BSD_SOURCE
 1

	)

185 
	#_SVID_SOURCE
 1

	)

192 #i‡(
deföed
 
_ISOC99_SOURCE
 || deföed 
_ISOC9X_SOURCE
 \

193 || (
deföed
 
	g__STDC_VERSION__
 && __STDC_VERSION__ >= 199901L))

194 
	#__USE_ISOC99
 1

	)

198 #i‡(
deföed
 
_ISOC99_SOURCE
 || deföed 
_ISOC9X_SOURCE
 \

199 || (
deföed
 
__STDC_VERSION__
 && __STDC_VERSION__ >= 199409L))

200 
	#__USE_ISOC95
 1

	)

205 #i‡((!
deföed
 
__STRICT_ANSI__
 || (
_XOPEN_SOURCE
 - 0) >= 500) && \

206 !
deföed
 
_POSIX_SOURCE
 && !deföed 
_POSIX_C_SOURCE
)

207 
	#_POSIX_SOURCE
 1

	)

208 #i‡
deföed
 
_XOPEN_SOURCE
 && (_XOPEN_SOURCE - 0) < 500

209 
	#_POSIX_C_SOURCE
 2

	)

210 #ñi‡
deföed
 
_XOPEN_SOURCE
 && (_XOPEN_SOURCE - 0) < 600

211 
	#_POSIX_C_SOURCE
 199506L

	)

212 #ñi‡
deföed
 
_XOPEN_SOURCE
 && (_XOPEN_SOURCE - 0) < 700

213 
	#_POSIX_C_SOURCE
 200112L

	)

215 
	#_POSIX_C_SOURCE
 200809L

	)

217 
	#__USE_POSIX_IMPLICITLY
 1

	)

220 #i‡
deföed
 
_POSIX_SOURCE
 || 
_POSIX_C_SOURCE
 >1 || deföed 
_XOPEN_SOURCE


221 
	#__USE_POSIX
 1

	)

224 #i‡
deföed
 
_POSIX_C_SOURCE
 && _POSIX_C_SOURCE >2 || deföed 
_XOPEN_SOURCE


225 
	#__USE_POSIX2
 1

	)

228 #i‡(
_POSIX_C_SOURCE
 - 0) >= 199309L

229 
	#__USE_POSIX199309
 1

	)

232 #i‡(
_POSIX_C_SOURCE
 - 0) >= 199506L

233 
	#__USE_POSIX199506
 1

	)

236 #i‡(
_POSIX_C_SOURCE
 - 0) >= 200112L

237 
	#__USE_XOPEN2K
 1

	)

238 #unde‡
__USE_ISOC95


239 
	#__USE_ISOC95
 1

	)

240 #unde‡
__USE_ISOC99


241 
	#__USE_ISOC99
 1

	)

244 #i‡(
_POSIX_C_SOURCE
 - 0) >= 200809L

245 
	#__USE_XOPEN2K8
 1

	)

246 #unde‡
_ATFILE_SOURCE


247 
	#_ATFILE_SOURCE
 1

	)

250 #ifdef 
_XOPEN_SOURCE


251 
	#__USE_XOPEN
 1

	)

252 #i‡(
_XOPEN_SOURCE
 - 0) >= 500

253 
	#__USE_XOPEN_EXTENDED
 1

	)

254 
	#__USE_UNIX98
 1

	)

255 #unde‡
_LARGEFILE_SOURCE


256 
	#_LARGEFILE_SOURCE
 1

	)

257 #i‡(
_XOPEN_SOURCE
 - 0) >= 600

258 #i‡(
_XOPEN_SOURCE
 - 0) >= 700

259 
	#__USE_XOPEN2K8
 1

	)

260 
	#__USE_XOPEN2K8XSI
 1

	)

262 
	#__USE_XOPEN2K
 1

	)

263 
	#__USE_XOPEN2KXSI
 1

	)

264 #unde‡
__USE_ISOC95


265 
	#__USE_ISOC95
 1

	)

266 #unde‡
__USE_ISOC99


267 
	#__USE_ISOC99
 1

	)

270 #ifde‡
_XOPEN_SOURCE_EXTENDED


271 
	#__USE_XOPEN_EXTENDED
 1

	)

276 #ifde‡
_LARGEFILE_SOURCE


277 
	#__USE_LARGEFILE
 1

	)

280 #ifde‡
_LARGEFILE64_SOURCE


281 
	#__USE_LARGEFILE64
 1

	)

284 #i‡
deföed
 
_FILE_OFFSET_BITS
 && _FILE_OFFSET_BITS == 64

285 
	#__USE_FILE_OFFSET64
 1

	)

288 #i‡
deföed
 
_BSD_SOURCE
 || deföed 
_SVID_SOURCE


289 
	#__USE_MISC
 1

	)

292 #ifdef 
_BSD_SOURCE


293 
	#__USE_BSD
 1

	)

296 #ifdef 
_SVID_SOURCE


297 
	#__USE_SVID
 1

	)

300 #ifdef 
_ATFILE_SOURCE


301 
	#__USE_ATFILE
 1

	)

304 #ifdef 
_GNU_SOURCE


305 
	#__USE_GNU
 1

	)

308 #i‡
deföed
 
_REENTRANT
 || deföed 
_THREAD_SAFE


309 
	#__USE_REENTRANT
 1

	)

312 #i‡
deföed
 
_FORTIFY_SOURCE
 && _FORTIFY_SOURCE > 0 \

313 && 
__GNUC_PREREQ
 (4, 1Ë&& 
deföed
 
	g__OPTIMIZE__
 && __OPTIMIZE__ > 0

314 #i‡
_FORTIFY_SOURCE
 > 1

315 
	#__USE_FORTIFY_LEVEL
 2

	)

317 
	#__USE_FORTIFY_LEVEL
 1

	)

320 
	#__USE_FORTIFY_LEVEL
 0

	)

324 
	~<bôs/¥edefs.h
>

327 
	#__STDC_ISO_10646__
 200009L

	)

335 #unde‡
__GNU_LIBRARY__


336 
	#__GNU_LIBRARY__
 6

	)

340 
	#__GLIBC__
 2

	)

341 
	#__GLIBC_MINOR__
 15

	)

343 
	#__GLIBC_PREREQ
(
maj
, 
mö
) \

344 ((
__GLIBC__
 << 16Ë+ 
__GLIBC_MINOR__
 >((
maj
Ë<< 16Ë+ (
mö
))

	)

347 #i‡
deföed
 
__GNUC__
 \

348 || (
deföed
 
	g__PGI
 && deföed 
	g__i386__
 ) \

349 || (
deföed
 
	g__INTEL_COMPILER
 && (deföed 
	g__i386__
 || deföed 
	g__ü64__
)) \

350 || (
deföed
 
	g__STDC_VERSION__
 && __STDC_VERSION__ >= 199901L)

351 
	#__GLIBC_HAVE_LONG_LONG
 1

	)

355 #i‚de‡
__ASSEMBLER__


356 #i‚de‡
_SYS_CDEFS_H


357 
	~<sys/cdefs.h
>

362 #i‡
deföed
 
__USE_FILE_OFFSET64
 && !deföed 
__REDIRECT


363 
	#__USE_LARGEFILE
 1

	)

364 
	#__USE_LARGEFILE64
 1

	)

370 #i‡
__GNUC_PREREQ
 (2, 7Ë&& 
deföed
 
__OPTIMIZE__
 \

371 && !
deföed
 
	g__OPTIMIZE_SIZE__
 && !deföed 
	g__NO_INLINE__
 \

372 && 
deföed
 
	g__exã∫_ölöe


373 
	#__USE_EXTERN_INLINES
 1

	)

378 #i‡
__GNUC_PREREQ
 (2, 7Ë&& 
deföed
 
__OPTIMIZE__
 \

379 && (
deföed
 
	g_LIBC
 || !deföed 
	g__OPTIMIZE_SIZE__
Ë&& !deföed 
	g__NO_INLINE__
 \

380 && 
deföed
 
	g__exã∫_ölöe


381 
	#__USE_EXTERN_INLINES_IN_LIBC
 1

	)

389 
	~<gnu/°ubs.h
>

	@/usr/include/getopt.h

21 #i‚de‡
_GETOPT_H


23 #i‚de‡
__√ed_gë›t


24 
	#_GETOPT_H
 1

	)

34 #i‡!
deföed
 
__GNU_LIBRARY__


35 
	~<˘y≥.h
>

38 #i‚de‡
__THROW


39 #i‚de‡
__GNUC_PREREQ


40 
	#__GNUC_PREREQ
(
maj
, 
mö
Ë(0)

	)

42 #i‡
deföed
 
__˝lu•lus
 && 
__GNUC_PREREQ
 (2,8)

43 
	#__THROW
 
	`throw
 ()

	)

45 
	#__THROW


	)

49 #ifdef 
__˝lu•lus


59 *
›èrg
;

73 
›töd
;

78 
›ãº
;

82 
›t›t
;

84 #i‚de‡
__√ed_gë›t


106 
	s›ti⁄


108 c⁄° *
	g«me
;

111 
	ghas_¨g
;

112 *
	gÊag
;

113 
	gvÆ
;

118 
	#no_¨gumít
 0

	)

119 
	#ªquúed_¨gumít
 1

	)

120 
	#›ti⁄Æ_¨gumít
 2

	)

148 #ifde‡
__GNU_LIBRARY__


152 
gë›t
 (
___¨gc
, *c⁄° *
___¨gv
, c⁄° *
__sh‹t›ts
)

153 
__THROW
;

155 #i‡
deföed
 
__√ed_gë›t
 && deföed 
__USE_POSIX2
 \

156 && !
deföed
 
	g__USE_POSIX_IMPLICITLY
 && !deföed 
	g__USE_GNU


160 #ifde‡
__REDIRECT


161 
__REDIRECT_NTH
 (
gë›t
, (
___¨gc
, *c⁄° *
___¨gv
,

162 c⁄° *
__sh‹t›ts
),

163 
__posix_gë›t
);

165 
__posix_gë›t
 (
___¨gc
, *c⁄° *
___¨gv
,

166 c⁄° *
__sh‹t›ts
Ë
__THROW
;

167 
	#gë›t
 
__posix_gë›t


	)

171 
gë›t
 ();

174 #i‚de‡
__√ed_gë›t


175 
gë›t_l⁄g
 (
___¨gc
, *c⁄° *
___¨gv
,

176 c⁄° *
__sh‹t›ts
,

177 c⁄° 
›ti⁄
 *
__l⁄g›ts
, *
__l⁄göd
)

178 
__THROW
;

179 
gë›t_l⁄g_⁄ly
 (
___¨gc
, *c⁄° *
___¨gv
,

180 c⁄° *
__sh‹t›ts
,

181 c⁄° 
›ti⁄
 *
__l⁄g›ts
, *
__l⁄göd
)

182 
__THROW
;

186 #ifdef 
__˝lu•lus


191 #unde‡
__√ed_gë›t


	@/usr/include/libio.h

29 #i‚de‡
_IO_STDIO_H


30 
	#_IO_STDIO_H


	)

32 
	~<_G_c⁄fig.h
>

34 
	#_IO_pos_t
 
_G_Âos_t


	)

35 
	#_IO_Âos_t
 
_G_Âos_t


	)

36 
	#_IO_Âos64_t
 
_G_Âos64_t


	)

37 
	#_IO_size_t
 
_G_size_t


	)

38 
	#_IO_ssize_t
 
_G_ssize_t


	)

39 
	#_IO_off_t
 
_G_off_t


	)

40 
	#_IO_off64_t
 
_G_off64_t


	)

41 
	#_IO_pid_t
 
_G_pid_t


	)

42 
	#_IO_uid_t
 
_G_uid_t


	)

43 
	#_IO_ic⁄v_t
 
_G_ic⁄v_t


	)

44 
	#_IO_HAVE_SYS_WAIT
 
_G_HAVE_SYS_WAIT


	)

45 
	#_IO_HAVE_ST_BLKSIZE
 
_G_HAVE_ST_BLKSIZE


	)

46 
	#_IO_BUFSIZ
 
_G_BUFSIZ


	)

47 
	#_IO_va_li°
 
_G_va_li°


	)

48 
	#_IO_wöt_t
 
_G_wöt_t


	)

50 #ifde‡
_G_NEED_STDARG_H


52 
	#__√ed___va_li°


	)

53 
	~<°d¨g.h
>

54 #ifde‡
__GNUC_VA_LIST


55 #unde‡
_IO_va_li°


56 
	#_IO_va_li°
 
__gnuc_va_li°


	)

60 #i‚de‡
__P


61 #i‡
_G_HAVE_SYS_CDEFS


62 
	~<sys/cdefs.h
>

64 #ifde‡
__STDC__


65 
	#__P
(
p
Ë
	)
p

66 
	#__PMT
(
p
Ë
	)
p

68 
	#__P
(
p
Ë()

	)

69 
	#__PMT
(
p
Ë()

	)

75 #i‚de‡
_PARAMS


76 
	#_PARAMS
(
¥Ÿos
Ë
	`__P
’rŸos)

	)

79 #i‚de‡
__STDC__


81 c⁄°

	)

84 
	#_IO_UNIFIED_JUMPTABLES
 1

	)

85 #i‚de‡
_G_HAVE_PRINTF_FP


86 
	#_IO_USE_DTOA
 1

	)

89 #i‚de‡
EOF


90 
	#EOF
 (-1)

	)

92 #i‚de‡
NULL


93 #i‡
deföed
 
__GNUG__
 && \

94 (
	g__GNUC__
 > 2 || (__GNUC__ =2 && 
__GNUC_MINOR__
 >= 8))

95 
	#NULL
 (
__nuŒ
)

	)

97 #i‡!
deföed
(
__˝lu•lus
)

98 
	#NULL
 ((*)0)

	)

100 
	#NULL
 (0)

	)

105 
	#_IOS_INPUT
 1

	)

106 
	#_IOS_OUTPUT
 2

	)

107 
	#_IOS_ATEND
 4

	)

108 
	#_IOS_APPEND
 8

	)

109 
	#_IOS_TRUNC
 16

	)

110 
	#_IOS_NOCREATE
 32

	)

111 
	#_IOS_NOREPLACE
 64

	)

112 
	#_IOS_BIN
 128

	)

120 
	#_IO_MAGIC
 0xFBAD0000

	)

121 
	#_OLD_STDIO_MAGIC
 0xFABC0000

	)

122 
	#_IO_MAGIC_MASK
 0xFFFF0000

	)

123 
	#_IO_USER_BUF
 1

	)

124 
	#_IO_UNBUFFERED
 2

	)

125 
	#_IO_NO_READS
 4

	)

126 
	#_IO_NO_WRITES
 8

	)

127 
	#_IO_EOF_SEEN
 0x10

	)

128 
	#_IO_ERR_SEEN
 0x20

	)

129 
	#_IO_DELETE_DONT_CLOSE
 0x40

	)

130 
	#_IO_LINKED
 0x80

	)

131 
	#_IO_IN_BACKUP
 0x100

	)

132 
	#_IO_LINE_BUF
 0x200

	)

133 
	#_IO_TIED_PUT_GET
 0x400

	)

134 
	#_IO_CURRENTLY_PUTTING
 0x800

	)

135 
	#_IO_IS_APPENDING
 0x1000

	)

136 
	#_IO_IS_FILEBUF
 0x2000

	)

137 
	#_IO_BAD_SEEN
 0x4000

	)

138 
	#_IO_USER_LOCK
 0x8000

	)

140 
	#_IO_FLAGS2_MMAP
 1

	)

141 
	#_IO_FLAGS2_NOTCANCEL
 2

	)

142 #ifde‡
_LIBC


143 
	#_IO_FLAGS2_FORTIFY
 4

	)

145 
	#_IO_FLAGS2_USER_WBUF
 8

	)

146 #ifde‡
_LIBC


147 
	#_IO_FLAGS2_SCANF_STD
 16

	)

148 
	#_IO_FLAGS2_NOCLOSE
 32

	)

149 
	#_IO_FLAGS2_CLOEXEC
 64

	)

153 
	#_IO_SKIPWS
 01

	)

154 
	#_IO_LEFT
 02

	)

155 
	#_IO_RIGHT
 04

	)

156 
	#_IO_INTERNAL
 010

	)

157 
	#_IO_DEC
 020

	)

158 
	#_IO_OCT
 040

	)

159 
	#_IO_HEX
 0100

	)

160 
	#_IO_SHOWBASE
 0200

	)

161 
	#_IO_SHOWPOINT
 0400

	)

162 
	#_IO_UPPERCASE
 01000

	)

163 
	#_IO_SHOWPOS
 02000

	)

164 
	#_IO_SCIENTIFIC
 04000

	)

165 
	#_IO_FIXED
 010000

	)

166 
	#_IO_UNITBUF
 020000

	)

167 
	#_IO_STDIO
 040000

	)

168 
	#_IO_DONT_CLOSE
 0100000

	)

169 
	#_IO_BOOLALPHA
 0200000

	)

172 
_IO_jump_t
; 
	g_IO_FILE
;

175 #ifde‡
_IO_MTSAFE_IO


176 #i‡
deföed
 
__GLIBC__
 && __GLIBC__ >= 2

177 
	~<bôs/°dio-lock.h
>

182 
	t_IO_lock_t
;

188 
	s_IO_m¨kî
 {

189 
_IO_m¨kî
 *
	m_√xt
;

190 
_IO_FILE
 *
	m_sbuf
;

194 
	m_pos
;

196 
£t_°ªampos
(
°ªampos
 
•
Ë{ 
	m_•os
 = sp; }

197 
£t_off£t
(
off£t
Ë{ 
	m_pos
 = off£t; 
	m_•os
 = (
°ªampos
)(-2); }

198 
	mpublic
:

199 
°ªamm¨kî
(
°ªambuf
 *
sb
);

200 ~
°ªamm¨kî
();

201 
ßvög
(Ë{  
	m_•os
 == -2; }

202 
dñè
(
°ªamm¨kî
&);

203 
dñè
();

208 
	e__codecvt_ªsu…


210 
	m__codecvt_ok
,

211 
	m__codecvt_∑πül
,

212 
	m__codecvt_îr‹
,

213 
	m__codecvt_noc⁄v


216 #i‡
deföed
 
_LIBC
 || deföed 
_GLIBCPP_USE_WCHAR_T


219 
	s_IO_codecvt


221 (*
	m__codecvt_de°r
Ë(
	m_IO_codecvt
 *);

222 
__codecvt_ªsu…
 (*
__codecvt_do_out
Ë(
	m_IO_codecvt
 *,

223 
	m__mb°©e_t
 *,

224 c⁄° 
	mwch¨_t
 *,

225 c⁄° 
	mwch¨_t
 *,

226 c⁄° 
	mwch¨_t
 **, *,

228 
__codecvt_ªsu…
 (*
__codecvt_do_unshi·
Ë(
	m_IO_codecvt
 *,

229 
	m__mb°©e_t
 *, *,

231 
__codecvt_ªsu…
 (*
__codecvt_do_ö
Ë(
	m_IO_codecvt
 *,

232 
	m__mb°©e_t
 *,

234 c⁄° **, 
	mwch¨_t
 *,

235 
	mwch¨_t
 *, wchar_t **);

236 (*
	m__codecvt_do_ícodög
Ë(
	m_IO_codecvt
 *);

237 (*
	m__codecvt_do_Æways_noc⁄v
Ë(
	m_IO_codecvt
 *);

238 (*
	m__codecvt_do_Àngth
Ë(
	m_IO_codecvt
 *, 
	m__mb°©e_t
 *,

239 c⁄° *, c⁄° *, 
	m_IO_size_t
);

240 (*
	m__codecvt_do_max_Àngth
Ë(
	m_IO_codecvt
 *);

242 
_IO_ic⁄v_t
 
	m__cd_ö
;

243 
_IO_ic⁄v_t
 
	m__cd_out
;

247 
	s_IO_wide_d©a


249 
wch¨_t
 *
	m_IO_ªad_±r
;

250 
wch¨_t
 *
	m_IO_ªad_íd
;

251 
wch¨_t
 *
	m_IO_ªad_ba£
;

252 
wch¨_t
 *
	m_IO_wrôe_ba£
;

253 
wch¨_t
 *
	m_IO_wrôe_±r
;

254 
wch¨_t
 *
	m_IO_wrôe_íd
;

255 
wch¨_t
 *
	m_IO_buf_ba£
;

256 
wch¨_t
 *
	m_IO_buf_íd
;

258 
wch¨_t
 *
	m_IO_ßve_ba£
;

259 
wch¨_t
 *
	m_IO_backup_ba£
;

261 
wch¨_t
 *
	m_IO_ßve_íd
;

263 
__mb°©e_t
 
	m_IO_°©e
;

264 
__mb°©e_t
 
	m_IO_œ°_°©e
;

265 
_IO_codecvt
 
	m_codecvt
;

267 
wch¨_t
 
	m_sh‹tbuf
[1];

269 c⁄° 
_IO_jump_t
 *
	m_wide_vèbÀ
;

273 
	s_IO_FILE
 {

274 
	m_Êags
;

275 
	#_IO_fûe_Êags
 
_Êags


	)

279 * 
	m_IO_ªad_±r
;

280 * 
	m_IO_ªad_íd
;

281 * 
	m_IO_ªad_ba£
;

282 * 
	m_IO_wrôe_ba£
;

283 * 
	m_IO_wrôe_±r
;

284 * 
	m_IO_wrôe_íd
;

285 * 
	m_IO_buf_ba£
;

286 * 
	m_IO_buf_íd
;

288 *
	m_IO_ßve_ba£
;

289 *
	m_IO_backup_ba£
;

290 *
	m_IO_ßve_íd
;

292 
_IO_m¨kî
 *
	m_m¨kîs
;

294 
_IO_FILE
 *
	m_chaö
;

296 
	m_fûío
;

298 
	m_blksize
;

300 
	m_Êags2
;

302 
_IO_off_t
 
	m_ﬁd_off£t
;

304 
	#__HAVE_COLUMN


	)

306 
	m_cur_cﬁumn
;

307 sig√d 
	m_vèbÀ_off£t
;

308 
	m_sh‹tbuf
[1];

312 
_IO_lock_t
 *
	m_lock
;

313 #ifde‡
_IO_USE_OLD_IO_FILE


316 
	s_IO_FILE_com∂ëe


318 
_IO_FILE
 
	m_fûe
;

320 #i‡
deföed
 
_G_IO_IO_FILE_VERSION
 && _G_IO_IO_FILE_VERSION == 0x20001

321 
_IO_off64_t
 
	m_off£t
;

322 #i‡
deföed
 
_LIBC
 || deföed 
_GLIBCPP_USE_WCHAR_T


324 
_IO_codecvt
 *
	m_codecvt
;

325 
_IO_wide_d©a
 *
	m_wide_d©a
;

326 
_IO_FILE
 *
	m_‰ìªs_li°
;

327 *
	m_‰ìªs_buf
;

328 
size_t
 
	m_‰ìªs_size
;

330 *
	m__∑d1
;

331 *
	m__∑d2
;

332 *
	m__∑d3
;

333 *
	m__∑d4
;

334 
size_t
 
	m__∑d5
;

336 
	m_mode
;

338 
	m_unu£d2
[15 *  (Ë- 4 *  (*Ë-  (
size_t
)];

342 #i‚de‡
__˝lu•lus


343 
_IO_FILE
 
	t_IO_FILE
;

346 
	g_IO_FILE_∂us
;

348 
_IO_FILE_∂us
 
_IO_2_1_°dö_
;

349 
_IO_FILE_∂us
 
_IO_2_1_°dout_
;

350 
_IO_FILE_∂us
 
_IO_2_1_°dîr_
;

351 #i‚de‡
_LIBC


352 
	#_IO_°dö
 ((
_IO_FILE
*)(&
_IO_2_1_°dö_
))

	)

353 
	#_IO_°dout
 ((
_IO_FILE
*)(&
_IO_2_1_°dout_
))

	)

354 
	#_IO_°dîr
 ((
_IO_FILE
*)(&
_IO_2_1_°dîr_
))

	)

356 
_IO_FILE
 *
_IO_°dö
 
©åibuã_hiddí
;

357 
_IO_FILE
 *
_IO_°dout
 
©åibuã_hiddí
;

358 
_IO_FILE
 *
_IO_°dîr
 
©åibuã_hiddí
;

366 
__ssize_t
 
	t__io_ªad_‚
 (*
	t__cookõ
, *
	t__buf
, 
	tsize_t
 
	t__nbyãs
);

374 
__ssize_t
 
	t__io_wrôe_‚
 (*
	t__cookõ
, 
	t__c⁄°
 *
	t__buf
,

375 
	tsize_t
 
	t__n
);

383 
	t__io_£ek_‚
 (*
	t__cookõ
, 
	t_IO_off64_t
 *
	t__pos
, 
	t__w
);

386 
	t__io_˛o£_‚
 (*
	t__cookõ
);

389 #ifde‡
_GNU_SOURCE


391 
__io_ªad_‚
 
	tcookõ_ªad_fun˘i⁄_t
;

392 
__io_wrôe_‚
 
	tcookõ_wrôe_fun˘i⁄_t
;

393 
__io_£ek_‚
 
	tcookõ_£ek_fun˘i⁄_t
;

394 
__io_˛o£_‚
 
	tcookõ_˛o£_fun˘i⁄_t
;

399 
__io_ªad_‚
 *
	mªad
;

400 
__io_wrôe_‚
 *
	mwrôe
;

401 
__io_£ek_‚
 *
	m£ek
;

402 
__io_˛o£_‚
 *
	m˛o£
;

403 } 
	t_IO_cookõ_io_fun˘i⁄s_t
;

404 
_IO_cookõ_io_fun˘i⁄s_t
 
	tcookõ_io_fun˘i⁄s_t
;

406 
	g_IO_cookõ_fûe
;

409 
_IO_cookõ_öô
 (
_IO_cookõ_fûe
 *
__cfûe
, 
__ªad_wrôe
,

410 *
__cookõ
, 
_IO_cookõ_io_fun˘i⁄s_t
 
__‚s
);

414 #ifde‡
__˝lu•lus


418 
__undîÊow
 (
_IO_FILE
 *);

419 
__uÊow
 (
_IO_FILE
 *);

420 
__ovîÊow
 (
_IO_FILE
 *, );

421 #i‡
deföed
 
_LIBC
 || deföed 
_GLIBCPP_USE_WCHAR_T


422 
_IO_wöt_t
 
__wundîÊow
 (
_IO_FILE
 *);

423 
_IO_wöt_t
 
__wuÊow
 (
_IO_FILE
 *);

424 
_IO_wöt_t
 
__wovîÊow
 (
_IO_FILE
 *, _IO_wint_t);

427 #i‡ 
__GNUC__
 >= 3

428 
	#_IO_BE
(
ex¥
, 
ªs
Ë
	`__buûtö_ex≥˘
 (”x¥),Ñes)

	)

430 
	#_IO_BE
(
ex¥
, 
ªs
Ë”x¥)

	)

433 
	#_IO_gëc_u∆ocked
(
_Â
) \

434 (
	`_IO_BE
 ((
_Â
)->
_IO_ªad_±r
 >(_Â)->
_IO_ªad_íd
, 0) \

435 ? 
	`__uÊow
 (
_Â
Ë: *(*Ë(_Â)->
_IO_ªad_±r
++)

	)

436 
	#_IO_≥ekc_u∆ocked
(
_Â
) \

437 (
	`_IO_BE
 ((
_Â
)->
_IO_ªad_±r
 >(_Â)->
_IO_ªad_íd
, 0) \

438 && 
	`__undîÊow
 (
_Â
Ë=
EOF
 ? EOF \

439 : *(*Ë(
_Â
)->
_IO_ªad_±r
)

	)

440 
	#_IO_putc_u∆ocked
(
_ch
, 
_Â
) \

441 (
	`_IO_BE
 ((
_Â
)->
_IO_wrôe_±r
 >(_Â)->
_IO_wrôe_íd
, 0) \

442 ? 
	`__ovîÊow
 (
_Â
, (Ë(
_ch
)) \

443 : (Ë(*(
_Â
)->
_IO_wrôe_±r
++ = (
_ch
)))

	)

445 #i‡
deföed
 
_LIBC
 || deföed 
_GLIBCPP_USE_WCHAR_T


446 
	#_IO_gëwc_u∆ocked
(
_Â
) \

447 (
	`_IO_BE
 ((
_Â
)->
_wide_d©a
 =
NULL
 \

448 || ((
_Â
)->
_wide_d©a
->
_IO_ªad_±r
 \

449 >(
_Â
)->
_wide_d©a
->
_IO_ªad_íd
), 0) \

450 ? 
	`__wuÊow
 (
_Â
Ë: (
_IO_wöt_t
Ë*(_Â)->
_wide_d©a
->
_IO_ªad_±r
++)

	)

451 
	#_IO_putwc_u∆ocked
(
_wch
, 
_Â
) \

452 (
	`_IO_BE
 ((
_Â
)->
_wide_d©a
 =
NULL
 \

453 || ((
_Â
)->
_wide_d©a
->
_IO_wrôe_±r
 \

454 >(
_Â
)->
_wide_d©a
->
_IO_wrôe_íd
), 0) \

455 ? 
	`__wovîÊow
 (
_Â
, 
_wch
) \

456 : (
_IO_wöt_t
Ë(*(
_Â
)->
_wide_d©a
->
_IO_wrôe_±r
++ = (
_wch
)))

	)

459 
	#_IO_„of_u∆ocked
(
__Â
Ë(((__Â)->
_Êags
 & 
_IO_EOF_SEEN
Ë!0)

	)

460 
	#_IO_„º‹_u∆ocked
(
__Â
Ë(((__Â)->
_Êags
 & 
_IO_ERR_SEEN
Ë!0)

	)

462 
_IO_gëc
 (
_IO_FILE
 *
__Â
);

463 
_IO_putc
 (
__c
, 
_IO_FILE
 *
__Â
);

464 
_IO_„of
 (
_IO_FILE
 *
__Â
Ë
__THROW
;

465 
_IO_„º‹
 (
_IO_FILE
 *
__Â
Ë
__THROW
;

467 
_IO_≥ekc_locked
 (
_IO_FILE
 *
__Â
);

470 
	#_IO_PENDING_OUTPUT_COUNT
(
_Â
) \

471 ((
_Â
)->
_IO_wrôe_±r
 - (_Â)->
_IO_wrôe_ba£
)

	)

473 
_IO_Êockfûe
 (
_IO_FILE
 *Ë
__THROW
;

474 
_IO_fu∆ockfûe
 (
_IO_FILE
 *Ë
__THROW
;

475 
_IO_·rylockfûe
 (
_IO_FILE
 *Ë
__THROW
;

477 #ifde‡
_IO_MTSAFE_IO


478 
	#_IO_≥ekc
(
_Â
Ë
	`_IO_≥ekc_locked
 (_Â)

	)

479 
	#_IO_Êockfûe
(
_Â
) \

480 i‡(((
_Â
)->
_Êags
 & 
_IO_USER_LOCK
Ë=0Ë
	`_IO_Êockfûe
 (_Â)

	)

481 
	#_IO_fu∆ockfûe
(
_Â
) \

482 i‡(((
_Â
)->
_Êags
 & 
_IO_USER_LOCK
Ë=0Ë
	`_IO_fu∆ockfûe
 (_Â)

	)

484 
	#_IO_≥ekc
(
_Â
Ë
	`_IO_≥ekc_u∆ocked
 (_Â)

	)

485 
	#_IO_Êockfûe
(
_Â
Ë

	)

486 
	#_IO_fu∆ockfûe
(
_Â
Ë

	)

487 
	#_IO_·rylockfûe
(
_Â
Ë

	)

488 
	#_IO_˛ónup_ªgi⁄_°¨t
(
_f˘
, 
_Â
Ë

	)

489 
	#_IO_˛ónup_ªgi⁄_íd
(
_Doô
Ë

	)

492 
_IO_vfsˇnf
 (
_IO_FILE
 * 
__ª°ri˘
, const * __restrict,

493 
_IO_va_li°
, *
__ª°ri˘
);

494 
_IO_vÂrötf
 (
_IO_FILE
 *
__ª°ri˘
, const *__restrict,

495 
_IO_va_li°
);

496 
_IO_ssize_t
 
_IO_∑dn
 (
_IO_FILE
 *, , _IO_ssize_t);

497 
_IO_size_t
 
_IO_sgën
 (
_IO_FILE
 *, *, _IO_size_t);

499 
_IO_off64_t
 
_IO_£ekoff
 (
_IO_FILE
 *, _IO_off64_t, , );

500 
_IO_off64_t
 
_IO_£ekpos
 (
_IO_FILE
 *, _IO_off64_t, );

502 
_IO_‰ì_backup_¨ó
 (
_IO_FILE
 *Ë
__THROW
;

504 #i‡
deföed
 
_LIBC
 || deföed 
_GLIBCPP_USE_WCHAR_T


505 
_IO_wöt_t
 
_IO_gëwc
 (
_IO_FILE
 *
__Â
);

506 
_IO_wöt_t
 
_IO_putwc
 (
wch¨_t
 
__wc
, 
_IO_FILE
 *
__Â
);

507 
_IO_fwide
 (
_IO_FILE
 *
__Â
, 
__mode
Ë
__THROW
;

508 #i‡
__GNUC__
 >= 2

511 #i‡
deföed
 
_LIBC
 && deföed 
SHARED


512 
	~<shlib-com∑t.h
>

513 #i‡
SHLIB_COMPAT
 (
libc
, 
GLIBC_2_0
, 
GLIBC_2_1
)

514 
	#_IO_fwide_maybe_öcom∑tibÀ
 \

515 (
	`__buûtö_ex≥˘
 (&
_IO_°dö_u£d
 =
NULL
, 0))

	)

516 c⁄° 
_IO_°dö_u£d
;

517 
wók_exã∫
 (
_IO_°dö_u£d
);

520 #i‚de‡
_IO_fwide_maybe_öcom∑tibÀ


521 
	#_IO_fwide_maybe_öcom∑tibÀ
 (0)

	)

525 
	#_IO_fwide
(
__Â
, 
__mode
) \

526 ({ 
__ªsu…
 = (
__mode
); \

527 i‡(
__ªsu…
 < 0 && ! 
_IO_fwide_maybe_öcom∑tibÀ
) \

529 i‡((
__Â
)->
_mode
 == 0) \

531 (
__Â
)->
_mode
 = -1; \

532 
__ªsu…
 = (
__Â
)->
_mode
; \

534 i‡(
	`__buûtö_c⁄°™t_p
 (
__mode
) && (__mode) == 0) \

535 
__ªsu…
 = 
_IO_fwide_maybe_öcom∑tibÀ
 ? -1 : (
__Â
)->
_mode
; \

537 
__ªsu…
 = 
	`_IO_fwide
 (
__Â
, __result); \

538 
__ªsu…
; })

	)

541 
_IO_vfwsˇnf
 (
_IO_FILE
 * 
__ª°ri˘
, c⁄° 
wch¨_t
 * __restrict,

542 
_IO_va_li°
, *
__ª°ri˘
);

543 
_IO_vfw¥ötf
 (
_IO_FILE
 *
__ª°ri˘
, c⁄° 
wch¨_t
 *__restrict,

544 
_IO_va_li°
);

545 
_IO_ssize_t
 
_IO_w∑dn
 (
_IO_FILE
 *, 
wöt_t
, _IO_ssize_t);

546 
_IO_‰ì_wbackup_¨ó
 (
_IO_FILE
 *Ë
__THROW
;

549 #ifde‡
__LDBL_COMPAT


550 
	~<bôs/libio-ldbl.h
>

553 #ifde‡
__˝lu•lus


	@/usr/include/xlocale.h

21 #i‚de‡
_XLOCALE_H


22 
	#_XLOCALE_H
 1

	)

28 
	s__loˇÀ_°ru˘


31 
__loˇÀ_d©a
 *
	m__loˇÀs
[13];

34 c⁄° *
	m__˘y≥_b
;

35 c⁄° *
	m__˘y≥_tﬁowî
;

36 c⁄° *
	m__˘y≥_touµî
;

39 c⁄° *
	m__«mes
[13];

40 } *
	t__loˇÀ_t
;

43 
__loˇÀ_t
 
	tloˇÀ_t
;

	@/usr/include/_G_config.h

4 #i‚de‡
_G_c⁄fig_h


5 
	#_G_c⁄fig_h
 1

	)

9 
	~<bôs/ty≥s.h
>

10 
	#__√ed_size_t


	)

11 #i‡
deföed
 
_LIBC
 || deföed 
_GLIBCPP_USE_WCHAR_T


12 
	#__√ed_wch¨_t


	)

14 
	#__√ed_NULL


	)

15 
	~<°ddef.h
>

16 
	#__√ed_mb°©e_t


	)

17 #i‡
deföed
 
_LIBC
 || deföed 
_GLIBCPP_USE_WCHAR_T


18 
	#__√ed_wöt_t


	)

20 
	~<wch¨.h
>

21 
	#_G_size_t
 
size_t


	)

24 
__off_t
 
	m__pos
;

25 
__mb°©e_t
 
	m__°©e
;

26 } 
	t_G_Âos_t
;

29 
__off64_t
 
	m__pos
;

30 
__mb°©e_t
 
	m__°©e
;

31 } 
	t_G_Âos64_t
;

32 
	#_G_ssize_t
 
__ssize_t


	)

33 
	#_G_off_t
 
__off_t


	)

34 
	#_G_off64_t
 
__off64_t


	)

35 
	#_G_pid_t
 
__pid_t


	)

36 
	#_G_uid_t
 
__uid_t


	)

37 
	#_G_wch¨_t
 
wch¨_t


	)

38 
	#_G_wöt_t
 
wöt_t


	)

39 
	#_G_°©64
 
°©64


	)

40 #i‡
deföed
 
_LIBC
 || deföed 
_GLIBCPP_USE_WCHAR_T


41 
	~<gc⁄v.h
>

44 
__gc⁄v_öfo
 
	m__cd
;

47 
__gc⁄v_öfo
 
	m__cd
;

48 
__gc⁄v_°ï_d©a
 
	m__d©a
;

49 } 
	m__comböed
;

50 } 
	t_G_ic⁄v_t
;

53 
	t_G_öt16_t
 
	t__©åibuã__
 ((
	t__mode__
 (
	t__HI__
)));

54 
	t_G_öt32_t
 
	t__©åibuã__
 ((
	t__mode__
 (
	t__SI__
)));

55 
	t_G_uöt16_t
 
	t__©åibuã__
 ((
	t__mode__
 (
	t__HI__
)));

56 
	t_G_uöt32_t
 
	t__©åibuã__
 ((
	t__mode__
 (
	t__SI__
)));

58 
	#_G_HAVE_BOOL
 1

	)

62 
	#_G_HAVE_ATEXIT
 1

	)

63 
	#_G_HAVE_SYS_CDEFS
 1

	)

64 
	#_G_HAVE_SYS_WAIT
 1

	)

65 
	#_G_NEED_STDARG_H
 1

	)

66 
	#_G_va_li°
 
__gnuc_va_li°


	)

68 
	#_G_HAVE_PRINTF_FP
 1

	)

69 
	#_G_HAVE_MMAP
 1

	)

70 
	#_G_HAVE_MREMAP
 1

	)

71 
	#_G_HAVE_LONG_DOUBLE_IO
 1

	)

72 
	#_G_HAVE_IO_FILE_OPEN
 1

	)

73 
	#_G_HAVE_IO_GETLINE_INFO
 1

	)

75 
	#_G_IO_IO_FILE_VERSION
 0x20001

	)

77 
	#_G_OPEN64
 
__›í64


	)

78 
	#_G_LSEEK64
 
__l£ek64


	)

79 
	#_G_MMAP64
 
__mm≠64


	)

80 
	#_G_FSTAT64
(
fd
,
buf
Ë
	`__fx°©64
 (
_STAT_VER
, fd, buf)

	)

83 
	#_G_HAVE_ST_BLKSIZE
 
	`deföed
 (
_STATBUF_ST_BLKSIZE
)

	)

85 
	#_G_BUFSIZ
 8192

	)

88 
	#_G_NAMES_HAVE_UNDERSCORE
 0

	)

89 
	#_G_VTABLE_LABEL_HAS_LENGTH
 1

	)

90 
	#_G_USING_THUNKS
 1

	)

91 
	#_G_VTABLE_LABEL_PREFIX
 "__vt_"

	)

92 
	#_G_VTABLE_LABEL_PREFIX_ID
 
__vt_


	)

95 #i‡
deföed
 
__˝lu•lus
 || deföed 
__STDC__


96 
	#_G_ARGS
(
ARGLIST
Ë
	)
ARGLIST

98 
	#_G_ARGS
(
ARGLIST
Ë()

	)

	@/usr/include/ctype.h

24 #i‚def 
_CTYPE_H


25 
	#_CTYPE_H
 1

	)

27 
	~<„©uªs.h
>

28 
	~<bôs/ty≥s.h
>

30 
	g__BEGIN_DECLS


32 #i‚de‡
_ISbô


41 
	~<ídün.h
>

42 #i‡
__BYTE_ORDER
 =
__BIG_ENDIAN


43 
	#_ISbô
(
bô
Ë(1 << (bô))

	)

45 
	#_ISbô
(
bô
Ë((bôË< 8 ? ((1 << (bô)Ë<< 8Ë: ((1 << (bô)Ë>> 8))

	)

50 
	m_ISuµî
 = 
_ISbô
 (0),

51 
	m_ISlowî
 = 
_ISbô
 (1),

52 
	m_ISÆpha
 = 
_ISbô
 (2),

53 
	m_ISdigô
 = 
_ISbô
 (3),

54 
	m_ISxdigô
 = 
_ISbô
 (4),

55 
	m_IS•a˚
 = 
_ISbô
 (5),

56 
	m_IS¥öt
 = 
_ISbô
 (6),

57 
	m_ISgøph
 = 
_ISbô
 (7),

58 
	m_ISbœnk
 = 
_ISbô
 (8),

59 
	m_IS˙ål
 = 
_ISbô
 (9),

60 
	m_ISpun˘
 = 
_ISbô
 (10),

61 
	m_ISÆnum
 = 
_ISbô
 (11)

81 
__c⁄°
 **
	$__˘y≥_b_loc
 ()

82 
__THROW
 
	`__©åibuã__
 ((
__c⁄°
));

83 
__c⁄°
 
__öt32_t
 **
	$__˘y≥_tﬁowî_loc
 ()

84 
__THROW
 
	`__©åibuã__
 ((
__c⁄°
));

85 
__c⁄°
 
__öt32_t
 **
	$__˘y≥_touµî_loc
 ()

86 
__THROW
 
	`__©åibuã__
 ((
__c⁄°
));

89 #i‚de‡
__˝lu•lus


90 
	#__is˘y≥
(
c
, 
ty≥
) \

91 ((*
	`__˘y≥_b_loc
 ())[(Ë(
c
)] & (Ë
ty≥
)

	)

92 #ñi‡
deföed
 
__USE_EXTERN_INLINES


93 
	#__is˘y≥_f
(
ty≥
) \

94 
__exã∫_ölöe
 \

95 
is
##
	`ty≥
 (
__c
Ë
__THROW
 \

97  (*
	`__˘y≥_b_loc
 ())[(Ë(
__c
)] & (Ë
_IS
##
ty≥
; \

98 
	}

	)
}

101 
	#__ißscii
(
c
Ë(((cË& ~0x7fË=0Ë

	)

102 
	#__tﬂscii
(
c
Ë((cË& 0x7fË

	)

104 
	#__ex˘y≥
(
«me
Ë
	`«me
 (Ë
__THROW


	)

106 
__BEGIN_NAMESPACE_STD


112 
__ex˘y≥
 (
iß um
);

113 
__ex˘y≥
 (
ißÕha
);

114 
__ex˘y≥
 (
is˙ål
);

115 
__ex˘y≥
 (
isdigô
);

116 
__ex˘y≥
 (
i¶owî
);

117 
__ex˘y≥
 (
isgøph
);

118 
__ex˘y≥
 (
i•röt
);

119 
__ex˘y≥
 (
i•un˘
);

120 
__ex˘y≥
 (
is•a˚
);

121 
__ex˘y≥
 (
isuµî
);

122 
__ex˘y≥
 (
isxdigô
);

126 
	$tﬁowî
 (
__c
Ë
__THROW
;

129 
	$touµî
 (
__c
Ë
__THROW
;

131 
__END_NAMESPACE_STD


135 #ifdef 
__USE_ISOC99


136 
__BEGIN_NAMESPACE_C99


138 
	`__ex˘y≥
 (
isbœnk
);

140 
__END_NAMESPACE_C99


143 #ifde‡
__USE_GNU


145 
	$is˘y≥
 (
__c
, 
__mask
Ë
__THROW
;

148 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_MISC
 || deföed 
__USE_XOPEN


152 
	$ißscii
 (
__c
Ë
__THROW
;

156 
	$tﬂscii
 (
__c
Ë
__THROW
;

160 
	`__ex˘y≥
 (
_touµî
);

161 
	`__ex˘y≥
 (
_tﬁowî
);

165 
	#__tobody
(
c
, 
f
, 
a
, 
¨gs
) \

166 (
__exãnsi⁄__
 \

167 ({ 
__ªs
; \

168 i‡( (
c
) > 1) \

170 i‡(
	`__buûtö_c⁄°™t_p
 (
c
)) \

172 
__c
 = (
c
); \

173 
__ªs
 = 
__c
 < -128 || __¯> 255 ? __¯: (
a
)[__c]; \

176 
__ªs
 = 
f
 
¨gs
; \

179 
__ªs
 = (
a
)[(Ë(
c
)]; \

180 
__ªs
; 
	}
}))

	)

182 #i‡!
deföed
 
__NO_CTYPE


183 #ifde‡
__is˘y≥_f


184 
	$__is˘y≥_f
 (
Ænum
)

185 
	$__is˘y≥_f
 (
Æpha
)

186 
	$__is˘y≥_f
 (
˙ål
)

187 
	$__is˘y≥_f
 (
digô
)

188 
	$__is˘y≥_f
 (
lowî
)

189 
	$__is˘y≥_f
 (
gøph
)

190 
	$__is˘y≥_f
 (
¥öt
)

191 
	$__is˘y≥_f
 (
pun˘
)

192 
	$__is˘y≥_f
 (
•a˚
)

193 
	$__is˘y≥_f
 (
uµî
)

194 
	$__is˘y≥_f
 (
xdigô
)

195 #ifde‡
__USE_ISOC99


196 
	$__is˘y≥_f
 (
bœnk
)

198 #ñi‡
deföed
 
__is˘y≥


199 
	#iß um
(
c
Ë
	`__is˘y≥
((c), 
_ISÆnum
)

	)

200 
	#ißÕha
(
c
Ë
	`__is˘y≥
((c), 
_ISÆpha
)

	)

201 
	#is˙ål
(
c
Ë
	`__is˘y≥
((c), 
_IS˙ål
)

	)

202 
	#isdigô
(
c
Ë
	`__is˘y≥
((c), 
_ISdigô
)

	)

203 
	#i¶owî
(
c
Ë
	`__is˘y≥
((c), 
_ISlowî
)

	)

204 
	#isgøph
(
c
Ë
	`__is˘y≥
((c), 
_ISgøph
)

	)

205 
	#i•röt
(
c
Ë
	`__is˘y≥
((c), 
_IS¥öt
)

	)

206 
	#i•un˘
(
c
Ë
	`__is˘y≥
((c), 
_ISpun˘
)

	)

207 
	#is•a˚
(
c
Ë
	`__is˘y≥
((c), 
_IS•a˚
)

	)

208 
	#isuµî
(
c
Ë
	`__is˘y≥
((c), 
_ISuµî
)

	)

209 
	#isxdigô
(
c
Ë
	`__is˘y≥
((c), 
_ISxdigô
)

	)

210 #ifde‡
__USE_ISOC99


211 
	#isbœnk
(
c
Ë
	`__is˘y≥
((c), 
_ISbœnk
)

	)

215 #ifde‡
__USE_EXTERN_INLINES


216 
__exã∫_ölöe
 

217 
	`__NTH
 (
	$tﬁowî
 (
__c
))

219  
__c
 >-128 && __¯< 256 ? (*
	`__˘y≥_tﬁowî_loc
 ())[__c] : __c;

220 
	}
}

222 
__exã∫_ölöe
 

223 
__NTH
 (
	$touµî
 (
__c
))

225  
__c
 >-128 && __¯< 256 ? (*
	`__˘y≥_touµî_loc
 ())[__c] : __c;

226 
	}
}

229 #i‡
__GNUC__
 >2 && 
deföed
 
__OPTIMIZE__
 && !deföed 
__˝lu•lus


230 
	#tﬁowî
(
c
Ë
	`__tobody
 (c, 
tﬁowî
, *
	`__˘y≥_tﬁowî_loc
 (), (c))

	)

231 
	#touµî
(
c
Ë
	`__tobody
 (c, 
touµî
, *
	`__˘y≥_touµî_loc
 (), (c))

	)

234 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_MISC
 || deföed 
__USE_XOPEN


235 
	#ißscii
(
c
Ë
	`__ißscii
 (c)

	)

236 
	#tﬂscii
(
c
Ë
	`__tﬂscii
 (c)

	)

238 
	#_tﬁowî
(
c
Ë((Ë(*
	`__˘y≥_tﬁowî_loc
 ())[(Ë(c)])

	)

239 
	#_touµî
(
c
Ë((Ë(*
	`__˘y≥_touµî_loc
 ())[(Ë(c)])

	)

245 #ifde‡
__USE_XOPEN2K8


259 
	~<xloˇÀ.h
>

263 
	#__is˘y≥_l
(
c
, 
ty≥
, 
loˇÀ
) \

264 ((
loˇÀ
)->
__˘y≥_b
[(Ë(
c
)] & (Ë
ty≥
)

	)

266 
	#__ex˘y≥_l
(
«me
) \

267 
	`«me
 (, 
__loˇÀ_t
Ë
__THROW


	)

273 
__ex˘y≥_l
 (
iß um_l
);

274 
__ex˘y≥_l
 (
ißÕha_l
);

275 
__ex˘y≥_l
 (
is˙ål_l
);

276 
__ex˘y≥_l
 (
isdigô_l
);

277 
__ex˘y≥_l
 (
i¶owî_l
);

278 
__ex˘y≥_l
 (
isgøph_l
);

279 
__ex˘y≥_l
 (
i•röt_l
);

280 
__ex˘y≥_l
 (
i•un˘_l
);

281 
__ex˘y≥_l
 (
is•a˚_l
);

282 
__ex˘y≥_l
 (
isuµî_l
);

283 
__ex˘y≥_l
 (
isxdigô_l
);

285 
__ex˘y≥_l
 (
isbœnk_l
);

289 
	$__tﬁowî_l
 (
__c
, 
__loˇÀ_t
 
__l
Ë
__THROW
;

290 
	$tﬁowî_l
 (
__c
, 
__loˇÀ_t
 
__l
Ë
__THROW
;

293 
	$__touµî_l
 (
__c
, 
__loˇÀ_t
 
__l
Ë
__THROW
;

294 
	$touµî_l
 (
__c
, 
__loˇÀ_t
 
__l
Ë
__THROW
;

296 #i‡
__GNUC__
 >2 && 
deföed
 
__OPTIMIZE__
 && !deföed 
__˝lu•lus


297 
	#__tﬁowî_l
(
c
, 
loˇÀ
) \

298 
	`__tobody
 (
c
, 
__tﬁowî_l
, (
loˇÀ
)->
__˘y≥_tﬁowî
, (c,ÜoˇÀ))

	)

299 
	#__touµî_l
(
c
, 
loˇÀ
) \

300 
	`__tobody
 (
c
, 
__touµî_l
, (
loˇÀ
)->
__˘y≥_touµî
, (c,ÜoˇÀ))

	)

301 
	#tﬁowî_l
(
c
, 
loˇÀ
Ë
	`__tﬁowî_l
 ((c), (loˇÀ))

	)

302 
	#touµî_l
(
c
, 
loˇÀ
Ë
	`__touµî_l
 ((c), (loˇÀ))

	)

306 #i‚de‡
__NO_CTYPE


307 
	#__iß um_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_ISÆnum
, (l))

	)

308 
	#__ißÕha_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_ISÆpha
, (l))

	)

309 
	#__is˙ål_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_IS˙ål
, (l))

	)

310 
	#__isdigô_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_ISdigô
, (l))

	)

311 
	#__i¶owî_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_ISlowî
, (l))

	)

312 
	#__isgøph_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_ISgøph
, (l))

	)

313 
	#__i•röt_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_IS¥öt
, (l))

	)

314 
	#__i•un˘_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_ISpun˘
, (l))

	)

315 
	#__is•a˚_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_IS•a˚
, (l))

	)

316 
	#__isuµî_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_ISuµî
, (l))

	)

317 
	#__isxdigô_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_ISxdigô
, (l))

	)

319 
	#__isbœnk_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_ISbœnk
, (l))

	)

321 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_MISC


322 
	#__ißscii_l
(
c
,
l
Ë(÷), 
	`__ißscii
 (c))

	)

323 
	#__tﬂscii_l
(
c
,
l
Ë(÷), 
	`__tﬂscii
 (c))

	)

326 
	#iß um_l
(
c
,
l
Ë
	`__iß um_l
 ((c), (l))

	)

327 
	#ißÕha_l
(
c
,
l
Ë
	`__ißÕha_l
 ((c), (l))

	)

328 
	#is˙ål_l
(
c
,
l
Ë
	`__is˙ål_l
 ((c), (l))

	)

329 
	#isdigô_l
(
c
,
l
Ë
	`__isdigô_l
 ((c), (l))

	)

330 
	#i¶owî_l
(
c
,
l
Ë
	`__i¶owî_l
 ((c), (l))

	)

331 
	#isgøph_l
(
c
,
l
Ë
	`__isgøph_l
 ((c), (l))

	)

332 
	#i•röt_l
(
c
,
l
Ë
	`__i•röt_l
 ((c), (l))

	)

333 
	#i•un˘_l
(
c
,
l
Ë
	`__i•un˘_l
 ((c), (l))

	)

334 
	#is•a˚_l
(
c
,
l
Ë
	`__is•a˚_l
 ((c), (l))

	)

335 
	#isuµî_l
(
c
,
l
Ë
	`__isuµî_l
 ((c), (l))

	)

336 
	#isxdigô_l
(
c
,
l
Ë
	`__isxdigô_l
 ((c), (l))

	)

338 
	#isbœnk_l
(
c
,
l
Ë
	`__isbœnk_l
 ((c), (l))

	)

340 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_MISC


341 
	#ißscii_l
(
c
,
l
Ë
	`__ißscii_l
 ((c), (l))

	)

342 
	#tﬂscii_l
(
c
,
l
Ë
	`__tﬂscii_l
 ((c), (l))

	)

349 
__END_DECLS


	@/usr/include/endian.h

19 #i‚def 
_ENDIAN_H


20 
	#_ENDIAN_H
 1

	)

22 
	~<„©uªs.h
>

32 
	#__LITTLE_ENDIAN
 1234

	)

33 
	#__BIG_ENDIAN
 4321

	)

34 
	#__PDP_ENDIAN
 3412

	)

37 
	~<bôs/ídün.h
>

41 #i‚de‡
__FLOAT_WORD_ORDER


42 
	#__FLOAT_WORD_ORDER
 
__BYTE_ORDER


	)

45 #ifdef 
__USE_BSD


46 
	#LITTLE_ENDIAN
 
__LITTLE_ENDIAN


	)

47 
	#BIG_ENDIAN
 
__BIG_ENDIAN


	)

48 
	#PDP_ENDIAN
 
__PDP_ENDIAN


	)

49 
	#BYTE_ORDER
 
__BYTE_ORDER


	)

52 #i‡
__BYTE_ORDER
 =
__LITTLE_ENDIAN


53 
	#__LONG_LONG_PAIR
(
HI
, 
LO
ËLO, 
	)
HI

54 #ñi‡
__BYTE_ORDER
 =
__BIG_ENDIAN


55 
	#__LONG_LONG_PAIR
(
HI
, 
LO
ËHI, 
	)
LO

59 #ifde‡
__USE_BSD


61 
	~<bôs/byãsw≠.h
>

63 #i‡
__BYTE_ORDER
 =
__LITTLE_ENDIAN


64 
	#htobe16
(
x
Ë
	`__bsw≠_16
 (x)

	)

65 
	#htﬁe16
(
x
Ë(x)

	)

66 
	#be16toh
(
x
Ë
	`__bsw≠_16
 (x)

	)

67 
	#À16toh
(
x
Ë(x)

	)

69 
	#htobe32
(
x
Ë
	`__bsw≠_32
 (x)

	)

70 
	#htﬁe32
(
x
Ë(x)

	)

71 
	#be32toh
(
x
Ë
	`__bsw≠_32
 (x)

	)

72 
	#À32toh
(
x
Ë(x)

	)

74 
	#htobe64
(
x
Ë
	`__bsw≠_64
 (x)

	)

75 
	#htﬁe64
(
x
Ë(x)

	)

76 
	#be64toh
(
x
Ë
	`__bsw≠_64
 (x)

	)

77 
	#À64toh
(
x
Ë(x)

	)

79 
	#htobe16
(
x
Ë(x)

	)

80 
	#htﬁe16
(
x
Ë
	`__bsw≠_16
 (x)

	)

81 
	#be16toh
(
x
Ë(x)

	)

82 
	#À16toh
(
x
Ë
	`__bsw≠_16
 (x)

	)

84 
	#htobe32
(
x
Ë(x)

	)

85 
	#htﬁe32
(
x
Ë
	`__bsw≠_32
 (x)

	)

86 
	#be32toh
(
x
Ë(x)

	)

87 
	#À32toh
(
x
Ë
	`__bsw≠_32
 (x)

	)

89 
	#htobe64
(
x
Ë(x)

	)

90 
	#htﬁe64
(
x
Ë
	`__bsw≠_64
 (x)

	)

91 
	#be64toh
(
x
Ë(x)

	)

92 
	#À64toh
(
x
Ë
	`__bsw≠_64
 (x)

	)

	@/usr/include/gconv.h

23 #i‚de‡
_GCONV_H


24 
	#_GCONV_H
 1

	)

26 
	~<„©uªs.h
>

27 
	#__√ed_mb°©e_t


	)

28 
	#__√ed_wöt_t


	)

29 
	~<wch¨.h
>

30 
	#__√ed_size_t


	)

31 
	#__√ed_wch¨_t


	)

32 
	~<°ddef.h
>

35 
	#__UNKNOWN_10646_CHAR
 ((
wch¨_t
Ë0xfffd)

	)

40 
	m__GCONV_OK
 = 0,

41 
	m__GCONV_NOCONV
,

42 
	m__GCONV_NODB
,

43 
	m__GCONV_NOMEM
,

45 
	m__GCONV_EMPTY_INPUT
,

46 
	m__GCONV_FULL_OUTPUT
,

47 
	m__GCONV_ILLEGAL_INPUT
,

48 
	m__GCONV_INCOMPLETE_INPUT
,

50 
	m__GCONV_ILLEGAL_DESCRIPTOR
,

51 
	m__GCONV_INTERNAL_ERROR


58 
	m__GCONV_IS_LAST
 = 0x0001,

59 
	m__GCONV_IGNORE_ERRORS
 = 0x0002,

60 
	m__GCONV_SWAP
 = 0x0004

65 
	g__gc⁄v_°ï
;

66 
	g__gc⁄v_°ï_d©a
;

67 
	g__gc⁄v_lﬂded_obje˘
;

68 
	g__gc⁄v_å™s_d©a
;

72 (*
	t__gc⁄v_f˘
Ë(
	t__gc⁄v_°ï
 *, 
	t__gc⁄v_°ï_d©a
 *,

73 
	t__c⁄°
 **, __const *,

74 **, 
	tsize_t
 *, , );

77 
	$wöt_t
 (*
	t__gc⁄v_btowc_f˘
Ë(
	t__gc⁄v_°ï
 *, );

80 (*
	t__gc⁄v_öô_f˘
Ë(
	t__gc⁄v_°ï
 *);

81 (*
	t__gc⁄v_íd_f˘
Ë(
	t__gc⁄v_°ï
 *);

85 (*
	t__gc⁄v_å™s_f˘
Ë(
	t__gc⁄v_°ï
 *,

86 
	t__gc⁄v_°ï_d©a
 *, *,

87 
	t__c⁄°
 *,

88 
	t__c⁄°
 **,

89 
	t__c⁄°
 *, **,

90 
	tsize_t
 *);

93 (*
	t__gc⁄v_å™s_c⁄ãxt_f˘
Ë(*, 
	t__c⁄°
 *,

94 
	t__c⁄°
 *,

98 (*
	t__gc⁄v_å™s_quîy_f˘
Ë(
	t__c⁄°
 *, __const ***,

99 
	tsize_t
 *);

102 (*
	t__gc⁄v_å™s_öô_f˘
) (**, const *);

103 (*
	t__gc⁄v_å™s_íd_f˘
) (*);

105 
	s__gc⁄v_å™s_d©a


108 
__gc⁄v_å™s_f˘
 
__å™s_f˘
;

109 
__gc⁄v_å™s_c⁄ãxt_f˘
 
__å™s_c⁄ãxt_f˘
;

110 
__gc⁄v_å™s_íd_f˘
 
__å™s_íd_f˘
;

111 *
__d©a
;

112 
__gc⁄v_å™s_d©a
 *
__√xt
;

117 
	s__gc⁄v_°ï


119 
__gc⁄v_lﬂded_obje˘
 *
__shlib_h™dÀ
;

120 
__c⁄°
 *
__mod«me
;

122 
__cou¡î
;

124 *
__‰om_«me
;

125 *
__to_«me
;

127 
__gc⁄v_f˘
 
__f˘
;

128 
__gc⁄v_btowc_f˘
 
__btowc_f˘
;

129 
__gc⁄v_öô_f˘
 
__öô_f˘
;

130 
__gc⁄v_íd_f˘
 
__íd_f˘
;

134 
__mö_√eded_‰om
;

135 
__max_√eded_‰om
;

136 
__mö_√eded_to
;

137 
__max_√eded_to
;

140 
__°©eful
;

142 *
__d©a
;

147 
	s__gc⁄v_°ï_d©a


149 *
__outbuf
;

150 *
__outbu„nd
;

154 
__Êags
;

158 
__övoˇti⁄_cou¡î
;

162 
__öã∫Æ_u£
;

164 
__mb°©e_t
 *
__°©ï
;

165 
__mb°©e_t
 
__°©e
;

169 
__gc⁄v_å™s_d©a
 *
__å™s
;

174 
	s__gc⁄v_öfo


176 
size_t
 
__n°ïs
;

177 
__gc⁄v_°ï
 *
__°ïs
;

178 
__exãnsi⁄__
 
__gc⁄v_°ï_d©a
 
__d©a
 
__Êex¨r
;

179 } *
	t__gc⁄v_t
;

	@/usr/include/wchar.h

24 #i‚de‡
_WCHAR_H


26 #i‡!
deföed
 
__√ed_mb°©e_t
 && !deföed 
__√ed_wöt_t


27 
	#_WCHAR_H
 1

	)

28 
	~<„©uªs.h
>

31 #ifde‡
_WCHAR_H


33 
	#__√ed___FILE


	)

34 #i‡
deföed
 
__USE_UNIX98
 || deföed 
__USE_XOPEN2K


35 
	#__√ed_FILE


	)

37 
	~<°dio.h
>

39 
	#__√ed___va_li°


	)

40 
	~<°d¨g.h
>

42 
	~<bôs/wch¨.h
>

45 
	#__√ed_size_t


	)

46 
	#__√ed_wch¨_t


	)

47 
	#__√ed_NULL


	)

49 #i‡
deföed
 
_WCHAR_H
 || deföed 
__√ed_wöt_t
 || !deföed 
__WINT_TYPE__


50 #unde‡
__√ed_wöt_t


51 
	#__√ed_wöt_t


	)

52 
	~<°ddef.h
>

56 #i‚de‡
_WINT_T


61 
	#_WINT_T


	)

62 
	twöt_t
;

66 #i‡
deföed
 
__˝lu•lus
 && deföed 
_GLIBCPP_USE_NAMESPACES
 \

67 && 
deföed
 
__WINT_TYPE__


68 
__BEGIN_NAMESPACE_STD


69 
__WINT_TYPE__
 
	twöt_t
;

70 
	g__END_NAMESPACE_STD


75 #i‡
deföed
 
__˝lu•lus
 && 
__GNUC_PREREQ
 (4, 4)

76 
	#__CORRECT_ISO_CPP_WCHAR_H_PROTO


	)

80 #i‡(
deföed
 
_WCHAR_H
 || deföed 
__√ed_mb°©e_t
Ë&& !deföed 
__mb°©e_t_deföed


81 
	#__mb°©e_t_deföed
 1

	)

85 
	m__cou¡
;

88 #ifde‡
__WINT_TYPE__


89 
__WINT_TYPE__
 
	m__wch
;

91 
wöt_t
 
	m__wch
;

93 
	m__wchb
[4];

94 } 
	m__vÆue
;

95 } 
	t__mb°©e_t
;

97 #unde‡
__√ed_mb°©e_t


102 #ifde‡
_WCHAR_H


104 
__BEGIN_NAMESPACE_C99


106 
__mb°©e_t
 
	tmb°©e_t
;

107 
	g__END_NAMESPACE_C99


108 #ifde‡
__USE_GNU


109 
	$__USING_NAMESPACE_C99
(
mb°©e_t
)

112 #i‚de‡
WCHAR_MIN


114 
	#WCHAR_MIN
 
__WCHAR_MIN


	)

115 
	#WCHAR_MAX
 
__WCHAR_MAX


	)

118 #i‚de‡
WEOF


119 
	#WEOF
 (0xffffffffu)

	)

124 #i‡
deföed
 
__USE_XOPEN
 && !deföed 
__USE_UNIX98


125 
	~<w˘y≥.h
>

129 
__BEGIN_DECLS


131 
__BEGIN_NAMESPACE_STD


134 
tm
;

135 
__END_NAMESPACE_STD


139 
	$__USING_NAMESPACE_STD
(
tm
)

142 
__BEGIN_NAMESPACE_STD


144 
wch¨_t
 *
	$wcs˝y
 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

145 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__§c
Ë
__THROW
;

147 
wch¨_t
 *
	$wc¢˝y
 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

148 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__§c
, 
size_t
 
__n
)

149 
__THROW
;

152 
wch¨_t
 *
	$wcsˇt
 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

153 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__§c
Ë
__THROW
;

155 
wch¨_t
 *
	$wc¢ˇt
 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

156 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__§c
, 
size_t
 
__n
)

157 
__THROW
;

160 
	$wcscmp
 (
__c⁄°
 
wch¨_t
 *
__s1
, __c⁄° wch¨_à*
__s2
)

161 
__THROW
 
__©åibuã_puª__
;

163 
	$wc¢cmp
 (
__c⁄°
 
wch¨_t
 *
__s1
, __c⁄° wch¨_à*
__s2
, 
size_t
 
__n
)

164 
__THROW
 
__©åibuã_puª__
;

165 
__END_NAMESPACE_STD


167 #ifde‡
__USE_XOPEN2K8


169 
	$wcsˇ£cmp
 (
__c⁄°
 
wch¨_t
 *
__s1
, __c⁄° wch¨_à*
__s2
Ë
__THROW
;

172 
	$wc¢ˇ£cmp
 (
__c⁄°
 
wch¨_t
 *
__s1
, __c⁄° wch¨_à*
__s2
,

173 
size_t
 
__n
Ë
__THROW
;

177 
	~<xloˇÀ.h
>

179 
	$wcsˇ£cmp_l
 (
__c⁄°
 
wch¨_t
 *
__s1
, __c⁄° wch¨_à*
__s2
,

180 
__loˇÀ_t
 
__loc
Ë
__THROW
;

182 
	$wc¢ˇ£cmp_l
 (
__c⁄°
 
wch¨_t
 *
__s1
, __c⁄° wch¨_à*
__s2
,

183 
size_t
 
__n
, 
__loˇÀ_t
 
__loc
Ë
__THROW
;

186 
__BEGIN_NAMESPACE_STD


189 
	$wcscﬁl
 (
__c⁄°
 
wch¨_t
 *
__s1
, __c⁄° wch¨_à*
__s2
Ë
__THROW
;

193 
size_t
 
	$wcsx‰m
 (
wch¨_t
 *
__ª°ri˘
 
__s1
,

194 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__s2
, 
size_t
 
__n
Ë
__THROW
;

195 
__END_NAMESPACE_STD


197 #ifde‡
__USE_XOPEN2K8


203 
	$wcscﬁl_l
 (
__c⁄°
 
wch¨_t
 *
__s1
, __c⁄° wch¨_à*
__s2
,

204 
__loˇÀ_t
 
__loc
Ë
__THROW
;

209 
size_t
 
	$wcsx‰m_l
 (
wch¨_t
 *
__s1
, 
__c⁄°
 wch¨_à*
__s2
,

210 
size_t
 
__n
, 
__loˇÀ_t
 
__loc
Ë
__THROW
;

213 
wch¨_t
 *
	$wcsdup
 (
__c⁄°
 
wch¨_t
 *
__s
Ë
__THROW
 
__©åibuã_mÆloc__
;

216 
__BEGIN_NAMESPACE_STD


218 #ifde‡
__CORRECT_ISO_CPP_WCHAR_H_PROTO


219 "C++" 
wch¨_t
 *
	$wcschr
 (
wch¨_t
 *
__wcs
, wch¨_à
__wc
)

220 
__THROW
 
	`__asm
 ("wcschr"Ë
__©åibuã_puª__
;

221 "C++" 
__c⁄°
 
wch¨_t
 *
	$wcschr
 (
__c⁄°
 
wch¨_t
 *
__wcs
, wch¨_à
__wc
)

222 
__THROW
 
	`__asm
 ("wcschr"Ë
__©åibuã_puª__
;

224 
wch¨_t
 *
	$wcschr
 (
__c⁄°
 
wch¨_t
 *
__wcs
, wch¨_à
__wc
)

225 
__THROW
 
__©åibuã_puª__
;

228 #ifde‡
__CORRECT_ISO_CPP_WCHAR_H_PROTO


229 "C++" 
wch¨_t
 *
	$wc§chr
 (
wch¨_t
 *
__wcs
, wch¨_à
__wc
)

230 
__THROW
 
	`__asm
 ("wc§chr"Ë
__©åibuã_puª__
;

231 "C++" 
__c⁄°
 
wch¨_t
 *
	$wc§chr
 (
__c⁄°
 
wch¨_t
 *
__wcs
, wch¨_à
__wc
)

232 
__THROW
 
	`__asm
 ("wc§chr"Ë
__©åibuã_puª__
;

234 
wch¨_t
 *
	$wc§chr
 (
__c⁄°
 
wch¨_t
 *
__wcs
, wch¨_à
__wc
)

235 
__THROW
 
__©åibuã_puª__
;

237 
__END_NAMESPACE_STD


239 #ifde‡
__USE_GNU


242 
wch¨_t
 *
	$wcsch∫ul
 (
__c⁄°
 
wch¨_t
 *
__s
, wch¨_à
__wc
)

243 
__THROW
 
__©åibuã_puª__
;

246 
__BEGIN_NAMESPACE_STD


249 
size_t
 
	$wcsc•n
 (
__c⁄°
 
wch¨_t
 *
__wcs
, __c⁄° wch¨_à*
__ªje˘
)

250 
__THROW
 
__©åibuã_puª__
;

253 
size_t
 
	$wcs•n
 (
__c⁄°
 
wch¨_t
 *
__wcs
, __c⁄° wch¨_à*
__ac˚±
)

254 
__THROW
 
__©åibuã_puª__
;

256 #ifde‡
__CORRECT_ISO_CPP_WCHAR_H_PROTO


257 "C++" 
wch¨_t
 *
	$wc•brk
 (
wch¨_t
 *
__wcs
, 
__c⁄°
 wch¨_à*
__ac˚±
)

258 
__THROW
 
	`__asm
 ("wc•brk"Ë
__©åibuã_puª__
;

259 "C++" 
__c⁄°
 
wch¨_t
 *
	$wc•brk
 (
__c⁄°
 
wch¨_t
 *
__wcs
,

260 
__c⁄°
 
wch¨_t
 *
__ac˚±
)

261 
__THROW
 
	`__asm
 ("wc•brk"Ë
__©åibuã_puª__
;

263 
wch¨_t
 *
	$wc•brk
 (
__c⁄°
 
wch¨_t
 *
__wcs
, __c⁄° wch¨_à*
__ac˚±
)

264 
__THROW
 
__©åibuã_puª__
;

267 #ifde‡
__CORRECT_ISO_CPP_WCHAR_H_PROTO


268 "C++" 
wch¨_t
 *
	$wcs°r
 (
wch¨_t
 *
__hay°ack
, 
__c⁄°
 wch¨_à*
__√edÀ
)

269 
__THROW
 
	`__asm
 ("wcs°r"Ë
__©åibuã_puª__
;

270 "C++" 
__c⁄°
 
wch¨_t
 *
	$wcs°r
 (
__c⁄°
 
wch¨_t
 *
__hay°ack
,

271 
__c⁄°
 
wch¨_t
 *
__√edÀ
)

272 
__THROW
 
	`__asm
 ("wcs°r"Ë
__©åibuã_puª__
;

274 
wch¨_t
 *
	$wcs°r
 (
__c⁄°
 
wch¨_t
 *
__hay°ack
, __c⁄° wch¨_à*
__√edÀ
)

275 
__THROW
 
__©åibuã_puª__
;

279 
wch¨_t
 *
	$wc°ok
 (
wch¨_t
 *
__ª°ri˘
 
__s
,

280 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__dñim
,

281 
wch¨_t
 **
__ª°ri˘
 
__±r
Ë
__THROW
;

284 
size_t
 
	$wc¶í
 (
__c⁄°
 
wch¨_t
 *
__s
Ë
__THROW
 
__©åibuã_puª__
;

285 
__END_NAMESPACE_STD


287 #ifde‡
__USE_XOPEN


289 #ifde‡
__CORRECT_ISO_CPP_WCHAR_H_PROTO


290 "C++" 
wch¨_t
 *
	$wcswcs
 (
wch¨_t
 *
__hay°ack
, 
__c⁄°
 wch¨_à*
__√edÀ
)

291 
__THROW
 
	`__asm
 ("wcswcs"Ë
__©åibuã_puª__
;

292 "C++" 
__c⁄°
 
wch¨_t
 *
	$wcswcs
 (
__c⁄°
 
wch¨_t
 *
__hay°ack
,

293 
__c⁄°
 
wch¨_t
 *
__√edÀ
)

294 
__THROW
 
	`__asm
 ("wcswcs"Ë
__©åibuã_puª__
;

296 
wch¨_t
 *
	$wcswcs
 (
__c⁄°
 
wch¨_t
 *
__hay°ack
, __c⁄° wch¨_à*
__√edÀ
)

297 
__THROW
 
__©åibuã_puª__
;

301 #ifde‡
__USE_XOPEN2K8


303 
size_t
 
	$wc¢Àn
 (
__c⁄°
 
wch¨_t
 *
__s
, 
size_t
 
__maxÀn
)

304 
__THROW
 
__©åibuã_puª__
;

308 
__BEGIN_NAMESPACE_STD


310 #ifde‡
__CORRECT_ISO_CPP_WCHAR_H_PROTO


311 "C++" 
wch¨_t
 *
	$wmemchr
 (
wch¨_t
 *
__s
, wch¨_à
__c
, 
size_t
 
__n
)

312 
__THROW
 
	`__asm
 ("wmemchr"Ë
__©åibuã_puª__
;

313 "C++" 
__c⁄°
 
wch¨_t
 *
	$wmemchr
 (
__c⁄°
 
wch¨_t
 *
__s
, wch¨_à
__c
,

314 
size_t
 
__n
)

315 
__THROW
 
	`__asm
 ("wmemchr"Ë
__©åibuã_puª__
;

317 
wch¨_t
 *
	$wmemchr
 (
__c⁄°
 
wch¨_t
 *
__s
, wch¨_à
__c
, 
size_t
 
__n
)

318 
__THROW
 
__©åibuã_puª__
;

322 
	$wmemcmp
 (
__c⁄°
 
wch¨_t
 *
__s1
, __c⁄° wch¨_à*
__s2
, 
size_t
 
__n
)

323 
__THROW
 
__©åibuã_puª__
;

326 
wch¨_t
 *
	$wmem˝y
 (
wch¨_t
 *
__ª°ri˘
 
__s1
,

327 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__s2
, 
size_t
 
__n
Ë
__THROW
;

331 
wch¨_t
 *
	$wmemmove
 (
wch¨_t
 *
__s1
, 
__c⁄°
 wch¨_à*
__s2
, 
size_t
 
__n
)

332 
__THROW
;

335 
wch¨_t
 *
	$wmem£t
 (
wch¨_t
 *
__s
, wch¨_à
__c
, 
size_t
 
__n
Ë
__THROW
;

336 
__END_NAMESPACE_STD


338 #ifde‡
__USE_GNU


341 
wch¨_t
 *
	$wmemp˝y
 (
wch¨_t
 *
__ª°ri˘
 
__s1
,

342 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__s2
, 
size_t
 
__n
)

343 
__THROW
;

347 
__BEGIN_NAMESPACE_STD


350 
wöt_t
 
	$btowc
 (
__c
Ë
__THROW
;

354 
	$w˘ob
 (
wöt_t
 
__c
Ë
__THROW
;

358 
	$mbsöô
 (
__c⁄°
 
mb°©e_t
 *
__ps
Ë
__THROW
 
__©åibuã_puª__
;

362 
size_t
 
	$mbπowc
 (
wch¨_t
 *
__ª°ri˘
 
__pwc
,

363 
__c⁄°
 *
__ª°ri˘
 
__s
, 
size_t
 
__n
,

364 
mb°©e_t
 *
__p
Ë
__THROW
;

367 
size_t
 
	$w¸tomb
 (*
__ª°ri˘
 
__s
, 
wch¨_t
 
__wc
,

368 
mb°©e_t
 *
__ª°ri˘
 
__ps
Ë
__THROW
;

371 
size_t
 
	$__mbæí
 (
__c⁄°
 *
__ª°ri˘
 
__s
, 
size_t
 
__n
,

372 
mb°©e_t
 *
__ª°ri˘
 
__ps
Ë
__THROW
;

373 
size_t
 
	$mbæí
 (
__c⁄°
 *
__ª°ri˘
 
__s
, 
size_t
 
__n
,

374 
mb°©e_t
 *
__ª°ri˘
 
__ps
Ë
__THROW
;

375 
__END_NAMESPACE_STD


377 #ifde‡
__USE_EXTERN_INLINES


383 
wöt_t
 
	$__btowc_Æüs
 (
__c
Ë
	`__asm
 ("btowc");

384 
__exã∫_ölöe
 
wöt_t


385 
	`__NTH
 (
	$btowc
 (
__c
))

386 {  (
	`__buûtö_c⁄°™t_p
 (
__c
) && __c >= '\0' && __c <= '\x7f'

387 ? (
wöt_t
Ë
__c
 : 
	`__btowc_Æüs
 (__c)); 
	}
}

389 
	$__w˘ob_Æüs
 (
wöt_t
 
__c
Ë
	`__asm
 ("wctob");

390 
__exã∫_ölöe
 

391 
	`__NTH
 (
	$w˘ob
 (
wöt_t
 
__wc
))

392 {  (
	`__buûtö_c⁄°™t_p
 (
__wc
Ë&& __w¯>
L
'\0' && __wc <= L'\x7f'

393 ? (Ë
__wc
 : 
	`__w˘ob_Æüs
 (__wc)); 
	}
}

395 
__exã∫_ölöe
 
size_t


396 
__NTH
 (
	$mbæí
 (
__c⁄°
 *
__ª°ri˘
 
__s
, 
size_t
 
__n
,

397 
mb°©e_t
 *
__ª°ri˘
 
__ps
))

398 {  (
__ps
 !
NULL


399 ? 
	`mbπowc
 (
NULL
, 
__s
, 
__n
, 
__ps
Ë: 
	`__mbæí
 (__s, __n, NULL)); 
	}
}

402 
__BEGIN_NAMESPACE_STD


405 
size_t
 
	$mb§towcs
 (
wch¨_t
 *
__ª°ri˘
 
__d°
,

406 
__c⁄°
 **
__ª°ri˘
 
__§c
, 
size_t
 
__Àn
,

407 
mb°©e_t
 *
__ª°ri˘
 
__ps
Ë
__THROW
;

411 
size_t
 
	$wc§tombs
 (*
__ª°ri˘
 
__d°
,

412 
__c⁄°
 
wch¨_t
 **
__ª°ri˘
 
__§c
, 
size_t
 
__Àn
,

413 
mb°©e_t
 *
__ª°ri˘
 
__ps
Ë
__THROW
;

414 
__END_NAMESPACE_STD


417 #ifdef 
__USE_XOPEN2K8


420 
size_t
 
	$mb¢πowcs
 (
wch¨_t
 *
__ª°ri˘
 
__d°
,

421 
__c⁄°
 **
__ª°ri˘
 
__§c
, 
size_t
 
__nmc
,

422 
size_t
 
__Àn
, 
mb°©e_t
 *
__ª°ri˘
 
__ps
Ë
__THROW
;

426 
size_t
 
	$wc¢πombs
 (*
__ª°ri˘
 
__d°
,

427 
__c⁄°
 
wch¨_t
 **
__ª°ri˘
 
__§c
,

428 
size_t
 
__nwc
, size_à
__Àn
,

429 
mb°©e_t
 *
__ª°ri˘
 
__ps
Ë
__THROW
;

434 #ifde‡
__USE_XOPEN


436 
	$wcwidth
 (
wch¨_t
 
__c
Ë
__THROW
;

440 
	$wcswidth
 (
__c⁄°
 
wch¨_t
 *
__s
, 
size_t
 
__n
Ë
__THROW
;

444 
__BEGIN_NAMESPACE_STD


447 
	$wc°od
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

448 
wch¨_t
 **
__ª°ri˘
 
__íd±r
Ë
__THROW
;

449 
__END_NAMESPACE_STD


451 #ifde‡
__USE_ISOC99


452 
__BEGIN_NAMESPACE_C99


454 
	$wc°of
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

455 
wch¨_t
 **
__ª°ri˘
 
__íd±r
Ë
__THROW
;

456 
	$wc°ﬁd
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

457 
wch¨_t
 **
__ª°ri˘
 
__íd±r
Ë
__THROW
;

458 
__END_NAMESPACE_C99


462 
__BEGIN_NAMESPACE_STD


465 
	$wc°ﬁ
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

466 
wch¨_t
 **
__ª°ri˘
 
__íd±r
, 
__ba£
Ë
__THROW
;

470 
	$wc°oul
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

471 
wch¨_t
 **
__ª°ri˘
 
__íd±r
, 
__ba£
)

472 
__THROW
;

473 
__END_NAMESPACE_STD


475 #i‡
deföed
 
__USE_ISOC99
 || (deföed 
__GNUC__
 && deföed 
__USE_GNU
)

476 
__BEGIN_NAMESPACE_C99


479 
__exãnsi⁄__


480 
	$wc°ﬁl
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

481 
wch¨_t
 **
__ª°ri˘
 
__íd±r
, 
__ba£
)

482 
__THROW
;

486 
__exãnsi⁄__


487 
	$wc°ouŒ
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

488 
wch¨_t
 **
__ª°ri˘
 
__íd±r
,

489 
__ba£
Ë
__THROW
;

490 
__END_NAMESPACE_C99


493 #i‡
deföed
 
__GNUC__
 && deföed 
__USE_GNU


496 
__exãnsi⁄__


497 
	$wc°oq
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

498 
wch¨_t
 **
__ª°ri˘
 
__íd±r
, 
__ba£
)

499 
__THROW
;

503 
__exãnsi⁄__


504 
	$wc°ouq
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

505 
wch¨_t
 **
__ª°ri˘
 
__íd±r
,

506 
__ba£
Ë
__THROW
;

509 #ifde‡
__USE_GNU


523 
	~<xloˇÀ.h
>

527 
	$wc°ﬁ_l
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

528 
wch¨_t
 **
__ª°ri˘
 
__íd±r
, 
__ba£
,

529 
__loˇÀ_t
 
__loc
Ë
__THROW
;

531 
	$wc°oul_l
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

532 
wch¨_t
 **
__ª°ri˘
 
__íd±r
,

533 
__ba£
, 
__loˇÀ_t
 
__loc
Ë
__THROW
;

535 
__exãnsi⁄__


536 
	$wc°ﬁl_l
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

537 
wch¨_t
 **
__ª°ri˘
 
__íd±r
,

538 
__ba£
, 
__loˇÀ_t
 
__loc
Ë
__THROW
;

540 
__exãnsi⁄__


541 
	$wc°ouŒ_l
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

542 
wch¨_t
 **
__ª°ri˘
 
__íd±r
,

543 
__ba£
, 
__loˇÀ_t
 
__loc
)

544 
__THROW
;

546 
	$wc°od_l
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

547 
wch¨_t
 **
__ª°ri˘
 
__íd±r
, 
__loˇÀ_t
 
__loc
)

548 
__THROW
;

550 
	$wc°of_l
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

551 
wch¨_t
 **
__ª°ri˘
 
__íd±r
, 
__loˇÀ_t
 
__loc
)

552 
__THROW
;

554 
	$wc°ﬁd_l
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

555 
wch¨_t
 **
__ª°ri˘
 
__íd±r
,

556 
__loˇÀ_t
 
__loc
Ë
__THROW
;

560 #ifde‡
__USE_XOPEN2K8


563 
wch¨_t
 *
	$w˝˝y
 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

564 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__§c
Ë
__THROW
;

568 
wch¨_t
 *
	$w˝n˝y
 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

569 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__§c
, 
size_t
 
__n
)

570 
__THROW
;

577 
__FILE
 *
	$›í_wmem°ªam
 (
wch¨_t
 **
__buÊoc
, 
size_t
 *
__sizñoc
Ë
__THROW
;

580 #i‡
deföed
 
__USE_ISOC95
 || deföed 
__USE_UNIX98


581 
__BEGIN_NAMESPACE_STD


584 
	$fwide
 (
__FILE
 *
__Â
, 
__mode
Ë
__THROW
;

591 
	`fw¥ötf
 (
__FILE
 *
__ª°ri˘
 
__°ªam
,

592 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...)

598 
	`w¥ötf
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...)

601 
	$sw¥ötf
 (
wch¨_t
 *
__ª°ri˘
 
__s
, 
size_t
 
__n
,

602 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...)

603 
__THROW
 ;

609 
	`vfw¥ötf
 (
__FILE
 *
__ª°ri˘
 
__s
,

610 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

611 
__gnuc_va_li°
 
__¨g
)

617 
	`vw¥ötf
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

618 
__gnuc_va_li°
 
__¨g
)

622 
	$vsw¥ötf
 (
wch¨_t
 *
__ª°ri˘
 
__s
, 
size_t
 
__n
,

623 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

624 
__gnuc_va_li°
 
__¨g
)

625 
__THROW
 ;

632 
	`fwsˇnf
 (
__FILE
 *
__ª°ri˘
 
__°ªam
,

633 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...)

639 
	`wsˇnf
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...)

642 
	$swsˇnf
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__s
,

643 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...)

644 
__THROW
 ;

646 #i‡
deföed
 
__USE_ISOC99
 && !deföed 
__USE_GNU
 \

647 && (!
deföed
 
__LDBL_COMPAT
 || !deföed 
__REDIRECT
) \

648 && (
deföed
 
__STRICT_ANSI__
 || deföed 
__USE_XOPEN2K
)

649 #ifde‡
__REDIRECT


653 
	`__REDIRECT
 (
fwsˇnf
, (
__FILE
 *
__ª°ri˘
 
__°ªam
,

654 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...),

655 
__isoc99_fwsˇnf
)

657 
	`__REDIRECT
 (
wsˇnf
, (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...),

658 
__isoc99_wsˇnf
)

660 
	`__REDIRECT_NTH
 (
swsˇnf
, (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__s
,

661 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

662 ...), 
__isoc99_swsˇnf
)

665 
	`__isoc99_fwsˇnf
 (
__FILE
 *
__ª°ri˘
 
__°ªam
,

666 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...);

667 
	`__isoc99_wsˇnf
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...);

668 
	$__isoc99_swsˇnf
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__s
,

669 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...)

670 
__THROW
;

671 
	#fwsˇnf
 
__isoc99_fwsˇnf


	)

672 
	#wsˇnf
 
__isoc99_wsˇnf


	)

673 
	#swsˇnf
 
__isoc99_swsˇnf


	)

677 
__END_NAMESPACE_STD


680 #ifde‡
__USE_ISOC99


681 
__BEGIN_NAMESPACE_C99


686 
	`vfwsˇnf
 (
__FILE
 *
__ª°ri˘
 
__s
,

687 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

688 
__gnuc_va_li°
 
__¨g
)

694 
	`vwsˇnf
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

695 
__gnuc_va_li°
 
__¨g
)

698 
	$vswsˇnf
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__s
,

699 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

700 
__gnuc_va_li°
 
__¨g
)

701 
__THROW
 ;

703 #i‡!
deföed
 
__USE_GNU
 \

704 && (!
deföed
 
__LDBL_COMPAT
 || !deföed 
__REDIRECT
) \

705 && (
deföed
 
__STRICT_ANSI__
 || deföed 
__USE_XOPEN2K
)

706 #ifde‡
__REDIRECT


707 
	`__REDIRECT
 (
vfwsˇnf
, (
__FILE
 *
__ª°ri˘
 
__s
,

708 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

709 
__gnuc_va_li°
 
__¨g
), 
__isoc99_vfwsˇnf
)

711 
	`__REDIRECT
 (
vwsˇnf
, (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

712 
__gnuc_va_li°
 
__¨g
), 
__isoc99_vwsˇnf
)

714 
	`__REDIRECT_NTH
 (
vswsˇnf
, (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__s
,

715 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

716 
__gnuc_va_li°
 
__¨g
), 
__isoc99_vswsˇnf
)

719 
	`__isoc99_vfwsˇnf
 (
__FILE
 *
__ª°ri˘
 
__s
,

720 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

721 
__gnuc_va_li°
 
__¨g
);

722 
	`__isoc99_vwsˇnf
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

723 
__gnuc_va_li°
 
__¨g
);

724 
	$__isoc99_vswsˇnf
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__s
,

725 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

726 
__gnuc_va_li°
 
__¨g
Ë
__THROW
;

727 
	#vfwsˇnf
 
__isoc99_vfwsˇnf


	)

728 
	#vwsˇnf
 
__isoc99_vwsˇnf


	)

729 
	#vswsˇnf
 
__isoc99_vswsˇnf


	)

733 
__END_NAMESPACE_C99


737 
__BEGIN_NAMESPACE_STD


742 
wöt_t
 
	`fgëwc
 (
__FILE
 *
__°ªam
);

743 
wöt_t
 
	`gëwc
 (
__FILE
 *
__°ªam
);

749 
wöt_t
 
	`gëwch¨
 ();

756 
wöt_t
 
	`Âutwc
 (
wch¨_t
 
__wc
, 
__FILE
 *
__°ªam
);

757 
wöt_t
 
	`putwc
 (
wch¨_t
 
__wc
, 
__FILE
 *
__°ªam
);

763 
wöt_t
 
	`putwch¨
 (
wch¨_t
 
__wc
);

771 
wch¨_t
 *
	`fgëws
 (wch¨_à*
__ª°ri˘
 
__ws
, 
__n
,

772 
__FILE
 *
__ª°ri˘
 
__°ªam
);

778 
	`Âutws
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__ws
,

779 
__FILE
 *
__ª°ri˘
 
__°ªam
);

786 
wöt_t
 
	`ungëwc
 (wöt_à
__wc
, 
__FILE
 *
__°ªam
);

787 
__END_NAMESPACE_STD


790 #ifde‡
__USE_GNU


798 
wöt_t
 
	`gëwc_u∆ocked
 (
__FILE
 *
__°ªam
);

799 
wöt_t
 
	`gëwch¨_u∆ocked
 ();

807 
wöt_t
 
	`fgëwc_u∆ocked
 (
__FILE
 *
__°ªam
);

815 
wöt_t
 
	`Âutwc_u∆ocked
 (
wch¨_t
 
__wc
, 
__FILE
 *
__°ªam
);

824 
wöt_t
 
	`putwc_u∆ocked
 (
wch¨_t
 
__wc
, 
__FILE
 *
__°ªam
);

825 
wöt_t
 
	`putwch¨_u∆ocked
 (
wch¨_t
 
__wc
);

834 
wch¨_t
 *
	`fgëws_u∆ocked
 (wch¨_à*
__ª°ri˘
 
__ws
, 
__n
,

835 
__FILE
 *
__ª°ri˘
 
__°ªam
);

843 
	`Âutws_u∆ocked
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__ws
,

844 
__FILE
 *
__ª°ri˘
 
__°ªam
);

848 
__BEGIN_NAMESPACE_C99


852 
size_t
 
	$wcs·ime
 (
wch¨_t
 *
__ª°ri˘
 
__s
, 
size_t
 
__maxsize
,

853 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

854 
__c⁄°
 
tm
 *
__ª°ri˘
 
__ç
Ë
__THROW
;

855 
__END_NAMESPACE_C99


857 #ifde‡
__USE_GNU


858 
	~<xloˇÀ.h
>

862 
size_t
 
	$wcs·ime_l
 (
wch¨_t
 *
__ª°ri˘
 
__s
, 
size_t
 
__maxsize
,

863 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

864 
__c⁄°
 
tm
 *
__ª°ri˘
 
__ç
,

865 
__loˇÀ_t
 
__loc
Ë
__THROW
;

874 #i‡
deföed
 
__USE_UNIX98
 && !deföed 
__USE_GNU


875 
	#__√ed_iswxxx


	)

876 
	~<w˘y≥.h
>

880 #i‡
__USE_FORTIFY_LEVEL
 > 0 && 
deföed
 
__exã∫_Æways_ölöe


881 
	~<bôs/wch¨2.h
>

884 #ifde‡
__LDBL_COMPAT


885 
	~<bôs/wch¨-ldbl.h
>

888 
__END_DECLS


896 #unde‡
__√ed_mb°©e_t


897 #unde‡
__√ed_wöt_t


	@/usr/include/wctype.h

24 #i‚de‡
_WCTYPE_H


26 
	~<„©uªs.h
>

27 
	~<bôs/ty≥s.h
>

29 #i‚de‡
__√ed_iswxxx


30 
	#_WCTYPE_H
 1

	)

33 
	#__√ed_wöt_t


	)

34 
	~<wch¨.h
>

38 #i‚de‡
WEOF


39 
	#WEOF
 (0xffffffffu)

	)

42 #unde‡
__√ed_iswxxx


47 #i‚de‡
__iswxxx_deföed


48 
	#__iswxxx_deföed
 1

	)

50 
__BEGIN_NAMESPACE_C99


53 
	tw˘y≥_t
;

54 
	g__END_NAMESPACE_C99


56 #i‚de‡
_ISwbô


61 
	~<ídün.h
>

62 #i‡
__BYTE_ORDER
 =
__BIG_ENDIAN


63 
	#_ISwbô
(
bô
Ë(1 << (bô))

	)

65 
	#_ISwbô
(
bô
) \

66 ((
bô
) < 8 ? () ((1UL << (bit)) << 24) \

67 : ((
bô
) < 16 ? () ((1UL << (bit)) << 8) \

68 : ((
bô
) < 24 ? () ((1UL << (bit)) >> 8) \

69 : (Ë((1UL << (
bô
)Ë>> 24))))

	)

74 
	m__ISwuµî
 = 0,

75 
	m__ISwlowî
 = 1,

76 
	m__ISwÆpha
 = 2,

77 
	m__ISwdigô
 = 3,

78 
	m__ISwxdigô
 = 4,

79 
	m__ISw•a˚
 = 5,

80 
	m__ISw¥öt
 = 6,

81 
	m__ISwgøph
 = 7,

82 
	m__ISwbœnk
 = 8,

83 
	m__ISw˙ål
 = 9,

84 
	m__ISwpun˘
 = 10,

85 
	m__ISwÆnum
 = 11,

87 
	m_ISwuµî
 = 
_ISwbô
 (
__ISwuµî
),

88 
	m_ISwlowî
 = 
_ISwbô
 (
__ISwlowî
),

89 
	m_ISwÆpha
 = 
_ISwbô
 (
__ISwÆpha
),

90 
	m_ISwdigô
 = 
_ISwbô
 (
__ISwdigô
),

91 
	m_ISwxdigô
 = 
_ISwbô
 (
__ISwxdigô
),

92 
	m_ISw•a˚
 = 
_ISwbô
 (
__ISw•a˚
),

93 
	m_ISw¥öt
 = 
_ISwbô
 (
__ISw¥öt
),

94 
	m_ISwgøph
 = 
_ISwbô
 (
__ISwgøph
),

95 
	m_ISwbœnk
 = 
_ISwbô
 (
__ISwbœnk
),

96 
	m_ISw˙ål
 = 
_ISwbô
 (
__ISw˙ål
),

97 
	m_ISwpun˘
 = 
_ISwbô
 (
__ISwpun˘
),

98 
	m_ISwÆnum
 = 
_ISwbô
 (
__ISwÆnum
)

103 
__BEGIN_DECLS


105 
__BEGIN_NAMESPACE_C99


112 
	$iswÆnum
 (
wöt_t
 
__wc
Ë
__THROW
;

118 
	$iswÆpha
 (
wöt_t
 
__wc
Ë
__THROW
;

121 
	$isw˙ål
 (
wöt_t
 
__wc
Ë
__THROW
;

125 
	$iswdigô
 (
wöt_t
 
__wc
Ë
__THROW
;

129 
	$iswgøph
 (
wöt_t
 
__wc
Ë
__THROW
;

134 
	$iswlowî
 (
wöt_t
 
__wc
Ë
__THROW
;

137 
	$isw¥öt
 (
wöt_t
 
__wc
Ë
__THROW
;

142 
	$iswpun˘
 (
wöt_t
 
__wc
Ë
__THROW
;

147 
	$isw•a˚
 (
wöt_t
 
__wc
Ë
__THROW
;

152 
	$iswuµî
 (
wöt_t
 
__wc
Ë
__THROW
;

157 
	$iswxdigô
 (
wöt_t
 
__wc
Ë
__THROW
;

162 #ifde‡
__USE_ISOC99


163 
	$iswbœnk
 (
wöt_t
 
__wc
Ë
__THROW
;

172 
w˘y≥_t
 
	$w˘y≥
 (
__c⁄°
 *
__¥›îty
Ë
__THROW
;

176 
	$isw˘y≥
 (
wöt_t
 
__wc
, 
w˘y≥_t
 
__desc
Ë
__THROW
;

177 
__END_NAMESPACE_C99


184 
__BEGIN_NAMESPACE_C99


187 
__c⁄°
 
	t__öt32_t
 *
	tw˘øns_t
;

188 
__END_NAMESPACE_C99


189 #ifde‡
__USE_GNU


190 
	$__USING_NAMESPACE_C99
(
w˘øns_t
)

193 
__BEGIN_NAMESPACE_C99


195 
wöt_t
 
	$towlowî
 (
wöt_t
 
__wc
Ë
__THROW
;

198 
wöt_t
 
	$towuµî
 (
wöt_t
 
__wc
Ë
__THROW
;

199 
__END_NAMESPACE_C99


201 
__END_DECLS


208 #ifde‡
_WCTYPE_H


214 
__BEGIN_DECLS


216 
__BEGIN_NAMESPACE_C99


219 
w˘øns_t
 
	$w˘øns
 (
__c⁄°
 *
__¥›îty
Ë
__THROW
;

222 
wöt_t
 
	$tow˘øns
 (
wöt_t
 
__wc
, 
w˘øns_t
 
__desc
Ë
__THROW
;

223 
__END_NAMESPACE_C99


225 #ifde‡
__USE_XOPEN2K8


227 
	~<xloˇÀ.h
>

231 
	$iswÆnum_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

237 
	$iswÆpha_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

240 
	$isw˙ål_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

244 
	$iswdigô_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

248 
	$iswgøph_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

253 
	$iswlowî_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

256 
	$isw¥öt_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

261 
	$iswpun˘_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

266 
	$isw•a˚_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

271 
	$iswuµî_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

276 
	$iswxdigô_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

281 
	$iswbœnk_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

285 
w˘y≥_t
 
	$w˘y≥_l
 (
__c⁄°
 *
__¥›îty
, 
__loˇÀ_t
 
__loˇÀ
)

286 
__THROW
;

290 
	$isw˘y≥_l
 (
wöt_t
 
__wc
, 
w˘y≥_t
 
__desc
, 
__loˇÀ_t
 
__loˇÀ
)

291 
__THROW
;

299 
wöt_t
 
	$towlowî_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

302 
wöt_t
 
	$towuµî_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

306 
w˘øns_t
 
	$w˘øns_l
 (
__c⁄°
 *
__¥›îty
, 
__loˇÀ_t
 
__loˇÀ
)

307 
__THROW
;

310 
wöt_t
 
	$tow˘øns_l
 (
wöt_t
 
__wc
, 
w˘øns_t
 
__desc
,

311 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

315 
__END_DECLS


	@
1
.
1
/usr/include
109
4198
Source/CMSIS/Core/CM3/core_cm3.c
Source/CMSIS/Core/CM3/core_cm3.h
Source/CMSIS/Core/CM3/stm32f10x.h
Source/CMSIS/Core/CM3/system_stm32f10x.c
Source/CMSIS/Core/CM3/system_stm32f10x.h
Source/STM32F10x_StdPeriph_Driver/inc/misc.h
Source/STM32F10x_StdPeriph_Driver/inc/stm32f10x_adc.h
Source/STM32F10x_StdPeriph_Driver/inc/stm32f10x_bkp.h
Source/STM32F10x_StdPeriph_Driver/inc/stm32f10x_can.h
Source/STM32F10x_StdPeriph_Driver/inc/stm32f10x_crc.h
Source/STM32F10x_StdPeriph_Driver/inc/stm32f10x_dac.h
Source/STM32F10x_StdPeriph_Driver/inc/stm32f10x_dbgmcu.h
Source/STM32F10x_StdPeriph_Driver/inc/stm32f10x_dma.h
Source/STM32F10x_StdPeriph_Driver/inc/stm32f10x_exti.h
Source/STM32F10x_StdPeriph_Driver/inc/stm32f10x_flash.h
Source/STM32F10x_StdPeriph_Driver/inc/stm32f10x_fsmc.h
Source/STM32F10x_StdPeriph_Driver/inc/stm32f10x_gpio.h
Source/STM32F10x_StdPeriph_Driver/inc/stm32f10x_i2c.h
Source/STM32F10x_StdPeriph_Driver/inc/stm32f10x_iwdg.h
Source/STM32F10x_StdPeriph_Driver/inc/stm32f10x_pwr.h
Source/STM32F10x_StdPeriph_Driver/inc/stm32f10x_rcc.h
Source/STM32F10x_StdPeriph_Driver/inc/stm32f10x_rtc.h
Source/STM32F10x_StdPeriph_Driver/inc/stm32f10x_sdio.h
Source/STM32F10x_StdPeriph_Driver/inc/stm32f10x_spi.h
Source/STM32F10x_StdPeriph_Driver/inc/stm32f10x_tim.h
Source/STM32F10x_StdPeriph_Driver/inc/stm32f10x_usart.h
Source/STM32F10x_StdPeriph_Driver/inc/stm32f10x_wwdg.h
Source/STM32F10x_StdPeriph_Driver/src/misc.c
Source/STM32F10x_StdPeriph_Driver/src/stm32f10x_adc.c
Source/STM32F10x_StdPeriph_Driver/src/stm32f10x_bkp.c
Source/STM32F10x_StdPeriph_Driver/src/stm32f10x_can.c
Source/STM32F10x_StdPeriph_Driver/src/stm32f10x_crc.c
Source/STM32F10x_StdPeriph_Driver/src/stm32f10x_dac.c
Source/STM32F10x_StdPeriph_Driver/src/stm32f10x_dbgmcu.c
Source/STM32F10x_StdPeriph_Driver/src/stm32f10x_dma.c
Source/STM32F10x_StdPeriph_Driver/src/stm32f10x_exti.c
Source/STM32F10x_StdPeriph_Driver/src/stm32f10x_flash.c
Source/STM32F10x_StdPeriph_Driver/src/stm32f10x_fsmc.c
Source/STM32F10x_StdPeriph_Driver/src/stm32f10x_gpio.c
Source/STM32F10x_StdPeriph_Driver/src/stm32f10x_i2c.c
Source/STM32F10x_StdPeriph_Driver/src/stm32f10x_iwdg.c
Source/STM32F10x_StdPeriph_Driver/src/stm32f10x_pwr.c
Source/STM32F10x_StdPeriph_Driver/src/stm32f10x_rcc.c
Source/STM32F10x_StdPeriph_Driver/src/stm32f10x_rtc.c
Source/STM32F10x_StdPeriph_Driver/src/stm32f10x_sdio.c
Source/STM32F10x_StdPeriph_Driver/src/stm32f10x_spi.c
Source/STM32F10x_StdPeriph_Driver/src/stm32f10x_tim.c
Source/STM32F10x_StdPeriph_Driver/src/stm32f10x_usart.c
Source/STM32F10x_StdPeriph_Driver/src/stm32f10x_wwdg.c
Source/User/Button.C
Source/User/Button.H
Source/User/DEBUG/debug_stm32.c
Source/User/DEBUG/debug_stm32.h
Source/User/Graphics.C
Source/User/Graphics.H
Source/User/SSD1963.C
Source/User/SSD1963.H
Source/User/SYS_ZK.C
Source/User/SYS_ZK.H
Source/User/USB_BULK/inc/hw_config.h
Source/User/USB_BULK/inc/platform_config.h
Source/User/USB_BULK/inc/usb_core.h
Source/User/USB_BULK/inc/usb_def.h
Source/User/USB_BULK/inc/usb_desc.h
Source/User/USB_BULK/inc/usb_init.h
Source/User/USB_BULK/inc/usb_lib.h
Source/User/USB_BULK/inc/usb_mem.h
Source/User/USB_BULK/inc/usb_prop.h
Source/User/USB_BULK/inc/usb_regs.h
Source/User/USB_BULK/inc/usb_type.h
Source/User/USB_BULK/src/hw_config.c
Source/User/USB_BULK/src/usb_core.c
Source/User/USB_BULK/src/usb_desc.c
Source/User/USB_BULK/src/usb_endp.c
Source/User/USB_BULK/src/usb_init.c
Source/User/USB_BULK/src/usb_mem.c
Source/User/USB_BULK/src/usb_prop.c
Source/User/USB_BULK/src/usb_regs.c
Source/User/a.h
Source/User/bmp.h
Source/User/bmp2.c
Source/User/fsmc_sram.c
Source/User/fsmc_sram.h
Source/User/luoyong.h
Source/User/main.c
Source/User/stm32f10x_conf.h
Source/User/stm32f10x_it.c
Source/User/stm32f10x_it.h
Source/User/touch/24LC02.c
Source/User/touch/24LC02.h
Source/User/touch/Touch.c
Source/User/touch/Touch.h
Source/User/touch/ot.h
/usr/include/math.h
/usr/include/stdint.h
/usr/include/stdio.h
/usr/include/stdlib.h
/usr/include/string.h
/usr/include/alloca.h
/usr/include/features.h
/usr/include/getopt.h
/usr/include/libio.h
/usr/include/xlocale.h
/usr/include/_G_config.h
/usr/include/ctype.h
/usr/include/endian.h
/usr/include/gconv.h
/usr/include/wchar.h
/usr/include/wctype.h
